
Synth G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073b4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800758c  0800758c  0001758c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007698  08007698  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  08007698  08007698  00017698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076a0  080076a0  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076a0  080076a0  000176a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076a4  080076a4  000176a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  080076a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000210  080078b8  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  080078b8  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017911  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028fa  00000000  00000000  00037b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0003a450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  0003b8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e26  00000000  00000000  0003cc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001568d  00000000  00000000  00065a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117fd9  00000000  00000000  0007b0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001930c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005938  00000000  00000000  00193118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000210 	.word	0x20000210
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007574 	.word	0x08007574

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000214 	.word	0x20000214
 8000214:	08007574 	.word	0x08007574

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b96e 	b.w	8000ce8 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	468c      	mov	ip, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f040 8083 	bne.w	8000b3a <__udivmoddi4+0x116>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4617      	mov	r7, r2
 8000a38:	d947      	bls.n	8000aca <__udivmoddi4+0xa6>
 8000a3a:	fab2 f282 	clz	r2, r2
 8000a3e:	b142      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	f1c2 0020 	rsb	r0, r2, #32
 8000a44:	fa24 f000 	lsr.w	r0, r4, r0
 8000a48:	4091      	lsls	r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a50:	4094      	lsls	r4, r2
 8000a52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a56:	0c23      	lsrs	r3, r4, #16
 8000a58:	fbbc f6f8 	udiv	r6, ip, r8
 8000a5c:	fa1f fe87 	uxth.w	lr, r7
 8000a60:	fb08 c116 	mls	r1, r8, r6, ip
 8000a64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a68:	fb06 f10e 	mul.w	r1, r6, lr
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	d909      	bls.n	8000a84 <__udivmoddi4+0x60>
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a76:	f080 8119 	bcs.w	8000cac <__udivmoddi4+0x288>
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f240 8116 	bls.w	8000cac <__udivmoddi4+0x288>
 8000a80:	3e02      	subs	r6, #2
 8000a82:	443b      	add	r3, r7
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	45a6      	cmp	lr, r4
 8000a9a:	d909      	bls.n	8000ab0 <__udivmoddi4+0x8c>
 8000a9c:	193c      	adds	r4, r7, r4
 8000a9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa2:	f080 8105 	bcs.w	8000cb0 <__udivmoddi4+0x28c>
 8000aa6:	45a6      	cmp	lr, r4
 8000aa8:	f240 8102 	bls.w	8000cb0 <__udivmoddi4+0x28c>
 8000aac:	3802      	subs	r0, #2
 8000aae:	443c      	add	r4, r7
 8000ab0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ab4:	eba4 040e 	sub.w	r4, r4, lr
 8000ab8:	2600      	movs	r6, #0
 8000aba:	b11d      	cbz	r5, 8000ac4 <__udivmoddi4+0xa0>
 8000abc:	40d4      	lsrs	r4, r2
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	b902      	cbnz	r2, 8000ace <__udivmoddi4+0xaa>
 8000acc:	deff      	udf	#255	; 0xff
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	d150      	bne.n	8000b78 <__udivmoddi4+0x154>
 8000ad6:	1bcb      	subs	r3, r1, r7
 8000ad8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000adc:	fa1f f887 	uxth.w	r8, r7
 8000ae0:	2601      	movs	r6, #1
 8000ae2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ae6:	0c21      	lsrs	r1, r4, #16
 8000ae8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af0:	fb08 f30c 	mul.w	r3, r8, ip
 8000af4:	428b      	cmp	r3, r1
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0xe4>
 8000af8:	1879      	adds	r1, r7, r1
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0xe2>
 8000b00:	428b      	cmp	r3, r1
 8000b02:	f200 80e9 	bhi.w	8000cd8 <__udivmoddi4+0x2b4>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1ac9      	subs	r1, r1, r3
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x10c>
 8000b20:	193c      	adds	r4, r7, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x10a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80d9 	bhi.w	8000ce0 <__udivmoddi4+0x2bc>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e7bf      	b.n	8000aba <__udivmoddi4+0x96>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x12e>
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	f000 80b1 	beq.w	8000ca6 <__udivmoddi4+0x282>
 8000b44:	2600      	movs	r6, #0
 8000b46:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	fab3 f683 	clz	r6, r3
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d14a      	bne.n	8000bf0 <__udivmoddi4+0x1cc>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0x140>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 80b8 	bhi.w	8000cd4 <__udivmoddi4+0x2b0>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb61 0103 	sbc.w	r1, r1, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	468c      	mov	ip, r1
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0a8      	beq.n	8000ac4 <__udivmoddi4+0xa0>
 8000b72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b76:	e7a5      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b80:	4097      	lsls	r7, r2
 8000b82:	fa01 f002 	lsl.w	r0, r1, r2
 8000b86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b8a:	40d9      	lsrs	r1, r3
 8000b8c:	4330      	orrs	r0, r6
 8000b8e:	0c03      	lsrs	r3, r0, #16
 8000b90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb06 f108 	mul.w	r1, r6, r8
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	fa04 f402 	lsl.w	r4, r4, r2
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x19c>
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bb2:	f080 808d 	bcs.w	8000cd0 <__udivmoddi4+0x2ac>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 808a 	bls.w	8000cd0 <__udivmoddi4+0x2ac>
 8000bbc:	3e02      	subs	r6, #2
 8000bbe:	443b      	add	r3, r7
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b281      	uxth	r1, r0
 8000bc4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bd0:	fb00 f308 	mul.w	r3, r0, r8
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x1c4>
 8000bd8:	1879      	adds	r1, r7, r1
 8000bda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bde:	d273      	bcs.n	8000cc8 <__udivmoddi4+0x2a4>
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d971      	bls.n	8000cc8 <__udivmoddi4+0x2a4>
 8000be4:	3802      	subs	r0, #2
 8000be6:	4439      	add	r1, r7
 8000be8:	1acb      	subs	r3, r1, r3
 8000bea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bee:	e778      	b.n	8000ae2 <__udivmoddi4+0xbe>
 8000bf0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bf4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bf8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c02:	fa01 f306 	lsl.w	r3, r1, r6
 8000c06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c0e:	431f      	orrs	r7, r3
 8000c10:	0c3b      	lsrs	r3, r7, #16
 8000c12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c16:	fa1f f884 	uxth.w	r8, r4
 8000c1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c22:	fb09 fa08 	mul.w	sl, r9, r8
 8000c26:	458a      	cmp	sl, r1
 8000c28:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x220>
 8000c32:	1861      	adds	r1, r4, r1
 8000c34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c38:	d248      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c3a:	458a      	cmp	sl, r1
 8000c3c:	d946      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000c3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c42:	4421      	add	r1, r4
 8000c44:	eba1 010a 	sub.w	r1, r1, sl
 8000c48:	b2bf      	uxth	r7, r7
 8000c4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c56:	fb00 f808 	mul.w	r8, r0, r8
 8000c5a:	45b8      	cmp	r8, r7
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x24a>
 8000c5e:	19e7      	adds	r7, r4, r7
 8000c60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c64:	d22e      	bcs.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c66:	45b8      	cmp	r8, r7
 8000c68:	d92c      	bls.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4427      	add	r7, r4
 8000c6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c72:	eba7 0708 	sub.w	r7, r7, r8
 8000c76:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7a:	454f      	cmp	r7, r9
 8000c7c:	46c6      	mov	lr, r8
 8000c7e:	4649      	mov	r1, r9
 8000c80:	d31a      	bcc.n	8000cb8 <__udivmoddi4+0x294>
 8000c82:	d017      	beq.n	8000cb4 <__udivmoddi4+0x290>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x27a>
 8000c86:	ebb3 020e 	subs.w	r2, r3, lr
 8000c8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c92:	40f2      	lsrs	r2, r6
 8000c94:	ea4c 0202 	orr.w	r2, ip, r2
 8000c98:	40f7      	lsrs	r7, r6
 8000c9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	462e      	mov	r6, r5
 8000ca8:	4628      	mov	r0, r5
 8000caa:	e70b      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000cac:	4606      	mov	r6, r0
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0x60>
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	e6fd      	b.n	8000ab0 <__udivmoddi4+0x8c>
 8000cb4:	4543      	cmp	r3, r8
 8000cb6:	d2e5      	bcs.n	8000c84 <__udivmoddi4+0x260>
 8000cb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e7df      	b.n	8000c84 <__udivmoddi4+0x260>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e7d2      	b.n	8000c6e <__udivmoddi4+0x24a>
 8000cc8:	4660      	mov	r0, ip
 8000cca:	e78d      	b.n	8000be8 <__udivmoddi4+0x1c4>
 8000ccc:	4681      	mov	r9, r0
 8000cce:	e7b9      	b.n	8000c44 <__udivmoddi4+0x220>
 8000cd0:	4666      	mov	r6, ip
 8000cd2:	e775      	b.n	8000bc0 <__udivmoddi4+0x19c>
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	e74a      	b.n	8000b6e <__udivmoddi4+0x14a>
 8000cd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cdc:	4439      	add	r1, r7
 8000cde:	e713      	b.n	8000b08 <__udivmoddi4+0xe4>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	e724      	b.n	8000b30 <__udivmoddi4+0x10c>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_idiv0>:
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <main>:
uint8_t notes_on = 0;
uint8_t i = 0;


int main(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf2:	f000 ff84 	bl	8001bfe <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8000cf6:	f000 f9fd 	bl	80010f4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfa:	f000 fccd 	bl	8001698 <MX_GPIO_Init>
    MX_DMA_Init();
 8000cfe:	f000 fca1 	bl	8001644 <MX_DMA_Init>
    MX_DAC1_Init();
 8000d02:	f000 fad1 	bl	80012a8 <MX_DAC1_Init>
    MX_USART1_UART_Init();
 8000d06:	f000 fc51 	bl	80015ac <MX_USART1_UART_Init>
    MX_TIM6_Init();
 8000d0a:	f000 fb8f 	bl	800142c <MX_TIM6_Init>
    MX_TIM7_Init();
 8000d0e:	f000 fbc3 	bl	8001498 <MX_TIM7_Init>
    MX_TIM8_Init();
 8000d12:	f000 fbf7 	bl	8001504 <MX_TIM8_Init>
    MX_ADC2_Init();
 8000d16:	f000 fa55 	bl	80011c4 <MX_ADC2_Init>
    //MX_COMP5_Init();
    MX_DAC4_Init();
 8000d1a:	f000 faff 	bl	800131c <MX_DAC4_Init>
    MX_TIM2_Init();
 8000d1e:	f000 fb37 	bl	8001390 <MX_TIM2_Init>

  // Enable DAC
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d22:	2100      	movs	r1, #0
 8000d24:	482b      	ldr	r0, [pc, #172]	; (8000dd4 <main+0xe8>)
 8000d26:	f002 f906 	bl	8002f36 <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac4, DAC_CHANNEL_1, (uint32_t*)tri_lut, NUM_PTS, DAC_ALIGN_12B_R);
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	4a29      	ldr	r2, [pc, #164]	; (8000dd8 <main+0xec>)
 8000d32:	2100      	movs	r1, #0
 8000d34:	4829      	ldr	r0, [pc, #164]	; (8000ddc <main+0xf0>)
 8000d36:	f002 f951 	bl	8002fdc <HAL_DAC_Start_DMA>

  // Start comparator
  //HAL_COMP_Start(&hcomp5);

  // Enable timers
  HAL_TIM_Base_Start_IT(&htim2);
 8000d3a:	4829      	ldr	r0, [pc, #164]	; (8000de0 <main+0xf4>)
 8000d3c:	f004 fa5c 	bl	80051f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000d40:	4828      	ldr	r0, [pc, #160]	; (8000de4 <main+0xf8>)
 8000d42:	f004 fa59 	bl	80051f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000d46:	4828      	ldr	r0, [pc, #160]	; (8000de8 <main+0xfc>)
 8000d48:	f004 fa56 	bl	80051f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000d4c:	4827      	ldr	r0, [pc, #156]	; (8000dec <main+0x100>)
 8000d4e:	f004 fa53 	bl	80051f8 <HAL_TIM_Base_Start_IT>

  voices[0].status = 1;
 8000d52:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <main+0x104>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
  voices[1].status = 0;
 8000d58:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <main+0x104>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	739a      	strb	r2, [r3, #14]
  voices[2].status = 0;
 8000d5e:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <main+0x104>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	771a      	strb	r2, [r3, #28]

  voices[0].index = 0;
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <main+0x104>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	731a      	strb	r2, [r3, #12]
  voices[1].index = 0;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <main+0x104>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	769a      	strb	r2, [r3, #26]
  voices[2].index = 0;
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <main+0x104>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  notes_on = 1;
 8000d78:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <main+0x108>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]

  TIM6->ARR = ARR_VAL(C4);
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <main+0x10c>)
 8000d80:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8000d84:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM7->ARR = ARR_VAL(E4);
 8000d86:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <main+0x110>)
 8000d88:	f640 72b7 	movw	r2, #4023	; 0xfb7
 8000d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM8->ARR = ARR_VAL(G4);
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <main+0x114>)
 8000d90:	f640 523b 	movw	r2, #3387	; 0xd3b
 8000d94:	62da      	str	r2, [r3, #44]	; 0x2c

  lut = sin_lut;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <main+0x118>)
 8000d98:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <main+0x11c>)
 8000d9a:	601a      	str	r2, [r3, #0]

  // Main loop - read MIDI and play notes on DAC
  // DAC data handled in UART interrupt callback
  while (1) {
	  //TODO put in function
	  HAL_UART_Receive_IT(&huart1, midi_tmp, 3);
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	491b      	ldr	r1, [pc, #108]	; (8000e0c <main+0x120>)
 8000da0:	481b      	ldr	r0, [pc, #108]	; (8000e10 <main+0x124>)
 8000da2:	f004 ffcb 	bl	8005d3c <HAL_UART_Receive_IT>
	  if (GLOBAL_MIDI_NOTE_ON) {
 8000da6:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <main+0x128>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b90      	cmp	r3, #144	; 0x90
 8000dac:	d106      	bne.n	8000dbc <main+0xd0>
		  MIDI_IN_LED_ON;
 8000dae:	2201      	movs	r2, #1
 8000db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db4:	4818      	ldr	r0, [pc, #96]	; (8000e18 <main+0x12c>)
 8000db6:	f003 f97b 	bl	80040b0 <HAL_GPIO_WritePin>
 8000dba:	e7ef      	b.n	8000d9c <main+0xb0>
	  }
	  else if (GLOBAL_MIDI_NOTE_OFF) {
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <main+0x128>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b80      	cmp	r3, #128	; 0x80
 8000dc2:	d1eb      	bne.n	8000d9c <main+0xb0>
		  MIDI_IN_LED_OFF;
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dca:	4813      	ldr	r0, [pc, #76]	; (8000e18 <main+0x12c>)
 8000dcc:	f003 f970 	bl	80040b0 <HAL_GPIO_WritePin>
	  HAL_UART_Receive_IT(&huart1, midi_tmp, 3);
 8000dd0:	e7e4      	b.n	8000d9c <main+0xb0>
 8000dd2:	bf00      	nop
 8000dd4:	2000027c 	.word	0x2000027c
 8000dd8:	20000100 	.word	0x20000100
 8000ddc:	200002fc 	.word	0x200002fc
 8000de0:	2000041c 	.word	0x2000041c
 8000de4:	200003d0 	.word	0x200003d0
 8000de8:	200004ec 	.word	0x200004ec
 8000dec:	20000230 	.word	0x20000230
 8000df0:	200003a4 	.word	0x200003a4
 8000df4:	2000022c 	.word	0x2000022c
 8000df8:	40001000 	.word	0x40001000
 8000dfc:	40001400 	.word	0x40001400
 8000e00:	40013400 	.word	0x40013400
 8000e04:	20000200 	.word	0x20000200
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000538 	.word	0x20000538
 8000e10:	20000314 	.word	0x20000314
 8000e14:	20000310 	.word	0x20000310
 8000e18:	48000400 	.word	0x48000400

08000e1c <HAL_TIM_PeriodElapsedCallback>:
	  }
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
		PUT_TO_DAC(VOICE2);
		if (voices[2].index == NUM_PTS) voices[2].index = 0;
	}
	*/

	if (htim == &htim6) {
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a8e      	ldr	r2, [pc, #568]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d158      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0xc2>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (1./notes_on) * (voices[0].status*lut[voices[0].index++] + voices[1].status*lut[voices[1].index] + voices[2].status*lut[voices[2].index]));
 8000e2c:	4b8d      	ldr	r3, [pc, #564]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fb43 	bl	80004bc <__aeabi_i2d>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	f04f 0000 	mov.w	r0, #0
 8000e3e:	498a      	ldr	r1, [pc, #552]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000e40:	f7ff fcd0 	bl	80007e4 <__aeabi_ddiv>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4614      	mov	r4, r2
 8000e4a:	461d      	mov	r5, r3
 8000e4c:	4b87      	ldr	r3, [pc, #540]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	4b87      	ldr	r3, [pc, #540]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b85      	ldr	r3, [pc, #532]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e58:	7b1b      	ldrb	r3, [r3, #12]
 8000e5a:	1c59      	adds	r1, r3, #1
 8000e5c:	b2ce      	uxtb	r6, r1
 8000e5e:	4983      	ldr	r1, [pc, #524]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e60:	730e      	strb	r6, [r1, #12]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	fb03 f200 	mul.w	r2, r3, r0
 8000e6c:	4b7f      	ldr	r3, [pc, #508]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e6e:	7b9b      	ldrb	r3, [r3, #14]
 8000e70:	4618      	mov	r0, r3
 8000e72:	4b7f      	ldr	r3, [pc, #508]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e74:	6819      	ldr	r1, [r3, #0]
 8000e76:	4b7d      	ldr	r3, [pc, #500]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e78:	7e9b      	ldrb	r3, [r3, #26]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	440b      	add	r3, r1
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	fb03 f300 	mul.w	r3, r3, r0
 8000e84:	441a      	add	r2, r3
 8000e86:	4b79      	ldr	r3, [pc, #484]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e88:	7f1b      	ldrb	r3, [r3, #28]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	4b78      	ldr	r3, [pc, #480]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e8e:	6819      	ldr	r1, [r3, #0]
 8000e90:	4b76      	ldr	r3, [pc, #472]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	440b      	add	r3, r1
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	fb03 f300 	mul.w	r3, r3, r0
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fb0a 	bl	80004bc <__aeabi_i2d>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4620      	mov	r0, r4
 8000eae:	4629      	mov	r1, r5
 8000eb0:	f7ff fb6e 	bl	8000590 <__aeabi_dmul>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4610      	mov	r0, r2
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f7ff fd7a 	bl	80009b4 <__aeabi_d2uiz>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	486b      	ldr	r0, [pc, #428]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000ec8:	f002 f9b2 	bl	8003230 <HAL_DAC_SetValue>
		if (voices[0].index == NUM_PTS) voices[0].index = 0;
 8000ecc:	4b67      	ldr	r3, [pc, #412]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ece:	7b1b      	ldrb	r3, [r3, #12]
 8000ed0:	2b80      	cmp	r3, #128	; 0x80
 8000ed2:	f040 80c1 	bne.w	8001058 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8000ed6:	4b65      	ldr	r3, [pc, #404]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	731a      	strb	r2, [r3, #12]
		if (voices[2].index == NUM_PTS) voices[2].index = 0;
	}



}
 8000edc:	e0bc      	b.n	8001058 <HAL_TIM_PeriodElapsedCallback+0x23c>
	else if (htim == &htim7) {
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a65      	ldr	r2, [pc, #404]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d159      	bne.n	8000f9a <HAL_TIM_PeriodElapsedCallback+0x17e>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (1./notes_on) * (voices[0].status*lut[voices[0].index] + voices[1].status*lut[voices[1].index++] + voices[2].status*lut[voices[2].index]));
 8000ee6:	4b5f      	ldr	r3, [pc, #380]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fae6 	bl	80004bc <__aeabi_i2d>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	f04f 0000 	mov.w	r0, #0
 8000ef8:	495b      	ldr	r1, [pc, #364]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000efa:	f7ff fc73 	bl	80007e4 <__aeabi_ddiv>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	4614      	mov	r4, r2
 8000f04:	461d      	mov	r5, r3
 8000f06:	4b59      	ldr	r3, [pc, #356]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4b58      	ldr	r3, [pc, #352]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b56      	ldr	r3, [pc, #344]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f12:	7b1b      	ldrb	r3, [r3, #12]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4413      	add	r3, r2
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	fb03 f201 	mul.w	r2, r3, r1
 8000f1e:	4b53      	ldr	r3, [pc, #332]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f20:	7b9b      	ldrb	r3, [r3, #14]
 8000f22:	461e      	mov	r6, r3
 8000f24:	4b52      	ldr	r3, [pc, #328]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000f26:	6819      	ldr	r1, [r3, #0]
 8000f28:	4b50      	ldr	r3, [pc, #320]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f2a:	7e9b      	ldrb	r3, [r3, #26]
 8000f2c:	1c58      	adds	r0, r3, #1
 8000f2e:	fa5f fc80 	uxtb.w	ip, r0
 8000f32:	484e      	ldr	r0, [pc, #312]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f34:	f880 c01a 	strb.w	ip, [r0, #26]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	440b      	add	r3, r1
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	fb03 f306 	mul.w	r3, r3, r6
 8000f42:	441a      	add	r2, r3
 8000f44:	4b49      	ldr	r3, [pc, #292]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f46:	7f1b      	ldrb	r3, [r3, #28]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	4b49      	ldr	r3, [pc, #292]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000f4c:	6819      	ldr	r1, [r3, #0]
 8000f4e:	4b47      	ldr	r3, [pc, #284]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	440b      	add	r3, r1
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	fb03 f300 	mul.w	r3, r3, r0
 8000f5e:	4413      	add	r3, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff faab 	bl	80004bc <__aeabi_i2d>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	4629      	mov	r1, r5
 8000f6e:	f7ff fb0f 	bl	8000590 <__aeabi_dmul>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f7ff fd1b 	bl	80009b4 <__aeabi_d2uiz>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	483b      	ldr	r0, [pc, #236]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000f86:	f002 f953 	bl	8003230 <HAL_DAC_SetValue>
		if (voices[1].index == NUM_PTS) voices[1].index = 0;
 8000f8a:	4b38      	ldr	r3, [pc, #224]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f8c:	7e9b      	ldrb	r3, [r3, #26]
 8000f8e:	2b80      	cmp	r3, #128	; 0x80
 8000f90:	d162      	bne.n	8001058 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8000f92:	4b36      	ldr	r3, [pc, #216]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	769a      	strb	r2, [r3, #26]
}
 8000f98:	e05e      	b.n	8001058 <HAL_TIM_PeriodElapsedCallback+0x23c>
	else if (htim == &htim8) {
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a37      	ldr	r2, [pc, #220]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d15a      	bne.n	8001058 <HAL_TIM_PeriodElapsedCallback+0x23c>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (1./notes_on) * (voices[0].status*lut[voices[0].index] + voices[1].status*lut[voices[1].index] + voices[2].status*lut[voices[2].index++]));
 8000fa2:	4b30      	ldr	r3, [pc, #192]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fa88 	bl	80004bc <__aeabi_i2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	f04f 0000 	mov.w	r0, #0
 8000fb4:	492c      	ldr	r1, [pc, #176]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000fb6:	f7ff fc15 	bl	80007e4 <__aeabi_ddiv>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4614      	mov	r4, r2
 8000fc0:	461d      	mov	r5, r3
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4b29      	ldr	r3, [pc, #164]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fce:	7b1b      	ldrb	r3, [r3, #12]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	fb03 f201 	mul.w	r2, r3, r1
 8000fda:	4b24      	ldr	r3, [pc, #144]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fdc:	7b9b      	ldrb	r3, [r3, #14]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	4b23      	ldr	r3, [pc, #140]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000fe2:	6819      	ldr	r1, [r3, #0]
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fe6:	7e9b      	ldrb	r3, [r3, #26]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	440b      	add	r3, r1
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	fb03 f300 	mul.w	r3, r3, r0
 8000ff2:	441a      	add	r2, r3
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ff6:	7f1b      	ldrb	r3, [r3, #28]
 8000ff8:	461e      	mov	r6, r3
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000ffc:	6819      	ldr	r1, [r3, #0]
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001004:	1c58      	adds	r0, r3, #1
 8001006:	fa5f fc80 	uxtb.w	ip, r0
 800100a:	4818      	ldr	r0, [pc, #96]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 800100c:	f880 c028 	strb.w	ip, [r0, #40]	; 0x28
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	440b      	add	r3, r1
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	fb03 f306 	mul.w	r3, r3, r6
 800101a:	4413      	add	r3, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa4d 	bl	80004bc <__aeabi_i2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4620      	mov	r0, r4
 8001028:	4629      	mov	r1, r5
 800102a:	f7ff fab1 	bl	8000590 <__aeabi_dmul>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fcbd 	bl	80009b4 <__aeabi_d2uiz>
 800103a:	4603      	mov	r3, r0
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001042:	f002 f8f5 	bl	8003230 <HAL_DAC_SetValue>
		if (voices[2].index == NUM_PTS) voices[2].index = 0;
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800104c:	2b80      	cmp	r3, #128	; 0x80
 800104e:	d103      	bne.n	8001058 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001060:	200003d0 	.word	0x200003d0
 8001064:	2000022c 	.word	0x2000022c
 8001068:	3ff00000 	.word	0x3ff00000
 800106c:	200003a4 	.word	0x200003a4
 8001070:	20000200 	.word	0x20000200
 8001074:	2000027c 	.word	0x2000027c
 8001078:	200004ec 	.word	0x200004ec
 800107c:	20000230 	.word	0x20000230

08001080 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	TIM6->ARR = ARR_VAL(NOTE);
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_UART_RxCpltCallback+0x60>)
 800108a:	785b      	ldrb	r3, [r3, #1]
 800108c:	3305      	adds	r3, #5
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <HAL_UART_RxCpltCallback+0x64>)
 8001090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001094:	01db      	lsls	r3, r3, #7
 8001096:	461a      	mov	r2, r3
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_UART_RxCpltCallback+0x68>)
 800109a:	fbb3 f3f2 	udiv	r3, r3, r2
 800109e:	4a13      	ldr	r2, [pc, #76]	; (80010ec <HAL_UART_RxCpltCallback+0x6c>)
 80010a0:	3b01      	subs	r3, #1
 80010a2:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (midi_tmp[0] == 0x90 || midi_tmp[0] == 0x80) {
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_UART_RxCpltCallback+0x70>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b90      	cmp	r3, #144	; 0x90
 80010aa:	d003      	beq.n	80010b4 <HAL_UART_RxCpltCallback+0x34>
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_UART_RxCpltCallback+0x70>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b80      	cmp	r3, #128	; 0x80
 80010b2:	d10e      	bne.n	80010d2 <HAL_UART_RxCpltCallback+0x52>
		uint8_t i;
		for (i = 0; i < 3; i++) {
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e008      	b.n	80010cc <HAL_UART_RxCpltCallback+0x4c>
			midi_msg[i] = midi_tmp[i];
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	490c      	ldr	r1, [pc, #48]	; (80010f0 <HAL_UART_RxCpltCallback+0x70>)
 80010c0:	5c89      	ldrb	r1, [r1, r2]
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_UART_RxCpltCallback+0x60>)
 80010c4:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 3; i++) {
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	3301      	adds	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d9f3      	bls.n	80010ba <HAL_UART_RxCpltCallback+0x3a>
		}
	}
}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000310 	.word	0x20000310
 80010e4:	0800758c 	.word	0x0800758c
 80010e8:	0a21fe80 	.word	0x0a21fe80
 80010ec:	40001000 	.word	0x40001000
 80010f0:	20000538 	.word	0x20000538

080010f4 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0a8      	sub	sp, #160	; 0xa0
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010fe:	2238      	movs	r2, #56	; 0x38
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f006 fa2e 	bl	8007564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	463b      	mov	r3, r7
 800111a:	2254      	movs	r2, #84	; 0x54
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f006 fa20 	bl	8007564 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001124:	2000      	movs	r0, #0
 8001126:	f002 ffdb 	bl	80040e0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800112a:	2302      	movs	r3, #2
 800112c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001132:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001134:	2340      	movs	r3, #64	; 0x40
 8001136:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001138:	2302      	movs	r3, #2
 800113a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800113e:	2302      	movs	r3, #2
 8001140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001144:	2304      	movs	r3, #4
 8001146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800114a:	2355      	movs	r3, #85	; 0x55
 800114c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001162:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001166:	4618      	mov	r0, r3
 8001168:	f003 f86e 	bl	8004248 <HAL_RCC_OscConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001172:	f000 fadd 	bl	8001730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001176:	230f      	movs	r3, #15
 8001178:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117a:	2303      	movs	r3, #3
 800117c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800118a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800118e:	2104      	movs	r1, #4
 8001190:	4618      	mov	r0, r3
 8001192:	f003 fb71 	bl	8004878 <HAL_RCC_ClockConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800119c:	f000 fac8 	bl	8001730 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011a4:	2300      	movs	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a8:	463b      	mov	r3, r7
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 fd80 	bl	8004cb0 <HAL_RCCEx_PeriphCLKConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011b6:	f000 fabb 	bl	8001730 <Error_Handler>
  }
}
 80011ba:	bf00      	nop
 80011bc:	37a0      	adds	r7, #160	; 0xa0
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <MX_ADC2_Init>:

static void MX_ADC2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	463b      	mov	r3, r7
 80011cc:	2220      	movs	r2, #32
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f006 f9c7 	bl	8007564 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <MX_ADC2_Init+0xd8>)
 80011d8:	4a31      	ldr	r2, [pc, #196]	; (80012a0 <MX_ADC2_Init+0xdc>)
 80011da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011dc:	4b2f      	ldr	r3, [pc, #188]	; (800129c <MX_ADC2_Init+0xd8>)
 80011de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011e2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011e4:	4b2d      	ldr	r3, [pc, #180]	; (800129c <MX_ADC2_Init+0xd8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ea:	4b2c      	ldr	r3, [pc, #176]	; (800129c <MX_ADC2_Init+0xd8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011f0:	4b2a      	ldr	r3, [pc, #168]	; (800129c <MX_ADC2_Init+0xd8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011f6:	4b29      	ldr	r3, [pc, #164]	; (800129c <MX_ADC2_Init+0xd8>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011fc:	4b27      	ldr	r3, [pc, #156]	; (800129c <MX_ADC2_Init+0xd8>)
 80011fe:	2204      	movs	r2, #4
 8001200:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <MX_ADC2_Init+0xd8>)
 8001204:	2200      	movs	r2, #0
 8001206:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001208:	4b24      	ldr	r3, [pc, #144]	; (800129c <MX_ADC2_Init+0xd8>)
 800120a:	2201      	movs	r2, #1
 800120c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800120e:	4b23      	ldr	r3, [pc, #140]	; (800129c <MX_ADC2_Init+0xd8>)
 8001210:	2202      	movs	r2, #2
 8001212:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <MX_ADC2_Init+0xd8>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800121c:	4b1f      	ldr	r3, [pc, #124]	; (800129c <MX_ADC2_Init+0xd8>)
 800121e:	2200      	movs	r2, #0
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001222:	4b1e      	ldr	r3, [pc, #120]	; (800129c <MX_ADC2_Init+0xd8>)
 8001224:	2200      	movs	r2, #0
 8001226:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <MX_ADC2_Init+0xd8>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_ADC2_Init+0xd8>)
 8001232:	2200      	movs	r2, #0
 8001234:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <MX_ADC2_Init+0xd8>)
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800123e:	4817      	ldr	r0, [pc, #92]	; (800129c <MX_ADC2_Init+0xd8>)
 8001240:	f000 ff46 	bl	80020d0 <HAL_ADC_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800124a:	f000 fa71 	bl	8001730 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_ADC2_Init+0xe0>)
 8001250:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001252:	2306      	movs	r3, #6
 8001254:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800125a:	237f      	movs	r3, #127	; 0x7f
 800125c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800125e:	2304      	movs	r3, #4
 8001260:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	4619      	mov	r1, r3
 800126a:	480c      	ldr	r0, [pc, #48]	; (800129c <MX_ADC2_Init+0xd8>)
 800126c:	f001 f8f2 	bl	8002454 <HAL_ADC_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001276:	f000 fa5b 	bl	8001730 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800127a:	230c      	movs	r3, #12
 800127c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800127e:	463b      	mov	r3, r7
 8001280:	4619      	mov	r1, r3
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <MX_ADC2_Init+0xd8>)
 8001284:	f001 f8e6 	bl	8002454 <HAL_ADC_ConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 800128e:	f000 fa4f 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	3720      	adds	r7, #32
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000290 	.word	0x20000290
 80012a0:	50000100 	.word	0x50000100
 80012a4:	04300002 	.word	0x04300002

080012a8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012ae:	463b      	mov	r3, r7
 80012b0:	2230      	movs	r2, #48	; 0x30
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f006 f955 	bl	8007564 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <MX_DAC1_Init+0x6c>)
 80012bc:	4a16      	ldr	r2, [pc, #88]	; (8001318 <MX_DAC1_Init+0x70>)
 80012be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012c0:	4814      	ldr	r0, [pc, #80]	; (8001314 <MX_DAC1_Init+0x6c>)
 80012c2:	f001 fe16 	bl	8002ef2 <HAL_DAC_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012cc:	f000 fa30 	bl	8001730 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80012d0:	2302      	movs	r3, #2
 80012d2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80012ec:	2301      	movs	r3, #1
 80012ee:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <MX_DAC1_Init+0x6c>)
 80012fc:	f001 ffe8 	bl	80032d0 <HAL_DAC_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001306:	f000 fa13 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	3730      	adds	r7, #48	; 0x30
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000027c 	.word	0x2000027c
 8001318:	50000800 	.word	0x50000800

0800131c <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08c      	sub	sp, #48	; 0x30
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2230      	movs	r2, #48	; 0x30
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f006 f91b 	bl	8007564 <memset>
  /* USER CODE BEGIN DAC4_Init 1 */

  /* USER CODE END DAC4_Init 1 */
  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_DAC4_Init+0x6c>)
 8001330:	4a16      	ldr	r2, [pc, #88]	; (800138c <MX_DAC4_Init+0x70>)
 8001332:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8001334:	4814      	ldr	r0, [pc, #80]	; (8001388 <MX_DAC4_Init+0x6c>)
 8001336:	f001 fddc 	bl	8002ef2 <HAL_DAC_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 8001340:	f000 f9f6 	bl	8001730 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001344:	2302      	movs	r3, #2
 8001346:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001354:	2312      	movs	r3, #18
 8001356:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800135c:	2302      	movs	r3, #2
 800135e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001360:	2302      	movs	r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MX_DAC4_Init+0x6c>)
 8001370:	f001 ffae 	bl	80032d0 <HAL_DAC_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 800137a:	f000 f9d9 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3730      	adds	r7, #48	; 0x30
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200002fc 	.word	0x200002fc
 800138c:	50001400 	.word	0x50001400

08001390 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <MX_TIM2_Init+0x98>)
 80013b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <MX_TIM2_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_TIM2_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = ARR_VAL(1000);
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <MX_TIM2_Init+0x98>)
 80013c4:	f240 522f 	movw	r2, #1327	; 0x52f
 80013c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_TIM2_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_TIM2_Init+0x98>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d6:	4814      	ldr	r0, [pc, #80]	; (8001428 <MX_TIM2_Init+0x98>)
 80013d8:	f003 feb6 	bl	8005148 <HAL_TIM_Base_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013e2:	f000 f9a5 	bl	8001730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4619      	mov	r1, r3
 80013f2:	480d      	ldr	r0, [pc, #52]	; (8001428 <MX_TIM2_Init+0x98>)
 80013f4:	f004 f8f8 	bl	80055e8 <HAL_TIM_ConfigClockSource>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013fe:	f000 f997 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001402:	2320      	movs	r3, #32
 8001404:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <MX_TIM2_Init+0x98>)
 8001410:	f004 fb68 	bl	8005ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800141a:	f000 f989 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	3720      	adds	r7, #32
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2000041c 	.word	0x2000041c

0800142c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_TIM6_Init+0x64>)
 800143e:	4a15      	ldr	r2, [pc, #84]	; (8001494 <MX_TIM6_Init+0x68>)
 8001440:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <MX_TIM6_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_TIM6_Init+0x64>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = ARR_VAL(C4);
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <MX_TIM6_Init+0x64>)
 8001450:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8001454:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_TIM6_Init+0x64>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <MX_TIM6_Init+0x64>)
 800145e:	f003 fe73 	bl	8005148 <HAL_TIM_Base_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001468:	f000 f962 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800146c:	2320      	movs	r3, #32
 800146e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_TIM6_Init+0x64>)
 800147a:	f004 fb33 	bl	8005ae4 <HAL_TIMEx_MasterConfigSynchronization>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001484:	f000 f954 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200003d0 	.word	0x200003d0
 8001494:	40001000 	.word	0x40001000

08001498 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_TIM7_Init+0x64>)
 80014aa:	4a15      	ldr	r2, [pc, #84]	; (8001500 <MX_TIM7_Init+0x68>)
 80014ac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_TIM7_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_TIM7_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = ARR_VAL(C4);
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <MX_TIM7_Init+0x64>)
 80014bc:	f241 32cc 	movw	r2, #5068	; 0x13cc
 80014c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_TIM7_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <MX_TIM7_Init+0x64>)
 80014ca:	f003 fe3d 	bl	8005148 <HAL_TIM_Base_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80014d4:	f000 f92c 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014d8:	2320      	movs	r3, #32
 80014da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_TIM7_Init+0x64>)
 80014e6:	f004 fafd 	bl	8005ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80014f0:	f000 f91e 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200004ec 	.word	0x200004ec
 8001500:	40001400 	.word	0x40001400

08001504 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <MX_TIM8_Init+0xa0>)
 8001524:	4a20      	ldr	r2, [pc, #128]	; (80015a8 <MX_TIM8_Init+0xa4>)
 8001526:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <MX_TIM8_Init+0xa0>)
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <MX_TIM8_Init+0xa0>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = ARR_VAL(C4);
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <MX_TIM8_Init+0xa0>)
 8001536:	f241 32cc 	movw	r2, #5068	; 0x13cc
 800153a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <MX_TIM8_Init+0xa0>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <MX_TIM8_Init+0xa0>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_TIM8_Init+0xa0>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800154e:	4815      	ldr	r0, [pc, #84]	; (80015a4 <MX_TIM8_Init+0xa0>)
 8001550:	f003 fdfa 	bl	8005148 <HAL_TIM_Base_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800155a:	f000 f8e9 	bl	8001730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001562:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	4619      	mov	r1, r3
 800156a:	480e      	ldr	r0, [pc, #56]	; (80015a4 <MX_TIM8_Init+0xa0>)
 800156c:	f004 f83c 	bl	80055e8 <HAL_TIM_ConfigClockSource>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001576:	f000 f8db 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800157a:	2320      	movs	r3, #32
 800157c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <MX_TIM8_Init+0xa0>)
 800158c:	f004 faaa 	bl	8005ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001596:	f000 f8cb 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	3720      	adds	r7, #32
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000230 	.word	0x20000230
 80015a8:	40013400 	.word	0x40013400

080015ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015b0:	4b22      	ldr	r3, [pc, #136]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015b2:	4a23      	ldr	r2, [pc, #140]	; (8001640 <MX_USART1_UART_Init+0x94>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015b8:	f647 2212 	movw	r2, #31250	; 0x7a12
 80015bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015f4:	4811      	ldr	r0, [pc, #68]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015f6:	f004 fb51 	bl	8005c9c <HAL_UART_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001600:	f000 f896 	bl	8001730 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001604:	2100      	movs	r1, #0
 8001606:	480d      	ldr	r0, [pc, #52]	; (800163c <MX_USART1_UART_Init+0x90>)
 8001608:	f005 febd 	bl	8007386 <HAL_UARTEx_SetTxFifoThreshold>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001612:	f000 f88d 	bl	8001730 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001616:	2100      	movs	r1, #0
 8001618:	4808      	ldr	r0, [pc, #32]	; (800163c <MX_USART1_UART_Init+0x90>)
 800161a:	f005 fef2 	bl	8007402 <HAL_UARTEx_SetRxFifoThreshold>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001624:	f000 f884 	bl	8001730 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_USART1_UART_Init+0x90>)
 800162a:	f005 fe73 	bl	8007314 <HAL_UARTEx_DisableFifoMode>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001634:	f000 f87c 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000314 	.word	0x20000314
 8001640:	40013800 	.word	0x40013800

08001644 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_DMA_Init+0x50>)
 800164c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164e:	4a11      	ldr	r2, [pc, #68]	; (8001694 <MX_DMA_Init+0x50>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6493      	str	r3, [r2, #72]	; 0x48
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_DMA_Init+0x50>)
 8001658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_DMA_Init+0x50>)
 8001664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001666:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <MX_DMA_Init+0x50>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6493      	str	r3, [r2, #72]	; 0x48
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_DMA_Init+0x50>)
 8001670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	200e      	movs	r0, #14
 8001680:	f001 fc03 	bl	8002e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001684:	200e      	movs	r0, #14
 8001686:	f001 fc1a 	bl	8002ebe <HAL_NVIC_EnableIRQ>

}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_GPIO_Init+0x90>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <MX_GPIO_Init+0x90>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <MX_GPIO_Init+0x90>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <MX_GPIO_Init+0x90>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	4a17      	ldr	r2, [pc, #92]	; (8001728 <MX_GPIO_Init+0x90>)
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <MX_GPIO_Init+0x90>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_GPIO_Init+0x90>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	4a11      	ldr	r2, [pc, #68]	; (8001728 <MX_GPIO_Init+0x90>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_GPIO_Init+0x90>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016fc:	480b      	ldr	r0, [pc, #44]	; (800172c <MX_GPIO_Init+0x94>)
 80016fe:	f002 fcd7 	bl	80040b0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PB11 */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001702:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001706:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	4619      	mov	r1, r3
 800171a:	4804      	ldr	r0, [pc, #16]	; (800172c <MX_GPIO_Init+0x94>)
 800171c:	f002 fb46 	bl	8003dac <HAL_GPIO_Init>

}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000
 800172c:	48000400 	.word	0x48000400

08001730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001738:	e7fe      	b.n	8001738 <Error_Handler+0x8>
	...

0800173c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <HAL_MspInit+0x44>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001746:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <HAL_MspInit+0x44>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6613      	str	r3, [r2, #96]	; 0x60
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_MspInit+0x44>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_MspInit+0x44>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	4a08      	ldr	r2, [pc, #32]	; (8001780 <HAL_MspInit+0x44>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6593      	str	r3, [r2, #88]	; 0x58
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_MspInit+0x44>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001772:	f002 fd59 	bl	8004228 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000

08001784 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a15      	ldr	r2, [pc, #84]	; (80017f8 <HAL_ADC_MspInit+0x74>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d124      	bne.n	80017f0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_ADC_MspInit+0x78>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	4a14      	ldr	r2, [pc, #80]	; (80017fc <HAL_ADC_MspInit+0x78>)
 80017ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_ADC_MspInit+0x78>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HAL_ADC_MspInit+0x78>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <HAL_ADC_MspInit+0x78>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_ADC_MspInit+0x78>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017d6:	2303      	movs	r3, #3
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017da:	2303      	movs	r3, #3
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ec:	f002 fade 	bl	8003dac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80017f0:	bf00      	nop
 80017f2:	3728      	adds	r7, #40	; 0x28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	50000100 	.word	0x50000100
 80017fc:	40021000 	.word	0x40021000

08001800 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a3c      	ldr	r2, [pc, #240]	; (8001910 <HAL_DAC_MspInit+0x110>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d12d      	bne.n	800187e <HAL_DAC_MspInit+0x7e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001822:	4b3c      	ldr	r3, [pc, #240]	; (8001914 <HAL_DAC_MspInit+0x114>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	4a3b      	ldr	r2, [pc, #236]	; (8001914 <HAL_DAC_MspInit+0x114>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_DAC_MspInit+0x114>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b36      	ldr	r3, [pc, #216]	; (8001914 <HAL_DAC_MspInit+0x114>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	4a35      	ldr	r2, [pc, #212]	; (8001914 <HAL_DAC_MspInit+0x114>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001846:	4b33      	ldr	r3, [pc, #204]	; (8001914 <HAL_DAC_MspInit+0x114>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001852:	2310      	movs	r3, #16
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001856:	2303      	movs	r3, #3
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001868:	f002 faa0 	bl	8003dac <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	2036      	movs	r0, #54	; 0x36
 8001872:	f001 fb0a 	bl	8002e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001876:	2036      	movs	r0, #54	; 0x36
 8001878:	f001 fb21 	bl	8002ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 800187c:	e043      	b.n	8001906 <HAL_DAC_MspInit+0x106>
  else if(hdac->Instance==DAC4)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a25      	ldr	r2, [pc, #148]	; (8001918 <HAL_DAC_MspInit+0x118>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d13e      	bne.n	8001906 <HAL_DAC_MspInit+0x106>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8001888:	4b22      	ldr	r3, [pc, #136]	; (8001914 <HAL_DAC_MspInit+0x114>)
 800188a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188c:	4a21      	ldr	r2, [pc, #132]	; (8001914 <HAL_DAC_MspInit+0x114>)
 800188e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001894:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <HAL_DAC_MspInit+0x114>)
 8001896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
    hdma_dac4_ch1.Instance = DMA1_Channel4;
 80018a0:	4b1e      	ldr	r3, [pc, #120]	; (800191c <HAL_DAC_MspInit+0x11c>)
 80018a2:	4a1f      	ldr	r2, [pc, #124]	; (8001920 <HAL_DAC_MspInit+0x120>)
 80018a4:	601a      	str	r2, [r3, #0]
    hdma_dac4_ch1.Init.Request = DMA_REQUEST_DAC4_CHANNEL1;
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <HAL_DAC_MspInit+0x11c>)
 80018a8:	2268      	movs	r2, #104	; 0x68
 80018aa:	605a      	str	r2, [r3, #4]
    hdma_dac4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_DAC_MspInit+0x11c>)
 80018ae:	2210      	movs	r2, #16
 80018b0:	609a      	str	r2, [r3, #8]
    hdma_dac4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_DAC_MspInit+0x11c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
    hdma_dac4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_DAC_MspInit+0x11c>)
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	611a      	str	r2, [r3, #16]
    hdma_dac4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_DAC_MspInit+0x11c>)
 80018c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c4:	615a      	str	r2, [r3, #20]
    hdma_dac4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_DAC_MspInit+0x11c>)
 80018c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018cc:	619a      	str	r2, [r3, #24]
    hdma_dac4_ch1.Init.Mode = DMA_CIRCULAR;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <HAL_DAC_MspInit+0x11c>)
 80018d0:	2220      	movs	r2, #32
 80018d2:	61da      	str	r2, [r3, #28]
    hdma_dac4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_DAC_MspInit+0x11c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac4_ch1) != HAL_OK)
 80018da:	4810      	ldr	r0, [pc, #64]	; (800191c <HAL_DAC_MspInit+0x11c>)
 80018dc:	f001 ff34 	bl	8003748 <HAL_DMA_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_DAC_MspInit+0xea>
      Error_Handler();
 80018e6:	f7ff ff23 	bl	8001730 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac4_ch1);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a0b      	ldr	r2, [pc, #44]	; (800191c <HAL_DAC_MspInit+0x11c>)
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	4a0a      	ldr	r2, [pc, #40]	; (800191c <HAL_DAC_MspInit+0x11c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2037      	movs	r0, #55	; 0x37
 80018fc:	f001 fac5 	bl	8002e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001900:	2037      	movs	r0, #55	; 0x37
 8001902:	f001 fadc 	bl	8002ebe <HAL_NVIC_EnableIRQ>
}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	50000800 	.word	0x50000800
 8001914:	40021000 	.word	0x40021000
 8001918:	50001400 	.word	0x50001400
 800191c:	2000048c 	.word	0x2000048c
 8001920:	40020044 	.word	0x40020044

08001924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001934:	d114      	bne.n	8001960 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001936:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	4a32      	ldr	r2, [pc, #200]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6593      	str	r3, [r2, #88]	; 0x58
 8001942:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	201c      	movs	r0, #28
 8001954:	f001 fa99 	bl	8002e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001958:	201c      	movs	r0, #28
 800195a:	f001 fab0 	bl	8002ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800195e:	e04c      	b.n	80019fa <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a28      	ldr	r2, [pc, #160]	; (8001a08 <HAL_TIM_Base_MspInit+0xe4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d114      	bne.n	8001994 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	4a25      	ldr	r2, [pc, #148]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 8001970:	f043 0310 	orr.w	r3, r3, #16
 8001974:	6593      	str	r3, [r2, #88]	; 0x58
 8001976:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	2036      	movs	r0, #54	; 0x36
 8001988:	f001 fa7f 	bl	8002e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800198c:	2036      	movs	r0, #54	; 0x36
 800198e:	f001 fa96 	bl	8002ebe <HAL_NVIC_EnableIRQ>
}
 8001992:	e032      	b.n	80019fa <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a1c      	ldr	r2, [pc, #112]	; (8001a0c <HAL_TIM_Base_MspInit+0xe8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d114      	bne.n	80019c8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 80019a4:	f043 0320 	orr.w	r3, r3, #32
 80019a8:	6593      	str	r3, [r2, #88]	; 0x58
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ae:	f003 0320 	and.w	r3, r3, #32
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2037      	movs	r0, #55	; 0x37
 80019bc:	f001 fa65 	bl	8002e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80019c0:	2037      	movs	r0, #55	; 0x37
 80019c2:	f001 fa7c 	bl	8002ebe <HAL_NVIC_EnableIRQ>
}
 80019c6:	e018      	b.n	80019fa <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM8)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_TIM_Base_MspInit+0xec>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d113      	bne.n	80019fa <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 80019d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019dc:	6613      	str	r3, [r2, #96]	; 0x60
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	202c      	movs	r0, #44	; 0x2c
 80019f0:	f001 fa4b 	bl	8002e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 80019f4:	202c      	movs	r0, #44	; 0x2c
 80019f6:	f001 fa62 	bl	8002ebe <HAL_NVIC_EnableIRQ>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40001000 	.word	0x40001000
 8001a0c:	40001400 	.word	0x40001400
 8001a10:	40013400 	.word	0x40013400

08001a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <HAL_UART_MspInit+0x8c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d12f      	bne.n	8001a96 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_UART_MspInit+0x90>)
 8001a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3a:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <HAL_UART_MspInit+0x90>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a40:	6613      	str	r3, [r2, #96]	; 0x60
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_UART_MspInit+0x90>)
 8001a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_UART_MspInit+0x90>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <HAL_UART_MspInit+0x90>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_UART_MspInit+0x90>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a66:	2330      	movs	r3, #48	; 0x30
 8001a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a76:	2307      	movs	r3, #7
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <HAL_UART_MspInit+0x94>)
 8001a82:	f002 f993 	bl	8003dac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2025      	movs	r0, #37	; 0x25
 8001a8c:	f001 f9fd 	bl	8002e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a90:	2025      	movs	r0, #37	; 0x25
 8001a92:	f001 fa14 	bl	8002ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40013800 	.word	0x40013800
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	48000800 	.word	0x48000800

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <MemManage_Handler+0x4>

08001abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af8:	f000 f8d4 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac4_ch1);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <DMA1_Channel4_IRQHandler+0x10>)
 8001b06:	f002 f802 	bl	8003b0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000048c 	.word	0x2000048c

08001b14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <TIM2_IRQHandler+0x10>)
 8001b1a:	f003 fbe5 	bl	80052e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000041c 	.word	0x2000041c

08001b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <USART1_IRQHandler+0x10>)
 8001b2e:	f004 f94b 	bl	8005dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000314 	.word	0x20000314

08001b3c <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <TIM8_UP_IRQHandler+0x10>)
 8001b42:	f003 fbd1 	bl	80052e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000230 	.word	0x20000230

08001b50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b54:	4803      	ldr	r0, [pc, #12]	; (8001b64 <TIM6_DAC_IRQHandler+0x14>)
 8001b56:	f003 fbc7 	bl	80052e8 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001b5a:	4803      	ldr	r0, [pc, #12]	; (8001b68 <TIM6_DAC_IRQHandler+0x18>)
 8001b5c:	f001 fb0e 	bl	800317c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200003d0 	.word	0x200003d0
 8001b68:	2000027c 	.word	0x2000027c

08001b6c <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <TIM7_DAC_IRQHandler+0x14>)
 8001b72:	f003 fbb9 	bl	80052e8 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac4);
 8001b76:	4803      	ldr	r0, [pc, #12]	; (8001b84 <TIM7_DAC_IRQHandler+0x18>)
 8001b78:	f001 fb00 	bl	800317c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	200004ec 	.word	0x200004ec
 8001b84:	200002fc 	.word	0x200002fc

08001b88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <SystemInit+0x20>)
 8001b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <SystemInit+0x20>)
 8001b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bac:	480d      	ldr	r0, [pc, #52]	; (8001be4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb0:	480d      	ldr	r0, [pc, #52]	; (8001be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bb2:	490e      	ldr	r1, [pc, #56]	; (8001bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bb4:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <LoopForever+0xe>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bb8:	e002      	b.n	8001bc0 <LoopCopyDataInit>

08001bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bbe:	3304      	adds	r3, #4

08001bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc4:	d3f9      	bcc.n	8001bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc8:	4c0b      	ldr	r4, [pc, #44]	; (8001bf8 <LoopForever+0x16>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bcc:	e001      	b.n	8001bd2 <LoopFillZerobss>

08001bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd0:	3204      	adds	r2, #4

08001bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd4:	d3fb      	bcc.n	8001bce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bd6:	f7ff ffd7 	bl	8001b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bda:	f005 fc9f 	bl	800751c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bde:	f7ff f885 	bl	8000cec <main>

08001be2 <LoopForever>:

LoopForever:
    b LoopForever
 8001be2:	e7fe      	b.n	8001be2 <LoopForever>
  ldr   r0, =_estack
 8001be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bec:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001bf0:	080076a8 	.word	0x080076a8
  ldr r2, =_sbss
 8001bf4:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001bf8:	20000540 	.word	0x20000540

08001bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC1_2_IRQHandler>

08001bfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f001 f933 	bl	8002e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f000 f80e 	bl	8001c30 <HAL_InitTick>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	71fb      	strb	r3, [r7, #7]
 8001c1e:	e001      	b.n	8001c24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c20:	f7ff fd8c 	bl	800173c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c24:	79fb      	ldrb	r3, [r7, #7]

}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <HAL_InitTick+0x68>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d022      	beq.n	8001c8a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c44:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_InitTick+0x6c>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <HAL_InitTick+0x68>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f001 f93e 	bl	8002eda <HAL_SYSTICK_Config>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10f      	bne.n	8001c84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b0f      	cmp	r3, #15
 8001c68:	d809      	bhi.n	8001c7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c72:	f001 f90a 	bl	8002e8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_InitTick+0x70>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e007      	b.n	8001c8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	73fb      	strb	r3, [r7, #15]
 8001c82:	e004      	b.n	8001c8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e001      	b.n	8001c8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	2000020c 	.word	0x2000020c
 8001c9c:	20000204 	.word	0x20000204
 8001ca0:	20000208 	.word	0x20000208

08001ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x1c>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <HAL_IncTick+0x1c>)
 8001cb4:	6013      	str	r3, [r2, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	2000053c 	.word	0x2000053c
 8001cc4:	2000020c 	.word	0x2000020c

08001cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <HAL_GetTick+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	2000053c 	.word	0x2000053c

08001ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff ffee 	bl	8001cc8 <HAL_GetTick>
 8001cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d004      	beq.n	8001d04 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_Delay+0x40>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d04:	bf00      	nop
 8001d06:	f7ff ffdf 	bl	8001cc8 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d8f7      	bhi.n	8001d06 <HAL_Delay+0x26>
  {
  }
}
 8001d16:	bf00      	nop
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	2000020c 	.word	0x2000020c

08001d24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3360      	adds	r3, #96	; 0x60
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <LL_ADC_SetOffset+0x44>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001dc4:	bf00      	nop
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	03fff000 	.word	0x03fff000

08001dd4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3360      	adds	r3, #96	; 0x60
 8001de2:	461a      	mov	r2, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3360      	adds	r3, #96	; 0x60
 8001e10:	461a      	mov	r2, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e2a:	bf00      	nop
 8001e2c:	371c      	adds	r7, #28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b087      	sub	sp, #28
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3360      	adds	r3, #96	; 0x60
 8001e46:	461a      	mov	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e60:	bf00      	nop
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3360      	adds	r3, #96	; 0x60
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	431a      	orrs	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	615a      	str	r2, [r3, #20]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3330      	adds	r3, #48	; 0x30
 8001ed8:	461a      	mov	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	4413      	add	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	211f      	movs	r1, #31
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	401a      	ands	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	0e9b      	lsrs	r3, r3, #26
 8001f00:	f003 011f 	and.w	r1, r3, #31
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f14:	bf00      	nop
 8001f16:	371c      	adds	r7, #28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3314      	adds	r3, #20
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	0e5b      	lsrs	r3, r3, #25
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	4413      	add	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	0d1b      	lsrs	r3, r3, #20
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	2107      	movs	r1, #7
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	401a      	ands	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	0d1b      	lsrs	r3, r3, #20
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f90:	43db      	mvns	r3, r3
 8001f92:	401a      	ands	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0318 	and.w	r3, r3, #24
 8001f9a:	4908      	ldr	r1, [pc, #32]	; (8001fbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f9c:	40d9      	lsrs	r1, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	400b      	ands	r3, r1
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	0007ffff 	.word	0x0007ffff

08001fc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6093      	str	r3, [r2, #8]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ff8:	d101      	bne.n	8001ffe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800201c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002020:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002048:	d101      	bne.n	800204e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <LL_ADC_IsEnabled+0x18>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <LL_ADC_IsEnabled+0x1a>
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b04      	cmp	r3, #4
 8002094:	d101      	bne.n	800209a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d101      	bne.n	80020c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e1af      	b.n	800244a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d109      	bne.n	800210c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff fb43 	bl	8001784 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff67 	bl	8001fe4 <LL_ADC_IsDeepPowerDownEnabled>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff4d 	bl	8001fc0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff82 	bl	8002034 <LL_ADC_IsInternalRegulatorEnabled>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d115      	bne.n	8002162 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff66 	bl	800200c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002140:	4b9f      	ldr	r3, [pc, #636]	; (80023c0 <HAL_ADC_Init+0x2f0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	4a9f      	ldr	r2, [pc, #636]	; (80023c4 <HAL_ADC_Init+0x2f4>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	3301      	adds	r3, #1
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002154:	e002      	b.n	800215c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3b01      	subs	r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f9      	bne.n	8002156 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff64 	bl	8002034 <LL_ADC_IsInternalRegulatorEnabled>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10d      	bne.n	800218e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002176:	f043 0210 	orr.w	r2, r3, #16
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff75 	bl	8002082 <LL_ADC_REG_IsConversionOngoing>
 8002198:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 8148 	bne.w	8002438 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f040 8144 	bne.w	8002438 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021b8:	f043 0202 	orr.w	r2, r3, #2
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff49 	bl	800205c <LL_ADC_IsEnabled>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d141      	bne.n	8002254 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021d8:	d004      	beq.n	80021e4 <HAL_ADC_Init+0x114>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a7a      	ldr	r2, [pc, #488]	; (80023c8 <HAL_ADC_Init+0x2f8>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d10f      	bne.n	8002204 <HAL_ADC_Init+0x134>
 80021e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021e8:	f7ff ff38 	bl	800205c <LL_ADC_IsEnabled>
 80021ec:	4604      	mov	r4, r0
 80021ee:	4876      	ldr	r0, [pc, #472]	; (80023c8 <HAL_ADC_Init+0x2f8>)
 80021f0:	f7ff ff34 	bl	800205c <LL_ADC_IsEnabled>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4323      	orrs	r3, r4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	e012      	b.n	800222a <HAL_ADC_Init+0x15a>
 8002204:	4871      	ldr	r0, [pc, #452]	; (80023cc <HAL_ADC_Init+0x2fc>)
 8002206:	f7ff ff29 	bl	800205c <LL_ADC_IsEnabled>
 800220a:	4604      	mov	r4, r0
 800220c:	4870      	ldr	r0, [pc, #448]	; (80023d0 <HAL_ADC_Init+0x300>)
 800220e:	f7ff ff25 	bl	800205c <LL_ADC_IsEnabled>
 8002212:	4603      	mov	r3, r0
 8002214:	431c      	orrs	r4, r3
 8002216:	486f      	ldr	r0, [pc, #444]	; (80023d4 <HAL_ADC_Init+0x304>)
 8002218:	f7ff ff20 	bl	800205c <LL_ADC_IsEnabled>
 800221c:	4603      	mov	r3, r0
 800221e:	4323      	orrs	r3, r4
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d012      	beq.n	8002254 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002236:	d004      	beq.n	8002242 <HAL_ADC_Init+0x172>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a62      	ldr	r2, [pc, #392]	; (80023c8 <HAL_ADC_Init+0x2f8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_ADC_Init+0x176>
 8002242:	4a65      	ldr	r2, [pc, #404]	; (80023d8 <HAL_ADC_Init+0x308>)
 8002244:	e000      	b.n	8002248 <HAL_ADC_Init+0x178>
 8002246:	4a65      	ldr	r2, [pc, #404]	; (80023dc <HAL_ADC_Init+0x30c>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4619      	mov	r1, r3
 800224e:	4610      	mov	r0, r2
 8002250:	f7ff fd68 	bl	8001d24 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	7f5b      	ldrb	r3, [r3, #29]
 8002258:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800225e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002264:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800226a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002272:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800227e:	2b01      	cmp	r3, #1
 8002280:	d106      	bne.n	8002290 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	3b01      	subs	r3, #1
 8002288:	045b      	lsls	r3, r3, #17
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d009      	beq.n	80022ac <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	4b4b      	ldr	r3, [pc, #300]	; (80023e0 <HAL_ADC_Init+0x310>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	69b9      	ldr	r1, [r7, #24]
 80022bc:	430b      	orrs	r3, r1
 80022be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fed1 	bl	8002082 <LL_ADC_REG_IsConversionOngoing>
 80022e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fede 	bl	80020a8 <LL_ADC_INJ_IsConversionOngoing>
 80022ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d17f      	bne.n	80023f4 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d17c      	bne.n	80023f4 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022fe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002306:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002316:	f023 0302 	bic.w	r3, r3, #2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	69b9      	ldr	r1, [r7, #24]
 8002320:	430b      	orrs	r3, r1
 8002322:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d017      	beq.n	800235c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800233a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002344:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6911      	ldr	r1, [r2, #16]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	430b      	orrs	r3, r1
 8002356:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800235a:	e013      	b.n	8002384 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800236a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800237c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002380:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800238a:	2b01      	cmp	r3, #1
 800238c:	d12a      	bne.n	80023e4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002398:	f023 0304 	bic.w	r3, r3, #4
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023a4:	4311      	orrs	r1, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023aa:	4311      	orrs	r1, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023b0:	430a      	orrs	r2, r1
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	611a      	str	r2, [r3, #16]
 80023be:	e019      	b.n	80023f4 <HAL_ADC_Init+0x324>
 80023c0:	20000204 	.word	0x20000204
 80023c4:	053e2d63 	.word	0x053e2d63
 80023c8:	50000100 	.word	0x50000100
 80023cc:	50000400 	.word	0x50000400
 80023d0:	50000500 	.word	0x50000500
 80023d4:	50000600 	.word	0x50000600
 80023d8:	50000300 	.word	0x50000300
 80023dc:	50000700 	.word	0x50000700
 80023e0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d10c      	bne.n	8002416 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f023 010f 	bic.w	r1, r3, #15
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	1e5a      	subs	r2, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	631a      	str	r2, [r3, #48]	; 0x30
 8002414:	e007      	b.n	8002426 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 020f 	bic.w	r2, r2, #15
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	65da      	str	r2, [r3, #92]	; 0x5c
 8002436:	e007      	b.n	8002448 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	f043 0210 	orr.w	r2, r3, #16
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002448:	7ffb      	ldrb	r3, [r7, #31]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop

08002454 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b0b6      	sub	sp, #216	; 0xd8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800246e:	2b01      	cmp	r3, #1
 8002470:	d102      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x24>
 8002472:	2302      	movs	r3, #2
 8002474:	f000 bc13 	b.w	8002c9e <HAL_ADC_ConfigChannel+0x84a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fdfc 	bl	8002082 <LL_ADC_REG_IsConversionOngoing>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	f040 83f3 	bne.w	8002c78 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	f7ff fd12 	bl	8001ec8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fdea 	bl	8002082 <LL_ADC_REG_IsConversionOngoing>
 80024ae:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fdf6 	bl	80020a8 <LL_ADC_INJ_IsConversionOngoing>
 80024bc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f040 81d9 	bne.w	800287c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 81d4 	bne.w	800287c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024dc:	d10f      	bne.n	80024fe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7ff fd19 	bl	8001f20 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fcd3 	bl	8001ea2 <LL_ADC_SetSamplingTimeCommonConfig>
 80024fc:	e00e      	b.n	800251c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6819      	ldr	r1, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	461a      	mov	r2, r3
 800250c:	f7ff fd08 	bl	8001f20 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fcc3 	bl	8001ea2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	08db      	lsrs	r3, r3, #3
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b04      	cmp	r3, #4
 800253c:	d022      	beq.n	8002584 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6919      	ldr	r1, [r3, #16]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800254e:	f7ff fc1d 	bl	8001d8c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6919      	ldr	r1, [r3, #16]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	461a      	mov	r2, r3
 8002560:	f7ff fc69 	bl	8001e36 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6919      	ldr	r1, [r3, #16]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	7f1b      	ldrb	r3, [r3, #28]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d102      	bne.n	800257a <HAL_ADC_ConfigChannel+0x126>
 8002574:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002578:	e000      	b.n	800257c <HAL_ADC_ConfigChannel+0x128>
 800257a:	2300      	movs	r3, #0
 800257c:	461a      	mov	r2, r3
 800257e:	f7ff fc75 	bl	8001e6c <LL_ADC_SetOffsetSaturation>
 8002582:	e17b      	b.n	800287c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fc22 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 8002590:	4603      	mov	r3, r0
 8002592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10a      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x15c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fc17 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	0e9b      	lsrs	r3, r3, #26
 80025aa:	f003 021f 	and.w	r2, r3, #31
 80025ae:	e01e      	b.n	80025ee <HAL_ADC_ConfigChannel+0x19a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fc0c 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 80025bc:	4603      	mov	r3, r0
 80025be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80025de:	2320      	movs	r3, #32
 80025e0:	e004      	b.n	80025ec <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80025e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d105      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x1b2>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	0e9b      	lsrs	r3, r3, #26
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	e018      	b.n	8002638 <HAL_ADC_ConfigChannel+0x1e4>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800261a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800261e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002622:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800262a:	2320      	movs	r3, #32
 800262c:	e004      	b.n	8002638 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800262e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002638:	429a      	cmp	r2, r3
 800263a:	d106      	bne.n	800264a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2200      	movs	r2, #0
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fbdb 	bl	8001e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2101      	movs	r1, #1
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fbbf 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 8002656:	4603      	mov	r3, r0
 8002658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10a      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x222>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2101      	movs	r1, #1
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fbb4 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 800266c:	4603      	mov	r3, r0
 800266e:	0e9b      	lsrs	r3, r3, #26
 8002670:	f003 021f 	and.w	r2, r3, #31
 8002674:	e01e      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x260>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2101      	movs	r1, #1
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fba9 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 8002682:	4603      	mov	r3, r0
 8002684:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002694:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002698:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800269c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80026a4:	2320      	movs	r3, #32
 80026a6:	e004      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80026a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d105      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x278>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0e9b      	lsrs	r3, r3, #26
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	e018      	b.n	80026fe <HAL_ADC_ConfigChannel+0x2aa>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80026e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80026e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80026f0:	2320      	movs	r3, #32
 80026f2:	e004      	b.n	80026fe <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80026f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026f8:	fab3 f383 	clz	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026fe:	429a      	cmp	r2, r3
 8002700:	d106      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2200      	movs	r2, #0
 8002708:	2101      	movs	r1, #1
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fb78 	bl	8001e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2102      	movs	r1, #2
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fb5c 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 800271c:	4603      	mov	r3, r0
 800271e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10a      	bne.n	800273c <HAL_ADC_ConfigChannel+0x2e8>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2102      	movs	r1, #2
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fb51 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 8002732:	4603      	mov	r3, r0
 8002734:	0e9b      	lsrs	r3, r3, #26
 8002736:	f003 021f 	and.w	r2, r3, #31
 800273a:	e01e      	b.n	800277a <HAL_ADC_ConfigChannel+0x326>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2102      	movs	r1, #2
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fb46 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 8002748:	4603      	mov	r3, r0
 800274a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800275a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800275e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002762:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800276a:	2320      	movs	r3, #32
 800276c:	e004      	b.n	8002778 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800276e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002782:	2b00      	cmp	r3, #0
 8002784:	d105      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x33e>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	0e9b      	lsrs	r3, r3, #26
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	e016      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x36c>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80027a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80027aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80027b2:	2320      	movs	r3, #32
 80027b4:	e004      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80027b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d106      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2200      	movs	r2, #0
 80027ca:	2102      	movs	r1, #2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fb17 	bl	8001e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2103      	movs	r1, #3
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fafb 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x3aa>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2103      	movs	r1, #3
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff faf0 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	0e9b      	lsrs	r3, r3, #26
 80027f8:	f003 021f 	and.w	r2, r3, #31
 80027fc:	e017      	b.n	800282e <HAL_ADC_ConfigChannel+0x3da>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2103      	movs	r1, #3
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fae5 	bl	8001dd4 <LL_ADC_GetOffsetChannel>
 800280a:	4603      	mov	r3, r0
 800280c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002818:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800281a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002820:	2320      	movs	r3, #32
 8002822:	e003      	b.n	800282c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002836:	2b00      	cmp	r3, #0
 8002838:	d105      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x3f2>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	0e9b      	lsrs	r3, r3, #26
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	e011      	b.n	800286a <HAL_ADC_ConfigChannel+0x416>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002856:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800285e:	2320      	movs	r3, #32
 8002860:	e003      	b.n	800286a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800286a:	429a      	cmp	r2, r3
 800286c:	d106      	bne.n	800287c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2200      	movs	r2, #0
 8002874:	2103      	movs	r1, #3
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fac2 	bl	8001e00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fbeb 	bl	800205c <LL_ADC_IsEnabled>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	f040 813d 	bne.w	8002b08 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6819      	ldr	r1, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	461a      	mov	r2, r3
 800289c:	f7ff fb6c 	bl	8001f78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4aa2      	ldr	r2, [pc, #648]	; (8002b30 <HAL_ADC_ConfigChannel+0x6dc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	f040 812e 	bne.w	8002b08 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x480>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0e9b      	lsrs	r3, r3, #26
 80028c2:	3301      	adds	r3, #1
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	2b09      	cmp	r3, #9
 80028ca:	bf94      	ite	ls
 80028cc:	2301      	movls	r3, #1
 80028ce:	2300      	movhi	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e019      	b.n	8002908 <HAL_ADC_ConfigChannel+0x4b4>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80028e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80028e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80028ec:	2320      	movs	r3, #32
 80028ee:	e003      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80028f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	3301      	adds	r3, #1
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	2b09      	cmp	r3, #9
 8002900:	bf94      	ite	ls
 8002902:	2301      	movls	r3, #1
 8002904:	2300      	movhi	r3, #0
 8002906:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002908:	2b00      	cmp	r3, #0
 800290a:	d079      	beq.n	8002a00 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x4d4>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	0e9b      	lsrs	r3, r3, #26
 800291e:	3301      	adds	r3, #1
 8002920:	069b      	lsls	r3, r3, #26
 8002922:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002926:	e015      	b.n	8002954 <HAL_ADC_ConfigChannel+0x500>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002938:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800293a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002940:	2320      	movs	r3, #32
 8002942:	e003      	b.n	800294c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3301      	adds	r3, #1
 800294e:	069b      	lsls	r3, r3, #26
 8002950:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x520>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	0e9b      	lsrs	r3, r3, #26
 8002966:	3301      	adds	r3, #1
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	e017      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x550>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002984:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800298c:	2320      	movs	r3, #32
 800298e:	e003      	b.n	8002998 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	3301      	adds	r3, #1
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	ea42 0103 	orr.w	r1, r2, r3
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x576>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0e9b      	lsrs	r3, r3, #26
 80029ba:	3301      	adds	r3, #1
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	051b      	lsls	r3, r3, #20
 80029c8:	e018      	b.n	80029fc <HAL_ADC_ConfigChannel+0x5a8>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80029dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80029e2:	2320      	movs	r3, #32
 80029e4:	e003      	b.n	80029ee <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80029e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e8:	fab3 f383 	clz	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	4613      	mov	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4413      	add	r3, r2
 80029fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029fc:	430b      	orrs	r3, r1
 80029fe:	e07e      	b.n	8002afe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d107      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x5c8>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	0e9b      	lsrs	r3, r3, #26
 8002a12:	3301      	adds	r3, #1
 8002a14:	069b      	lsls	r3, r3, #26
 8002a16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a1a:	e015      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x5f4>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e003      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	069b      	lsls	r3, r3, #26
 8002a44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d109      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x614>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	0e9b      	lsrs	r3, r3, #26
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	2101      	movs	r1, #1
 8002a62:	fa01 f303 	lsl.w	r3, r1, r3
 8002a66:	e017      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x644>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	61fb      	str	r3, [r7, #28]
  return result;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002a80:	2320      	movs	r3, #32
 8002a82:	e003      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2101      	movs	r1, #1
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	ea42 0103 	orr.w	r1, r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10d      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x670>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f003 021f 	and.w	r2, r3, #31
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	3b1e      	subs	r3, #30
 8002abc:	051b      	lsls	r3, r3, #20
 8002abe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	e01b      	b.n	8002afc <HAL_ADC_ConfigChannel+0x6a8>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	613b      	str	r3, [r7, #16]
  return result;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002adc:	2320      	movs	r3, #32
 8002ade:	e003      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	f003 021f 	and.w	r2, r3, #31
 8002aee:	4613      	mov	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4413      	add	r3, r2
 8002af4:	3b1e      	subs	r3, #30
 8002af6:	051b      	lsls	r3, r3, #20
 8002af8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002afc:	430b      	orrs	r3, r1
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	6892      	ldr	r2, [r2, #8]
 8002b02:	4619      	mov	r1, r3
 8002b04:	f7ff fa0c 	bl	8001f20 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <HAL_ADC_ConfigChannel+0x6e0>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80be 	beq.w	8002c92 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b1e:	d004      	beq.n	8002b2a <HAL_ADC_ConfigChannel+0x6d6>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <HAL_ADC_ConfigChannel+0x6e4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d10a      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x6ec>
 8002b2a:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <HAL_ADC_ConfigChannel+0x6e8>)
 8002b2c:	e009      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x6ee>
 8002b2e:	bf00      	nop
 8002b30:	407f0000 	.word	0x407f0000
 8002b34:	80080000 	.word	0x80080000
 8002b38:	50000100 	.word	0x50000100
 8002b3c:	50000300 	.word	0x50000300
 8002b40:	4b59      	ldr	r3, [pc, #356]	; (8002ca8 <HAL_ADC_ConfigChannel+0x854>)
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff f914 	bl	8001d70 <LL_ADC_GetCommonPathInternalCh>
 8002b48:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a56      	ldr	r2, [pc, #344]	; (8002cac <HAL_ADC_ConfigChannel+0x858>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d004      	beq.n	8002b60 <HAL_ADC_ConfigChannel+0x70c>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a55      	ldr	r2, [pc, #340]	; (8002cb0 <HAL_ADC_ConfigChannel+0x85c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d13a      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d134      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b74:	d005      	beq.n	8002b82 <HAL_ADC_ConfigChannel+0x72e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a4e      	ldr	r2, [pc, #312]	; (8002cb4 <HAL_ADC_ConfigChannel+0x860>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	f040 8085 	bne.w	8002c8c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b8a:	d004      	beq.n	8002b96 <HAL_ADC_ConfigChannel+0x742>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a49      	ldr	r2, [pc, #292]	; (8002cb8 <HAL_ADC_ConfigChannel+0x864>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d101      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x746>
 8002b96:	4a49      	ldr	r2, [pc, #292]	; (8002cbc <HAL_ADC_ConfigChannel+0x868>)
 8002b98:	e000      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x748>
 8002b9a:	4a43      	ldr	r2, [pc, #268]	; (8002ca8 <HAL_ADC_ConfigChannel+0x854>)
 8002b9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ba0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	f7ff f8cf 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bac:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <HAL_ADC_ConfigChannel+0x86c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	099b      	lsrs	r3, r3, #6
 8002bb2:	4a44      	ldr	r2, [pc, #272]	; (8002cc4 <HAL_ADC_ConfigChannel+0x870>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	099b      	lsrs	r3, r3, #6
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bc6:	e002      	b.n	8002bce <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f9      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bd4:	e05a      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a3b      	ldr	r2, [pc, #236]	; (8002cc8 <HAL_ADC_ConfigChannel+0x874>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d125      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x7d8>
 8002be0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d11f      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a31      	ldr	r2, [pc, #196]	; (8002cb8 <HAL_ADC_ConfigChannel+0x864>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d104      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x7ac>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a34      	ldr	r2, [pc, #208]	; (8002ccc <HAL_ADC_ConfigChannel+0x878>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d047      	beq.n	8002c90 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c08:	d004      	beq.n	8002c14 <HAL_ADC_ConfigChannel+0x7c0>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a2a      	ldr	r2, [pc, #168]	; (8002cb8 <HAL_ADC_ConfigChannel+0x864>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d101      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x7c4>
 8002c14:	4a29      	ldr	r2, [pc, #164]	; (8002cbc <HAL_ADC_ConfigChannel+0x868>)
 8002c16:	e000      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x7c6>
 8002c18:	4a23      	ldr	r2, [pc, #140]	; (8002ca8 <HAL_ADC_ConfigChannel+0x854>)
 8002c1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c22:	4619      	mov	r1, r3
 8002c24:	4610      	mov	r0, r2
 8002c26:	f7ff f890 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c2a:	e031      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <HAL_ADC_ConfigChannel+0x87c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d12d      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d127      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <HAL_ADC_ConfigChannel+0x864>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d022      	beq.n	8002c92 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c54:	d004      	beq.n	8002c60 <HAL_ADC_ConfigChannel+0x80c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a17      	ldr	r2, [pc, #92]	; (8002cb8 <HAL_ADC_ConfigChannel+0x864>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x810>
 8002c60:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <HAL_ADC_ConfigChannel+0x868>)
 8002c62:	e000      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x812>
 8002c64:	4a10      	ldr	r2, [pc, #64]	; (8002ca8 <HAL_ADC_ConfigChannel+0x854>)
 8002c66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4610      	mov	r0, r2
 8002c72:	f7ff f86a 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
 8002c76:	e00c      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	f043 0220 	orr.w	r2, r3, #32
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002c8a:	e002      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c8c:	bf00      	nop
 8002c8e:	e000      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c9a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	37d8      	adds	r7, #216	; 0xd8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	50000700 	.word	0x50000700
 8002cac:	c3210000 	.word	0xc3210000
 8002cb0:	90c00010 	.word	0x90c00010
 8002cb4:	50000600 	.word	0x50000600
 8002cb8:	50000100 	.word	0x50000100
 8002cbc:	50000300 	.word	0x50000300
 8002cc0:	20000204 	.word	0x20000204
 8002cc4:	053e2d63 	.word	0x053e2d63
 8002cc8:	c7520000 	.word	0xc7520000
 8002ccc:	50000500 	.word	0x50000500
 8002cd0:	cb840000 	.word	0xcb840000

08002cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d06:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <__NVIC_SetPriorityGrouping+0x44>)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	60d3      	str	r3, [r2, #12]
}
 8002d0c:	bf00      	nop
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d20:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <__NVIC_GetPriorityGrouping+0x18>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	f003 0307 	and.w	r3, r3, #7
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db0b      	blt.n	8002d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	f003 021f 	and.w	r2, r3, #31
 8002d50:	4907      	ldr	r1, [pc, #28]	; (8002d70 <__NVIC_EnableIRQ+0x38>)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	2001      	movs	r0, #1
 8002d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000e100 	.word	0xe000e100

08002d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	6039      	str	r1, [r7, #0]
 8002d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	db0a      	blt.n	8002d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	490c      	ldr	r1, [pc, #48]	; (8002dc0 <__NVIC_SetPriority+0x4c>)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	0112      	lsls	r2, r2, #4
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	440b      	add	r3, r1
 8002d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d9c:	e00a      	b.n	8002db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	4908      	ldr	r1, [pc, #32]	; (8002dc4 <__NVIC_SetPriority+0x50>)
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	3b04      	subs	r3, #4
 8002dac:	0112      	lsls	r2, r2, #4
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	440b      	add	r3, r1
 8002db2:	761a      	strb	r2, [r3, #24]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000e100 	.word	0xe000e100
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b089      	sub	sp, #36	; 0x24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f1c3 0307 	rsb	r3, r3, #7
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	bf28      	it	cs
 8002de6:	2304      	movcs	r3, #4
 8002de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3304      	adds	r3, #4
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d902      	bls.n	8002df8 <NVIC_EncodePriority+0x30>
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3b03      	subs	r3, #3
 8002df6:	e000      	b.n	8002dfa <NVIC_EncodePriority+0x32>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43da      	mvns	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e10:	f04f 31ff 	mov.w	r1, #4294967295
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1a:	43d9      	mvns	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	4313      	orrs	r3, r2
         );
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3724      	adds	r7, #36	; 0x24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e40:	d301      	bcc.n	8002e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e42:	2301      	movs	r3, #1
 8002e44:	e00f      	b.n	8002e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e46:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <SysTick_Config+0x40>)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e4e:	210f      	movs	r1, #15
 8002e50:	f04f 30ff 	mov.w	r0, #4294967295
 8002e54:	f7ff ff8e 	bl	8002d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <SysTick_Config+0x40>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e5e:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <SysTick_Config+0x40>)
 8002e60:	2207      	movs	r2, #7
 8002e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	e000e010 	.word	0xe000e010

08002e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff ff29 	bl	8002cd4 <__NVIC_SetPriorityGrouping>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e98:	f7ff ff40 	bl	8002d1c <__NVIC_GetPriorityGrouping>
 8002e9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	6978      	ldr	r0, [r7, #20]
 8002ea4:	f7ff ff90 	bl	8002dc8 <NVIC_EncodePriority>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff ff5f 	bl	8002d74 <__NVIC_SetPriority>
}
 8002eb6:	bf00      	nop
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ff33 	bl	8002d38 <__NVIC_EnableIRQ>
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff ffa4 	bl	8002e30 <SysTick_Config>
 8002ee8:	4603      	mov	r3, r0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e014      	b.n	8002f2e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	791b      	ldrb	r3, [r3, #4]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d105      	bne.n	8002f1a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7fe fc73 	bl	8001800 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	795b      	ldrb	r3, [r3, #5]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_DAC_Start+0x16>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e043      	b.n	8002fd4 <HAL_DAC_Start+0x9e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2202      	movs	r2, #2
 8002f56:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6819      	ldr	r1, [r3, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2201      	movs	r2, #1
 8002f66:	409a      	lsls	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002f70:	2001      	movs	r0, #1
 8002f72:	f7fe feb5 	bl	8001ce0 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10f      	bne.n	8002f9c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d11d      	bne.n	8002fc6 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	e014      	b.n	8002fc6 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2102      	movs	r1, #2
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d107      	bne.n	8002fc6 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0202 	orr.w	r2, r2, #2
 8002fc4:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	795b      	ldrb	r3, [r3, #5]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_DAC_Start_DMA+0x22>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e0ae      	b.n	800315c <HAL_DAC_Start_DMA+0x180>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2202      	movs	r2, #2
 8003008:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d12f      	bne.n	8003070 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4a53      	ldr	r2, [pc, #332]	; (8003164 <HAL_DAC_Start_DMA+0x188>)
 8003016:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a52      	ldr	r2, [pc, #328]	; (8003168 <HAL_DAC_Start_DMA+0x18c>)
 800301e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a51      	ldr	r2, [pc, #324]	; (800316c <HAL_DAC_Start_DMA+0x190>)
 8003026:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003036:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	2b08      	cmp	r3, #8
 800303c:	d013      	beq.n	8003066 <HAL_DAC_Start_DMA+0x8a>
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d845      	bhi.n	80030d0 <HAL_DAC_Start_DMA+0xf4>
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_DAC_Start_DMA+0x76>
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	2b04      	cmp	r3, #4
 800304e:	d005      	beq.n	800305c <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003050:	e03e      	b.n	80030d0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3308      	adds	r3, #8
 8003058:	613b      	str	r3, [r7, #16]
        break;
 800305a:	e03c      	b.n	80030d6 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	330c      	adds	r3, #12
 8003062:	613b      	str	r3, [r7, #16]
        break;
 8003064:	e037      	b.n	80030d6 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3310      	adds	r3, #16
 800306c:	613b      	str	r3, [r7, #16]
        break;
 800306e:	e032      	b.n	80030d6 <HAL_DAC_Start_DMA+0xfa>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a3e      	ldr	r2, [pc, #248]	; (8003170 <HAL_DAC_Start_DMA+0x194>)
 8003076:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4a3d      	ldr	r2, [pc, #244]	; (8003174 <HAL_DAC_Start_DMA+0x198>)
 800307e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4a3c      	ldr	r2, [pc, #240]	; (8003178 <HAL_DAC_Start_DMA+0x19c>)
 8003086:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003096:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	2b08      	cmp	r3, #8
 800309c:	d013      	beq.n	80030c6 <HAL_DAC_Start_DMA+0xea>
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d817      	bhi.n	80030d4 <HAL_DAC_Start_DMA+0xf8>
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_DAC_Start_DMA+0xd6>
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d005      	beq.n	80030bc <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80030b0:	e010      	b.n	80030d4 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3314      	adds	r3, #20
 80030b8:	613b      	str	r3, [r7, #16]
        break;
 80030ba:	e00c      	b.n	80030d6 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3318      	adds	r3, #24
 80030c2:	613b      	str	r3, [r7, #16]
        break;
 80030c4:	e007      	b.n	80030d6 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	331c      	adds	r3, #28
 80030cc:	613b      	str	r3, [r7, #16]
        break;
 80030ce:	e002      	b.n	80030d6 <HAL_DAC_Start_DMA+0xfa>
        break;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <HAL_DAC_Start_DMA+0xfa>
        break;
 80030d4:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d111      	bne.n	8003100 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6898      	ldr	r0, [r3, #8]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	f000 fbcf 	bl	8003898 <HAL_DMA_Start_IT>
 80030fa:	4603      	mov	r3, r0
 80030fc:	75fb      	strb	r3, [r7, #23]
 80030fe:	e010      	b.n	8003122 <HAL_DAC_Start_DMA+0x146>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800310e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	68d8      	ldr	r0, [r3, #12]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	f000 fbbd 	bl	8003898 <HAL_DMA_Start_IT>
 800311e:	4603      	mov	r3, r0
 8003120:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10f      	bne.n	800314e <HAL_DAC_Start_DMA+0x172>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2201      	movs	r2, #1
 800313c:	409a      	lsls	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003146:	2001      	movs	r0, #1
 8003148:	f7fe fdca 	bl	8001ce0 <HAL_Delay>
 800314c:	e005      	b.n	800315a <HAL_DAC_Start_DMA+0x17e>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f043 0204 	orr.w	r2, r3, #4
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800315a:	7dfb      	ldrb	r3, [r7, #23]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	08003621 	.word	0x08003621
 8003168:	08003643 	.word	0x08003643
 800316c:	0800365f 	.word	0x0800365f
 8003170:	080036dd 	.word	0x080036dd
 8003174:	080036ff 	.word	0x080036ff
 8003178:	0800371b 	.word	0x0800371b

0800317c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800318e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003192:	d120      	bne.n	80031d6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800319e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a2:	d118      	bne.n	80031d6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2204      	movs	r2, #4
 80031a8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f043 0201 	orr.w	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031ce:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f873 	bl	80032bc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e4:	d120      	bne.n	8003228 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031f4:	d118      	bne.n	8003228 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2204      	movs	r2, #4
 80031fa:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f043 0202 	orr.w	r2, r3, #2
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003210:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003220:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fa50 	bl	80036c8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	3308      	adds	r3, #8
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	e004      	b.n	800326a <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	3314      	adds	r3, #20
 8003268:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	461a      	mov	r2, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	371c      	adds	r7, #28
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	; 0x28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	795b      	ldrb	r3, [r3, #5]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_DAC_ConfigChannel+0x18>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e192      	b.n	800360e <HAL_DAC_ConfigChannel+0x33e>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2202      	movs	r2, #2
 80032f2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d174      	bne.n	80033e6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80032fc:	f7fe fce4 	bl	8001cc8 <HAL_GetTick>
 8003300:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d134      	bne.n	8003372 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003308:	e011      	b.n	800332e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800330a:	f7fe fcdd 	bl	8001cc8 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d90a      	bls.n	800332e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f043 0208 	orr.w	r2, r3, #8
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2203      	movs	r2, #3
 8003328:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e16f      	b.n	800360e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e6      	bne.n	800330a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800333c:	2001      	movs	r0, #1
 800333e:	f7fe fccf 	bl	8001ce0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800334a:	641a      	str	r2, [r3, #64]	; 0x40
 800334c:	e01e      	b.n	800338c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800334e:	f7fe fcbb 	bl	8001cc8 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d90a      	bls.n	8003372 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f043 0208 	orr.w	r2, r3, #8
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2203      	movs	r2, #3
 800336c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e14d      	b.n	800360e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003378:	2b00      	cmp	r3, #0
 800337a:	dbe8      	blt.n	800334e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800337c:	2001      	movs	r0, #1
 800337e:	f7fe fcaf 	bl	8001ce0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800338a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800339c:	fa01 f303 	lsl.w	r3, r1, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	ea02 0103 	and.w	r1, r2, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	409a      	lsls	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	21ff      	movs	r1, #255	; 0xff
 80033c8:	fa01 f303 	lsl.w	r3, r1, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	ea02 0103 	and.w	r1, r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f003 0310 	and.w	r3, r3, #16
 80033dc:	409a      	lsls	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d11d      	bne.n	800342a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	221f      	movs	r2, #31
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003406:	4013      	ands	r3, r2
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341e:	4313      	orrs	r3, r2
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003428:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2207      	movs	r2, #7
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003442:	4013      	ands	r3, r2
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d102      	bne.n	8003454 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800344e:	2300      	movs	r3, #0
 8003450:	623b      	str	r3, [r7, #32]
 8003452:	e00f      	b.n	8003474 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d102      	bne.n	8003462 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800345c:	2301      	movs	r3, #1
 800345e:	623b      	str	r3, [r7, #32]
 8003460:	e008      	b.n	8003474 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d102      	bne.n	8003470 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800346a:	2301      	movs	r3, #1
 800346c:	623b      	str	r3, [r7, #32]
 800346e:	e001      	b.n	8003474 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003470:	2300      	movs	r3, #0
 8003472:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	6a3a      	ldr	r2, [r7, #32]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003496:	4013      	ands	r3, r2
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	791b      	ldrb	r3, [r3, #4]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d102      	bne.n	80034a8 <HAL_DAC_ConfigChannel+0x1d8>
 80034a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034a6:	e000      	b.n	80034aa <HAL_DAC_ConfigChannel+0x1da>
 80034a8:	2300      	movs	r3, #0
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c2:	4013      	ands	r3, r2
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	795b      	ldrb	r3, [r3, #5]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <HAL_DAC_ConfigChannel+0x204>
 80034ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034d2:	e000      	b.n	80034d6 <HAL_DAC_ConfigChannel+0x206>
 80034d4:	2300      	movs	r3, #0
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d114      	bne.n	8003516 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80034ec:	f001 fb62 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 80034f0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	4a48      	ldr	r2, [pc, #288]	; (8003618 <HAL_DAC_ConfigChannel+0x348>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d904      	bls.n	8003504 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
 8003502:	e00f      	b.n	8003524 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	4a45      	ldr	r2, [pc, #276]	; (800361c <HAL_DAC_ConfigChannel+0x34c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d90a      	bls.n	8003522 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
 8003514:	e006      	b.n	8003524 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351c:	4313      	orrs	r3, r2
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
 8003520:	e000      	b.n	8003524 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003522:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f003 0310 	and.w	r3, r3, #16
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	4313      	orrs	r3, r2
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6819      	ldr	r1, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	400a      	ands	r2, r1
 800355a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003576:	4013      	ands	r3, r2
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358e:	4313      	orrs	r3, r2
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003598:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6819      	ldr	r1, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	22c0      	movs	r2, #192	; 0xc0
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43da      	mvns	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	400a      	ands	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	021b      	lsls	r3, r3, #8
 80035ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	ea02 0103 	and.w	r1, r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	409a      	lsls	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3728      	adds	r7, #40	; 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	09896800 	.word	0x09896800
 800361c:	04c4b400 	.word	0x04c4b400

08003620 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f7ff fe26 	bl	8003280 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2201      	movs	r2, #1
 8003638:	711a      	strb	r2, [r3, #4]
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f7ff fe1f 	bl	8003294 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003656:	bf00      	nop
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f043 0204 	orr.w	r2, r3, #4
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f7ff fe15 	bl	80032a8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	711a      	strb	r2, [r3, #4]
}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f7ff ffce 	bl	800368c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	711a      	strb	r2, [r3, #4]
}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f7ff ffc7 	bl	80036a0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f043 0204 	orr.w	r2, r3, #4
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f7ff ffbd 	bl	80036b4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	711a      	strb	r2, [r3, #4]
}
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e08d      	b.n	8003876 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	4b47      	ldr	r3, [pc, #284]	; (8003880 <HAL_DMA_Init+0x138>)
 8003762:	429a      	cmp	r2, r3
 8003764:	d80f      	bhi.n	8003786 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	4b45      	ldr	r3, [pc, #276]	; (8003884 <HAL_DMA_Init+0x13c>)
 800376e:	4413      	add	r3, r2
 8003770:	4a45      	ldr	r2, [pc, #276]	; (8003888 <HAL_DMA_Init+0x140>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	091b      	lsrs	r3, r3, #4
 8003778:	009a      	lsls	r2, r3, #2
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a42      	ldr	r2, [pc, #264]	; (800388c <HAL_DMA_Init+0x144>)
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
 8003784:	e00e      	b.n	80037a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	4b40      	ldr	r3, [pc, #256]	; (8003890 <HAL_DMA_Init+0x148>)
 800378e:	4413      	add	r3, r2
 8003790:	4a3d      	ldr	r2, [pc, #244]	; (8003888 <HAL_DMA_Init+0x140>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	009a      	lsls	r2, r3, #2
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a3c      	ldr	r2, [pc, #240]	; (8003894 <HAL_DMA_Init+0x14c>)
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fa76 	bl	8003ce8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003804:	d102      	bne.n	800380c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003820:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d010      	beq.n	800384c <HAL_DMA_Init+0x104>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b04      	cmp	r3, #4
 8003830:	d80c      	bhi.n	800384c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fa96 	bl	8003d64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	e008      	b.n	800385e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40020407 	.word	0x40020407
 8003884:	bffdfff8 	.word	0xbffdfff8
 8003888:	cccccccd 	.word	0xcccccccd
 800388c:	40020000 	.word	0x40020000
 8003890:	bffdfbf8 	.word	0xbffdfbf8
 8003894:	40020400 	.word	0x40020400

08003898 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_DMA_Start_IT+0x20>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e066      	b.n	8003986 <HAL_DMA_Start_IT+0xee>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d155      	bne.n	8003978 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	68b9      	ldr	r1, [r7, #8]
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f9bb 	bl	8003c6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d008      	beq.n	8003910 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 020e 	orr.w	r2, r2, #14
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e00f      	b.n	8003930 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0204 	bic.w	r2, r2, #4
 800391e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 020a 	orr.w	r2, r2, #10
 800392e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800394c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003964:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0201 	orr.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e005      	b.n	8003984 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003980:	2302      	movs	r3, #2
 8003982:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003984:	7dfb      	ldrb	r3, [r7, #23]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d005      	beq.n	80039b2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2204      	movs	r2, #4
 80039aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	e037      	b.n	8003a22 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 020e 	bic.w	r2, r2, #14
 80039c0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039d0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0201 	bic.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f003 021f 	and.w	r2, r3, #31
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	2101      	movs	r1, #1
 80039f0:	fa01 f202 	lsl.w	r2, r1, r2
 80039f4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039fe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00c      	beq.n	8003a22 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a16:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a20:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d00d      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
 8003a72:	e047      	b.n	8003b04 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 020e 	bic.w	r2, r2, #14
 8003a82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	f003 021f 	and.w	r2, r3, #31
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ac0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00c      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ae2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
    }
  }
  return status;
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2204      	movs	r2, #4
 8003b30:	409a      	lsls	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d026      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x7a>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d021      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d107      	bne.n	8003b62 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0204 	bic.w	r2, r2, #4
 8003b60:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	f003 021f 	and.w	r2, r3, #31
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2104      	movs	r1, #4
 8003b70:	fa01 f202 	lsl.w	r2, r1, r2
 8003b74:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d071      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b86:	e06c      	b.n	8003c62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	2202      	movs	r2, #2
 8003b92:	409a      	lsls	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d02e      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d029      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 020a 	bic.w	r2, r2, #10
 8003bc2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	f003 021f 	and.w	r2, r3, #31
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	2102      	movs	r1, #2
 8003bda:	fa01 f202 	lsl.w	r2, r1, r2
 8003bde:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d038      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003bf8:	e033      	b.n	8003c62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	2208      	movs	r2, #8
 8003c04:	409a      	lsls	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d02a      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d025      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 020e 	bic.w	r2, r2, #14
 8003c26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2c:	f003 021f 	and.w	r2, r3, #31
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	2101      	movs	r1, #1
 8003c36:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d004      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c62:	bf00      	nop
 8003c64:	bf00      	nop
}
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c82:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d004      	beq.n	8003c96 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c94:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	f003 021f 	and.w	r2, r3, #31
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d108      	bne.n	8003ccc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cca:	e007      	b.n	8003cdc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	60da      	str	r2, [r3, #12]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d802      	bhi.n	8003d02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003cfc:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e001      	b.n	8003d06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003d02:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d04:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	3b08      	subs	r3, #8
 8003d12:	4a12      	ldr	r2, [pc, #72]	; (8003d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d20:	089b      	lsrs	r3, r3, #2
 8003d22:	009a      	lsls	r2, r3, #2
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4413      	add	r3, r2
 8003d28:	461a      	mov	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a0b      	ldr	r2, [pc, #44]	; (8003d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d32:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d42:	bf00      	nop
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40020407 	.word	0x40020407
 8003d54:	40020800 	.word	0x40020800
 8003d58:	40020820 	.word	0x40020820
 8003d5c:	cccccccd 	.word	0xcccccccd
 8003d60:	40020880 	.word	0x40020880

08003d64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d86:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	f003 031f 	and.w	r3, r3, #31
 8003d90:	2201      	movs	r2, #1
 8003d92:	409a      	lsls	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	1000823f 	.word	0x1000823f
 8003da8:	40020940 	.word	0x40020940

08003dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003dba:	e15a      	b.n	8004072 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 814c 	beq.w	800406c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d00b      	beq.n	8003df4 <HAL_GPIO_Init+0x48>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d007      	beq.n	8003df4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003de8:	2b11      	cmp	r3, #17
 8003dea:	d003      	beq.n	8003df4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b12      	cmp	r3, #18
 8003df2:	d130      	bne.n	8003e56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	2203      	movs	r2, #3
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4013      	ands	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	f003 0201 	and.w	r2, r3, #1
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	2203      	movs	r2, #3
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43db      	mvns	r3, r3
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_Init+0xea>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b12      	cmp	r3, #18
 8003e94:	d123      	bne.n	8003ede <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	08da      	lsrs	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3208      	adds	r2, #8
 8003e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	220f      	movs	r2, #15
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	08da      	lsrs	r2, r3, #3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3208      	adds	r2, #8
 8003ed8:	6939      	ldr	r1, [r7, #16]
 8003eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	2203      	movs	r2, #3
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f003 0203 	and.w	r2, r3, #3
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 80a6 	beq.w	800406c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f20:	4b5b      	ldr	r3, [pc, #364]	; (8004090 <HAL_GPIO_Init+0x2e4>)
 8003f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f24:	4a5a      	ldr	r2, [pc, #360]	; (8004090 <HAL_GPIO_Init+0x2e4>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6613      	str	r3, [r2, #96]	; 0x60
 8003f2c:	4b58      	ldr	r3, [pc, #352]	; (8004090 <HAL_GPIO_Init+0x2e4>)
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f38:	4a56      	ldr	r2, [pc, #344]	; (8004094 <HAL_GPIO_Init+0x2e8>)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	089b      	lsrs	r3, r3, #2
 8003f3e:	3302      	adds	r3, #2
 8003f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	220f      	movs	r2, #15
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f62:	d01f      	beq.n	8003fa4 <HAL_GPIO_Init+0x1f8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a4c      	ldr	r2, [pc, #304]	; (8004098 <HAL_GPIO_Init+0x2ec>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d019      	beq.n	8003fa0 <HAL_GPIO_Init+0x1f4>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a4b      	ldr	r2, [pc, #300]	; (800409c <HAL_GPIO_Init+0x2f0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d013      	beq.n	8003f9c <HAL_GPIO_Init+0x1f0>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a4a      	ldr	r2, [pc, #296]	; (80040a0 <HAL_GPIO_Init+0x2f4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00d      	beq.n	8003f98 <HAL_GPIO_Init+0x1ec>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a49      	ldr	r2, [pc, #292]	; (80040a4 <HAL_GPIO_Init+0x2f8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d007      	beq.n	8003f94 <HAL_GPIO_Init+0x1e8>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a48      	ldr	r2, [pc, #288]	; (80040a8 <HAL_GPIO_Init+0x2fc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d101      	bne.n	8003f90 <HAL_GPIO_Init+0x1e4>
 8003f8c:	2305      	movs	r3, #5
 8003f8e:	e00a      	b.n	8003fa6 <HAL_GPIO_Init+0x1fa>
 8003f90:	2306      	movs	r3, #6
 8003f92:	e008      	b.n	8003fa6 <HAL_GPIO_Init+0x1fa>
 8003f94:	2304      	movs	r3, #4
 8003f96:	e006      	b.n	8003fa6 <HAL_GPIO_Init+0x1fa>
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e004      	b.n	8003fa6 <HAL_GPIO_Init+0x1fa>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e002      	b.n	8003fa6 <HAL_GPIO_Init+0x1fa>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <HAL_GPIO_Init+0x1fa>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	f002 0203 	and.w	r2, r2, #3
 8003fac:	0092      	lsls	r2, r2, #2
 8003fae:	4093      	lsls	r3, r2
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fb6:	4937      	ldr	r1, [pc, #220]	; (8004094 <HAL_GPIO_Init+0x2e8>)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	089b      	lsrs	r3, r3, #2
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fc4:	4b39      	ldr	r3, [pc, #228]	; (80040ac <HAL_GPIO_Init+0x300>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fe8:	4a30      	ldr	r2, [pc, #192]	; (80040ac <HAL_GPIO_Init+0x300>)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003fee:	4b2f      	ldr	r3, [pc, #188]	; (80040ac <HAL_GPIO_Init+0x300>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004012:	4a26      	ldr	r2, [pc, #152]	; (80040ac <HAL_GPIO_Init+0x300>)
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004018:	4b24      	ldr	r3, [pc, #144]	; (80040ac <HAL_GPIO_Init+0x300>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	43db      	mvns	r3, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800403c:	4a1b      	ldr	r2, [pc, #108]	; (80040ac <HAL_GPIO_Init+0x300>)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <HAL_GPIO_Init+0x300>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	43db      	mvns	r3, r3
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4013      	ands	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004066:	4a11      	ldr	r2, [pc, #68]	; (80040ac <HAL_GPIO_Init+0x300>)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	3301      	adds	r3, #1
 8004070:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	f47f ae9d 	bne.w	8003dbc <HAL_GPIO_Init+0x10>
  }
}
 8004082:	bf00      	nop
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	40021000 	.word	0x40021000
 8004094:	40010000 	.word	0x40010000
 8004098:	48000400 	.word	0x48000400
 800409c:	48000800 	.word	0x48000800
 80040a0:	48000c00 	.word	0x48000c00
 80040a4:	48001000 	.word	0x48001000
 80040a8:	48001400 	.word	0x48001400
 80040ac:	40010400 	.word	0x40010400

080040b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	807b      	strh	r3, [r7, #2]
 80040bc:	4613      	mov	r3, r2
 80040be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040c0:	787b      	ldrb	r3, [r7, #1]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040c6:	887a      	ldrh	r2, [r7, #2]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040cc:	e002      	b.n	80040d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040ce:	887a      	ldrh	r2, [r7, #2]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d141      	bne.n	8004172 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ee:	4b4b      	ldr	r3, [pc, #300]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fa:	d131      	bne.n	8004160 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040fc:	4b47      	ldr	r3, [pc, #284]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004102:	4a46      	ldr	r2, [pc, #280]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004108:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800410c:	4b43      	ldr	r3, [pc, #268]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004114:	4a41      	ldr	r2, [pc, #260]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800411a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800411c:	4b40      	ldr	r3, [pc, #256]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2232      	movs	r2, #50	; 0x32
 8004122:	fb02 f303 	mul.w	r3, r2, r3
 8004126:	4a3f      	ldr	r2, [pc, #252]	; (8004224 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	0c9b      	lsrs	r3, r3, #18
 800412e:	3301      	adds	r3, #1
 8004130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004132:	e002      	b.n	800413a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3b01      	subs	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800413a:	4b38      	ldr	r3, [pc, #224]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004146:	d102      	bne.n	800414e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f2      	bne.n	8004134 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800414e:	4b33      	ldr	r3, [pc, #204]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415a:	d158      	bne.n	800420e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e057      	b.n	8004210 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004160:	4b2e      	ldr	r3, [pc, #184]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004166:	4a2d      	ldr	r2, [pc, #180]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800416c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004170:	e04d      	b.n	800420e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004178:	d141      	bne.n	80041fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800417a:	4b28      	ldr	r3, [pc, #160]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004186:	d131      	bne.n	80041ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004188:	4b24      	ldr	r3, [pc, #144]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800418e:	4a23      	ldr	r2, [pc, #140]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004194:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004198:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041a0:	4a1e      	ldr	r2, [pc, #120]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041a8:	4b1d      	ldr	r3, [pc, #116]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2232      	movs	r2, #50	; 0x32
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
 80041b2:	4a1c      	ldr	r2, [pc, #112]	; (8004224 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041b4:	fba2 2303 	umull	r2, r3, r2, r3
 80041b8:	0c9b      	lsrs	r3, r3, #18
 80041ba:	3301      	adds	r3, #1
 80041bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041be:	e002      	b.n	80041c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041c6:	4b15      	ldr	r3, [pc, #84]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d2:	d102      	bne.n	80041da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f2      	bne.n	80041c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e6:	d112      	bne.n	800420e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e011      	b.n	8004210 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041f2:	4a0a      	ldr	r2, [pc, #40]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041fc:	e007      	b.n	800420e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004206:	4a05      	ldr	r2, [pc, #20]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004208:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800420c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	40007000 	.word	0x40007000
 8004220:	20000204 	.word	0x20000204
 8004224:	431bde83 	.word	0x431bde83

08004228 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a04      	ldr	r2, [pc, #16]	; (8004244 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004236:	6093      	str	r3, [r2, #8]
}
 8004238:	bf00      	nop
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40007000 	.word	0x40007000

08004248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e308      	b.n	800486c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d075      	beq.n	8004352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004266:	4ba3      	ldr	r3, [pc, #652]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004270:	4ba0      	ldr	r3, [pc, #640]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b0c      	cmp	r3, #12
 800427e:	d102      	bne.n	8004286 <HAL_RCC_OscConfig+0x3e>
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d002      	beq.n	800428c <HAL_RCC_OscConfig+0x44>
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b08      	cmp	r3, #8
 800428a:	d10b      	bne.n	80042a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428c:	4b99      	ldr	r3, [pc, #612]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d05b      	beq.n	8004350 <HAL_RCC_OscConfig+0x108>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d157      	bne.n	8004350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e2e3      	b.n	800486c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ac:	d106      	bne.n	80042bc <HAL_RCC_OscConfig+0x74>
 80042ae:	4b91      	ldr	r3, [pc, #580]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a90      	ldr	r2, [pc, #576]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e01d      	b.n	80042f8 <HAL_RCC_OscConfig+0xb0>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCC_OscConfig+0x98>
 80042c6:	4b8b      	ldr	r3, [pc, #556]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a8a      	ldr	r2, [pc, #552]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80042cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	4b88      	ldr	r3, [pc, #544]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a87      	ldr	r2, [pc, #540]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e00b      	b.n	80042f8 <HAL_RCC_OscConfig+0xb0>
 80042e0:	4b84      	ldr	r3, [pc, #528]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a83      	ldr	r2, [pc, #524]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80042e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	4b81      	ldr	r3, [pc, #516]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a80      	ldr	r2, [pc, #512]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80042f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d013      	beq.n	8004328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fd fce2 	bl	8001cc8 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004308:	f7fd fcde 	bl	8001cc8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b64      	cmp	r3, #100	; 0x64
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e2a8      	b.n	800486c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800431a:	4b76      	ldr	r3, [pc, #472]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0xc0>
 8004326:	e014      	b.n	8004352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fd fcce 	bl	8001cc8 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004330:	f7fd fcca 	bl	8001cc8 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	; 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e294      	b.n	800486c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004342:	4b6c      	ldr	r3, [pc, #432]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0xe8>
 800434e:	e000      	b.n	8004352 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d075      	beq.n	800444a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800435e:	4b65      	ldr	r3, [pc, #404]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004368:	4b62      	ldr	r3, [pc, #392]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b0c      	cmp	r3, #12
 8004376:	d102      	bne.n	800437e <HAL_RCC_OscConfig+0x136>
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d002      	beq.n	8004384 <HAL_RCC_OscConfig+0x13c>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b04      	cmp	r3, #4
 8004382:	d11f      	bne.n	80043c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004384:	4b5b      	ldr	r3, [pc, #364]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_OscConfig+0x154>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e267      	b.n	800486c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439c:	4b55      	ldr	r3, [pc, #340]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	061b      	lsls	r3, r3, #24
 80043aa:	4952      	ldr	r1, [pc, #328]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043b0:	4b51      	ldr	r3, [pc, #324]	; (80044f8 <HAL_RCC_OscConfig+0x2b0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fd fc3b 	bl	8001c30 <HAL_InitTick>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d043      	beq.n	8004448 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e253      	b.n	800486c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d023      	beq.n	8004414 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043cc:	4b49      	ldr	r3, [pc, #292]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a48      	ldr	r2, [pc, #288]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80043d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fd fc76 	bl	8001cc8 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e0:	f7fd fc72 	bl	8001cc8 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e23c      	b.n	800486c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043f2:	4b40      	ldr	r3, [pc, #256]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fe:	4b3d      	ldr	r3, [pc, #244]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	061b      	lsls	r3, r3, #24
 800440c:	4939      	ldr	r1, [pc, #228]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 800440e:	4313      	orrs	r3, r2
 8004410:	604b      	str	r3, [r1, #4]
 8004412:	e01a      	b.n	800444a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004414:	4b37      	ldr	r3, [pc, #220]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a36      	ldr	r2, [pc, #216]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 800441a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800441e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fd fc52 	bl	8001cc8 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004428:	f7fd fc4e 	bl	8001cc8 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e218      	b.n	800486c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800443a:	4b2e      	ldr	r3, [pc, #184]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x1e0>
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004448:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d03c      	beq.n	80044d0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01c      	beq.n	8004498 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800445e:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 8004460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004464:	4a23      	ldr	r2, [pc, #140]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446e:	f7fd fc2b 	bl	8001cc8 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004476:	f7fd fc27 	bl	8001cc8 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e1f1      	b.n	800486c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004488:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 800448a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0ef      	beq.n	8004476 <HAL_RCC_OscConfig+0x22e>
 8004496:	e01b      	b.n	80044d0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004498:	4b16      	ldr	r3, [pc, #88]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 800449a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800449e:	4a15      	ldr	r2, [pc, #84]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	f023 0301 	bic.w	r3, r3, #1
 80044a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a8:	f7fd fc0e 	bl	8001cc8 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b0:	f7fd fc0a 	bl	8001cc8 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e1d4      	b.n	800486c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044c2:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1ef      	bne.n	80044b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80ab 	beq.w	8004634 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044de:	2300      	movs	r3, #0
 80044e0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044e2:	4b04      	ldr	r3, [pc, #16]	; (80044f4 <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_RCC_OscConfig+0x2b4>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e005      	b.n	80044fe <HAL_RCC_OscConfig+0x2b6>
 80044f2:	bf00      	nop
 80044f4:	40021000 	.word	0x40021000
 80044f8:	20000208 	.word	0x20000208
 80044fc:	2300      	movs	r3, #0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00d      	beq.n	800451e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004502:	4baf      	ldr	r3, [pc, #700]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004506:	4aae      	ldr	r2, [pc, #696]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800450c:	6593      	str	r3, [r2, #88]	; 0x58
 800450e:	4bac      	ldr	r3, [pc, #688]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800451a:	2301      	movs	r3, #1
 800451c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800451e:	4ba9      	ldr	r3, [pc, #676]	; (80047c4 <HAL_RCC_OscConfig+0x57c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004526:	2b00      	cmp	r3, #0
 8004528:	d118      	bne.n	800455c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800452a:	4ba6      	ldr	r3, [pc, #664]	; (80047c4 <HAL_RCC_OscConfig+0x57c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4aa5      	ldr	r2, [pc, #660]	; (80047c4 <HAL_RCC_OscConfig+0x57c>)
 8004530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004536:	f7fd fbc7 	bl	8001cc8 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453e:	f7fd fbc3 	bl	8001cc8 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e18d      	b.n	800486c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004550:	4b9c      	ldr	r3, [pc, #624]	; (80047c4 <HAL_RCC_OscConfig+0x57c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d108      	bne.n	8004576 <HAL_RCC_OscConfig+0x32e>
 8004564:	4b96      	ldr	r3, [pc, #600]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456a:	4a95      	ldr	r2, [pc, #596]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004574:	e024      	b.n	80045c0 <HAL_RCC_OscConfig+0x378>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b05      	cmp	r3, #5
 800457c:	d110      	bne.n	80045a0 <HAL_RCC_OscConfig+0x358>
 800457e:	4b90      	ldr	r3, [pc, #576]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	4a8e      	ldr	r2, [pc, #568]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004586:	f043 0304 	orr.w	r3, r3, #4
 800458a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800458e:	4b8c      	ldr	r3, [pc, #560]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004594:	4a8a      	ldr	r2, [pc, #552]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800459e:	e00f      	b.n	80045c0 <HAL_RCC_OscConfig+0x378>
 80045a0:	4b87      	ldr	r3, [pc, #540]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80045a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a6:	4a86      	ldr	r2, [pc, #536]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045b0:	4b83      	ldr	r3, [pc, #524]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b6:	4a82      	ldr	r2, [pc, #520]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80045b8:	f023 0304 	bic.w	r3, r3, #4
 80045bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d016      	beq.n	80045f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c8:	f7fd fb7e 	bl	8001cc8 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ce:	e00a      	b.n	80045e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d0:	f7fd fb7a 	bl	8001cc8 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	f241 3288 	movw	r2, #5000	; 0x1388
 80045de:	4293      	cmp	r3, r2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e142      	b.n	800486c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e6:	4b76      	ldr	r3, [pc, #472]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80045e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0ed      	beq.n	80045d0 <HAL_RCC_OscConfig+0x388>
 80045f4:	e015      	b.n	8004622 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f6:	f7fd fb67 	bl	8001cc8 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045fc:	e00a      	b.n	8004614 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fd fb63 	bl	8001cc8 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	; 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e12b      	b.n	800486c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004614:	4b6a      	ldr	r3, [pc, #424]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1ed      	bne.n	80045fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004622:	7ffb      	ldrb	r3, [r7, #31]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d105      	bne.n	8004634 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004628:	4b65      	ldr	r3, [pc, #404]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800462a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462c:	4a64      	ldr	r2, [pc, #400]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800462e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004632:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d03c      	beq.n	80046ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01c      	beq.n	8004682 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004648:	4b5d      	ldr	r3, [pc, #372]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800464a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800464e:	4a5c      	ldr	r2, [pc, #368]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004658:	f7fd fb36 	bl	8001cc8 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004660:	f7fd fb32 	bl	8001cc8 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e0fc      	b.n	800486c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004672:	4b53      	ldr	r3, [pc, #332]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004674:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0ef      	beq.n	8004660 <HAL_RCC_OscConfig+0x418>
 8004680:	e01b      	b.n	80046ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004682:	4b4f      	ldr	r3, [pc, #316]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004684:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004688:	4a4d      	ldr	r2, [pc, #308]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004692:	f7fd fb19 	bl	8001cc8 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800469a:	f7fd fb15 	bl	8001cc8 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e0df      	b.n	800486c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046ac:	4b44      	ldr	r3, [pc, #272]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80046ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1ef      	bne.n	800469a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 80d3 	beq.w	800486a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046c4:	4b3e      	ldr	r3, [pc, #248]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 030c 	and.w	r3, r3, #12
 80046cc:	2b0c      	cmp	r3, #12
 80046ce:	f000 808d 	beq.w	80047ec <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d15a      	bne.n	8004790 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046da:	4b39      	ldr	r3, [pc, #228]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a38      	ldr	r2, [pc, #224]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80046e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e6:	f7fd faef 	bl	8001cc8 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ee:	f7fd faeb 	bl	8001cc8 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e0b5      	b.n	800486c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004700:	4b2f      	ldr	r3, [pc, #188]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1f0      	bne.n	80046ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800470c:	4b2c      	ldr	r3, [pc, #176]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	4b2d      	ldr	r3, [pc, #180]	; (80047c8 <HAL_RCC_OscConfig+0x580>)
 8004712:	4013      	ands	r3, r2
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6a11      	ldr	r1, [r2, #32]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800471c:	3a01      	subs	r2, #1
 800471e:	0112      	lsls	r2, r2, #4
 8004720:	4311      	orrs	r1, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004726:	0212      	lsls	r2, r2, #8
 8004728:	4311      	orrs	r1, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800472e:	0852      	lsrs	r2, r2, #1
 8004730:	3a01      	subs	r2, #1
 8004732:	0552      	lsls	r2, r2, #21
 8004734:	4311      	orrs	r1, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800473a:	0852      	lsrs	r2, r2, #1
 800473c:	3a01      	subs	r2, #1
 800473e:	0652      	lsls	r2, r2, #25
 8004740:	4311      	orrs	r1, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004746:	06d2      	lsls	r2, r2, #27
 8004748:	430a      	orrs	r2, r1
 800474a:	491d      	ldr	r1, [pc, #116]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800474c:	4313      	orrs	r3, r2
 800474e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004750:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1a      	ldr	r2, [pc, #104]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800475a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800475c:	4b18      	ldr	r3, [pc, #96]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	4a17      	ldr	r2, [pc, #92]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004766:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004768:	f7fd faae 	bl	8001cc8 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004770:	f7fd faaa 	bl	8001cc8 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e074      	b.n	800486c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004782:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0f0      	beq.n	8004770 <HAL_RCC_OscConfig+0x528>
 800478e:	e06c      	b.n	800486a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800479a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800479c:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a07      	ldr	r2, [pc, #28]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80047a2:	f023 0303 	bic.w	r3, r3, #3
 80047a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4a04      	ldr	r2, [pc, #16]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80047ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fd fa86 	bl	8001cc8 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047be:	e00e      	b.n	80047de <HAL_RCC_OscConfig+0x596>
 80047c0:	40021000 	.word	0x40021000
 80047c4:	40007000 	.word	0x40007000
 80047c8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047cc:	f7fd fa7c 	bl	8001cc8 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e046      	b.n	800486c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047de:	4b25      	ldr	r3, [pc, #148]	; (8004874 <HAL_RCC_OscConfig+0x62c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x584>
 80047ea:	e03e      	b.n	800486a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e039      	b.n	800486c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80047f8:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <HAL_RCC_OscConfig+0x62c>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f003 0203 	and.w	r2, r3, #3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	429a      	cmp	r2, r3
 800480a:	d12c      	bne.n	8004866 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	3b01      	subs	r3, #1
 8004818:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481a:	429a      	cmp	r2, r3
 800481c:	d123      	bne.n	8004866 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d11b      	bne.n	8004866 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d113      	bne.n	8004866 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004848:	085b      	lsrs	r3, r3, #1
 800484a:	3b01      	subs	r3, #1
 800484c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800484e:	429a      	cmp	r2, r3
 8004850:	d109      	bne.n	8004866 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485c:	085b      	lsrs	r3, r3, #1
 800485e:	3b01      	subs	r3, #1
 8004860:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004862:	429a      	cmp	r2, r3
 8004864:	d001      	beq.n	800486a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3720      	adds	r7, #32
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40021000 	.word	0x40021000

08004878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e11e      	b.n	8004ace <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004890:	4b91      	ldr	r3, [pc, #580]	; (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d910      	bls.n	80048c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489e:	4b8e      	ldr	r3, [pc, #568]	; (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f023 020f 	bic.w	r2, r3, #15
 80048a6:	498c      	ldr	r1, [pc, #560]	; (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b8a      	ldr	r3, [pc, #552]	; (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e106      	b.n	8004ace <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d073      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d129      	bne.n	8004928 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048d4:	4b81      	ldr	r3, [pc, #516]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0f4      	b.n	8004ace <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80048e4:	f000 f99e 	bl	8004c24 <RCC_GetSysClockFreqFromPLLSource>
 80048e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	4a7c      	ldr	r2, [pc, #496]	; (8004ae0 <HAL_RCC_ClockConfig+0x268>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d93f      	bls.n	8004972 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048f2:	4b7a      	ldr	r3, [pc, #488]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004906:	2b00      	cmp	r3, #0
 8004908:	d033      	beq.n	8004972 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800490e:	2b00      	cmp	r3, #0
 8004910:	d12f      	bne.n	8004972 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004912:	4b72      	ldr	r3, [pc, #456]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800491a:	4a70      	ldr	r2, [pc, #448]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 800491c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004920:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004922:	2380      	movs	r3, #128	; 0x80
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	e024      	b.n	8004972 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b02      	cmp	r3, #2
 800492e:	d107      	bne.n	8004940 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004930:	4b6a      	ldr	r3, [pc, #424]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d109      	bne.n	8004950 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e0c6      	b.n	8004ace <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004940:	4b66      	ldr	r3, [pc, #408]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0be      	b.n	8004ace <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004950:	f000 f8ce 	bl	8004af0 <HAL_RCC_GetSysClockFreq>
 8004954:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	4a61      	ldr	r2, [pc, #388]	; (8004ae0 <HAL_RCC_ClockConfig+0x268>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d909      	bls.n	8004972 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800495e:	4b5f      	ldr	r3, [pc, #380]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004966:	4a5d      	ldr	r2, [pc, #372]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 8004968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800496e:	2380      	movs	r3, #128	; 0x80
 8004970:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004972:	4b5a      	ldr	r3, [pc, #360]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f023 0203 	bic.w	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4957      	ldr	r1, [pc, #348]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 8004980:	4313      	orrs	r3, r2
 8004982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004984:	f7fd f9a0 	bl	8001cc8 <HAL_GetTick>
 8004988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800498c:	f7fd f99c 	bl	8001cc8 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f241 3288 	movw	r2, #5000	; 0x1388
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e095      	b.n	8004ace <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a2:	4b4e      	ldr	r3, [pc, #312]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 020c 	and.w	r2, r3, #12
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d1eb      	bne.n	800498c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d023      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049cc:	4b43      	ldr	r3, [pc, #268]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	4a42      	ldr	r2, [pc, #264]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 80049d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80049e4:	4b3d      	ldr	r3, [pc, #244]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80049ec:	4a3b      	ldr	r2, [pc, #236]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 80049ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f4:	4b39      	ldr	r3, [pc, #228]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	4936      	ldr	r1, [pc, #216]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2b80      	cmp	r3, #128	; 0x80
 8004a0c:	d105      	bne.n	8004a1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a0e:	4b33      	ldr	r3, [pc, #204]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	4a32      	ldr	r2, [pc, #200]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 8004a14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a1a:	4b2f      	ldr	r3, [pc, #188]	; (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d21d      	bcs.n	8004a64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a28:	4b2b      	ldr	r3, [pc, #172]	; (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f023 020f 	bic.w	r2, r3, #15
 8004a30:	4929      	ldr	r1, [pc, #164]	; (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a38:	f7fd f946 	bl	8001cc8 <HAL_GetTick>
 8004a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	e00a      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a40:	f7fd f942 	bl	8001cc8 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e03b      	b.n	8004ace <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a56:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d1ed      	bne.n	8004a40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a70:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4917      	ldr	r1, [pc, #92]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	490f      	ldr	r1, [pc, #60]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aa2:	f000 f825 	bl	8004af0 <HAL_RCC_GetSysClockFreq>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <HAL_RCC_ClockConfig+0x264>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	490c      	ldr	r1, [pc, #48]	; (8004ae4 <HAL_RCC_ClockConfig+0x26c>)
 8004ab4:	5ccb      	ldrb	r3, [r1, r3]
 8004ab6:	f003 031f 	and.w	r3, r3, #31
 8004aba:	fa22 f303 	lsr.w	r3, r2, r3
 8004abe:	4a0a      	ldr	r2, [pc, #40]	; (8004ae8 <HAL_RCC_ClockConfig+0x270>)
 8004ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ac2:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <HAL_RCC_ClockConfig+0x274>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fd f8b2 	bl	8001c30 <HAL_InitTick>
 8004acc:	4603      	mov	r3, r0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40022000 	.word	0x40022000
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	04c4b400 	.word	0x04c4b400
 8004ae4:	08007658 	.word	0x08007658
 8004ae8:	20000204 	.word	0x20000204
 8004aec:	20000208 	.word	0x20000208

08004af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004af6:	4b2c      	ldr	r3, [pc, #176]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d102      	bne.n	8004b08 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b02:	4b2a      	ldr	r3, [pc, #168]	; (8004bac <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	e047      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b08:	4b27      	ldr	r3, [pc, #156]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 030c 	and.w	r3, r3, #12
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d102      	bne.n	8004b1a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b14:	4b26      	ldr	r3, [pc, #152]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	e03e      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b1a:	4b23      	ldr	r3, [pc, #140]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
 8004b22:	2b0c      	cmp	r3, #12
 8004b24:	d136      	bne.n	8004b94 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b26:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b30:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d10c      	bne.n	8004b5e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b44:	4a1a      	ldr	r2, [pc, #104]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4c:	4a16      	ldr	r2, [pc, #88]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b4e:	68d2      	ldr	r2, [r2, #12]
 8004b50:	0a12      	lsrs	r2, r2, #8
 8004b52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b56:	fb02 f303 	mul.w	r3, r2, r3
 8004b5a:	617b      	str	r3, [r7, #20]
      break;
 8004b5c:	e00c      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b5e:	4a13      	ldr	r2, [pc, #76]	; (8004bac <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b66:	4a10      	ldr	r2, [pc, #64]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b68:	68d2      	ldr	r2, [r2, #12]
 8004b6a:	0a12      	lsrs	r2, r2, #8
 8004b6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b70:	fb02 f303 	mul.w	r3, r2, r3
 8004b74:	617b      	str	r3, [r7, #20]
      break;
 8004b76:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b78:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	0e5b      	lsrs	r3, r3, #25
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	3301      	adds	r3, #1
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	e001      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b98:	693b      	ldr	r3, [r7, #16]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	00f42400 	.word	0x00f42400
 8004bb0:	016e3600 	.word	0x016e3600

08004bb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb8:	4b03      	ldr	r3, [pc, #12]	; (8004bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bba:	681b      	ldr	r3, [r3, #0]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	20000204 	.word	0x20000204

08004bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bd0:	f7ff fff0 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	0a1b      	lsrs	r3, r3, #8
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	4904      	ldr	r1, [pc, #16]	; (8004bf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004be2:	5ccb      	ldrb	r3, [r1, r3]
 8004be4:	f003 031f 	and.w	r3, r3, #31
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	08007668 	.word	0x08007668

08004bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bfc:	f7ff ffda 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 8004c00:	4602      	mov	r2, r0
 8004c02:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	0adb      	lsrs	r3, r3, #11
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	4904      	ldr	r1, [pc, #16]	; (8004c20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c0e:	5ccb      	ldrb	r3, [r1, r3]
 8004c10:	f003 031f 	and.w	r3, r3, #31
 8004c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	08007668 	.word	0x08007668

08004c24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c34:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	091b      	lsrs	r3, r3, #4
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	3301      	adds	r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d10c      	bne.n	8004c62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c48:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c50:	4a14      	ldr	r2, [pc, #80]	; (8004ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c52:	68d2      	ldr	r2, [r2, #12]
 8004c54:	0a12      	lsrs	r2, r2, #8
 8004c56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	617b      	str	r3, [r7, #20]
    break;
 8004c60:	e00c      	b.n	8004c7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c62:	4a12      	ldr	r2, [pc, #72]	; (8004cac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c6c:	68d2      	ldr	r2, [r2, #12]
 8004c6e:	0a12      	lsrs	r2, r2, #8
 8004c70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c74:	fb02 f303 	mul.w	r3, r2, r3
 8004c78:	617b      	str	r3, [r7, #20]
    break;
 8004c7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c7c:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	0e5b      	lsrs	r3, r3, #25
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	3301      	adds	r3, #1
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c96:	687b      	ldr	r3, [r7, #4]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	016e3600 	.word	0x016e3600
 8004cac:	00f42400 	.word	0x00f42400

08004cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cb8:	2300      	movs	r3, #0
 8004cba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8098 	beq.w	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cd2:	4b43      	ldr	r3, [pc, #268]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10d      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cde:	4b40      	ldr	r3, [pc, #256]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce2:	4a3f      	ldr	r2, [pc, #252]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8004cea:	4b3d      	ldr	r3, [pc, #244]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cfa:	4b3a      	ldr	r3, [pc, #232]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a39      	ldr	r2, [pc, #228]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d06:	f7fc ffdf 	bl	8001cc8 <HAL_GetTick>
 8004d0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d0c:	e009      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0e:	f7fc ffdb 	bl	8001cc8 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d902      	bls.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	74fb      	strb	r3, [r7, #19]
        break;
 8004d20:	e005      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d22:	4b30      	ldr	r3, [pc, #192]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0ef      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d2e:	7cfb      	ldrb	r3, [r7, #19]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d159      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d34:	4b2a      	ldr	r3, [pc, #168]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d01e      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d019      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d50:	4b23      	ldr	r3, [pc, #140]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d5c:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	4a1f      	ldr	r2, [pc, #124]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d6c:	4b1c      	ldr	r3, [pc, #112]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d72:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d7c:	4a18      	ldr	r2, [pc, #96]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d016      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8e:	f7fc ff9b 	bl	8001cc8 <HAL_GetTick>
 8004d92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d94:	e00b      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d96:	f7fc ff97 	bl	8001cc8 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d902      	bls.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	74fb      	strb	r3, [r7, #19]
            break;
 8004dac:	e006      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dae:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0ec      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004dbc:	7cfb      	ldrb	r3, [r7, #19]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10b      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dc2:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd0:	4903      	ldr	r1, [pc, #12]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dd8:	e008      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dda:	7cfb      	ldrb	r3, [r7, #19]
 8004ddc:	74bb      	strb	r3, [r7, #18]
 8004dde:	e005      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004de0:	40021000 	.word	0x40021000
 8004de4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de8:	7cfb      	ldrb	r3, [r7, #19]
 8004dea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dec:	7c7b      	ldrb	r3, [r7, #17]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d105      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df2:	4baf      	ldr	r3, [pc, #700]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df6:	4aae      	ldr	r2, [pc, #696]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e0a:	4ba9      	ldr	r3, [pc, #676]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e10:	f023 0203 	bic.w	r2, r3, #3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	49a5      	ldr	r1, [pc, #660]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e2c:	4ba0      	ldr	r3, [pc, #640]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e32:	f023 020c 	bic.w	r2, r3, #12
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	499d      	ldr	r1, [pc, #628]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e4e:	4b98      	ldr	r3, [pc, #608]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4994      	ldr	r1, [pc, #592]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e70:	4b8f      	ldr	r3, [pc, #572]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	498c      	ldr	r1, [pc, #560]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e92:	4b87      	ldr	r3, [pc, #540]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	4983      	ldr	r1, [pc, #524]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0320 	and.w	r3, r3, #32
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004eb4:	4b7e      	ldr	r3, [pc, #504]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	497b      	ldr	r1, [pc, #492]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ed6:	4b76      	ldr	r3, [pc, #472]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004edc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	4972      	ldr	r1, [pc, #456]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ef8:	4b6d      	ldr	r3, [pc, #436]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	496a      	ldr	r1, [pc, #424]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f1a:	4b65      	ldr	r3, [pc, #404]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	4961      	ldr	r1, [pc, #388]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f3c:	4b5c      	ldr	r3, [pc, #368]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f42:	f023 0203 	bic.w	r2, r3, #3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	4959      	ldr	r1, [pc, #356]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f5e:	4b54      	ldr	r3, [pc, #336]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	4950      	ldr	r1, [pc, #320]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d015      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f80:	4b4b      	ldr	r3, [pc, #300]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	4948      	ldr	r1, [pc, #288]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9e:	d105      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa0:	4b43      	ldr	r3, [pc, #268]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	4a42      	ldr	r2, [pc, #264]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004faa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d015      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fb8:	4b3d      	ldr	r3, [pc, #244]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc6:	493a      	ldr	r1, [pc, #232]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd6:	d105      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fd8:	4b35      	ldr	r3, [pc, #212]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	4a34      	ldr	r2, [pc, #208]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fe2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d015      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ff0:	4b2f      	ldr	r3, [pc, #188]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	492c      	ldr	r1, [pc, #176]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800500e:	d105      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005010:	4b27      	ldr	r3, [pc, #156]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	4a26      	ldr	r2, [pc, #152]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800501a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d015      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005028:	4b21      	ldr	r3, [pc, #132]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	491e      	ldr	r1, [pc, #120]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005046:	d105      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005048:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800504e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005052:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d015      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005060:	4b13      	ldr	r3, [pc, #76]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005066:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	4910      	ldr	r1, [pc, #64]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800507e:	d105      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	4a0a      	ldr	r2, [pc, #40]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800508a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d018      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005098:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a6:	4902      	ldr	r1, [pc, #8]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050ae:	e001      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80050b0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050bc:	d105      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050be:	4b21      	ldr	r3, [pc, #132]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	4a20      	ldr	r2, [pc, #128]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80050c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d015      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80050d6:	4b1b      	ldr	r3, [pc, #108]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80050d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050dc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e4:	4917      	ldr	r1, [pc, #92]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f4:	d105      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050f6:	4b13      	ldr	r3, [pc, #76]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	4a12      	ldr	r2, [pc, #72]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80050fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005100:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d015      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800510e:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005110:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511c:	4909      	ldr	r1, [pc, #36]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005128:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800512c:	d105      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800512e:	4b05      	ldr	r3, [pc, #20]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	4a04      	ldr	r2, [pc, #16]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005138:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800513a:	7cbb      	ldrb	r3, [r7, #18]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40021000 	.word	0x40021000

08005148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e049      	b.n	80051ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fc fbd8 	bl	8001924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3304      	adds	r3, #4
 8005184:	4619      	mov	r1, r3
 8005186:	4610      	mov	r0, r2
 8005188:	f000 fb68 	bl	800585c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b01      	cmp	r3, #1
 800520a:	d001      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e054      	b.n	80052ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0201 	orr.w	r2, r2, #1
 8005226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a26      	ldr	r2, [pc, #152]	; (80052c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d022      	beq.n	8005278 <HAL_TIM_Base_Start_IT+0x80>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523a:	d01d      	beq.n	8005278 <HAL_TIM_Base_Start_IT+0x80>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a22      	ldr	r2, [pc, #136]	; (80052cc <HAL_TIM_Base_Start_IT+0xd4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d018      	beq.n	8005278 <HAL_TIM_Base_Start_IT+0x80>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a21      	ldr	r2, [pc, #132]	; (80052d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d013      	beq.n	8005278 <HAL_TIM_Base_Start_IT+0x80>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1f      	ldr	r2, [pc, #124]	; (80052d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00e      	beq.n	8005278 <HAL_TIM_Base_Start_IT+0x80>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a1e      	ldr	r2, [pc, #120]	; (80052d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d009      	beq.n	8005278 <HAL_TIM_Base_Start_IT+0x80>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <HAL_TIM_Base_Start_IT+0xe4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d004      	beq.n	8005278 <HAL_TIM_Base_Start_IT+0x80>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1b      	ldr	r2, [pc, #108]	; (80052e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d115      	bne.n	80052a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	4b19      	ldr	r3, [pc, #100]	; (80052e4 <HAL_TIM_Base_Start_IT+0xec>)
 8005280:	4013      	ands	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b06      	cmp	r3, #6
 8005288:	d015      	beq.n	80052b6 <HAL_TIM_Base_Start_IT+0xbe>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005290:	d011      	beq.n	80052b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0201 	orr.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a2:	e008      	b.n	80052b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	e000      	b.n	80052b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40012c00 	.word	0x40012c00
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40000c00 	.word	0x40000c00
 80052d8:	40013400 	.word	0x40013400
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40015000 	.word	0x40015000
 80052e4:	00010007 	.word	0x00010007

080052e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d122      	bne.n	8005344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b02      	cmp	r3, #2
 800530a:	d11b      	bne.n	8005344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0202 	mvn.w	r2, #2
 8005314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa78 	bl	8005820 <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fa6a 	bl	800580c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fa7b 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b04      	cmp	r3, #4
 8005350:	d122      	bne.n	8005398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b04      	cmp	r3, #4
 800535e:	d11b      	bne.n	8005398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0204 	mvn.w	r2, #4
 8005368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2202      	movs	r2, #2
 800536e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fa4e 	bl	8005820 <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fa40 	bl	800580c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fa51 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d122      	bne.n	80053ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d11b      	bne.n	80053ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0208 	mvn.w	r2, #8
 80053bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2204      	movs	r2, #4
 80053c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa24 	bl	8005820 <HAL_TIM_IC_CaptureCallback>
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fa16 	bl	800580c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fa27 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b10      	cmp	r3, #16
 80053f8:	d122      	bne.n	8005440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b10      	cmp	r3, #16
 8005406:	d11b      	bne.n	8005440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0210 	mvn.w	r2, #16
 8005410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2208      	movs	r2, #8
 8005416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f9fa 	bl	8005820 <HAL_TIM_IC_CaptureCallback>
 800542c:	e005      	b.n	800543a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f9ec 	bl	800580c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f9fd 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b01      	cmp	r3, #1
 800544c:	d10e      	bne.n	800546c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b01      	cmp	r3, #1
 800545a:	d107      	bne.n	800546c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0201 	mvn.w	r2, #1
 8005464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fb fcd8 	bl	8000e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b80      	cmp	r3, #128	; 0x80
 8005478:	d10e      	bne.n	8005498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d107      	bne.n	8005498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fbc6 	bl	8005c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a6:	d10e      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b2:	2b80      	cmp	r3, #128	; 0x80
 80054b4:	d107      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fbb9 	bl	8005c38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d10e      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d107      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f9ab 	bl	8005848 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d10e      	bne.n	800551e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b20      	cmp	r3, #32
 800550c:	d107      	bne.n	800551e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f06f 0220 	mvn.w	r2, #32
 8005516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fb79 	bl	8005c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005528:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800552c:	d10f      	bne.n	800554e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800553c:	d107      	bne.n	800554e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fb7f 	bl	8005c4c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800555c:	d10f      	bne.n	800557e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005568:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800556c:	d107      	bne.n	800557e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fb71 	bl	8005c60 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800558c:	d10f      	bne.n	80055ae <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800559c:	d107      	bne.n	80055ae <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80055a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fb63 	bl	8005c74 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055bc:	d10f      	bne.n	80055de <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055cc:	d107      	bne.n	80055de <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80055d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fb55 	bl	8005c88 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055de:	bf00      	nop
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_TIM_ConfigClockSource+0x18>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e0f5      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x204>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800561e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005622:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800562a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a6e      	ldr	r2, [pc, #440]	; (80057f4 <HAL_TIM_ConfigClockSource+0x20c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	f000 80c1 	beq.w	80057c2 <HAL_TIM_ConfigClockSource+0x1da>
 8005640:	4a6c      	ldr	r2, [pc, #432]	; (80057f4 <HAL_TIM_ConfigClockSource+0x20c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	f200 80c6 	bhi.w	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
 8005648:	4a6b      	ldr	r2, [pc, #428]	; (80057f8 <HAL_TIM_ConfigClockSource+0x210>)
 800564a:	4293      	cmp	r3, r2
 800564c:	f000 80b9 	beq.w	80057c2 <HAL_TIM_ConfigClockSource+0x1da>
 8005650:	4a69      	ldr	r2, [pc, #420]	; (80057f8 <HAL_TIM_ConfigClockSource+0x210>)
 8005652:	4293      	cmp	r3, r2
 8005654:	f200 80be 	bhi.w	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
 8005658:	4a68      	ldr	r2, [pc, #416]	; (80057fc <HAL_TIM_ConfigClockSource+0x214>)
 800565a:	4293      	cmp	r3, r2
 800565c:	f000 80b1 	beq.w	80057c2 <HAL_TIM_ConfigClockSource+0x1da>
 8005660:	4a66      	ldr	r2, [pc, #408]	; (80057fc <HAL_TIM_ConfigClockSource+0x214>)
 8005662:	4293      	cmp	r3, r2
 8005664:	f200 80b6 	bhi.w	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
 8005668:	4a65      	ldr	r2, [pc, #404]	; (8005800 <HAL_TIM_ConfigClockSource+0x218>)
 800566a:	4293      	cmp	r3, r2
 800566c:	f000 80a9 	beq.w	80057c2 <HAL_TIM_ConfigClockSource+0x1da>
 8005670:	4a63      	ldr	r2, [pc, #396]	; (8005800 <HAL_TIM_ConfigClockSource+0x218>)
 8005672:	4293      	cmp	r3, r2
 8005674:	f200 80ae 	bhi.w	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
 8005678:	4a62      	ldr	r2, [pc, #392]	; (8005804 <HAL_TIM_ConfigClockSource+0x21c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	f000 80a1 	beq.w	80057c2 <HAL_TIM_ConfigClockSource+0x1da>
 8005680:	4a60      	ldr	r2, [pc, #384]	; (8005804 <HAL_TIM_ConfigClockSource+0x21c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	f200 80a6 	bhi.w	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
 8005688:	4a5f      	ldr	r2, [pc, #380]	; (8005808 <HAL_TIM_ConfigClockSource+0x220>)
 800568a:	4293      	cmp	r3, r2
 800568c:	f000 8099 	beq.w	80057c2 <HAL_TIM_ConfigClockSource+0x1da>
 8005690:	4a5d      	ldr	r2, [pc, #372]	; (8005808 <HAL_TIM_ConfigClockSource+0x220>)
 8005692:	4293      	cmp	r3, r2
 8005694:	f200 809e 	bhi.w	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
 8005698:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800569c:	f000 8091 	beq.w	80057c2 <HAL_TIM_ConfigClockSource+0x1da>
 80056a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056a4:	f200 8096 	bhi.w	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
 80056a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ac:	f000 8089 	beq.w	80057c2 <HAL_TIM_ConfigClockSource+0x1da>
 80056b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b4:	f200 808e 	bhi.w	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
 80056b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056bc:	d03e      	beq.n	800573c <HAL_TIM_ConfigClockSource+0x154>
 80056be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c2:	f200 8087 	bhi.w	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
 80056c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ca:	f000 8085 	beq.w	80057d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80056ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d2:	d87f      	bhi.n	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
 80056d4:	2b70      	cmp	r3, #112	; 0x70
 80056d6:	d01a      	beq.n	800570e <HAL_TIM_ConfigClockSource+0x126>
 80056d8:	2b70      	cmp	r3, #112	; 0x70
 80056da:	d87b      	bhi.n	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
 80056dc:	2b60      	cmp	r3, #96	; 0x60
 80056de:	d050      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0x19a>
 80056e0:	2b60      	cmp	r3, #96	; 0x60
 80056e2:	d877      	bhi.n	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
 80056e4:	2b50      	cmp	r3, #80	; 0x50
 80056e6:	d03c      	beq.n	8005762 <HAL_TIM_ConfigClockSource+0x17a>
 80056e8:	2b50      	cmp	r3, #80	; 0x50
 80056ea:	d873      	bhi.n	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
 80056ec:	2b40      	cmp	r3, #64	; 0x40
 80056ee:	d058      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0x1ba>
 80056f0:	2b40      	cmp	r3, #64	; 0x40
 80056f2:	d86f      	bhi.n	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
 80056f4:	2b30      	cmp	r3, #48	; 0x30
 80056f6:	d064      	beq.n	80057c2 <HAL_TIM_ConfigClockSource+0x1da>
 80056f8:	2b30      	cmp	r3, #48	; 0x30
 80056fa:	d86b      	bhi.n	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d060      	beq.n	80057c2 <HAL_TIM_ConfigClockSource+0x1da>
 8005700:	2b20      	cmp	r3, #32
 8005702:	d867      	bhi.n	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
 8005704:	2b00      	cmp	r3, #0
 8005706:	d05c      	beq.n	80057c2 <HAL_TIM_ConfigClockSource+0x1da>
 8005708:	2b10      	cmp	r3, #16
 800570a:	d05a      	beq.n	80057c2 <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800570c:	e062      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	6899      	ldr	r1, [r3, #8]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f000 f9c1 	bl	8005aa4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005730:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	609a      	str	r2, [r3, #8]
      break;
 800573a:	e04e      	b.n	80057da <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	6899      	ldr	r1, [r3, #8]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f000 f9aa 	bl	8005aa4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800575e:	609a      	str	r2, [r3, #8]
      break;
 8005760:	e03b      	b.n	80057da <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6818      	ldr	r0, [r3, #0]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	6859      	ldr	r1, [r3, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	461a      	mov	r2, r3
 8005770:	f000 f91c 	bl	80059ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2150      	movs	r1, #80	; 0x50
 800577a:	4618      	mov	r0, r3
 800577c:	f000 f975 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 8005780:	e02b      	b.n	80057da <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	6859      	ldr	r1, [r3, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	461a      	mov	r2, r3
 8005790:	f000 f93b 	bl	8005a0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2160      	movs	r1, #96	; 0x60
 800579a:	4618      	mov	r0, r3
 800579c:	f000 f965 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 80057a0:	e01b      	b.n	80057da <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6859      	ldr	r1, [r3, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	461a      	mov	r2, r3
 80057b0:	f000 f8fc 	bl	80059ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2140      	movs	r1, #64	; 0x40
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 f955 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 80057c0:	e00b      	b.n	80057da <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4619      	mov	r1, r3
 80057cc:	4610      	mov	r0, r2
 80057ce:	f000 f94c 	bl	8005a6a <TIM_ITRx_SetConfig>
        break;
 80057d2:	e002      	b.n	80057da <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 80057d4:	bf00      	nop
 80057d6:	e000      	b.n	80057da <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 80057d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	00100070 	.word	0x00100070
 80057f8:	00100060 	.word	0x00100060
 80057fc:	00100050 	.word	0x00100050
 8005800:	00100040 	.word	0x00100040
 8005804:	00100030 	.word	0x00100030
 8005808:	00100020 	.word	0x00100020

0800580c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a46      	ldr	r2, [pc, #280]	; (8005988 <TIM_Base_SetConfig+0x12c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d017      	beq.n	80058a4 <TIM_Base_SetConfig+0x48>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587a:	d013      	beq.n	80058a4 <TIM_Base_SetConfig+0x48>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a43      	ldr	r2, [pc, #268]	; (800598c <TIM_Base_SetConfig+0x130>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00f      	beq.n	80058a4 <TIM_Base_SetConfig+0x48>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a42      	ldr	r2, [pc, #264]	; (8005990 <TIM_Base_SetConfig+0x134>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d00b      	beq.n	80058a4 <TIM_Base_SetConfig+0x48>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a41      	ldr	r2, [pc, #260]	; (8005994 <TIM_Base_SetConfig+0x138>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d007      	beq.n	80058a4 <TIM_Base_SetConfig+0x48>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a40      	ldr	r2, [pc, #256]	; (8005998 <TIM_Base_SetConfig+0x13c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d003      	beq.n	80058a4 <TIM_Base_SetConfig+0x48>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a3f      	ldr	r2, [pc, #252]	; (800599c <TIM_Base_SetConfig+0x140>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d108      	bne.n	80058b6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a33      	ldr	r2, [pc, #204]	; (8005988 <TIM_Base_SetConfig+0x12c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d023      	beq.n	8005906 <TIM_Base_SetConfig+0xaa>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c4:	d01f      	beq.n	8005906 <TIM_Base_SetConfig+0xaa>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a30      	ldr	r2, [pc, #192]	; (800598c <TIM_Base_SetConfig+0x130>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01b      	beq.n	8005906 <TIM_Base_SetConfig+0xaa>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a2f      	ldr	r2, [pc, #188]	; (8005990 <TIM_Base_SetConfig+0x134>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d017      	beq.n	8005906 <TIM_Base_SetConfig+0xaa>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a2e      	ldr	r2, [pc, #184]	; (8005994 <TIM_Base_SetConfig+0x138>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <TIM_Base_SetConfig+0xaa>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a2d      	ldr	r2, [pc, #180]	; (8005998 <TIM_Base_SetConfig+0x13c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00f      	beq.n	8005906 <TIM_Base_SetConfig+0xaa>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2d      	ldr	r2, [pc, #180]	; (80059a0 <TIM_Base_SetConfig+0x144>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00b      	beq.n	8005906 <TIM_Base_SetConfig+0xaa>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2c      	ldr	r2, [pc, #176]	; (80059a4 <TIM_Base_SetConfig+0x148>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <TIM_Base_SetConfig+0xaa>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2b      	ldr	r2, [pc, #172]	; (80059a8 <TIM_Base_SetConfig+0x14c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_Base_SetConfig+0xaa>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a26      	ldr	r2, [pc, #152]	; (800599c <TIM_Base_SetConfig+0x140>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d108      	bne.n	8005918 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800590c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a12      	ldr	r2, [pc, #72]	; (8005988 <TIM_Base_SetConfig+0x12c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d013      	beq.n	800596c <TIM_Base_SetConfig+0x110>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a14      	ldr	r2, [pc, #80]	; (8005998 <TIM_Base_SetConfig+0x13c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00f      	beq.n	800596c <TIM_Base_SetConfig+0x110>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a14      	ldr	r2, [pc, #80]	; (80059a0 <TIM_Base_SetConfig+0x144>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00b      	beq.n	800596c <TIM_Base_SetConfig+0x110>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <TIM_Base_SetConfig+0x148>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d007      	beq.n	800596c <TIM_Base_SetConfig+0x110>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a12      	ldr	r2, [pc, #72]	; (80059a8 <TIM_Base_SetConfig+0x14c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_Base_SetConfig+0x110>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a0d      	ldr	r2, [pc, #52]	; (800599c <TIM_Base_SetConfig+0x140>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d103      	bne.n	8005974 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	615a      	str	r2, [r3, #20]
}
 800597a:	bf00      	nop
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40012c00 	.word	0x40012c00
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40013400 	.word	0x40013400
 800599c:	40015000 	.word	0x40015000
 80059a0:	40014000 	.word	0x40014000
 80059a4:	40014400 	.word	0x40014400
 80059a8:	40014800 	.word	0x40014800

080059ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f023 030a 	bic.w	r3, r3, #10
 80059e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b087      	sub	sp, #28
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f023 0210 	bic.w	r2, r3, #16
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	031b      	lsls	r3, r3, #12
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f043 0307 	orr.w	r3, r3, #7
 8005a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	609a      	str	r2, [r3, #8]
}
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	021a      	lsls	r2, r3, #8
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	609a      	str	r2, [r3, #8]
}
 8005ad8:	bf00      	nop
 8005ada:	371c      	adds	r7, #28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e074      	b.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a34      	ldr	r2, [pc, #208]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d009      	beq.n	8005b3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a33      	ldr	r2, [pc, #204]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d004      	beq.n	8005b3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a31      	ldr	r2, [pc, #196]	; (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d108      	bne.n	8005b4c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a21      	ldr	r2, [pc, #132]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d022      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7c:	d01d      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1f      	ldr	r2, [pc, #124]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d018      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1d      	ldr	r2, [pc, #116]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00e      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d009      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a18      	ldr	r2, [pc, #96]	; (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a11      	ldr	r2, [pc, #68]	; (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40012c00 	.word	0x40012c00
 8005bf8:	40013400 	.word	0x40013400
 8005bfc:	40015000 	.word	0x40015000
 8005c00:	40000400 	.word	0x40000400
 8005c04:	40000800 	.word	0x40000800
 8005c08:	40000c00 	.word	0x40000c00
 8005c0c:	40014000 	.word	0x40014000

08005c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e042      	b.n	8005d34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d106      	bne.n	8005cc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7fb fea7 	bl	8001a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2224      	movs	r2, #36	; 0x24
 8005cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0201 	bic.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fac6 	bl	8006270 <UART_SetConfig>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e022      	b.n	8005d34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fd84 	bl	8006804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fe0b 	bl	8006948 <UART_CheckIdleState>
 8005d32:	4603      	mov	r3, r0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	4613      	mov	r3, r2
 8005d48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	d131      	bne.n	8005db8 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <HAL_UART_Receive_IT+0x24>
 8005d5a:	88fb      	ldrh	r3, [r7, #6]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e02a      	b.n	8005dba <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_UART_Receive_IT+0x36>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e023      	b.n	8005dba <HAL_UART_Receive_IT+0x7e>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a0f      	ldr	r2, [pc, #60]	; (8005dc4 <HAL_UART_Receive_IT+0x88>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00e      	beq.n	8005da8 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005da6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005da8:	88fb      	ldrh	r3, [r7, #6]
 8005daa:	461a      	mov	r2, r3
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 fe96 	bl	8006ae0 <UART_Start_Receive_IT>
 8005db4:	4603      	mov	r3, r0
 8005db6:	e000      	b.n	8005dba <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005db8:	2302      	movs	r3, #2
  }
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40008000 	.word	0x40008000

08005dc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b088      	sub	sp, #32
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	f640 030f 	movw	r3, #2063	; 0x80f
 8005dee:	4013      	ands	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d118      	bne.n	8005e2a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d013      	beq.n	8005e2a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d104      	bne.n	8005e16 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 81fb 	beq.w	8006216 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	4798      	blx	r3
      }
      return;
 8005e28:	e1f5      	b.n	8006216 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80ef 	beq.w	8006010 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4b73      	ldr	r3, [pc, #460]	; (8006004 <HAL_UART_IRQHandler+0x23c>)
 8005e36:	4013      	ands	r3, r2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d105      	bne.n	8005e48 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	4b72      	ldr	r3, [pc, #456]	; (8006008 <HAL_UART_IRQHandler+0x240>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 80e4 	beq.w	8006010 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d010      	beq.n	8005e74 <HAL_UART_IRQHandler+0xac>
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00b      	beq.n	8005e74 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2201      	movs	r2, #1
 8005e62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e6a:	f043 0201 	orr.w	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d010      	beq.n	8005ea0 <HAL_UART_IRQHandler+0xd8>
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e96:	f043 0204 	orr.w	r2, r3, #4
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d010      	beq.n	8005ecc <HAL_UART_IRQHandler+0x104>
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00b      	beq.n	8005ecc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2204      	movs	r2, #4
 8005eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ec2:	f043 0202 	orr.w	r2, r3, #2
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d015      	beq.n	8005f02 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	f003 0320 	and.w	r3, r3, #32
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d104      	bne.n	8005eea <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4b48      	ldr	r3, [pc, #288]	; (8006004 <HAL_UART_IRQHandler+0x23c>)
 8005ee4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2208      	movs	r2, #8
 8005ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef8:	f043 0208 	orr.w	r2, r3, #8
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d011      	beq.n	8005f30 <HAL_UART_IRQHandler+0x168>
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00c      	beq.n	8005f30 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f26:	f043 0220 	orr.w	r2, r3, #32
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 816f 	beq.w	800621a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d011      	beq.n	8005f6a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d104      	bne.n	8005f5a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d007      	beq.n	8005f6a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f70:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7c:	2b40      	cmp	r3, #64	; 0x40
 8005f7e:	d004      	beq.n	8005f8a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d031      	beq.n	8005fee <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fe66 	bl	8006c5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9a:	2b40      	cmp	r3, #64	; 0x40
 8005f9c:	d123      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d013      	beq.n	8005fde <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fba:	4a14      	ldr	r2, [pc, #80]	; (800600c <HAL_UART_IRQHandler+0x244>)
 8005fbc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fd fd3c 	bl	8003a40 <HAL_DMA_Abort_IT>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d017      	beq.n	8005ffe <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005fd8:	4610      	mov	r0, r2
 8005fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fdc:	e00f      	b.n	8005ffe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f930 	bl	8006244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe4:	e00b      	b.n	8005ffe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f92c 	bl	8006244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fec:	e007      	b.n	8005ffe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f928 	bl	8006244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005ffc:	e10d      	b.n	800621a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffe:	bf00      	nop
    return;
 8006000:	e10b      	b.n	800621a <HAL_UART_IRQHandler+0x452>
 8006002:	bf00      	nop
 8006004:	10000001 	.word	0x10000001
 8006008:	04000120 	.word	0x04000120
 800600c:	08006cc1 	.word	0x08006cc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006014:	2b01      	cmp	r3, #1
 8006016:	f040 80ab 	bne.w	8006170 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 80a5 	beq.w	8006170 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	f003 0310 	and.w	r3, r3, #16
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 809f 	beq.w	8006170 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2210      	movs	r2, #16
 8006038:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006044:	2b40      	cmp	r3, #64	; 0x40
 8006046:	d155      	bne.n	80060f4 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006052:	893b      	ldrh	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 80e2 	beq.w	800621e <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006060:	893a      	ldrh	r2, [r7, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	f080 80db 	bcs.w	800621e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	893a      	ldrh	r2, [r7, #8]
 800606c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d12b      	bne.n	80060d8 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800608e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0201 	bic.w	r2, r2, #1
 800609e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ae:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0210 	bic.w	r2, r2, #16
 80060cc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fd fc5b 	bl	800398e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f8b3 	bl	8006258 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060f2:	e094      	b.n	800621e <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006100:	b29b      	uxth	r3, r3
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 8087 	beq.w	8006222 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8006114:	897b      	ldrh	r3, [r7, #10]
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 8083 	beq.w	8006222 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800612a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6812      	ldr	r2, [r2, #0]
 8006136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0210 	bic.w	r2, r2, #16
 8006162:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006164:	897b      	ldrh	r3, [r7, #10]
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f875 	bl	8006258 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800616e:	e058      	b.n	8006222 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00d      	beq.n	8006196 <HAL_UART_IRQHandler+0x3ce>
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d008      	beq.n	8006196 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800618c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f001 f8a2 	bl	80072d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006194:	e048      	b.n	8006228 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619c:	2b00      	cmp	r3, #0
 800619e:	d012      	beq.n	80061c6 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d104      	bne.n	80061b4 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d008      	beq.n	80061c6 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d034      	beq.n	8006226 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	4798      	blx	r3
    }
    return;
 80061c4:	e02f      	b.n	8006226 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d008      	beq.n	80061e2 <HAL_UART_IRQHandler+0x41a>
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fd86 	bl	8006cec <UART_EndTransmit_IT>
    return;
 80061e0:	e022      	b.n	8006228 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d008      	beq.n	80061fe <HAL_UART_IRQHandler+0x436>
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f001 f882 	bl	8007300 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061fc:	e014      	b.n	8006228 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00f      	beq.n	8006228 <HAL_UART_IRQHandler+0x460>
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	2b00      	cmp	r3, #0
 800620c:	da0c      	bge.n	8006228 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 f86c 	bl	80072ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006214:	e008      	b.n	8006228 <HAL_UART_IRQHandler+0x460>
      return;
 8006216:	bf00      	nop
 8006218:	e006      	b.n	8006228 <HAL_UART_IRQHandler+0x460>
    return;
 800621a:	bf00      	nop
 800621c:	e004      	b.n	8006228 <HAL_UART_IRQHandler+0x460>
      return;
 800621e:	bf00      	nop
 8006220:	e002      	b.n	8006228 <HAL_UART_IRQHandler+0x460>
      return;
 8006222:	bf00      	nop
 8006224:	e000      	b.n	8006228 <HAL_UART_IRQHandler+0x460>
    return;
 8006226:	bf00      	nop
  }
}
 8006228:	3720      	adds	r7, #32
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop

08006230 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006270:	b5b0      	push	{r4, r5, r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	431a      	orrs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	4313      	orrs	r3, r2
 8006292:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4bb1      	ldr	r3, [pc, #708]	; (8006560 <UART_SetConfig+0x2f0>)
 800629c:	4013      	ands	r3, r2
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6812      	ldr	r2, [r2, #0]
 80062a2:	69f9      	ldr	r1, [r7, #28]
 80062a4:	430b      	orrs	r3, r1
 80062a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4aa6      	ldr	r2, [pc, #664]	; (8006564 <UART_SetConfig+0x2f4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d004      	beq.n	80062d8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80062e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6812      	ldr	r2, [r2, #0]
 80062ea:	69f9      	ldr	r1, [r7, #28]
 80062ec:	430b      	orrs	r3, r1
 80062ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f6:	f023 010f 	bic.w	r1, r3, #15
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a97      	ldr	r2, [pc, #604]	; (8006568 <UART_SetConfig+0x2f8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d120      	bne.n	8006352 <UART_SetConfig+0xe2>
 8006310:	4b96      	ldr	r3, [pc, #600]	; (800656c <UART_SetConfig+0x2fc>)
 8006312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	2b03      	cmp	r3, #3
 800631c:	d816      	bhi.n	800634c <UART_SetConfig+0xdc>
 800631e:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <UART_SetConfig+0xb4>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	08006335 	.word	0x08006335
 8006328:	08006341 	.word	0x08006341
 800632c:	0800633b 	.word	0x0800633b
 8006330:	08006347 	.word	0x08006347
 8006334:	2301      	movs	r3, #1
 8006336:	76fb      	strb	r3, [r7, #27]
 8006338:	e0e7      	b.n	800650a <UART_SetConfig+0x29a>
 800633a:	2302      	movs	r3, #2
 800633c:	76fb      	strb	r3, [r7, #27]
 800633e:	e0e4      	b.n	800650a <UART_SetConfig+0x29a>
 8006340:	2304      	movs	r3, #4
 8006342:	76fb      	strb	r3, [r7, #27]
 8006344:	e0e1      	b.n	800650a <UART_SetConfig+0x29a>
 8006346:	2308      	movs	r3, #8
 8006348:	76fb      	strb	r3, [r7, #27]
 800634a:	e0de      	b.n	800650a <UART_SetConfig+0x29a>
 800634c:	2310      	movs	r3, #16
 800634e:	76fb      	strb	r3, [r7, #27]
 8006350:	e0db      	b.n	800650a <UART_SetConfig+0x29a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a86      	ldr	r2, [pc, #536]	; (8006570 <UART_SetConfig+0x300>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d132      	bne.n	80063c2 <UART_SetConfig+0x152>
 800635c:	4b83      	ldr	r3, [pc, #524]	; (800656c <UART_SetConfig+0x2fc>)
 800635e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006362:	f003 030c 	and.w	r3, r3, #12
 8006366:	2b0c      	cmp	r3, #12
 8006368:	d828      	bhi.n	80063bc <UART_SetConfig+0x14c>
 800636a:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <UART_SetConfig+0x100>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	080063a5 	.word	0x080063a5
 8006374:	080063bd 	.word	0x080063bd
 8006378:	080063bd 	.word	0x080063bd
 800637c:	080063bd 	.word	0x080063bd
 8006380:	080063b1 	.word	0x080063b1
 8006384:	080063bd 	.word	0x080063bd
 8006388:	080063bd 	.word	0x080063bd
 800638c:	080063bd 	.word	0x080063bd
 8006390:	080063ab 	.word	0x080063ab
 8006394:	080063bd 	.word	0x080063bd
 8006398:	080063bd 	.word	0x080063bd
 800639c:	080063bd 	.word	0x080063bd
 80063a0:	080063b7 	.word	0x080063b7
 80063a4:	2300      	movs	r3, #0
 80063a6:	76fb      	strb	r3, [r7, #27]
 80063a8:	e0af      	b.n	800650a <UART_SetConfig+0x29a>
 80063aa:	2302      	movs	r3, #2
 80063ac:	76fb      	strb	r3, [r7, #27]
 80063ae:	e0ac      	b.n	800650a <UART_SetConfig+0x29a>
 80063b0:	2304      	movs	r3, #4
 80063b2:	76fb      	strb	r3, [r7, #27]
 80063b4:	e0a9      	b.n	800650a <UART_SetConfig+0x29a>
 80063b6:	2308      	movs	r3, #8
 80063b8:	76fb      	strb	r3, [r7, #27]
 80063ba:	e0a6      	b.n	800650a <UART_SetConfig+0x29a>
 80063bc:	2310      	movs	r3, #16
 80063be:	76fb      	strb	r3, [r7, #27]
 80063c0:	e0a3      	b.n	800650a <UART_SetConfig+0x29a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a6b      	ldr	r2, [pc, #428]	; (8006574 <UART_SetConfig+0x304>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d120      	bne.n	800640e <UART_SetConfig+0x19e>
 80063cc:	4b67      	ldr	r3, [pc, #412]	; (800656c <UART_SetConfig+0x2fc>)
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063d6:	2b30      	cmp	r3, #48	; 0x30
 80063d8:	d013      	beq.n	8006402 <UART_SetConfig+0x192>
 80063da:	2b30      	cmp	r3, #48	; 0x30
 80063dc:	d814      	bhi.n	8006408 <UART_SetConfig+0x198>
 80063de:	2b20      	cmp	r3, #32
 80063e0:	d009      	beq.n	80063f6 <UART_SetConfig+0x186>
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d810      	bhi.n	8006408 <UART_SetConfig+0x198>
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <UART_SetConfig+0x180>
 80063ea:	2b10      	cmp	r3, #16
 80063ec:	d006      	beq.n	80063fc <UART_SetConfig+0x18c>
 80063ee:	e00b      	b.n	8006408 <UART_SetConfig+0x198>
 80063f0:	2300      	movs	r3, #0
 80063f2:	76fb      	strb	r3, [r7, #27]
 80063f4:	e089      	b.n	800650a <UART_SetConfig+0x29a>
 80063f6:	2302      	movs	r3, #2
 80063f8:	76fb      	strb	r3, [r7, #27]
 80063fa:	e086      	b.n	800650a <UART_SetConfig+0x29a>
 80063fc:	2304      	movs	r3, #4
 80063fe:	76fb      	strb	r3, [r7, #27]
 8006400:	e083      	b.n	800650a <UART_SetConfig+0x29a>
 8006402:	2308      	movs	r3, #8
 8006404:	76fb      	strb	r3, [r7, #27]
 8006406:	e080      	b.n	800650a <UART_SetConfig+0x29a>
 8006408:	2310      	movs	r3, #16
 800640a:	76fb      	strb	r3, [r7, #27]
 800640c:	e07d      	b.n	800650a <UART_SetConfig+0x29a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a59      	ldr	r2, [pc, #356]	; (8006578 <UART_SetConfig+0x308>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d120      	bne.n	800645a <UART_SetConfig+0x1ea>
 8006418:	4b54      	ldr	r3, [pc, #336]	; (800656c <UART_SetConfig+0x2fc>)
 800641a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006422:	2bc0      	cmp	r3, #192	; 0xc0
 8006424:	d013      	beq.n	800644e <UART_SetConfig+0x1de>
 8006426:	2bc0      	cmp	r3, #192	; 0xc0
 8006428:	d814      	bhi.n	8006454 <UART_SetConfig+0x1e4>
 800642a:	2b80      	cmp	r3, #128	; 0x80
 800642c:	d009      	beq.n	8006442 <UART_SetConfig+0x1d2>
 800642e:	2b80      	cmp	r3, #128	; 0x80
 8006430:	d810      	bhi.n	8006454 <UART_SetConfig+0x1e4>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <UART_SetConfig+0x1cc>
 8006436:	2b40      	cmp	r3, #64	; 0x40
 8006438:	d006      	beq.n	8006448 <UART_SetConfig+0x1d8>
 800643a:	e00b      	b.n	8006454 <UART_SetConfig+0x1e4>
 800643c:	2300      	movs	r3, #0
 800643e:	76fb      	strb	r3, [r7, #27]
 8006440:	e063      	b.n	800650a <UART_SetConfig+0x29a>
 8006442:	2302      	movs	r3, #2
 8006444:	76fb      	strb	r3, [r7, #27]
 8006446:	e060      	b.n	800650a <UART_SetConfig+0x29a>
 8006448:	2304      	movs	r3, #4
 800644a:	76fb      	strb	r3, [r7, #27]
 800644c:	e05d      	b.n	800650a <UART_SetConfig+0x29a>
 800644e:	2308      	movs	r3, #8
 8006450:	76fb      	strb	r3, [r7, #27]
 8006452:	e05a      	b.n	800650a <UART_SetConfig+0x29a>
 8006454:	2310      	movs	r3, #16
 8006456:	76fb      	strb	r3, [r7, #27]
 8006458:	e057      	b.n	800650a <UART_SetConfig+0x29a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a47      	ldr	r2, [pc, #284]	; (800657c <UART_SetConfig+0x30c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d125      	bne.n	80064b0 <UART_SetConfig+0x240>
 8006464:	4b41      	ldr	r3, [pc, #260]	; (800656c <UART_SetConfig+0x2fc>)
 8006466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006472:	d017      	beq.n	80064a4 <UART_SetConfig+0x234>
 8006474:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006478:	d817      	bhi.n	80064aa <UART_SetConfig+0x23a>
 800647a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800647e:	d00b      	beq.n	8006498 <UART_SetConfig+0x228>
 8006480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006484:	d811      	bhi.n	80064aa <UART_SetConfig+0x23a>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <UART_SetConfig+0x222>
 800648a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800648e:	d006      	beq.n	800649e <UART_SetConfig+0x22e>
 8006490:	e00b      	b.n	80064aa <UART_SetConfig+0x23a>
 8006492:	2300      	movs	r3, #0
 8006494:	76fb      	strb	r3, [r7, #27]
 8006496:	e038      	b.n	800650a <UART_SetConfig+0x29a>
 8006498:	2302      	movs	r3, #2
 800649a:	76fb      	strb	r3, [r7, #27]
 800649c:	e035      	b.n	800650a <UART_SetConfig+0x29a>
 800649e:	2304      	movs	r3, #4
 80064a0:	76fb      	strb	r3, [r7, #27]
 80064a2:	e032      	b.n	800650a <UART_SetConfig+0x29a>
 80064a4:	2308      	movs	r3, #8
 80064a6:	76fb      	strb	r3, [r7, #27]
 80064a8:	e02f      	b.n	800650a <UART_SetConfig+0x29a>
 80064aa:	2310      	movs	r3, #16
 80064ac:	76fb      	strb	r3, [r7, #27]
 80064ae:	e02c      	b.n	800650a <UART_SetConfig+0x29a>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a2b      	ldr	r2, [pc, #172]	; (8006564 <UART_SetConfig+0x2f4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d125      	bne.n	8006506 <UART_SetConfig+0x296>
 80064ba:	4b2c      	ldr	r3, [pc, #176]	; (800656c <UART_SetConfig+0x2fc>)
 80064bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064c8:	d017      	beq.n	80064fa <UART_SetConfig+0x28a>
 80064ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064ce:	d817      	bhi.n	8006500 <UART_SetConfig+0x290>
 80064d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d4:	d00b      	beq.n	80064ee <UART_SetConfig+0x27e>
 80064d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064da:	d811      	bhi.n	8006500 <UART_SetConfig+0x290>
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <UART_SetConfig+0x278>
 80064e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e4:	d006      	beq.n	80064f4 <UART_SetConfig+0x284>
 80064e6:	e00b      	b.n	8006500 <UART_SetConfig+0x290>
 80064e8:	2300      	movs	r3, #0
 80064ea:	76fb      	strb	r3, [r7, #27]
 80064ec:	e00d      	b.n	800650a <UART_SetConfig+0x29a>
 80064ee:	2302      	movs	r3, #2
 80064f0:	76fb      	strb	r3, [r7, #27]
 80064f2:	e00a      	b.n	800650a <UART_SetConfig+0x29a>
 80064f4:	2304      	movs	r3, #4
 80064f6:	76fb      	strb	r3, [r7, #27]
 80064f8:	e007      	b.n	800650a <UART_SetConfig+0x29a>
 80064fa:	2308      	movs	r3, #8
 80064fc:	76fb      	strb	r3, [r7, #27]
 80064fe:	e004      	b.n	800650a <UART_SetConfig+0x29a>
 8006500:	2310      	movs	r3, #16
 8006502:	76fb      	strb	r3, [r7, #27]
 8006504:	e001      	b.n	800650a <UART_SetConfig+0x29a>
 8006506:	2310      	movs	r3, #16
 8006508:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a15      	ldr	r2, [pc, #84]	; (8006564 <UART_SetConfig+0x2f4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	f040 809f 	bne.w	8006654 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006516:	7efb      	ldrb	r3, [r7, #27]
 8006518:	2b08      	cmp	r3, #8
 800651a:	d837      	bhi.n	800658c <UART_SetConfig+0x31c>
 800651c:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <UART_SetConfig+0x2b4>)
 800651e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006522:	bf00      	nop
 8006524:	08006549 	.word	0x08006549
 8006528:	0800658d 	.word	0x0800658d
 800652c:	08006551 	.word	0x08006551
 8006530:	0800658d 	.word	0x0800658d
 8006534:	08006557 	.word	0x08006557
 8006538:	0800658d 	.word	0x0800658d
 800653c:	0800658d 	.word	0x0800658d
 8006540:	0800658d 	.word	0x0800658d
 8006544:	08006585 	.word	0x08006585
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006548:	f7fe fb40 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 800654c:	6178      	str	r0, [r7, #20]
        break;
 800654e:	e022      	b.n	8006596 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006550:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <UART_SetConfig+0x310>)
 8006552:	617b      	str	r3, [r7, #20]
        break;
 8006554:	e01f      	b.n	8006596 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006556:	f7fe facb 	bl	8004af0 <HAL_RCC_GetSysClockFreq>
 800655a:	6178      	str	r0, [r7, #20]
        break;
 800655c:	e01b      	b.n	8006596 <UART_SetConfig+0x326>
 800655e:	bf00      	nop
 8006560:	cfff69f3 	.word	0xcfff69f3
 8006564:	40008000 	.word	0x40008000
 8006568:	40013800 	.word	0x40013800
 800656c:	40021000 	.word	0x40021000
 8006570:	40004400 	.word	0x40004400
 8006574:	40004800 	.word	0x40004800
 8006578:	40004c00 	.word	0x40004c00
 800657c:	40005000 	.word	0x40005000
 8006580:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006588:	617b      	str	r3, [r7, #20]
        break;
 800658a:	e004      	b.n	8006596 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	76bb      	strb	r3, [r7, #26]
        break;
 8006594:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 811b 	beq.w	80067d4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	4a96      	ldr	r2, [pc, #600]	; (80067fc <UART_SetConfig+0x58c>)
 80065a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065a8:	461a      	mov	r2, r3
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80065b0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	4613      	mov	r3, r2
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	4413      	add	r3, r2
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d305      	bcc.n	80065ce <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d902      	bls.n	80065d4 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	76bb      	strb	r3, [r7, #26]
 80065d2:	e0ff      	b.n	80067d4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f04f 0100 	mov.w	r1, #0
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	4a86      	ldr	r2, [pc, #536]	; (80067fc <UART_SetConfig+0x58c>)
 80065e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	f7fa fa02 	bl	80009f4 <__aeabi_uldivmod>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4610      	mov	r0, r2
 80065f6:	4619      	mov	r1, r3
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	020b      	lsls	r3, r1, #8
 8006602:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006606:	0202      	lsls	r2, r0, #8
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	6849      	ldr	r1, [r1, #4]
 800660c:	0849      	lsrs	r1, r1, #1
 800660e:	4608      	mov	r0, r1
 8006610:	f04f 0100 	mov.w	r1, #0
 8006614:	1814      	adds	r4, r2, r0
 8006616:	eb43 0501 	adc.w	r5, r3, r1
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	461a      	mov	r2, r3
 8006620:	f04f 0300 	mov.w	r3, #0
 8006624:	4620      	mov	r0, r4
 8006626:	4629      	mov	r1, r5
 8006628:	f7fa f9e4 	bl	80009f4 <__aeabi_uldivmod>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4613      	mov	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800663a:	d308      	bcc.n	800664e <UART_SetConfig+0x3de>
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006642:	d204      	bcs.n	800664e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	60da      	str	r2, [r3, #12]
 800664c:	e0c2      	b.n	80067d4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	76bb      	strb	r3, [r7, #26]
 8006652:	e0bf      	b.n	80067d4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800665c:	d165      	bne.n	800672a <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800665e:	7efb      	ldrb	r3, [r7, #27]
 8006660:	2b08      	cmp	r3, #8
 8006662:	d828      	bhi.n	80066b6 <UART_SetConfig+0x446>
 8006664:	a201      	add	r2, pc, #4	; (adr r2, 800666c <UART_SetConfig+0x3fc>)
 8006666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666a:	bf00      	nop
 800666c:	08006691 	.word	0x08006691
 8006670:	08006699 	.word	0x08006699
 8006674:	080066a1 	.word	0x080066a1
 8006678:	080066b7 	.word	0x080066b7
 800667c:	080066a7 	.word	0x080066a7
 8006680:	080066b7 	.word	0x080066b7
 8006684:	080066b7 	.word	0x080066b7
 8006688:	080066b7 	.word	0x080066b7
 800668c:	080066af 	.word	0x080066af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006690:	f7fe fa9c 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 8006694:	6178      	str	r0, [r7, #20]
        break;
 8006696:	e013      	b.n	80066c0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006698:	f7fe faae 	bl	8004bf8 <HAL_RCC_GetPCLK2Freq>
 800669c:	6178      	str	r0, [r7, #20]
        break;
 800669e:	e00f      	b.n	80066c0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066a0:	4b57      	ldr	r3, [pc, #348]	; (8006800 <UART_SetConfig+0x590>)
 80066a2:	617b      	str	r3, [r7, #20]
        break;
 80066a4:	e00c      	b.n	80066c0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a6:	f7fe fa23 	bl	8004af0 <HAL_RCC_GetSysClockFreq>
 80066aa:	6178      	str	r0, [r7, #20]
        break;
 80066ac:	e008      	b.n	80066c0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b2:	617b      	str	r3, [r7, #20]
        break;
 80066b4:	e004      	b.n	80066c0 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	76bb      	strb	r3, [r7, #26]
        break;
 80066be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 8086 	beq.w	80067d4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	4a4b      	ldr	r2, [pc, #300]	; (80067fc <UART_SetConfig+0x58c>)
 80066ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066d2:	461a      	mov	r2, r3
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80066da:	005a      	lsls	r2, r3, #1
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	085b      	lsrs	r3, r3, #1
 80066e2:	441a      	add	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	2b0f      	cmp	r3, #15
 80066f4:	d916      	bls.n	8006724 <UART_SetConfig+0x4b4>
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066fc:	d212      	bcs.n	8006724 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	b29b      	uxth	r3, r3
 8006702:	f023 030f 	bic.w	r3, r3, #15
 8006706:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	085b      	lsrs	r3, r3, #1
 800670c:	b29b      	uxth	r3, r3
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	b29a      	uxth	r2, r3
 8006714:	89fb      	ldrh	r3, [r7, #14]
 8006716:	4313      	orrs	r3, r2
 8006718:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	89fa      	ldrh	r2, [r7, #14]
 8006720:	60da      	str	r2, [r3, #12]
 8006722:	e057      	b.n	80067d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	76bb      	strb	r3, [r7, #26]
 8006728:	e054      	b.n	80067d4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800672a:	7efb      	ldrb	r3, [r7, #27]
 800672c:	2b08      	cmp	r3, #8
 800672e:	d828      	bhi.n	8006782 <UART_SetConfig+0x512>
 8006730:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <UART_SetConfig+0x4c8>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	0800675d 	.word	0x0800675d
 800673c:	08006765 	.word	0x08006765
 8006740:	0800676d 	.word	0x0800676d
 8006744:	08006783 	.word	0x08006783
 8006748:	08006773 	.word	0x08006773
 800674c:	08006783 	.word	0x08006783
 8006750:	08006783 	.word	0x08006783
 8006754:	08006783 	.word	0x08006783
 8006758:	0800677b 	.word	0x0800677b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800675c:	f7fe fa36 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 8006760:	6178      	str	r0, [r7, #20]
        break;
 8006762:	e013      	b.n	800678c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006764:	f7fe fa48 	bl	8004bf8 <HAL_RCC_GetPCLK2Freq>
 8006768:	6178      	str	r0, [r7, #20]
        break;
 800676a:	e00f      	b.n	800678c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800676c:	4b24      	ldr	r3, [pc, #144]	; (8006800 <UART_SetConfig+0x590>)
 800676e:	617b      	str	r3, [r7, #20]
        break;
 8006770:	e00c      	b.n	800678c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006772:	f7fe f9bd 	bl	8004af0 <HAL_RCC_GetSysClockFreq>
 8006776:	6178      	str	r0, [r7, #20]
        break;
 8006778:	e008      	b.n	800678c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800677a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800677e:	617b      	str	r3, [r7, #20]
        break;
 8006780:	e004      	b.n	800678c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	76bb      	strb	r3, [r7, #26]
        break;
 800678a:	bf00      	nop
    }

    if (pclk != 0U)
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d020      	beq.n	80067d4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	4a19      	ldr	r2, [pc, #100]	; (80067fc <UART_SetConfig+0x58c>)
 8006798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800679c:	461a      	mov	r2, r3
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	085b      	lsrs	r3, r3, #1
 80067aa:	441a      	add	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	2b0f      	cmp	r3, #15
 80067bc:	d908      	bls.n	80067d0 <UART_SetConfig+0x560>
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c4:	d204      	bcs.n	80067d0 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	60da      	str	r2, [r3, #12]
 80067ce:	e001      	b.n	80067d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80067f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3720      	adds	r7, #32
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bdb0      	pop	{r4, r5, r7, pc}
 80067fa:	bf00      	nop
 80067fc:	08007670 	.word	0x08007670
 8006800:	00f42400 	.word	0x00f42400

08006804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006898:	f003 0310 	and.w	r3, r3, #16
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00a      	beq.n	80068b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01a      	beq.n	800691a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006902:	d10a      	bne.n	800691a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	605a      	str	r2, [r3, #4]
  }
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af02      	add	r7, sp, #8
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006958:	f7fb f9b6 	bl	8001cc8 <HAL_GetTick>
 800695c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0308 	and.w	r3, r3, #8
 8006968:	2b08      	cmp	r3, #8
 800696a:	d10e      	bne.n	800698a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800696c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f82f 	bl	80069de <UART_WaitOnFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e025      	b.n	80069d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b04      	cmp	r3, #4
 8006996:	d10e      	bne.n	80069b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f819 	bl	80069de <UART_WaitOnFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e00f      	b.n	80069d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	603b      	str	r3, [r7, #0]
 80069ea:	4613      	mov	r3, r2
 80069ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ee:	e062      	b.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f6:	d05e      	beq.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f8:	f7fb f966 	bl	8001cc8 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d302      	bcc.n	8006a0e <UART_WaitOnFlagUntilTimeout+0x30>
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d11d      	bne.n	8006a4a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0201 	bic.w	r2, r2, #1
 8006a2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e045      	b.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d02e      	beq.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a66:	d126      	bne.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a80:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 0201 	bic.w	r2, r2, #1
 8006a90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e00f      	b.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69da      	ldr	r2, [r3, #28]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	bf0c      	ite	eq
 8006ac6:	2301      	moveq	r3, #1
 8006ac8:	2300      	movne	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d08d      	beq.n	80069f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	4613      	mov	r3, r2
 8006aec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	88fa      	ldrh	r2, [r7, #6]
 8006af8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	88fa      	ldrh	r2, [r7, #6]
 8006b00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b12:	d10e      	bne.n	8006b32 <UART_Start_Receive_IT+0x52>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d105      	bne.n	8006b28 <UART_Start_Receive_IT+0x48>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b26:	e02d      	b.n	8006b84 <UART_Start_Receive_IT+0xa4>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	22ff      	movs	r2, #255	; 0xff
 8006b2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b30:	e028      	b.n	8006b84 <UART_Start_Receive_IT+0xa4>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10d      	bne.n	8006b56 <UART_Start_Receive_IT+0x76>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d104      	bne.n	8006b4c <UART_Start_Receive_IT+0x6c>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	22ff      	movs	r2, #255	; 0xff
 8006b46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b4a:	e01b      	b.n	8006b84 <UART_Start_Receive_IT+0xa4>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	227f      	movs	r2, #127	; 0x7f
 8006b50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b54:	e016      	b.n	8006b84 <UART_Start_Receive_IT+0xa4>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b5e:	d10d      	bne.n	8006b7c <UART_Start_Receive_IT+0x9c>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d104      	bne.n	8006b72 <UART_Start_Receive_IT+0x92>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	227f      	movs	r2, #127	; 0x7f
 8006b6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b70:	e008      	b.n	8006b84 <UART_Start_Receive_IT+0xa4>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	223f      	movs	r2, #63	; 0x3f
 8006b76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b7a:	e003      	b.n	8006b84 <UART_Start_Receive_IT+0xa4>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2222      	movs	r2, #34	; 0x22
 8006b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689a      	ldr	r2, [r3, #8]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0201 	orr.w	r2, r2, #1
 8006ba2:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bac:	d12a      	bne.n	8006c04 <UART_Start_Receive_IT+0x124>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006bb4:	88fa      	ldrh	r2, [r7, #6]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d324      	bcc.n	8006c04 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc2:	d107      	bne.n	8006bd4 <UART_Start_Receive_IT+0xf4>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d103      	bne.n	8006bd4 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4a1f      	ldr	r2, [pc, #124]	; (8006c4c <UART_Start_Receive_IT+0x16c>)
 8006bd0:	671a      	str	r2, [r3, #112]	; 0x70
 8006bd2:	e002      	b.n	8006bda <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4a1e      	ldr	r2, [pc, #120]	; (8006c50 <UART_Start_Receive_IT+0x170>)
 8006bd8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bf0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006c00:	609a      	str	r2, [r3, #8]
 8006c02:	e01b      	b.n	8006c3c <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0c:	d107      	bne.n	8006c1e <UART_Start_Receive_IT+0x13e>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d103      	bne.n	8006c1e <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4a0e      	ldr	r2, [pc, #56]	; (8006c54 <UART_Start_Receive_IT+0x174>)
 8006c1a:	671a      	str	r2, [r3, #112]	; 0x70
 8006c1c:	e002      	b.n	8006c24 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4a0d      	ldr	r2, [pc, #52]	; (8006c58 <UART_Start_Receive_IT+0x178>)
 8006c22:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006c3a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	080070d5 	.word	0x080070d5
 8006c50:	08006ed1 	.word	0x08006ed1
 8006c54:	08006df9 	.word	0x08006df9
 8006c58:	08006d21 	.word	0x08006d21

08006c5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c72:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	6812      	ldr	r2, [r2, #0]
 8006c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d107      	bne.n	8006ca0 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0210 	bic.w	r2, r2, #16
 8006c9e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f7ff fab0 	bl	8006244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ce4:	bf00      	nop
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d02:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff fa8c 	bl	8006230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d18:	bf00      	nop
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d2e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d36:	2b22      	cmp	r3, #34	; 0x22
 8006d38:	d152      	bne.n	8006de0 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d42:	89bb      	ldrh	r3, [r7, #12]
 8006d44:	b2d9      	uxtb	r1, r3
 8006d46:	89fb      	ldrh	r3, [r7, #14]
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d4e:	400a      	ands	r2, r1
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d139      	bne.n	8006df0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d8a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689a      	ldr	r2, [r3, #8]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 0201 	bic.w	r2, r2, #1
 8006d9a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d10f      	bne.n	8006dd2 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0210 	bic.w	r2, r2, #16
 8006dc0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7ff fa44 	bl	8006258 <HAL_UARTEx_RxEventCallback>
 8006dd0:	e002      	b.n	8006dd8 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7fa f954 	bl	8001080 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006dde:	e007      	b.n	8006df0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 0208 	orr.w	r2, r2, #8
 8006dee:	619a      	str	r2, [r3, #24]
}
 8006df0:	bf00      	nop
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e06:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e0e:	2b22      	cmp	r3, #34	; 0x22
 8006e10:	d152      	bne.n	8006eb8 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e1e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e20:	89ba      	ldrh	r2, [r7, #12]
 8006e22:	89fb      	ldrh	r3, [r7, #14]
 8006e24:	4013      	ands	r3, r2
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e30:	1c9a      	adds	r2, r3, #2
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d139      	bne.n	8006ec8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e62:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0201 	bic.w	r2, r2, #1
 8006e72:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d10f      	bne.n	8006eaa <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0210 	bic.w	r2, r2, #16
 8006e98:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7ff f9d8 	bl	8006258 <HAL_UARTEx_RxEventCallback>
 8006ea8:	e002      	b.n	8006eb0 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7fa f8e8 	bl	8001080 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006eb6:	e007      	b.n	8006ec8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699a      	ldr	r2, [r3, #24]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0208 	orr.w	r2, r2, #8
 8006ec6:	619a      	str	r2, [r3, #24]
}
 8006ec8:	bf00      	nop
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ede:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006efe:	2b22      	cmp	r3, #34	; 0x22
 8006f00:	f040 80da 	bne.w	80070b8 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f0a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f0c:	e0aa      	b.n	8007064 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f16:	89bb      	ldrh	r3, [r7, #12]
 8006f18:	b2d9      	uxtb	r1, r3
 8006f1a:	8b7b      	ldrh	r3, [r7, #26]
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f22:	400a      	ands	r2, r1
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d04d      	beq.n	8006ff2 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d010      	beq.n	8006f82 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00b      	beq.n	8006f82 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f78:	f043 0201 	orr.w	r2, r3, #1
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d010      	beq.n	8006fae <UART_RxISR_8BIT_FIFOEN+0xde>
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00b      	beq.n	8006fae <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fa4:	f043 0204 	orr.w	r2, r3, #4
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d010      	beq.n	8006fda <UART_RxISR_8BIT_FIFOEN+0x10a>
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00b      	beq.n	8006fda <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2204      	movs	r2, #4
 8006fc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd0:	f043 0202 	orr.w	r2, r3, #2
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d006      	beq.n	8006ff2 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff f92d 	bl	8006244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d132      	bne.n	8007064 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800700c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007034:	2b01      	cmp	r3, #1
 8007036:	d10f      	bne.n	8007058 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0210 	bic.w	r2, r2, #16
 8007046:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7ff f901 	bl	8006258 <HAL_UARTEx_RxEventCallback>
 8007056:	e002      	b.n	800705e <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7fa f811 	bl	8001080 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007064:	89fb      	ldrh	r3, [r7, #14]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d005      	beq.n	8007076 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	f003 0320 	and.w	r3, r3, #32
 8007070:	2b00      	cmp	r3, #0
 8007072:	f47f af4c 	bne.w	8006f0e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800707c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800707e:	897b      	ldrh	r3, [r7, #10]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d021      	beq.n	80070c8 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800708a:	897a      	ldrh	r2, [r7, #10]
 800708c:	429a      	cmp	r2, r3
 800708e:	d21b      	bcs.n	80070c8 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689a      	ldr	r2, [r3, #8]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800709e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a0b      	ldr	r2, [pc, #44]	; (80070d0 <UART_RxISR_8BIT_FIFOEN+0x200>)
 80070a4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f042 0220 	orr.w	r2, r2, #32
 80070b4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070b6:	e007      	b.n	80070c8 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	699a      	ldr	r2, [r3, #24]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0208 	orr.w	r2, r2, #8
 80070c6:	619a      	str	r2, [r3, #24]
}
 80070c8:	bf00      	nop
 80070ca:	3720      	adds	r7, #32
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	08006d21 	.word	0x08006d21

080070d4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08a      	sub	sp, #40	; 0x28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80070e2:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007102:	2b22      	cmp	r3, #34	; 0x22
 8007104:	f040 80da 	bne.w	80072bc <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800710e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007110:	e0aa      	b.n	8007268 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800711e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8007120:	8aba      	ldrh	r2, [r7, #20]
 8007122:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007124:	4013      	ands	r3, r2
 8007126:	b29a      	uxth	r2, r3
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007130:	1c9a      	adds	r2, r3, #2
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800713c:	b29b      	uxth	r3, r3
 800713e:	3b01      	subs	r3, #1
 8007140:	b29a      	uxth	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	2b00      	cmp	r3, #0
 8007158:	d04d      	beq.n	80071f6 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	2b00      	cmp	r3, #0
 8007162:	d010      	beq.n	8007186 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00b      	beq.n	8007186 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2201      	movs	r2, #1
 8007174:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800717c:	f043 0201 	orr.w	r2, r3, #1
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d010      	beq.n	80071b2 <UART_RxISR_16BIT_FIFOEN+0xde>
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00b      	beq.n	80071b2 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2202      	movs	r2, #2
 80071a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071a8:	f043 0204 	orr.w	r2, r3, #4
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d010      	beq.n	80071de <UART_RxISR_16BIT_FIFOEN+0x10a>
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2204      	movs	r2, #4
 80071cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071d4:	f043 0202 	orr.w	r2, r3, #2
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d006      	beq.n	80071f6 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff f82b 	bl	8006244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d132      	bne.n	8007268 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007210:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6812      	ldr	r2, [r2, #0]
 800721c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007220:	f023 0301 	bic.w	r3, r3, #1
 8007224:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2220      	movs	r2, #32
 800722a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007238:	2b01      	cmp	r3, #1
 800723a:	d10f      	bne.n	800725c <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0210 	bic.w	r2, r2, #16
 800724a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7fe ffff 	bl	8006258 <HAL_UARTEx_RxEventCallback>
 800725a:	e002      	b.n	8007262 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7f9 ff0f 	bl	8001080 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007268:	8afb      	ldrh	r3, [r7, #22]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d005      	beq.n	800727a <UART_RxISR_16BIT_FIFOEN+0x1a6>
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	f003 0320 	and.w	r3, r3, #32
 8007274:	2b00      	cmp	r3, #0
 8007276:	f47f af4c 	bne.w	8007112 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007280:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007282:	89fb      	ldrh	r3, [r7, #14]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d021      	beq.n	80072cc <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800728e:	89fa      	ldrh	r2, [r7, #14]
 8007290:	429a      	cmp	r2, r3
 8007292:	d21b      	bcs.n	80072cc <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689a      	ldr	r2, [r3, #8]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80072a2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a0b      	ldr	r2, [pc, #44]	; (80072d4 <UART_RxISR_16BIT_FIFOEN+0x200>)
 80072a8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f042 0220 	orr.w	r2, r2, #32
 80072b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072ba:	e007      	b.n	80072cc <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0208 	orr.w	r2, r2, #8
 80072ca:	619a      	str	r2, [r3, #24]
}
 80072cc:	bf00      	nop
 80072ce:	3728      	adds	r7, #40	; 0x28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	08006df9 	.word	0x08006df9

080072d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007322:	2b01      	cmp	r3, #1
 8007324:	d101      	bne.n	800732a <HAL_UARTEx_DisableFifoMode+0x16>
 8007326:	2302      	movs	r3, #2
 8007328:	e027      	b.n	800737a <HAL_UARTEx_DisableFifoMode+0x66>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2224      	movs	r2, #36	; 0x24
 8007336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0201 	bic.w	r2, r2, #1
 8007350:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007358:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2220      	movs	r2, #32
 800736c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007396:	2b01      	cmp	r3, #1
 8007398:	d101      	bne.n	800739e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800739a:	2302      	movs	r3, #2
 800739c:	e02d      	b.n	80073fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2224      	movs	r2, #36	; 0x24
 80073aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0201 	bic.w	r2, r2, #1
 80073c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f850 	bl	8007480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007416:	2302      	movs	r3, #2
 8007418:	e02d      	b.n	8007476 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2224      	movs	r2, #36	; 0x24
 8007426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0201 	bic.w	r2, r2, #1
 8007440:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f812 	bl	8007480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2220      	movs	r2, #32
 8007468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800748c:	2b00      	cmp	r3, #0
 800748e:	d108      	bne.n	80074a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074a0:	e031      	b.n	8007506 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074a2:	2308      	movs	r3, #8
 80074a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074a6:	2308      	movs	r3, #8
 80074a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	0e5b      	lsrs	r3, r3, #25
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	0f5b      	lsrs	r3, r3, #29
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f003 0307 	and.w	r3, r3, #7
 80074c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	7b3a      	ldrb	r2, [r7, #12]
 80074ce:	4911      	ldr	r1, [pc, #68]	; (8007514 <UARTEx_SetNbDataToProcess+0x94>)
 80074d0:	5c8a      	ldrb	r2, [r1, r2]
 80074d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074d6:	7b3a      	ldrb	r2, [r7, #12]
 80074d8:	490f      	ldr	r1, [pc, #60]	; (8007518 <UARTEx_SetNbDataToProcess+0x98>)
 80074da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	7b7a      	ldrb	r2, [r7, #13]
 80074ec:	4909      	ldr	r1, [pc, #36]	; (8007514 <UARTEx_SetNbDataToProcess+0x94>)
 80074ee:	5c8a      	ldrb	r2, [r1, r2]
 80074f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80074f4:	7b7a      	ldrb	r2, [r7, #13]
 80074f6:	4908      	ldr	r1, [pc, #32]	; (8007518 <UARTEx_SetNbDataToProcess+0x98>)
 80074f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80074fe:	b29a      	uxth	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007506:	bf00      	nop
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	08007688 	.word	0x08007688
 8007518:	08007690 	.word	0x08007690

0800751c <__libc_init_array>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	4d0d      	ldr	r5, [pc, #52]	; (8007554 <__libc_init_array+0x38>)
 8007520:	4c0d      	ldr	r4, [pc, #52]	; (8007558 <__libc_init_array+0x3c>)
 8007522:	1b64      	subs	r4, r4, r5
 8007524:	10a4      	asrs	r4, r4, #2
 8007526:	2600      	movs	r6, #0
 8007528:	42a6      	cmp	r6, r4
 800752a:	d109      	bne.n	8007540 <__libc_init_array+0x24>
 800752c:	4d0b      	ldr	r5, [pc, #44]	; (800755c <__libc_init_array+0x40>)
 800752e:	4c0c      	ldr	r4, [pc, #48]	; (8007560 <__libc_init_array+0x44>)
 8007530:	f000 f820 	bl	8007574 <_init>
 8007534:	1b64      	subs	r4, r4, r5
 8007536:	10a4      	asrs	r4, r4, #2
 8007538:	2600      	movs	r6, #0
 800753a:	42a6      	cmp	r6, r4
 800753c:	d105      	bne.n	800754a <__libc_init_array+0x2e>
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	f855 3b04 	ldr.w	r3, [r5], #4
 8007544:	4798      	blx	r3
 8007546:	3601      	adds	r6, #1
 8007548:	e7ee      	b.n	8007528 <__libc_init_array+0xc>
 800754a:	f855 3b04 	ldr.w	r3, [r5], #4
 800754e:	4798      	blx	r3
 8007550:	3601      	adds	r6, #1
 8007552:	e7f2      	b.n	800753a <__libc_init_array+0x1e>
 8007554:	080076a0 	.word	0x080076a0
 8007558:	080076a0 	.word	0x080076a0
 800755c:	080076a0 	.word	0x080076a0
 8007560:	080076a4 	.word	0x080076a4

08007564 <memset>:
 8007564:	4402      	add	r2, r0
 8007566:	4603      	mov	r3, r0
 8007568:	4293      	cmp	r3, r2
 800756a:	d100      	bne.n	800756e <memset+0xa>
 800756c:	4770      	bx	lr
 800756e:	f803 1b01 	strb.w	r1, [r3], #1
 8007572:	e7f9      	b.n	8007568 <memset+0x4>

08007574 <_init>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	bf00      	nop
 8007578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757a:	bc08      	pop	{r3}
 800757c:	469e      	mov	lr, r3
 800757e:	4770      	bx	lr

08007580 <_fini>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	bf00      	nop
 8007584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007586:	bc08      	pop	{r3}
 8007588:	469e      	mov	lr, r3
 800758a:	4770      	bx	lr
