
Synth G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c14  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08006dec  08006dec  00016dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ef8  08006ef8  00020414  2**0
                  CONTENTS
  4 .ARM          00000008  08006ef8  08006ef8  00016ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f00  08006f00  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f00  08006f00  00016f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f04  08006f04  00016f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000414  20000000  08006f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000414  0800731c  00020414  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  0800731c  00020720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019673  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002baf  00000000  00000000  00039ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  0003c668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001520  00000000  00000000  0003dc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028813  00000000  00000000  0003f198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d6d  00000000  00000000  000679ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011281f  00000000  00000000  0007e718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00190f37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fa8  00000000  00000000  00190f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000414 	.word	0x20000414
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006dd4 	.word	0x08006dd4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000418 	.word	0x20000418
 8000214:	08006dd4 	.word	0x08006dd4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
static void MX_ADC2_Init(void);
static void MX_TIM2_Init(void);


int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 ff2f 	bl	8001376 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 fa5e 	bl	80009d8 <SystemClock_Config>

  	/* Initialize all configured peripherals */
  	MX_GPIO_Init();
 800051c:	f000 fcc0 	bl	8000ea0 <MX_GPIO_Init>
    MX_DAC1_Init();
 8000520:	f000 fb2a 	bl	8000b78 <MX_DAC1_Init>
    MX_USART1_UART_Init();
 8000524:	f000 fc70 	bl	8000e08 <MX_USART1_UART_Init>
    MX_TIM6_Init();
 8000528:	f000 fbae 	bl	8000c88 <MX_TIM6_Init>
    MX_TIM7_Init();
 800052c:	f000 fbe2 	bl	8000cf4 <MX_TIM7_Init>
    MX_TIM8_Init();
 8000530:	f000 fc16 	bl	8000d60 <MX_TIM8_Init>
    MX_ADC2_Init();
 8000534:	f000 fab8 	bl	8000aa8 <MX_ADC2_Init>
    MX_TIM2_Init();
 8000538:	f000 fb58 	bl	8000bec <MX_TIM2_Init>

  // Calibrate ADC
  //HAL_ADCEx_Calibration_Start(&hadc2);

  // Enable DAC
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800053c:	2100      	movs	r1, #0
 800053e:	4845      	ldr	r0, [pc, #276]	; (8000654 <main+0x144>)
 8000540:	f002 fd13 	bl	8002f6a <HAL_DAC_Start>

  // Start conversions
  HAL_ADC_Start(&hadc2);
 8000544:	4844      	ldr	r0, [pc, #272]	; (8000658 <main+0x148>)
 8000546:	f001 fbab 	bl	8001ca0 <HAL_ADC_Start>

  // Enable timers
  HAL_TIM_Base_Start_IT(&htim2);
 800054a:	4844      	ldr	r0, [pc, #272]	; (800065c <main+0x14c>)
 800054c:	f004 fa84 	bl	8004a58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000550:	4843      	ldr	r0, [pc, #268]	; (8000660 <main+0x150>)
 8000552:	f004 fa81 	bl	8004a58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000556:	4843      	ldr	r0, [pc, #268]	; (8000664 <main+0x154>)
 8000558:	f004 fa7e 	bl	8004a58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 800055c:	4842      	ldr	r0, [pc, #264]	; (8000668 <main+0x158>)
 800055e:	f004 fa7b 	bl	8004a58 <HAL_TIM_Base_Start_IT>

  voices[0].status = 0;
 8000562:	4b42      	ldr	r3, [pc, #264]	; (800066c <main+0x15c>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
  voices[1].status = 0;
 8000568:	4b40      	ldr	r3, [pc, #256]	; (800066c <main+0x15c>)
 800056a:	2200      	movs	r2, #0
 800056c:	739a      	strb	r2, [r3, #14]
  voices[2].status = 0;
 800056e:	4b3f      	ldr	r3, [pc, #252]	; (800066c <main+0x15c>)
 8000570:	2200      	movs	r2, #0
 8000572:	771a      	strb	r2, [r3, #28]
  voices[0].index = 0;
 8000574:	4b3d      	ldr	r3, [pc, #244]	; (800066c <main+0x15c>)
 8000576:	2200      	movs	r2, #0
 8000578:	731a      	strb	r2, [r3, #12]
  voices[1].index = 0;
 800057a:	4b3c      	ldr	r3, [pc, #240]	; (800066c <main+0x15c>)
 800057c:	2200      	movs	r2, #0
 800057e:	769a      	strb	r2, [r3, #26]
  voices[2].index = 0;
 8000580:	4b3a      	ldr	r3, [pc, #232]	; (800066c <main+0x15c>)
 8000582:	2200      	movs	r2, #0
 8000584:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  notes_on = 0;
 8000588:	4b39      	ldr	r3, [pc, #228]	; (8000670 <main+0x160>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
  // __HAL_TIM_SET_AUTORELOAD
  TIM6->ARR = ARR_VAL(C4);
 800058e:	4b39      	ldr	r3, [pc, #228]	; (8000674 <main+0x164>)
 8000590:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8000594:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM7->ARR = ARR_VAL(E4);
 8000596:	4b38      	ldr	r3, [pc, #224]	; (8000678 <main+0x168>)
 8000598:	f640 72b7 	movw	r2, #4023	; 0xfb7
 800059c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM8->ARR = ARR_VAL(G4);
 800059e:	4b37      	ldr	r3, [pc, #220]	; (800067c <main+0x16c>)
 80005a0:	f640 523b 	movw	r2, #3387	; 0xd3b
 80005a4:	62da      	str	r2, [r3, #44]	; 0x2c

  lut = sin_lut;
 80005a6:	4b36      	ldr	r3, [pc, #216]	; (8000680 <main+0x170>)
 80005a8:	4a36      	ldr	r2, [pc, #216]	; (8000684 <main+0x174>)
 80005aa:	601a      	str	r2, [r3, #0]

  // Main loop - read MIDI and play notes on DAC
  // DAC data handled in UART interrupt callback
  while (1) {

	  AD_RES = HAL_ADC_GetValue(&hadc2);
 80005ac:	482a      	ldr	r0, [pc, #168]	; (8000658 <main+0x148>)
 80005ae:	f001 fc5b 	bl	8001e68 <HAL_ADC_GetValue>
 80005b2:	4603      	mov	r3, r0
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	4b34      	ldr	r3, [pc, #208]	; (8000688 <main+0x178>)
 80005b8:	801a      	strh	r2, [r3, #0]

	  //TODO put in function
	  HAL_UART_Receive_IT(&huart1, midi_tmp, 3);
 80005ba:	2203      	movs	r2, #3
 80005bc:	4933      	ldr	r1, [pc, #204]	; (800068c <main+0x17c>)
 80005be:	4834      	ldr	r0, [pc, #208]	; (8000690 <main+0x180>)
 80005c0:	f004 ffec 	bl	800559c <HAL_UART_Receive_IT>
	  if (GLOBAL_MIDI_NOTE_ON) {
 80005c4:	4b33      	ldr	r3, [pc, #204]	; (8000694 <main+0x184>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b90      	cmp	r3, #144	; 0x90
 80005ca:	d106      	bne.n	80005da <main+0xca>
		  MIDI_IN_LED_ON;
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d2:	4831      	ldr	r0, [pc, #196]	; (8000698 <main+0x188>)
 80005d4:	f003 f99c 	bl	8003910 <HAL_GPIO_WritePin>
 80005d8:	e009      	b.n	80005ee <main+0xde>
	  }
	  else if (GLOBAL_MIDI_NOTE_OFF) {
 80005da:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <main+0x184>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b80      	cmp	r3, #128	; 0x80
 80005e0:	d105      	bne.n	80005ee <main+0xde>
		  MIDI_IN_LED_OFF;
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e8:	482b      	ldr	r0, [pc, #172]	; (8000698 <main+0x188>)
 80005ea:	f003 f991 	bl	8003910 <HAL_GPIO_WritePin>
	  }


	  if (AD_RES >= 0 && AD_RES < 1024) {
 80005ee:	4b26      	ldr	r3, [pc, #152]	; (8000688 <main+0x178>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005f6:	d203      	bcs.n	8000600 <main+0xf0>
	  		lut = sin_lut;
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <main+0x170>)
 80005fa:	4a22      	ldr	r2, [pc, #136]	; (8000684 <main+0x174>)
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	e7d5      	b.n	80005ac <main+0x9c>
	  }
	  else if (AD_RES >= 1024 && AD_RES < 2048) {
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <main+0x178>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000608:	d308      	bcc.n	800061c <main+0x10c>
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <main+0x178>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000612:	d203      	bcs.n	800061c <main+0x10c>
	  		lut = tri_lut;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <main+0x170>)
 8000616:	4a21      	ldr	r2, [pc, #132]	; (800069c <main+0x18c>)
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	e01a      	b.n	8000652 <main+0x142>
	  }
	  else if (AD_RES >= 2048 && AD_RES < 3072) {
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <main+0x178>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000624:	d308      	bcc.n	8000638 <main+0x128>
 8000626:	4b18      	ldr	r3, [pc, #96]	; (8000688 <main+0x178>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800062e:	d203      	bcs.n	8000638 <main+0x128>
	  		lut = saw_lut;
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <main+0x170>)
 8000632:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <main+0x190>)
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	e00c      	b.n	8000652 <main+0x142>
	  }
	  else if (AD_RES >= 3072 && AD_RES < 4096) {
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <main+0x178>)
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000640:	d3b4      	bcc.n	80005ac <main+0x9c>
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <main+0x178>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800064a:	d2af      	bcs.n	80005ac <main+0x9c>
	  		lut = sqr_lut;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <main+0x170>)
 800064e:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <main+0x194>)
 8000650:	601a      	str	r2, [r3, #0]
	  AD_RES = HAL_ADC_GetValue(&hadc2);
 8000652:	e7ab      	b.n	80005ac <main+0x9c>
 8000654:	20000480 	.word	0x20000480
 8000658:	20000494 	.word	0x20000494
 800065c:	20000620 	.word	0x20000620
 8000660:	200005d4 	.word	0x200005d4
 8000664:	200006cc 	.word	0x200006cc
 8000668:	20000434 	.word	0x20000434
 800066c:	200005a8 	.word	0x200005a8
 8000670:	20000430 	.word	0x20000430
 8000674:	40001000 	.word	0x40001000
 8000678:	40001400 	.word	0x40001400
 800067c:	40013400 	.word	0x40013400
 8000680:	20000404 	.word	0x20000404
 8000684:	20000004 	.word	0x20000004
 8000688:	20000432 	.word	0x20000432
 800068c:	20000718 	.word	0x20000718
 8000690:	20000518 	.word	0x20000518
 8000694:	20000514 	.word	0x20000514
 8000698:	48000400 	.word	0x48000400
 800069c:	20000104 	.word	0x20000104
 80006a0:	20000304 	.word	0x20000304
 80006a4:	20000204 	.word	0x20000204

080006a8 <HAL_ADC_ConvCpltCallback>:
}

// TODO doesnt get called
// Switch lookup table based on ADC result
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	AD_RES = HAL_ADC_GetValue(&hadc2);
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <HAL_ADC_ConvCpltCallback+0x20>)
 80006b2:	f001 fbd9 	bl	8001e68 <HAL_ADC_GetValue>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4b04      	ldr	r3, [pc, #16]	; (80006cc <HAL_ADC_ConvCpltCallback+0x24>)
 80006bc:	801a      	strh	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000494 	.word	0x20000494
 80006cc:	20000432 	.word	0x20000432

080006d0 <HAL_TIM_PeriodElapsedCallback>:

// When timer triggers, put corresponding signal on DAC
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

	if (htim == &htim6) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a64      	ldr	r2, [pc, #400]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d13d      	bne.n	800075c <HAL_TIM_PeriodElapsedCallback+0x8c>
		PUT_TO_DAC(VOICE0);
 80006e0:	4b63      	ldr	r3, [pc, #396]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	4b63      	ldr	r3, [pc, #396]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	461c      	mov	r4, r3
 80006ec:	4b62      	ldr	r3, [pc, #392]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b60      	ldr	r3, [pc, #384]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80006f2:	7b1b      	ldrb	r3, [r3, #12]
 80006f4:	1c59      	adds	r1, r3, #1
 80006f6:	b2cd      	uxtb	r5, r1
 80006f8:	495e      	ldr	r1, [pc, #376]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80006fa:	730d      	strb	r5, [r1, #12]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	4413      	add	r3, r2
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	fb03 f204 	mul.w	r2, r3, r4
 8000706:	4b5b      	ldr	r3, [pc, #364]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000708:	7b9b      	ldrb	r3, [r3, #14]
 800070a:	461c      	mov	r4, r3
 800070c:	4b5a      	ldr	r3, [pc, #360]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800070e:	6819      	ldr	r1, [r3, #0]
 8000710:	4b58      	ldr	r3, [pc, #352]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000712:	7e9b      	ldrb	r3, [r3, #26]
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	440b      	add	r3, r1
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	fb03 f304 	mul.w	r3, r3, r4
 800071e:	441a      	add	r2, r3
 8000720:	4b54      	ldr	r3, [pc, #336]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000722:	7f1b      	ldrb	r3, [r3, #28]
 8000724:	461c      	mov	r4, r3
 8000726:	4b54      	ldr	r3, [pc, #336]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000728:	6819      	ldr	r1, [r3, #0]
 800072a:	4b52      	ldr	r3, [pc, #328]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800072c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	440b      	add	r3, r1
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	fb03 f304 	mul.w	r3, r3, r4
 800073a:	4413      	add	r3, r2
 800073c:	fb03 f300 	mul.w	r3, r3, r0
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	484d      	ldr	r0, [pc, #308]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000746:	f002 fcbd 	bl	80030c4 <HAL_DAC_SetValue>
		RESET_INDEX(0);
 800074a:	4b4a      	ldr	r3, [pc, #296]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800074c:	7b1b      	ldrb	r3, [r3, #12]
 800074e:	2b80      	cmp	r3, #128	; 0x80
 8000750:	f040 8088 	bne.w	8000864 <HAL_TIM_PeriodElapsedCallback+0x194>
 8000754:	4b47      	ldr	r3, [pc, #284]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000756:	2200      	movs	r2, #0
 8000758:	731a      	strb	r2, [r3, #12]
		if (voices[2].index == NUM_PTS) voices[2].index = 0;
	}
*/


}
 800075a:	e083      	b.n	8000864 <HAL_TIM_PeriodElapsedCallback+0x194>
	else if (htim == &htim7) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a48      	ldr	r2, [pc, #288]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d13c      	bne.n	80007de <HAL_TIM_PeriodElapsedCallback+0x10e>
		PUT_TO_DAC(VOICE1);
 8000764:	4b42      	ldr	r3, [pc, #264]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461c      	mov	r4, r3
 800076a:	4b42      	ldr	r3, [pc, #264]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	4619      	mov	r1, r3
 8000770:	4b41      	ldr	r3, [pc, #260]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b3f      	ldr	r3, [pc, #252]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000776:	7b1b      	ldrb	r3, [r3, #12]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	4413      	add	r3, r2
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	fb03 f201 	mul.w	r2, r3, r1
 8000782:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000784:	7b9b      	ldrb	r3, [r3, #14]
 8000786:	461d      	mov	r5, r3
 8000788:	4b3b      	ldr	r3, [pc, #236]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800078a:	6819      	ldr	r1, [r3, #0]
 800078c:	4b39      	ldr	r3, [pc, #228]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800078e:	7e9b      	ldrb	r3, [r3, #26]
 8000790:	1c58      	adds	r0, r3, #1
 8000792:	b2c6      	uxtb	r6, r0
 8000794:	4837      	ldr	r0, [pc, #220]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000796:	7686      	strb	r6, [r0, #26]
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	440b      	add	r3, r1
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	fb03 f305 	mul.w	r3, r3, r5
 80007a2:	441a      	add	r2, r3
 80007a4:	4b33      	ldr	r3, [pc, #204]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80007a6:	7f1b      	ldrb	r3, [r3, #28]
 80007a8:	4618      	mov	r0, r3
 80007aa:	4b33      	ldr	r3, [pc, #204]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80007ac:	6819      	ldr	r1, [r3, #0]
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80007b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	440b      	add	r3, r1
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	fb03 f300 	mul.w	r3, r3, r0
 80007be:	4413      	add	r3, r2
 80007c0:	fb03 f304 	mul.w	r3, r3, r4
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	482c      	ldr	r0, [pc, #176]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80007ca:	f002 fc7b 	bl	80030c4 <HAL_DAC_SetValue>
		RESET_INDEX(1);
 80007ce:	4b29      	ldr	r3, [pc, #164]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80007d0:	7e9b      	ldrb	r3, [r3, #26]
 80007d2:	2b80      	cmp	r3, #128	; 0x80
 80007d4:	d146      	bne.n	8000864 <HAL_TIM_PeriodElapsedCallback+0x194>
 80007d6:	4b27      	ldr	r3, [pc, #156]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	769a      	strb	r2, [r3, #26]
}
 80007dc:	e042      	b.n	8000864 <HAL_TIM_PeriodElapsedCallback+0x194>
	else if (htim == &htim8) {
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a28      	ldr	r2, [pc, #160]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d13e      	bne.n	8000864 <HAL_TIM_PeriodElapsedCallback+0x194>
		PUT_TO_DAC(VOICE2);
 80007e6:	4b22      	ldr	r3, [pc, #136]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	461c      	mov	r4, r3
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80007f8:	7b1b      	ldrb	r3, [r3, #12]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	fb03 f201 	mul.w	r2, r3, r1
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000806:	7b9b      	ldrb	r3, [r3, #14]
 8000808:	4618      	mov	r0, r3
 800080a:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800080c:	6819      	ldr	r1, [r3, #0]
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000810:	7e9b      	ldrb	r3, [r3, #26]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	440b      	add	r3, r1
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	fb03 f300 	mul.w	r3, r3, r0
 800081c:	441a      	add	r2, r3
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000820:	7f1b      	ldrb	r3, [r3, #28]
 8000822:	461d      	mov	r5, r3
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000826:	6819      	ldr	r1, [r3, #0]
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800082a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800082e:	1c58      	adds	r0, r3, #1
 8000830:	b2c6      	uxtb	r6, r0
 8000832:	4810      	ldr	r0, [pc, #64]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000834:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	440b      	add	r3, r1
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	fb03 f305 	mul.w	r3, r3, r5
 8000842:	4413      	add	r3, r2
 8000844:	fb03 f304 	mul.w	r3, r3, r4
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800084e:	f002 fc39 	bl	80030c4 <HAL_DAC_SetValue>
		RESET_INDEX(2);
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000858:	2b80      	cmp	r3, #128	; 0x80
 800085a:	d103      	bne.n	8000864 <HAL_TIM_PeriodElapsedCallback+0x194>
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800085e:	2200      	movs	r2, #0
 8000860:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800086c:	200005d4 	.word	0x200005d4
 8000870:	20000000 	.word	0x20000000
 8000874:	200005a8 	.word	0x200005a8
 8000878:	20000404 	.word	0x20000404
 800087c:	20000480 	.word	0x20000480
 8000880:	200006cc 	.word	0x200006cc
 8000884:	20000434 	.word	0x20000434

08000888 <HAL_UART_RxCpltCallback>:

// When UART message recieved, only valid if starts with 0x80 or 0x90
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

	if (midi_tmp[0] == 0x90) {
 8000890:	4b47      	ldr	r3, [pc, #284]	; (80009b0 <HAL_UART_RxCpltCallback+0x128>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b90      	cmp	r3, #144	; 0x90
 8000896:	d160      	bne.n	800095a <HAL_UART_RxCpltCallback+0xd2>
		uint8_t i;
		for (i = 0; i < 3; i++) {
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e008      	b.n	80008b0 <HAL_UART_RxCpltCallback+0x28>
			midi_msg[i] = midi_tmp[i];
 800089e:	7bfa      	ldrb	r2, [r7, #15]
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	4943      	ldr	r1, [pc, #268]	; (80009b0 <HAL_UART_RxCpltCallback+0x128>)
 80008a4:	5c89      	ldrb	r1, [r1, r2]
 80008a6:	4a43      	ldr	r2, [pc, #268]	; (80009b4 <HAL_UART_RxCpltCallback+0x12c>)
 80008a8:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 3; i++) {
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	3301      	adds	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d9f3      	bls.n	800089e <HAL_UART_RxCpltCallback+0x16>
		}

		voices[notes_on].status = ON;
 80008b6:	4b40      	ldr	r3, [pc, #256]	; (80009b8 <HAL_UART_RxCpltCallback+0x130>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4619      	mov	r1, r3
 80008bc:	4a3f      	ldr	r2, [pc, #252]	; (80009bc <HAL_UART_RxCpltCallback+0x134>)
 80008be:	460b      	mov	r3, r1
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	1a5b      	subs	r3, r3, r1
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	4413      	add	r3, r2
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
		notes_on++;
 80008cc:	4b3a      	ldr	r3, [pc, #232]	; (80009b8 <HAL_UART_RxCpltCallback+0x130>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	3301      	adds	r3, #1
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b38      	ldr	r3, [pc, #224]	; (80009b8 <HAL_UART_RxCpltCallback+0x130>)
 80008d6:	701a      	strb	r2, [r3, #0]

		switch (notes_on) {
 80008d8:	4b37      	ldr	r3, [pc, #220]	; (80009b8 <HAL_UART_RxCpltCallback+0x130>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d02a      	beq.n	8000936 <HAL_UART_RxCpltCallback+0xae>
 80008e0:	2b03      	cmp	r3, #3
 80008e2:	dc5f      	bgt.n	80009a4 <HAL_UART_RxCpltCallback+0x11c>
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d002      	beq.n	80008ee <HAL_UART_RxCpltCallback+0x66>
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d012      	beq.n	8000912 <HAL_UART_RxCpltCallback+0x8a>

		notes_on--;
		voices[notes_on].status = OFF;
	}

}
 80008ec:	e05a      	b.n	80009a4 <HAL_UART_RxCpltCallback+0x11c>
			TIM6->ARR = ARR_VAL(NOTE);
 80008ee:	4b31      	ldr	r3, [pc, #196]	; (80009b4 <HAL_UART_RxCpltCallback+0x12c>)
 80008f0:	785b      	ldrb	r3, [r3, #1]
 80008f2:	3301      	adds	r3, #1
 80008f4:	4a32      	ldr	r2, [pc, #200]	; (80009c0 <HAL_UART_RxCpltCallback+0x138>)
 80008f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008fa:	01db      	lsls	r3, r3, #7
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <HAL_UART_RxCpltCallback+0x13c>)
 8000900:	fbb3 f3f2 	udiv	r3, r3, r2
 8000904:	4a30      	ldr	r2, [pc, #192]	; (80009c8 <HAL_UART_RxCpltCallback+0x140>)
 8000906:	3b01      	subs	r3, #1
 8000908:	62d3      	str	r3, [r2, #44]	; 0x2c
			multiplier = 3;
 800090a:	4b30      	ldr	r3, [pc, #192]	; (80009cc <HAL_UART_RxCpltCallback+0x144>)
 800090c:	2203      	movs	r2, #3
 800090e:	701a      	strb	r2, [r3, #0]
			break;
 8000910:	e048      	b.n	80009a4 <HAL_UART_RxCpltCallback+0x11c>
			TIM7->ARR = ARR_VAL(NOTE);
 8000912:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <HAL_UART_RxCpltCallback+0x12c>)
 8000914:	785b      	ldrb	r3, [r3, #1]
 8000916:	3301      	adds	r3, #1
 8000918:	4a29      	ldr	r2, [pc, #164]	; (80009c0 <HAL_UART_RxCpltCallback+0x138>)
 800091a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800091e:	01db      	lsls	r3, r3, #7
 8000920:	461a      	mov	r2, r3
 8000922:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <HAL_UART_RxCpltCallback+0x13c>)
 8000924:	fbb3 f3f2 	udiv	r3, r3, r2
 8000928:	4a29      	ldr	r2, [pc, #164]	; (80009d0 <HAL_UART_RxCpltCallback+0x148>)
 800092a:	3b01      	subs	r3, #1
 800092c:	62d3      	str	r3, [r2, #44]	; 0x2c
			multiplier = 2;
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <HAL_UART_RxCpltCallback+0x144>)
 8000930:	2202      	movs	r2, #2
 8000932:	701a      	strb	r2, [r3, #0]
			break;
 8000934:	e036      	b.n	80009a4 <HAL_UART_RxCpltCallback+0x11c>
			TIM8->ARR = ARR_VAL(NOTE);
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <HAL_UART_RxCpltCallback+0x12c>)
 8000938:	785b      	ldrb	r3, [r3, #1]
 800093a:	3301      	adds	r3, #1
 800093c:	4a20      	ldr	r2, [pc, #128]	; (80009c0 <HAL_UART_RxCpltCallback+0x138>)
 800093e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000942:	01db      	lsls	r3, r3, #7
 8000944:	461a      	mov	r2, r3
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <HAL_UART_RxCpltCallback+0x13c>)
 8000948:	fbb3 f3f2 	udiv	r3, r3, r2
 800094c:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <HAL_UART_RxCpltCallback+0x14c>)
 800094e:	3b01      	subs	r3, #1
 8000950:	62d3      	str	r3, [r2, #44]	; 0x2c
			multiplier = 1;
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <HAL_UART_RxCpltCallback+0x144>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
			break;
 8000958:	e024      	b.n	80009a4 <HAL_UART_RxCpltCallback+0x11c>
	else if (midi_tmp[0] == 0x80) {
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_UART_RxCpltCallback+0x128>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b80      	cmp	r3, #128	; 0x80
 8000960:	d120      	bne.n	80009a4 <HAL_UART_RxCpltCallback+0x11c>
		for (i = 0; i < 3; i++) {
 8000962:	2300      	movs	r3, #0
 8000964:	73bb      	strb	r3, [r7, #14]
 8000966:	e008      	b.n	800097a <HAL_UART_RxCpltCallback+0xf2>
			midi_msg[i] = midi_tmp[i];
 8000968:	7bba      	ldrb	r2, [r7, #14]
 800096a:	7bbb      	ldrb	r3, [r7, #14]
 800096c:	4910      	ldr	r1, [pc, #64]	; (80009b0 <HAL_UART_RxCpltCallback+0x128>)
 800096e:	5c89      	ldrb	r1, [r1, r2]
 8000970:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <HAL_UART_RxCpltCallback+0x12c>)
 8000972:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 3; i++) {
 8000974:	7bbb      	ldrb	r3, [r7, #14]
 8000976:	3301      	adds	r3, #1
 8000978:	73bb      	strb	r3, [r7, #14]
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d9f3      	bls.n	8000968 <HAL_UART_RxCpltCallback+0xe0>
		notes_on--;
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_UART_RxCpltCallback+0x130>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	3b01      	subs	r3, #1
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_UART_RxCpltCallback+0x130>)
 800098a:	701a      	strb	r2, [r3, #0]
		voices[notes_on].status = OFF;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_UART_RxCpltCallback+0x130>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4619      	mov	r1, r3
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_UART_RxCpltCallback+0x134>)
 8000994:	460b      	mov	r3, r1
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	1a5b      	subs	r3, r3, r1
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
}
 80009a2:	e7ff      	b.n	80009a4 <HAL_UART_RxCpltCallback+0x11c>
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	20000718 	.word	0x20000718
 80009b4:	20000514 	.word	0x20000514
 80009b8:	20000430 	.word	0x20000430
 80009bc:	200005a8 	.word	0x200005a8
 80009c0:	08006dec 	.word	0x08006dec
 80009c4:	0a21fe80 	.word	0x0a21fe80
 80009c8:	40001000 	.word	0x40001000
 80009cc:	20000000 	.word	0x20000000
 80009d0:	40001400 	.word	0x40001400
 80009d4:	40013400 	.word	0x40013400

080009d8 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b0a8      	sub	sp, #160	; 0xa0
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80009e2:	2238      	movs	r2, #56	; 0x38
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f006 f9ec 	bl	8006dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009fc:	463b      	mov	r3, r7
 80009fe:	2254      	movs	r2, #84	; 0x54
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f006 f9de 	bl	8006dc4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f002 ff99 	bl	8003940 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a16:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a18:	2340      	movs	r3, #64	; 0x40
 8000a1a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a22:	2302      	movs	r3, #2
 8000a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a2e:	2355      	movs	r3, #85	; 0x55
 8000a30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f003 f82c 	bl	8003aa8 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a56:	f000 fa6f 	bl	8000f38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a72:	2104      	movs	r1, #4
 8000a74:	4618      	mov	r0, r3
 8000a76:	f003 fb2f 	bl	80040d8 <HAL_RCC_ClockConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a80:	f000 fa5a 	bl	8000f38 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f003 fd3e 	bl	8004510 <HAL_RCCEx_PeriphCLKConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a9a:	f000 fa4d 	bl	8000f38 <Error_Handler>
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	37a0      	adds	r7, #160	; 0xa0
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <MX_ADC2_Init>:

static void MX_ADC2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aae:	463b      	mov	r3, r7
 8000ab0:	2220      	movs	r2, #32
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f006 f985 	bl	8006dc4 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000aba:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000abc:	4a2c      	ldr	r2, [pc, #176]	; (8000b70 <MX_ADC2_Init+0xc8>)
 8000abe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000ac2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ac6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac8:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ace:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ada:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000ae2:	2208      	movs	r2, #8
 8000ae4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000b02:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b26:	4811      	ldr	r0, [pc, #68]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000b28:	f000 fef8 	bl	800191c <HAL_ADC_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000b32:	f000 fa01 	bl	8000f38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_ADC2_Init+0xcc>)
 8000b38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b3a:	2306      	movs	r3, #6
 8000b3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b42:	237f      	movs	r3, #127	; 0x7f
 8000b44:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b46:	2304      	movs	r3, #4
 8000b48:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000b54:	f001 fc04 	bl	8002360 <HAL_ADC_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000b5e:	f000 f9eb 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	3720      	adds	r7, #32
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000494 	.word	0x20000494
 8000b70:	50000100 	.word	0x50000100
 8000b74:	04300002 	.word	0x04300002

08000b78 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	; 0x30
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2230      	movs	r2, #48	; 0x30
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f006 f91d 	bl	8006dc4 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <MX_DAC1_Init+0x6c>)
 8000b8c:	4a16      	ldr	r2, [pc, #88]	; (8000be8 <MX_DAC1_Init+0x70>)
 8000b8e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b90:	4814      	ldr	r0, [pc, #80]	; (8000be4 <MX_DAC1_Init+0x6c>)
 8000b92:	f002 f9c8 	bl	8002f26 <HAL_DAC_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b9c:	f000 f9cc 	bl	8000f38 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <MX_DAC1_Init+0x6c>)
 8000bcc:	f002 faac 	bl	8003128 <HAL_DAC_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000bd6:	f000 f9af 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	3730      	adds	r7, #48	; 0x30
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000480 	.word	0x20000480
 8000be8:	50000800 	.word	0x50000800

08000bec <MX_TIM2_Init>:
  * @retval None
  */


static void MX_TIM2_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = ARR_VAL(1);
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c20:	4a18      	ldr	r2, [pc, #96]	; (8000c84 <MX_TIM2_Init+0x98>)
 8000c22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c30:	4813      	ldr	r0, [pc, #76]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c32:	f003 feb9 	bl	80049a8 <HAL_TIM_Base_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c3c:	f000 f97c 	bl	8000f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c4e:	f004 f8fb 	bl	8004e48 <HAL_TIM_ConfigClockSource>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c58:	f000 f96e 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c5c:	2320      	movs	r3, #32
 8000c5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_TIM2_Init+0x94>)
 8000c6a:	f004 fb6b 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c74:	f000 f960 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3720      	adds	r7, #32
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000620 	.word	0x20000620
 8000c84:	001443fc 	.word	0x001443fc

08000c88 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_TIM6_Init+0x64>)
 8000c9a:	4a15      	ldr	r2, [pc, #84]	; (8000cf0 <MX_TIM6_Init+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MX_TIM6_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_TIM6_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = ARR_VAL(C4);
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <MX_TIM6_Init+0x64>)
 8000cac:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8000cb0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_TIM6_Init+0x64>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_TIM6_Init+0x64>)
 8000cba:	f003 fe75 	bl	80049a8 <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000cc4:	f000 f938 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cc8:	2320      	movs	r3, #32
 8000cca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_TIM6_Init+0x64>)
 8000cd6:	f004 fb35 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ce0:	f000 f92a 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200005d4 	.word	0x200005d4
 8000cf0:	40001000 	.word	0x40001000

08000cf4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_TIM7_Init+0x64>)
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <MX_TIM7_Init+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_TIM7_Init+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_TIM7_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = ARR_VAL(C4);
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_TIM7_Init+0x64>)
 8000d18:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8000d1c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_TIM7_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <MX_TIM7_Init+0x64>)
 8000d26:	f003 fe3f 	bl	80049a8 <HAL_TIM_Base_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000d30:	f000 f902 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d34:	2320      	movs	r3, #32
 8000d36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_TIM7_Init+0x64>)
 8000d42:	f004 faff 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000d4c:	f000 f8f4 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200006cc 	.word	0x200006cc
 8000d5c:	40001400 	.word	0x40001400

08000d60 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d7e:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <MX_TIM8_Init+0xa0>)
 8000d80:	4a20      	ldr	r2, [pc, #128]	; (8000e04 <MX_TIM8_Init+0xa4>)
 8000d82:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <MX_TIM8_Init+0xa0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_TIM8_Init+0xa0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = ARR_VAL(C4);
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_TIM8_Init+0xa0>)
 8000d92:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8000d96:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_TIM8_Init+0xa0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_TIM8_Init+0xa0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_TIM8_Init+0xa0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000daa:	4815      	ldr	r0, [pc, #84]	; (8000e00 <MX_TIM8_Init+0xa0>)
 8000dac:	f003 fdfc 	bl	80049a8 <HAL_TIM_Base_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000db6:	f000 f8bf 	bl	8000f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480e      	ldr	r0, [pc, #56]	; (8000e00 <MX_TIM8_Init+0xa0>)
 8000dc8:	f004 f83e 	bl	8004e48 <HAL_TIM_ConfigClockSource>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000dd2:	f000 f8b1 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dd6:	2320      	movs	r3, #32
 8000dd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4619      	mov	r1, r3
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <MX_TIM8_Init+0xa0>)
 8000de8:	f004 faac 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000df2:	f000 f8a1 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000434 	.word	0x20000434
 8000e04:	40013400 	.word	0x40013400

08000e08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <MX_USART1_UART_Init+0x90>)
 8000e0e:	4a23      	ldr	r2, [pc, #140]	; (8000e9c <MX_USART1_UART_Init+0x94>)
 8000e10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8000e12:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <MX_USART1_UART_Init+0x90>)
 8000e14:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000e18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <MX_USART1_UART_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <MX_USART1_UART_Init+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_USART1_UART_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <MX_USART1_UART_Init+0x90>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_USART1_UART_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_USART1_UART_Init+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_USART1_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_USART1_UART_Init+0x90>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_USART1_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e50:	4811      	ldr	r0, [pc, #68]	; (8000e98 <MX_USART1_UART_Init+0x90>)
 8000e52:	f004 fb53 	bl	80054fc <HAL_UART_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e5c:	f000 f86c 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e60:	2100      	movs	r1, #0
 8000e62:	480d      	ldr	r0, [pc, #52]	; (8000e98 <MX_USART1_UART_Init+0x90>)
 8000e64:	f005 febf 	bl	8006be6 <HAL_UARTEx_SetTxFifoThreshold>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e6e:	f000 f863 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e72:	2100      	movs	r1, #0
 8000e74:	4808      	ldr	r0, [pc, #32]	; (8000e98 <MX_USART1_UART_Init+0x90>)
 8000e76:	f005 fef4 	bl	8006c62 <HAL_UARTEx_SetRxFifoThreshold>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e80:	f000 f85a 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <MX_USART1_UART_Init+0x90>)
 8000e86:	f005 fe75 	bl	8006b74 <HAL_UARTEx_DisableFifoMode>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e90:	f000 f852 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000518 	.word	0x20000518
 8000e9c:	40013800 	.word	0x40013800

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <MX_GPIO_Init+0x90>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <MX_GPIO_Init+0x90>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_GPIO_Init+0x90>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_GPIO_Init+0x90>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <MX_GPIO_Init+0x90>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_GPIO_Init+0x90>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_GPIO_Init+0x90>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <MX_GPIO_Init+0x90>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_GPIO_Init+0x90>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <MX_GPIO_Init+0x94>)
 8000f06:	f002 fd03 	bl	8003910 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PB11 */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4619      	mov	r1, r3
 8000f22:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_GPIO_Init+0x94>)
 8000f24:	f002 fb72 	bl	800360c <HAL_GPIO_Init>

}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48000400 	.word	0x48000400

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <Error_Handler+0x8>
	...

08000f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_MspInit+0x44>)
 8000f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_MspInit+0x44>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6613      	str	r3, [r2, #96]	; 0x60
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_MspInit+0x44>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_MspInit+0x44>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <HAL_MspInit+0x44>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_MspInit+0x44>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f7a:	f002 fd85 	bl	8003a88 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a19      	ldr	r2, [pc, #100]	; (8001010 <HAL_ADC_MspInit+0x84>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d12c      	bne.n	8001008 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_ADC_MspInit+0x88>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a18      	ldr	r2, [pc, #96]	; (8001014 <HAL_ADC_MspInit+0x88>)
 8000fb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_ADC_MspInit+0x88>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <HAL_ADC_MspInit+0x88>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a12      	ldr	r2, [pc, #72]	; (8001014 <HAL_ADC_MspInit+0x88>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <HAL_ADC_MspInit+0x88>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff4:	f002 fb0a 	bl	800360c <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2012      	movs	r0, #18
 8000ffe:	f001 ff5e 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001002:	2012      	movs	r0, #18
 8001004:	f001 ff75 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	; 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	50000100 	.word	0x50000100
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a19      	ldr	r2, [pc, #100]	; (800109c <HAL_DAC_MspInit+0x84>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d12c      	bne.n	8001094 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_DAC_MspInit+0x88>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a18      	ldr	r2, [pc, #96]	; (80010a0 <HAL_DAC_MspInit+0x88>)
 8001040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <HAL_DAC_MspInit+0x88>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_DAC_MspInit+0x88>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <HAL_DAC_MspInit+0x88>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <HAL_DAC_MspInit+0x88>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800106a:	2310      	movs	r3, #16
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106e:	2303      	movs	r3, #3
 8001070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f002 fac4 	bl	800360c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	2036      	movs	r0, #54	; 0x36
 800108a:	f001 ff18 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800108e:	2036      	movs	r0, #54	; 0x36
 8001090:	f001 ff2f 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001094:	bf00      	nop
 8001096:	3728      	adds	r7, #40	; 0x28
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	50000800 	.word	0x50000800
 80010a0:	40021000 	.word	0x40021000

080010a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b4:	d114      	bne.n	80010e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010b6:	4b33      	ldr	r3, [pc, #204]	; (8001184 <HAL_TIM_Base_MspInit+0xe0>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	4a32      	ldr	r2, [pc, #200]	; (8001184 <HAL_TIM_Base_MspInit+0xe0>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6593      	str	r3, [r2, #88]	; 0x58
 80010c2:	4b30      	ldr	r3, [pc, #192]	; (8001184 <HAL_TIM_Base_MspInit+0xe0>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	201c      	movs	r0, #28
 80010d4:	f001 fef3 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010d8:	201c      	movs	r0, #28
 80010da:	f001 ff0a 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80010de:	e04c      	b.n	800117a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a28      	ldr	r2, [pc, #160]	; (8001188 <HAL_TIM_Base_MspInit+0xe4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d114      	bne.n	8001114 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_TIM_Base_MspInit+0xe0>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	4a25      	ldr	r2, [pc, #148]	; (8001184 <HAL_TIM_Base_MspInit+0xe0>)
 80010f0:	f043 0310 	orr.w	r3, r3, #16
 80010f4:	6593      	str	r3, [r2, #88]	; 0x58
 80010f6:	4b23      	ldr	r3, [pc, #140]	; (8001184 <HAL_TIM_Base_MspInit+0xe0>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	2036      	movs	r0, #54	; 0x36
 8001108:	f001 fed9 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800110c:	2036      	movs	r0, #54	; 0x36
 800110e:	f001 fef0 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
}
 8001112:	e032      	b.n	800117a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1c      	ldr	r2, [pc, #112]	; (800118c <HAL_TIM_Base_MspInit+0xe8>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d114      	bne.n	8001148 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_TIM_Base_MspInit+0xe0>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <HAL_TIM_Base_MspInit+0xe0>)
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	6593      	str	r3, [r2, #88]	; 0x58
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_TIM_Base_MspInit+0xe0>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2037      	movs	r0, #55	; 0x37
 800113c:	f001 febf 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001140:	2037      	movs	r0, #55	; 0x37
 8001142:	f001 fed6 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
}
 8001146:	e018      	b.n	800117a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM8)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a10      	ldr	r2, [pc, #64]	; (8001190 <HAL_TIM_Base_MspInit+0xec>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d113      	bne.n	800117a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_TIM_Base_MspInit+0xe0>)
 8001154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001156:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <HAL_TIM_Base_MspInit+0xe0>)
 8001158:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800115c:	6613      	str	r3, [r2, #96]	; 0x60
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_TIM_Base_MspInit+0xe0>)
 8001160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	202c      	movs	r0, #44	; 0x2c
 8001170:	f001 fea5 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001174:	202c      	movs	r0, #44	; 0x2c
 8001176:	f001 febc 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
}
 800117a:	bf00      	nop
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	40001000 	.word	0x40001000
 800118c:	40001400 	.word	0x40001400
 8001190:	40013400 	.word	0x40013400

08001194 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <HAL_UART_MspInit+0x8c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d12f      	bne.n	8001216 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_UART_MspInit+0x90>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ba:	4a1a      	ldr	r2, [pc, #104]	; (8001224 <HAL_UART_MspInit+0x90>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c0:	6613      	str	r3, [r2, #96]	; 0x60
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_UART_MspInit+0x90>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_UART_MspInit+0x90>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	4a14      	ldr	r2, [pc, #80]	; (8001224 <HAL_UART_MspInit+0x90>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_UART_MspInit+0x90>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011e6:	2330      	movs	r3, #48	; 0x30
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011f6:	2307      	movs	r3, #7
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	4809      	ldr	r0, [pc, #36]	; (8001228 <HAL_UART_MspInit+0x94>)
 8001202:	f002 fa03 	bl	800360c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2025      	movs	r0, #37	; 0x25
 800120c:	f001 fe57 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001210:	2025      	movs	r0, #37	; 0x25
 8001212:	f001 fe6e 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	; 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40013800 	.word	0x40013800
 8001224:	40021000 	.word	0x40021000
 8001228:	48000800 	.word	0x48000800

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <NMI_Handler+0x4>

08001232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <MemManage_Handler+0x4>

0800123e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <UsageFault_Handler+0x4>

0800124a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001278:	f000 f8d0 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <ADC1_2_IRQHandler+0x10>)
 8001286:	f000 fdfd 	bl	8001e84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000494 	.word	0x20000494

08001294 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <TIM2_IRQHandler+0x10>)
 800129a:	f003 fc55 	bl	8004b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000620 	.word	0x20000620

080012a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <USART1_IRQHandler+0x10>)
 80012ae:	f004 f9bb 	bl	8005628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000518 	.word	0x20000518

080012bc <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <TIM8_UP_IRQHandler+0x10>)
 80012c2:	f003 fc41 	bl	8004b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000434 	.word	0x20000434

080012d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <TIM6_DAC_IRQHandler+0x14>)
 80012d6:	f003 fc37 	bl	8004b48 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80012da:	4803      	ldr	r0, [pc, #12]	; (80012e8 <TIM6_DAC_IRQHandler+0x18>)
 80012dc:	f001 fe98 	bl	8003010 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200005d4 	.word	0x200005d4
 80012e8:	20000480 	.word	0x20000480

080012ec <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <TIM7_DAC_IRQHandler+0x10>)
 80012f2:	f003 fc29 	bl	8004b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200006cc 	.word	0x200006cc

08001300 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <SystemInit+0x20>)
 8001306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <SystemInit+0x20>)
 800130c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001326:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <LoopForever+0x6>)
  ldr r1, =_edata
 800132a:	490e      	ldr	r1, [pc, #56]	; (8001364 <LoopForever+0xa>)
  ldr r2, =_sidata
 800132c:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <LoopForever+0xe>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133e:	4a0b      	ldr	r2, [pc, #44]	; (800136c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001340:	4c0b      	ldr	r4, [pc, #44]	; (8001370 <LoopForever+0x16>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800134e:	f7ff ffd7 	bl	8001300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001352:	f005 fd13 	bl	8006d7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001356:	f7ff f8db 	bl	8000510 <main>

0800135a <LoopForever>:

LoopForever:
    b LoopForever
 800135a:	e7fe      	b.n	800135a <LoopForever>
  ldr   r0, =_estack
 800135c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001364:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 8001368:	08006f08 	.word	0x08006f08
  ldr r2, =_sbss
 800136c:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 8001370:	20000720 	.word	0x20000720

08001374 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC3_IRQHandler>

08001376 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001380:	2003      	movs	r0, #3
 8001382:	f001 fd91 	bl	8002ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001386:	2000      	movs	r0, #0
 8001388:	f000 f80e 	bl	80013a8 <HAL_InitTick>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	e001      	b.n	800139c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001398:	f7ff fdd4 	bl	8000f44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800139c:	79fb      	ldrb	r3, [r7, #7]

}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <HAL_InitTick+0x68>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d022      	beq.n	8001402 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_InitTick+0x6c>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <HAL_InitTick+0x68>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80013cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 fd9c 	bl	8002f0e <HAL_SYSTICK_Config>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10f      	bne.n	80013fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b0f      	cmp	r3, #15
 80013e0:	d809      	bhi.n	80013f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e2:	2200      	movs	r2, #0
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ea:	f001 fd68 	bl	8002ebe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_InitTick+0x70>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	e007      	b.n	8001406 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	e004      	b.n	8001406 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e001      	b.n	8001406 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000410 	.word	0x20000410
 8001414:	20000408 	.word	0x20000408
 8001418:	2000040c 	.word	0x2000040c

0800141c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_IncTick+0x1c>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_IncTick+0x20>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4413      	add	r3, r2
 800142a:	4a03      	ldr	r2, [pc, #12]	; (8001438 <HAL_IncTick+0x1c>)
 800142c:	6013      	str	r3, [r2, #0]
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	2000071c 	.word	0x2000071c
 800143c:	20000410 	.word	0x20000410

08001440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <HAL_GetTick+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	2000071c 	.word	0x2000071c

08001458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff ffee 	bl	8001440 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001470:	d004      	beq.n	800147c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_Delay+0x40>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4413      	add	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147c:	bf00      	nop
 800147e:	f7ff ffdf 	bl	8001440 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	429a      	cmp	r2, r3
 800148c:	d8f7      	bhi.n	800147e <HAL_Delay+0x26>
  {
  }
}
 800148e:	bf00      	nop
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000410 	.word	0x20000410

0800149c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	609a      	str	r2, [r3, #8]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	609a      	str	r2, [r3, #8]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3360      	adds	r3, #96	; 0x60
 8001516:	461a      	mov	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <LL_ADC_SetOffset+0x44>)
 8001526:	4013      	ands	r3, r2
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	4313      	orrs	r3, r2
 8001534:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800153c:	bf00      	nop
 800153e:	371c      	adds	r7, #28
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	03fff000 	.word	0x03fff000

0800154c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3360      	adds	r3, #96	; 0x60
 800155a:	461a      	mov	r2, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3360      	adds	r3, #96	; 0x60
 8001588:	461a      	mov	r2, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	431a      	orrs	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015a2:	bf00      	nop
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b087      	sub	sp, #28
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3360      	adds	r3, #96	; 0x60
 80015be:	461a      	mov	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	431a      	orrs	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3360      	adds	r3, #96	; 0x60
 80015f4:	461a      	mov	r2, r3
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	431a      	orrs	r2, r3
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800160e:	bf00      	nop
 8001610:	371c      	adds	r7, #28
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	615a      	str	r2, [r3, #20]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001666:	b480      	push	{r7}
 8001668:	b087      	sub	sp, #28
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3330      	adds	r3, #48	; 0x30
 8001676:	461a      	mov	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	4413      	add	r3, r2
 8001684:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	f003 031f 	and.w	r3, r3, #31
 8001690:	211f      	movs	r1, #31
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	401a      	ands	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	0e9b      	lsrs	r3, r3, #26
 800169e:	f003 011f 	and.w	r1, r3, #31
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	431a      	orrs	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016b2:	bf00      	nop
 80016b4:	371c      	adds	r7, #28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3314      	adds	r3, #20
 80016f4:	461a      	mov	r2, r3
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	0e5b      	lsrs	r3, r3, #25
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	4413      	add	r3, r2
 8001702:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	0d1b      	lsrs	r3, r3, #20
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	2107      	movs	r1, #7
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	401a      	ands	r2, r3
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	0d1b      	lsrs	r3, r3, #20
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	431a      	orrs	r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800172e:	bf00      	nop
 8001730:	371c      	adds	r7, #28
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001754:	43db      	mvns	r3, r3
 8001756:	401a      	ands	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0318 	and.w	r3, r3, #24
 800175e:	4908      	ldr	r1, [pc, #32]	; (8001780 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001760:	40d9      	lsrs	r1, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	400b      	ands	r3, r1
 8001766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800176a:	431a      	orrs	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	0007ffff 	.word	0x0007ffff

08001784 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 031f 	and.w	r3, r3, #31
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80017cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6093      	str	r3, [r2, #8]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017f4:	d101      	bne.n	80017fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001818:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800181c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001844:	d101      	bne.n	800184a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001868:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800186c:	f043 0201 	orr.w	r2, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <LL_ADC_IsEnabled+0x18>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <LL_ADC_IsEnabled+0x1a>
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018ba:	f043 0204 	orr.w	r2, r3, #4
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d101      	bne.n	80018e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b08      	cmp	r3, #8
 8001906:	d101      	bne.n	800190c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b089      	sub	sp, #36	; 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e1af      	b.n	8001c96 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001940:	2b00      	cmp	r3, #0
 8001942:	d109      	bne.n	8001958 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff fb21 	bl	8000f8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff3f 	bl	80017e0 <LL_ADC_IsDeepPowerDownEnabled>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff25 	bl	80017bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff5a 	bl	8001830 <LL_ADC_IsInternalRegulatorEnabled>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d115      	bne.n	80019ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff3e 	bl	8001808 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800198c:	4b9f      	ldr	r3, [pc, #636]	; (8001c0c <HAL_ADC_Init+0x2f0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	099b      	lsrs	r3, r3, #6
 8001992:	4a9f      	ldr	r2, [pc, #636]	; (8001c10 <HAL_ADC_Init+0x2f4>)
 8001994:	fba2 2303 	umull	r2, r3, r2, r3
 8001998:	099b      	lsrs	r3, r3, #6
 800199a:	3301      	adds	r3, #1
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019a0:	e002      	b.n	80019a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f9      	bne.n	80019a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ff3c 	bl	8001830 <LL_ADC_IsInternalRegulatorEnabled>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10d      	bne.n	80019da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c2:	f043 0210 	orr.w	r2, r3, #16
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ce:	f043 0201 	orr.w	r2, r3, #1
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ff75 	bl	80018ce <LL_ADC_REG_IsConversionOngoing>
 80019e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f040 8148 	bne.w	8001c84 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f040 8144 	bne.w	8001c84 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a04:	f043 0202 	orr.w	r2, r3, #2
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff35 	bl	8001880 <LL_ADC_IsEnabled>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d141      	bne.n	8001aa0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a24:	d004      	beq.n	8001a30 <HAL_ADC_Init+0x114>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a7a      	ldr	r2, [pc, #488]	; (8001c14 <HAL_ADC_Init+0x2f8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d10f      	bne.n	8001a50 <HAL_ADC_Init+0x134>
 8001a30:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a34:	f7ff ff24 	bl	8001880 <LL_ADC_IsEnabled>
 8001a38:	4604      	mov	r4, r0
 8001a3a:	4876      	ldr	r0, [pc, #472]	; (8001c14 <HAL_ADC_Init+0x2f8>)
 8001a3c:	f7ff ff20 	bl	8001880 <LL_ADC_IsEnabled>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4323      	orrs	r3, r4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf0c      	ite	eq
 8001a48:	2301      	moveq	r3, #1
 8001a4a:	2300      	movne	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	e012      	b.n	8001a76 <HAL_ADC_Init+0x15a>
 8001a50:	4871      	ldr	r0, [pc, #452]	; (8001c18 <HAL_ADC_Init+0x2fc>)
 8001a52:	f7ff ff15 	bl	8001880 <LL_ADC_IsEnabled>
 8001a56:	4604      	mov	r4, r0
 8001a58:	4870      	ldr	r0, [pc, #448]	; (8001c1c <HAL_ADC_Init+0x300>)
 8001a5a:	f7ff ff11 	bl	8001880 <LL_ADC_IsEnabled>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	431c      	orrs	r4, r3
 8001a62:	486f      	ldr	r0, [pc, #444]	; (8001c20 <HAL_ADC_Init+0x304>)
 8001a64:	f7ff ff0c 	bl	8001880 <LL_ADC_IsEnabled>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4323      	orrs	r3, r4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d012      	beq.n	8001aa0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a82:	d004      	beq.n	8001a8e <HAL_ADC_Init+0x172>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a62      	ldr	r2, [pc, #392]	; (8001c14 <HAL_ADC_Init+0x2f8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d101      	bne.n	8001a92 <HAL_ADC_Init+0x176>
 8001a8e:	4a65      	ldr	r2, [pc, #404]	; (8001c24 <HAL_ADC_Init+0x308>)
 8001a90:	e000      	b.n	8001a94 <HAL_ADC_Init+0x178>
 8001a92:	4a65      	ldr	r2, [pc, #404]	; (8001c28 <HAL_ADC_Init+0x30c>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f7ff fcfe 	bl	800149c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7f5b      	ldrb	r3, [r3, #29]
 8001aa4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aaa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ab0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ab6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001abe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d106      	bne.n	8001adc <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	045b      	lsls	r3, r3, #17
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	4b4b      	ldr	r3, [pc, #300]	; (8001c2c <HAL_ADC_Init+0x310>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	69b9      	ldr	r1, [r7, #24]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fed1 	bl	80018ce <LL_ADC_REG_IsConversionOngoing>
 8001b2c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fede 	bl	80018f4 <LL_ADC_INJ_IsConversionOngoing>
 8001b38:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d17f      	bne.n	8001c40 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d17c      	bne.n	8001c40 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b4a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b52:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b62:	f023 0302 	bic.w	r3, r3, #2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	69b9      	ldr	r1, [r7, #24]
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d017      	beq.n	8001ba8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b86:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b90:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6911      	ldr	r1, [r2, #16]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001ba6:	e013      	b.n	8001bd0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691a      	ldr	r2, [r3, #16]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bb6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bcc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d12a      	bne.n	8001c30 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bf0:	4311      	orrs	r1, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001bf6:	4311      	orrs	r1, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 0201 	orr.w	r2, r2, #1
 8001c08:	611a      	str	r2, [r3, #16]
 8001c0a:	e019      	b.n	8001c40 <HAL_ADC_Init+0x324>
 8001c0c:	20000408 	.word	0x20000408
 8001c10:	053e2d63 	.word	0x053e2d63
 8001c14:	50000100 	.word	0x50000100
 8001c18:	50000400 	.word	0x50000400
 8001c1c:	50000500 	.word	0x50000500
 8001c20:	50000600 	.word	0x50000600
 8001c24:	50000300 	.word	0x50000300
 8001c28:	50000700 	.word	0x50000700
 8001c2c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d10c      	bne.n	8001c62 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f023 010f 	bic.w	r1, r3, #15
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	1e5a      	subs	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c60:	e007      	b.n	8001c72 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 020f 	bic.w	r2, r2, #15
 8001c70:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c76:	f023 0303 	bic.w	r3, r3, #3
 8001c7a:	f043 0201 	orr.w	r2, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c82:	e007      	b.n	8001c94 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	f043 0210 	orr.w	r2, r3, #16
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c94:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	; 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd90      	pop	{r4, r7, pc}
 8001c9e:	bf00      	nop

08001ca0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cb0:	d004      	beq.n	8001cbc <HAL_ADC_Start+0x1c>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a67      	ldr	r2, [pc, #412]	; (8001e54 <HAL_ADC_Start+0x1b4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d101      	bne.n	8001cc0 <HAL_ADC_Start+0x20>
 8001cbc:	4b66      	ldr	r3, [pc, #408]	; (8001e58 <HAL_ADC_Start+0x1b8>)
 8001cbe:	e000      	b.n	8001cc2 <HAL_ADC_Start+0x22>
 8001cc0:	4b66      	ldr	r3, [pc, #408]	; (8001e5c <HAL_ADC_Start+0x1bc>)
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fd5e 	bl	8001784 <LL_ADC_GetMultimode>
 8001cc8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fdfd 	bl	80018ce <LL_ADC_REG_IsConversionOngoing>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 80b4 	bne.w	8001e44 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_Start+0x4a>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e0af      	b.n	8001e4a <HAL_ADC_Start+0x1aa>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 ff74 	bl	8002be0 <ADC_Enable>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cfc:	7dfb      	ldrb	r3, [r7, #23]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f040 809b 	bne.w	8001e3a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a4d      	ldr	r2, [pc, #308]	; (8001e54 <HAL_ADC_Start+0x1b4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d009      	beq.n	8001d36 <HAL_ADC_Start+0x96>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a4e      	ldr	r2, [pc, #312]	; (8001e60 <HAL_ADC_Start+0x1c0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d002      	beq.n	8001d32 <HAL_ADC_Start+0x92>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	e003      	b.n	8001d3a <HAL_ADC_Start+0x9a>
 8001d32:	4b4c      	ldr	r3, [pc, #304]	; (8001e64 <HAL_ADC_Start+0x1c4>)
 8001d34:	e001      	b.n	8001d3a <HAL_ADC_Start+0x9a>
 8001d36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d002      	beq.n	8001d48 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d60:	d106      	bne.n	8001d70 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d66:	f023 0206 	bic.w	r2, r3, #6
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	661a      	str	r2, [r3, #96]	; 0x60
 8001d6e:	e002      	b.n	8001d76 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	221c      	movs	r2, #28
 8001d7c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a32      	ldr	r2, [pc, #200]	; (8001e54 <HAL_ADC_Start+0x1b4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d009      	beq.n	8001da4 <HAL_ADC_Start+0x104>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a32      	ldr	r2, [pc, #200]	; (8001e60 <HAL_ADC_Start+0x1c0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d002      	beq.n	8001da0 <HAL_ADC_Start+0x100>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	e003      	b.n	8001da8 <HAL_ADC_Start+0x108>
 8001da0:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <HAL_ADC_Start+0x1c4>)
 8001da2:	e001      	b.n	8001da8 <HAL_ADC_Start+0x108>
 8001da4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d008      	beq.n	8001dc2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d005      	beq.n	8001dc2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	d002      	beq.n	8001dc2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2b09      	cmp	r3, #9
 8001dc0:	d114      	bne.n	8001dec <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d007      	beq.n	8001de0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dd8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fd5e 	bl	80018a6 <LL_ADC_REG_StartConversion>
 8001dea:	e02d      	b.n	8001e48 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <HAL_ADC_Start+0x1b4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d009      	beq.n	8001e16 <HAL_ADC_Start+0x176>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a16      	ldr	r2, [pc, #88]	; (8001e60 <HAL_ADC_Start+0x1c0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d002      	beq.n	8001e12 <HAL_ADC_Start+0x172>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	e003      	b.n	8001e1a <HAL_ADC_Start+0x17a>
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_ADC_Start+0x1c4>)
 8001e14:	e001      	b.n	8001e1a <HAL_ADC_Start+0x17a>
 8001e16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e1a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00f      	beq.n	8001e48 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e38:	e006      	b.n	8001e48 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001e42:	e001      	b.n	8001e48 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e44:	2302      	movs	r3, #2
 8001e46:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	50000100 	.word	0x50000100
 8001e58:	50000300 	.word	0x50000300
 8001e5c:	50000700 	.word	0x50000700
 8001e60:	50000500 	.word	0x50000500
 8001e64:	50000400 	.word	0x50000400

08001e68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ea8:	d004      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0x30>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a95      	ldr	r2, [pc, #596]	; (8002104 <HAL_ADC_IRQHandler+0x280>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADC_IRQHandler+0x34>
 8001eb4:	4b94      	ldr	r3, [pc, #592]	; (8002108 <HAL_ADC_IRQHandler+0x284>)
 8001eb6:	e000      	b.n	8001eba <HAL_ADC_IRQHandler+0x36>
 8001eb8:	4b94      	ldr	r3, [pc, #592]	; (800210c <HAL_ADC_IRQHandler+0x288>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fc62 	bl	8001784 <LL_ADC_GetMultimode>
 8001ec0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d017      	beq.n	8001efc <HAL_ADC_IRQHandler+0x78>
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d012      	beq.n	8001efc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d105      	bne.n	8001eee <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 ff00 	bl	8002cf4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d004      	beq.n	8001f10 <HAL_ADC_IRQHandler+0x8c>
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10b      	bne.n	8001f28 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8094 	beq.w	8002044 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 808e 	beq.w	8002044 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d105      	bne.n	8001f40 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fb7b 	bl	8001640 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d072      	beq.n	8002036 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a6b      	ldr	r2, [pc, #428]	; (8002104 <HAL_ADC_IRQHandler+0x280>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d009      	beq.n	8001f6e <HAL_ADC_IRQHandler+0xea>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a6c      	ldr	r2, [pc, #432]	; (8002110 <HAL_ADC_IRQHandler+0x28c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d002      	beq.n	8001f6a <HAL_ADC_IRQHandler+0xe6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	e003      	b.n	8001f72 <HAL_ADC_IRQHandler+0xee>
 8001f6a:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_ADC_IRQHandler+0x290>)
 8001f6c:	e001      	b.n	8001f72 <HAL_ADC_IRQHandler+0xee>
 8001f6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d008      	beq.n	8001f8c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d002      	beq.n	8001f8c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2b09      	cmp	r3, #9
 8001f8a:	d104      	bne.n	8001f96 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	623b      	str	r3, [r7, #32]
 8001f94:	e014      	b.n	8001fc0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a5a      	ldr	r2, [pc, #360]	; (8002104 <HAL_ADC_IRQHandler+0x280>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d009      	beq.n	8001fb4 <HAL_ADC_IRQHandler+0x130>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a5a      	ldr	r2, [pc, #360]	; (8002110 <HAL_ADC_IRQHandler+0x28c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d002      	beq.n	8001fb0 <HAL_ADC_IRQHandler+0x12c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	e003      	b.n	8001fb8 <HAL_ADC_IRQHandler+0x134>
 8001fb0:	4b58      	ldr	r3, [pc, #352]	; (8002114 <HAL_ADC_IRQHandler+0x290>)
 8001fb2:	e001      	b.n	8001fb8 <HAL_ADC_IRQHandler+0x134>
 8001fb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fb8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d135      	bne.n	8002036 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d12e      	bne.n	8002036 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fc76 	bl	80018ce <LL_ADC_REG_IsConversionOngoing>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d11a      	bne.n	800201e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 020c 	bic.w	r2, r2, #12
 8001ff6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d112      	bne.n	8002036 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	65da      	str	r2, [r3, #92]	; 0x5c
 800201c:	e00b      	b.n	8002036 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002022:	f043 0210 	orr.w	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe fb36 	bl	80006a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	220c      	movs	r2, #12
 8002042:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <HAL_ADC_IRQHandler+0x1d4>
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10b      	bne.n	8002070 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80b2 	beq.w	80021c8 <HAL_ADC_IRQHandler+0x344>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 80ac 	beq.w	80021c8 <HAL_ADC_IRQHandler+0x344>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002080:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fb16 	bl	80016be <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002092:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fad1 	bl	8001640 <LL_ADC_REG_IsTriggerSourceSWStart>
 800209e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_ADC_IRQHandler+0x280>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d009      	beq.n	80020be <HAL_ADC_IRQHandler+0x23a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a18      	ldr	r2, [pc, #96]	; (8002110 <HAL_ADC_IRQHandler+0x28c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d002      	beq.n	80020ba <HAL_ADC_IRQHandler+0x236>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	e003      	b.n	80020c2 <HAL_ADC_IRQHandler+0x23e>
 80020ba:	4b16      	ldr	r3, [pc, #88]	; (8002114 <HAL_ADC_IRQHandler+0x290>)
 80020bc:	e001      	b.n	80020c2 <HAL_ADC_IRQHandler+0x23e>
 80020be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d008      	beq.n	80020dc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d002      	beq.n	80020dc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b07      	cmp	r3, #7
 80020da:	d104      	bne.n	80020e6 <HAL_ADC_IRQHandler+0x262>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	623b      	str	r3, [r7, #32]
 80020e4:	e01e      	b.n	8002124 <HAL_ADC_IRQHandler+0x2a0>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a06      	ldr	r2, [pc, #24]	; (8002104 <HAL_ADC_IRQHandler+0x280>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d013      	beq.n	8002118 <HAL_ADC_IRQHandler+0x294>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a06      	ldr	r2, [pc, #24]	; (8002110 <HAL_ADC_IRQHandler+0x28c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d002      	beq.n	8002100 <HAL_ADC_IRQHandler+0x27c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	e00d      	b.n	800211c <HAL_ADC_IRQHandler+0x298>
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <HAL_ADC_IRQHandler+0x290>)
 8002102:	e00b      	b.n	800211c <HAL_ADC_IRQHandler+0x298>
 8002104:	50000100 	.word	0x50000100
 8002108:	50000300 	.word	0x50000300
 800210c:	50000700 	.word	0x50000700
 8002110:	50000500 	.word	0x50000500
 8002114:	50000400 	.word	0x50000400
 8002118:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800211c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d047      	beq.n	80021ba <HAL_ADC_IRQHandler+0x336>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <HAL_ADC_IRQHandler+0x2c0>
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d03f      	beq.n	80021ba <HAL_ADC_IRQHandler+0x336>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002140:	2b00      	cmp	r3, #0
 8002142:	d13a      	bne.n	80021ba <HAL_ADC_IRQHandler+0x336>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214e:	2b40      	cmp	r3, #64	; 0x40
 8002150:	d133      	bne.n	80021ba <HAL_ADC_IRQHandler+0x336>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d12e      	bne.n	80021ba <HAL_ADC_IRQHandler+0x336>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fbc7 	bl	80018f4 <LL_ADC_INJ_IsConversionOngoing>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d11a      	bne.n	80021a2 <HAL_ADC_IRQHandler+0x31e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800217a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d112      	bne.n	80021ba <HAL_ADC_IRQHandler+0x336>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	65da      	str	r2, [r3, #92]	; 0x5c
 80021a0:	e00b      	b.n	80021ba <HAL_ADC_IRQHandler+0x336>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	f043 0210 	orr.w	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b2:	f043 0201 	orr.w	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fd72 	bl	8002ca4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2260      	movs	r2, #96	; 0x60
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d011      	beq.n	80021f6 <HAL_ADC_IRQHandler+0x372>
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00c      	beq.n	80021f6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f8a5 	bl	8002338 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d012      	beq.n	8002226 <HAL_ADC_IRQHandler+0x3a2>
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00d      	beq.n	8002226 <HAL_ADC_IRQHandler+0x3a2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fd58 	bl	8002ccc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002224:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800222c:	2b00      	cmp	r3, #0
 800222e:	d012      	beq.n	8002256 <HAL_ADC_IRQHandler+0x3d2>
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00d      	beq.n	8002256 <HAL_ADC_IRQHandler+0x3d2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fd4a 	bl	8002ce0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b00      	cmp	r3, #0
 800225e:	d043      	beq.n	80022e8 <HAL_ADC_IRQHandler+0x464>
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b00      	cmp	r3, #0
 8002268:	d03e      	beq.n	80022e8 <HAL_ADC_IRQHandler+0x464>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <HAL_ADC_IRQHandler+0x3f4>
    {
      overrun_error = 1UL;
 8002272:	2301      	movs	r3, #1
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
 8002276:	e021      	b.n	80022bc <HAL_ADC_IRQHandler+0x438>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d015      	beq.n	80022aa <HAL_ADC_IRQHandler+0x426>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002286:	d004      	beq.n	8002292 <HAL_ADC_IRQHandler+0x40e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a27      	ldr	r2, [pc, #156]	; (800232c <HAL_ADC_IRQHandler+0x4a8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d101      	bne.n	8002296 <HAL_ADC_IRQHandler+0x412>
 8002292:	4b27      	ldr	r3, [pc, #156]	; (8002330 <HAL_ADC_IRQHandler+0x4ac>)
 8002294:	e000      	b.n	8002298 <HAL_ADC_IRQHandler+0x414>
 8002296:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_ADC_IRQHandler+0x4b0>)
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fa81 	bl	80017a0 <LL_ADC_GetMultiDMATransfer>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00b      	beq.n	80022bc <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 80022a4:	2301      	movs	r3, #1
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
 80022a8:	e008      	b.n	80022bc <HAL_ADC_IRQHandler+0x438>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 80022b8:	2301      	movs	r3, #1
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d10e      	bne.n	80022e0 <HAL_ADC_IRQHandler+0x45c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d2:	f043 0202 	orr.w	r2, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f836 	bl	800234c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2210      	movs	r2, #16
 80022e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d018      	beq.n	8002324 <HAL_ADC_IRQHandler+0x4a0>
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d013      	beq.n	8002324 <HAL_ADC_IRQHandler+0x4a0>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002300:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230c:	f043 0208 	orr.w	r2, r3, #8
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800231c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fcca 	bl	8002cb8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002324:	bf00      	nop
 8002326:	3728      	adds	r7, #40	; 0x28
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	50000100 	.word	0x50000100
 8002330:	50000300 	.word	0x50000300
 8002334:	50000700 	.word	0x50000700

08002338 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b0b6      	sub	sp, #216	; 0xd8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800237a:	2b01      	cmp	r3, #1
 800237c:	d102      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x24>
 800237e:	2302      	movs	r3, #2
 8002380:	f000 bc13 	b.w	8002baa <HAL_ADC_ConfigChannel+0x84a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fa9c 	bl	80018ce <LL_ADC_REG_IsConversionOngoing>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	f040 83f3 	bne.w	8002b84 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6859      	ldr	r1, [r3, #4]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f7ff f95b 	bl	8001666 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fa8a 	bl	80018ce <LL_ADC_REG_IsConversionOngoing>
 80023ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fa96 	bl	80018f4 <LL_ADC_INJ_IsConversionOngoing>
 80023c8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f040 81d9 	bne.w	8002788 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 81d4 	bne.w	8002788 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023e8:	d10f      	bne.n	800240a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2200      	movs	r2, #0
 80023f4:	4619      	mov	r1, r3
 80023f6:	f7ff f975 	bl	80016e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff f909 	bl	800161a <LL_ADC_SetSamplingTimeCommonConfig>
 8002408:	e00e      	b.n	8002428 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6819      	ldr	r1, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	461a      	mov	r2, r3
 8002418:	f7ff f964 	bl	80016e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff f8f9 	bl	800161a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	08db      	lsrs	r3, r3, #3
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b04      	cmp	r3, #4
 8002448:	d022      	beq.n	8002490 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6919      	ldr	r1, [r3, #16]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800245a:	f7ff f853 	bl	8001504 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6919      	ldr	r1, [r3, #16]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	461a      	mov	r2, r3
 800246c:	f7ff f89f 	bl	80015ae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6919      	ldr	r1, [r3, #16]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	7f1b      	ldrb	r3, [r3, #28]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d102      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x126>
 8002480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002484:	e000      	b.n	8002488 <HAL_ADC_ConfigChannel+0x128>
 8002486:	2300      	movs	r3, #0
 8002488:	461a      	mov	r2, r3
 800248a:	f7ff f8ab 	bl	80015e4 <LL_ADC_SetOffsetSaturation>
 800248e:	e17b      	b.n	8002788 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff f858 	bl	800154c <LL_ADC_GetOffsetChannel>
 800249c:	4603      	mov	r3, r0
 800249e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10a      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x15c>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2100      	movs	r1, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff f84d 	bl	800154c <LL_ADC_GetOffsetChannel>
 80024b2:	4603      	mov	r3, r0
 80024b4:	0e9b      	lsrs	r3, r3, #26
 80024b6:	f003 021f 	and.w	r2, r3, #31
 80024ba:	e01e      	b.n	80024fa <HAL_ADC_ConfigChannel+0x19a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff f842 	bl	800154c <LL_ADC_GetOffsetChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024d2:	fa93 f3a3 	rbit	r3, r3
 80024d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80024ea:	2320      	movs	r3, #32
 80024ec:	e004      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80024ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x1b2>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	0e9b      	lsrs	r3, r3, #26
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	e018      	b.n	8002544 <HAL_ADC_ConfigChannel+0x1e4>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800252a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800252e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002536:	2320      	movs	r3, #32
 8002538:	e004      	b.n	8002544 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800253a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002544:	429a      	cmp	r2, r3
 8002546:	d106      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff f811 	bl	8001578 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2101      	movs	r1, #1
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe fff5 	bl	800154c <LL_ADC_GetOffsetChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10a      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x222>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2101      	movs	r1, #1
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe ffea 	bl	800154c <LL_ADC_GetOffsetChannel>
 8002578:	4603      	mov	r3, r0
 800257a:	0e9b      	lsrs	r3, r3, #26
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	e01e      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x260>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2101      	movs	r1, #1
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe ffdf 	bl	800154c <LL_ADC_GetOffsetChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80025a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80025a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80025b0:	2320      	movs	r3, #32
 80025b2:	e004      	b.n	80025be <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80025b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x278>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0e9b      	lsrs	r3, r3, #26
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	e018      	b.n	800260a <HAL_ADC_ConfigChannel+0x2aa>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80025ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80025f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80025fc:	2320      	movs	r3, #32
 80025fe:	e004      	b.n	800260a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800260a:	429a      	cmp	r2, r3
 800260c:	d106      	bne.n	800261c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	2101      	movs	r1, #1
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe ffae 	bl	8001578 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2102      	movs	r1, #2
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe ff92 	bl	800154c <LL_ADC_GetOffsetChannel>
 8002628:	4603      	mov	r3, r0
 800262a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10a      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x2e8>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2102      	movs	r1, #2
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe ff87 	bl	800154c <LL_ADC_GetOffsetChannel>
 800263e:	4603      	mov	r3, r0
 8002640:	0e9b      	lsrs	r3, r3, #26
 8002642:	f003 021f 	and.w	r2, r3, #31
 8002646:	e01e      	b.n	8002686 <HAL_ADC_ConfigChannel+0x326>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2102      	movs	r1, #2
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe ff7c 	bl	800154c <LL_ADC_GetOffsetChannel>
 8002654:	4603      	mov	r3, r0
 8002656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002666:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800266a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800266e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002676:	2320      	movs	r3, #32
 8002678:	e004      	b.n	8002684 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800267a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268e:	2b00      	cmp	r3, #0
 8002690:	d105      	bne.n	800269e <HAL_ADC_ConfigChannel+0x33e>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	0e9b      	lsrs	r3, r3, #26
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	e016      	b.n	80026cc <HAL_ADC_ConfigChannel+0x36c>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80026b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80026b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80026be:	2320      	movs	r3, #32
 80026c0:	e004      	b.n	80026cc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80026c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d106      	bne.n	80026de <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	2102      	movs	r1, #2
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe ff4d 	bl	8001578 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2103      	movs	r1, #3
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe ff31 	bl	800154c <LL_ADC_GetOffsetChannel>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10a      	bne.n	800270a <HAL_ADC_ConfigChannel+0x3aa>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2103      	movs	r1, #3
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe ff26 	bl	800154c <LL_ADC_GetOffsetChannel>
 8002700:	4603      	mov	r3, r0
 8002702:	0e9b      	lsrs	r3, r3, #26
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	e017      	b.n	800273a <HAL_ADC_ConfigChannel+0x3da>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2103      	movs	r1, #3
 8002710:	4618      	mov	r0, r3
 8002712:	f7fe ff1b 	bl	800154c <LL_ADC_GetOffsetChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002724:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800272c:	2320      	movs	r3, #32
 800272e:	e003      	b.n	8002738 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002742:	2b00      	cmp	r3, #0
 8002744:	d105      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x3f2>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	0e9b      	lsrs	r3, r3, #26
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	e011      	b.n	8002776 <HAL_ADC_ConfigChannel+0x416>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002762:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800276a:	2320      	movs	r3, #32
 800276c:	e003      	b.n	8002776 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800276e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002776:	429a      	cmp	r2, r3
 8002778:	d106      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2200      	movs	r2, #0
 8002780:	2103      	movs	r1, #3
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe fef8 	bl	8001578 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff f877 	bl	8001880 <LL_ADC_IsEnabled>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	f040 813d 	bne.w	8002a14 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	461a      	mov	r2, r3
 80027a8:	f7fe ffc8 	bl	800173c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4aa2      	ldr	r2, [pc, #648]	; (8002a3c <HAL_ADC_ConfigChannel+0x6dc>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	f040 812e 	bne.w	8002a14 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10b      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x480>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0e9b      	lsrs	r3, r3, #26
 80027ce:	3301      	adds	r3, #1
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	2b09      	cmp	r3, #9
 80027d6:	bf94      	ite	ls
 80027d8:	2301      	movls	r3, #1
 80027da:	2300      	movhi	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	e019      	b.n	8002814 <HAL_ADC_ConfigChannel+0x4b4>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80027ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80027f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	e003      	b.n	8002804 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80027fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	3301      	adds	r3, #1
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2b09      	cmp	r3, #9
 800280c:	bf94      	ite	ls
 800280e:	2301      	movls	r3, #1
 8002810:	2300      	movhi	r3, #0
 8002812:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002814:	2b00      	cmp	r3, #0
 8002816:	d079      	beq.n	800290c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x4d4>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	0e9b      	lsrs	r3, r3, #26
 800282a:	3301      	adds	r3, #1
 800282c:	069b      	lsls	r3, r3, #26
 800282e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002832:	e015      	b.n	8002860 <HAL_ADC_ConfigChannel+0x500>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002844:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800284c:	2320      	movs	r3, #32
 800284e:	e003      	b.n	8002858 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	3301      	adds	r3, #1
 800285a:	069b      	lsls	r3, r3, #26
 800285c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002868:	2b00      	cmp	r3, #0
 800286a:	d109      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x520>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0e9b      	lsrs	r3, r3, #26
 8002872:	3301      	adds	r3, #1
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	2101      	movs	r1, #1
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	e017      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x550>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800288e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002890:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002898:	2320      	movs	r3, #32
 800289a:	e003      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800289c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	3301      	adds	r3, #1
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	2101      	movs	r1, #1
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	ea42 0103 	orr.w	r1, r2, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10a      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x576>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	0e9b      	lsrs	r3, r3, #26
 80028c6:	3301      	adds	r3, #1
 80028c8:	f003 021f 	and.w	r2, r3, #31
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	051b      	lsls	r3, r3, #20
 80028d4:	e018      	b.n	8002908 <HAL_ADC_ConfigChannel+0x5a8>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80028e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80028ee:	2320      	movs	r3, #32
 80028f0:	e003      	b.n	80028fa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80028f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	3301      	adds	r3, #1
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	4613      	mov	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002908:	430b      	orrs	r3, r1
 800290a:	e07e      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x5c8>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	0e9b      	lsrs	r3, r3, #26
 800291e:	3301      	adds	r3, #1
 8002920:	069b      	lsls	r3, r3, #26
 8002922:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002926:	e015      	b.n	8002954 <HAL_ADC_ConfigChannel+0x5f4>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002940:	2320      	movs	r3, #32
 8002942:	e003      	b.n	800294c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3301      	adds	r3, #1
 800294e:	069b      	lsls	r3, r3, #26
 8002950:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x614>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	0e9b      	lsrs	r3, r3, #26
 8002966:	3301      	adds	r3, #1
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	e017      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x644>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	61fb      	str	r3, [r7, #28]
  return result;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800298c:	2320      	movs	r3, #32
 800298e:	e003      	b.n	8002998 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	3301      	adds	r3, #1
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	ea42 0103 	orr.w	r1, r2, r3
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10d      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x670>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0e9b      	lsrs	r3, r3, #26
 80029ba:	3301      	adds	r3, #1
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	3b1e      	subs	r3, #30
 80029c8:	051b      	lsls	r3, r3, #20
 80029ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029ce:	e01b      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x6a8>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	613b      	str	r3, [r7, #16]
  return result;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80029e8:	2320      	movs	r3, #32
 80029ea:	e003      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	fab3 f383 	clz	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	3301      	adds	r3, #1
 80029f6:	f003 021f 	and.w	r2, r3, #31
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	3b1e      	subs	r3, #30
 8002a02:	051b      	lsls	r3, r3, #20
 8002a04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	6892      	ldr	r2, [r2, #8]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f7fe fe68 	bl	80016e4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_ADC_ConfigChannel+0x6e0>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80be 	beq.w	8002b9e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a2a:	d004      	beq.n	8002a36 <HAL_ADC_ConfigChannel+0x6d6>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <HAL_ADC_ConfigChannel+0x6e4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d10a      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x6ec>
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <HAL_ADC_ConfigChannel+0x6e8>)
 8002a38:	e009      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x6ee>
 8002a3a:	bf00      	nop
 8002a3c:	407f0000 	.word	0x407f0000
 8002a40:	80080000 	.word	0x80080000
 8002a44:	50000100 	.word	0x50000100
 8002a48:	50000300 	.word	0x50000300
 8002a4c:	4b59      	ldr	r3, [pc, #356]	; (8002bb4 <HAL_ADC_ConfigChannel+0x854>)
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fd4a 	bl	80014e8 <LL_ADC_GetCommonPathInternalCh>
 8002a54:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a56      	ldr	r2, [pc, #344]	; (8002bb8 <HAL_ADC_ConfigChannel+0x858>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d004      	beq.n	8002a6c <HAL_ADC_ConfigChannel+0x70c>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a55      	ldr	r2, [pc, #340]	; (8002bbc <HAL_ADC_ConfigChannel+0x85c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d13a      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d134      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a80:	d005      	beq.n	8002a8e <HAL_ADC_ConfigChannel+0x72e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a4e      	ldr	r2, [pc, #312]	; (8002bc0 <HAL_ADC_ConfigChannel+0x860>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	f040 8085 	bne.w	8002b98 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a96:	d004      	beq.n	8002aa2 <HAL_ADC_ConfigChannel+0x742>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a49      	ldr	r2, [pc, #292]	; (8002bc4 <HAL_ADC_ConfigChannel+0x864>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x746>
 8002aa2:	4a49      	ldr	r2, [pc, #292]	; (8002bc8 <HAL_ADC_ConfigChannel+0x868>)
 8002aa4:	e000      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x748>
 8002aa6:	4a43      	ldr	r2, [pc, #268]	; (8002bb4 <HAL_ADC_ConfigChannel+0x854>)
 8002aa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	f7fe fd05 	bl	80014c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ab8:	4b44      	ldr	r3, [pc, #272]	; (8002bcc <HAL_ADC_ConfigChannel+0x86c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	4a44      	ldr	r2, [pc, #272]	; (8002bd0 <HAL_ADC_ConfigChannel+0x870>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	099b      	lsrs	r3, r3, #6
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ad2:	e002      	b.n	8002ada <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f9      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ae0:	e05a      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a3b      	ldr	r2, [pc, #236]	; (8002bd4 <HAL_ADC_ConfigChannel+0x874>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d125      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x7d8>
 8002aec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d11f      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a31      	ldr	r2, [pc, #196]	; (8002bc4 <HAL_ADC_ConfigChannel+0x864>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d104      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x7ac>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a34      	ldr	r2, [pc, #208]	; (8002bd8 <HAL_ADC_ConfigChannel+0x878>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d047      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b14:	d004      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0x7c0>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2a      	ldr	r2, [pc, #168]	; (8002bc4 <HAL_ADC_ConfigChannel+0x864>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x7c4>
 8002b20:	4a29      	ldr	r2, [pc, #164]	; (8002bc8 <HAL_ADC_ConfigChannel+0x868>)
 8002b22:	e000      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x7c6>
 8002b24:	4a23      	ldr	r2, [pc, #140]	; (8002bb4 <HAL_ADC_ConfigChannel+0x854>)
 8002b26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4610      	mov	r0, r2
 8002b32:	f7fe fcc6 	bl	80014c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b36:	e031      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a27      	ldr	r2, [pc, #156]	; (8002bdc <HAL_ADC_ConfigChannel+0x87c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d12d      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d127      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1c      	ldr	r2, [pc, #112]	; (8002bc4 <HAL_ADC_ConfigChannel+0x864>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d022      	beq.n	8002b9e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b60:	d004      	beq.n	8002b6c <HAL_ADC_ConfigChannel+0x80c>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a17      	ldr	r2, [pc, #92]	; (8002bc4 <HAL_ADC_ConfigChannel+0x864>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x810>
 8002b6c:	4a16      	ldr	r2, [pc, #88]	; (8002bc8 <HAL_ADC_ConfigChannel+0x868>)
 8002b6e:	e000      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x812>
 8002b70:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <HAL_ADC_ConfigChannel+0x854>)
 8002b72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	f7fe fca0 	bl	80014c2 <LL_ADC_SetCommonPathInternalCh>
 8002b82:	e00c      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b88:	f043 0220 	orr.w	r2, r3, #32
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002b96:	e002      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b98:	bf00      	nop
 8002b9a:	e000      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ba6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	37d8      	adds	r7, #216	; 0xd8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	50000700 	.word	0x50000700
 8002bb8:	c3210000 	.word	0xc3210000
 8002bbc:	90c00010 	.word	0x90c00010
 8002bc0:	50000600 	.word	0x50000600
 8002bc4:	50000100 	.word	0x50000100
 8002bc8:	50000300 	.word	0x50000300
 8002bcc:	20000408 	.word	0x20000408
 8002bd0:	053e2d63 	.word	0x053e2d63
 8002bd4:	c7520000 	.word	0xc7520000
 8002bd8:	50000500 	.word	0x50000500
 8002bdc:	cb840000 	.word	0xcb840000

08002be0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe fe47 	bl	8001880 <LL_ADC_IsEnabled>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d14d      	bne.n	8002c94 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <ADC_Enable+0xc0>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00d      	beq.n	8002c22 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e039      	b.n	8002c96 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fe16 	bl	8001858 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c2c:	f7fe fc08 	bl	8001440 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c32:	e028      	b.n	8002c86 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe fe21 	bl	8001880 <LL_ADC_IsEnabled>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d104      	bne.n	8002c4e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe fe05 	bl	8001858 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c4e:	f7fe fbf7 	bl	8001440 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d914      	bls.n	8002c86 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d00d      	beq.n	8002c86 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	f043 0210 	orr.w	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7a:	f043 0201 	orr.w	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e007      	b.n	8002c96 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d1cf      	bne.n	8002c34 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	8000003f 	.word	0x8000003f

08002ca4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d24:	4013      	ands	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3a:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	60d3      	str	r3, [r2, #12]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <__NVIC_GetPriorityGrouping+0x18>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	f003 0307 	and.w	r3, r3, #7
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	db0b      	blt.n	8002d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	f003 021f 	and.w	r2, r3, #31
 8002d84:	4907      	ldr	r1, [pc, #28]	; (8002da4 <__NVIC_EnableIRQ+0x38>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000e100 	.word	0xe000e100

08002da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	db0a      	blt.n	8002dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	490c      	ldr	r1, [pc, #48]	; (8002df4 <__NVIC_SetPriority+0x4c>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	0112      	lsls	r2, r2, #4
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	440b      	add	r3, r1
 8002dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd0:	e00a      	b.n	8002de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4908      	ldr	r1, [pc, #32]	; (8002df8 <__NVIC_SetPriority+0x50>)
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	3b04      	subs	r3, #4
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	440b      	add	r3, r1
 8002de6:	761a      	strb	r2, [r3, #24]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000e100 	.word	0xe000e100
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f1c3 0307 	rsb	r3, r3, #7
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	bf28      	it	cs
 8002e1a:	2304      	movcs	r3, #4
 8002e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d902      	bls.n	8002e2c <NVIC_EncodePriority+0x30>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3b03      	subs	r3, #3
 8002e2a:	e000      	b.n	8002e2e <NVIC_EncodePriority+0x32>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	401a      	ands	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e44:	f04f 31ff 	mov.w	r1, #4294967295
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43d9      	mvns	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	4313      	orrs	r3, r2
         );
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3724      	adds	r7, #36	; 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e74:	d301      	bcc.n	8002e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e76:	2301      	movs	r3, #1
 8002e78:	e00f      	b.n	8002e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <SysTick_Config+0x40>)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e82:	210f      	movs	r1, #15
 8002e84:	f04f 30ff 	mov.w	r0, #4294967295
 8002e88:	f7ff ff8e 	bl	8002da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <SysTick_Config+0x40>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e92:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <SysTick_Config+0x40>)
 8002e94:	2207      	movs	r2, #7
 8002e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	e000e010 	.word	0xe000e010

08002ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ff29 	bl	8002d08 <__NVIC_SetPriorityGrouping>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b086      	sub	sp, #24
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ecc:	f7ff ff40 	bl	8002d50 <__NVIC_GetPriorityGrouping>
 8002ed0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	f7ff ff90 	bl	8002dfc <NVIC_EncodePriority>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff5f 	bl	8002da8 <__NVIC_SetPriority>
}
 8002eea:	bf00      	nop
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4603      	mov	r3, r0
 8002efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff33 	bl	8002d6c <__NVIC_EnableIRQ>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ffa4 	bl	8002e64 <SysTick_Config>
 8002f1c:	4603      	mov	r3, r0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e014      	b.n	8002f62 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	791b      	ldrb	r3, [r3, #4]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d105      	bne.n	8002f4e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7fe f865 	bl	8001018 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	795b      	ldrb	r3, [r3, #5]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_DAC_Start+0x16>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e043      	b.n	8003008 <HAL_DAC_Start+0x9e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2201      	movs	r2, #1
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	f7fe fa57 	bl	8001458 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10f      	bne.n	8002fd0 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d11d      	bne.n	8002ffa <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	e014      	b.n	8002ffa <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d107      	bne.n	8002ffa <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0202 	orr.w	r2, r2, #2
 8002ff8:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003026:	d120      	bne.n	800306a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003036:	d118      	bne.n	800306a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2204      	movs	r2, #4
 800303c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f043 0201 	orr.w	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003052:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003062:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f855 	bl	8003114 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003078:	d120      	bne.n	80030bc <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003080:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003088:	d118      	bne.n	80030bc <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2204      	movs	r2, #4
 800308e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	f043 0202 	orr.w	r2, r3, #2
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80030a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80030b4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f9de 	bl	8003478 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	3308      	adds	r3, #8
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	e004      	b.n	80030fe <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	3314      	adds	r3, #20
 80030fc:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	461a      	mov	r2, r3
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	795b      	ldrb	r3, [r3, #5]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_DAC_ConfigChannel+0x18>
 800313c:	2302      	movs	r3, #2
 800313e:	e192      	b.n	8003466 <HAL_DAC_ConfigChannel+0x33e>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2202      	movs	r2, #2
 800314a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d174      	bne.n	800323e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003154:	f7fe f974 	bl	8001440 <HAL_GetTick>
 8003158:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d134      	bne.n	80031ca <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003160:	e011      	b.n	8003186 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003162:	f7fe f96d 	bl	8001440 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b01      	cmp	r3, #1
 800316e:	d90a      	bls.n	8003186 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f043 0208 	orr.w	r2, r3, #8
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2203      	movs	r2, #3
 8003180:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e16f      	b.n	8003466 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e6      	bne.n	8003162 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003194:	2001      	movs	r0, #1
 8003196:	f7fe f95f 	bl	8001458 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
 80031a4:	e01e      	b.n	80031e4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031a6:	f7fe f94b 	bl	8001440 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d90a      	bls.n	80031ca <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f043 0208 	orr.w	r2, r3, #8
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2203      	movs	r2, #3
 80031c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e14d      	b.n	8003466 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	dbe8      	blt.n	80031a6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80031d4:	2001      	movs	r0, #1
 80031d6:	f7fe f93f 	bl	8001458 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80031f4:	fa01 f303 	lsl.w	r3, r1, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	ea02 0103 	and.w	r1, r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	409a      	lsls	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	21ff      	movs	r1, #255	; 0xff
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	ea02 0103 	and.w	r1, r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	409a      	lsls	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d11d      	bne.n	8003282 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	221f      	movs	r2, #31
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325e:	4013      	ands	r3, r2
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003276:	4313      	orrs	r3, r2
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003280:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2207      	movs	r2, #7
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329a:	4013      	ands	r3, r2
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d102      	bne.n	80032ac <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	623b      	str	r3, [r7, #32]
 80032aa:	e00f      	b.n	80032cc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d102      	bne.n	80032ba <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80032b4:	2301      	movs	r3, #1
 80032b6:	623b      	str	r3, [r7, #32]
 80032b8:	e008      	b.n	80032cc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80032c2:	2301      	movs	r3, #1
 80032c4:	623b      	str	r3, [r7, #32]
 80032c6:	e001      	b.n	80032cc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	6a3a      	ldr	r2, [r7, #32]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ee:	4013      	ands	r3, r2
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	791b      	ldrb	r3, [r3, #4]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d102      	bne.n	8003300 <HAL_DAC_ConfigChannel+0x1d8>
 80032fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032fe:	e000      	b.n	8003302 <HAL_DAC_ConfigChannel+0x1da>
 8003300:	2300      	movs	r3, #0
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331a:	4013      	ands	r3, r2
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	795b      	ldrb	r3, [r3, #5]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d102      	bne.n	800332c <HAL_DAC_ConfigChannel+0x204>
 8003326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800332a:	e000      	b.n	800332e <HAL_DAC_ConfigChannel+0x206>
 800332c:	2300      	movs	r3, #0
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d114      	bne.n	800336e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003344:	f001 f866 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 8003348:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	4a48      	ldr	r2, [pc, #288]	; (8003470 <HAL_DAC_ConfigChannel+0x348>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d904      	bls.n	800335c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
 800335a:	e00f      	b.n	800337c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	4a45      	ldr	r2, [pc, #276]	; (8003474 <HAL_DAC_ConfigChannel+0x34c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d90a      	bls.n	800337a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
 800336c:	e006      	b.n	800337c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003374:	4313      	orrs	r3, r2
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
 8003378:	e000      	b.n	800337c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800337a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338a:	4313      	orrs	r3, r2
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6819      	ldr	r1, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43da      	mvns	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	400a      	ands	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ce:	4013      	ands	r3, r2
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e6:	4313      	orrs	r3, r2
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6819      	ldr	r1, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	22c0      	movs	r2, #192	; 0xc0
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43da      	mvns	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	400a      	ands	r2, r1
 800340c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	089b      	lsrs	r3, r3, #2
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	f640 710f 	movw	r1, #3855	; 0xf0f
 800343c:	fa01 f303 	lsl.w	r3, r1, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	ea02 0103 	and.w	r1, r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	409a      	lsls	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3728      	adds	r7, #40	; 0x28
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	09896800 	.word	0x09896800
 8003474:	04c4b400 	.word	0x04c4b400

08003478 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d005      	beq.n	80034b0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2204      	movs	r2, #4
 80034a8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	73fb      	strb	r3, [r7, #15]
 80034ae:	e037      	b.n	8003520 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 020e 	bic.w	r2, r2, #14
 80034be:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ce:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	f003 021f 	and.w	r2, r3, #31
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	2101      	movs	r1, #1
 80034ee:	fa01 f202 	lsl.w	r2, r1, r2
 80034f2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034fc:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00c      	beq.n	8003520 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003514:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800351e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003530:	7bfb      	ldrb	r3, [r7, #15]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d00d      	beq.n	8003572 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2204      	movs	r2, #4
 800355a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
 8003570:	e047      	b.n	8003602 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 020e 	bic.w	r2, r2, #14
 8003580:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f003 021f 	and.w	r2, r3, #31
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	2101      	movs	r1, #1
 80035b0:	fa01 f202 	lsl.w	r2, r1, r2
 80035b4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00c      	beq.n	80035e2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035e0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
    }
  }
  return status;
 8003602:	7bfb      	ldrb	r3, [r7, #15]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800361a:	e15a      	b.n	80038d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	2101      	movs	r1, #1
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	4013      	ands	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 814c 	beq.w	80038cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d00b      	beq.n	8003654 <HAL_GPIO_Init+0x48>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d007      	beq.n	8003654 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003648:	2b11      	cmp	r3, #17
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b12      	cmp	r3, #18
 8003652:	d130      	bne.n	80036b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	2203      	movs	r2, #3
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4013      	ands	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800368a:	2201      	movs	r2, #1
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	f003 0201 	and.w	r2, r3, #1
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	2203      	movs	r2, #3
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4013      	ands	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d003      	beq.n	80036f6 <HAL_GPIO_Init+0xea>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b12      	cmp	r3, #18
 80036f4:	d123      	bne.n	800373e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	08da      	lsrs	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3208      	adds	r2, #8
 80036fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	220f      	movs	r2, #15
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4013      	ands	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	08da      	lsrs	r2, r3, #3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3208      	adds	r2, #8
 8003738:	6939      	ldr	r1, [r7, #16]
 800373a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	2203      	movs	r2, #3
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 0203 	and.w	r2, r3, #3
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 80a6 	beq.w	80038cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003780:	4b5b      	ldr	r3, [pc, #364]	; (80038f0 <HAL_GPIO_Init+0x2e4>)
 8003782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003784:	4a5a      	ldr	r2, [pc, #360]	; (80038f0 <HAL_GPIO_Init+0x2e4>)
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	6613      	str	r3, [r2, #96]	; 0x60
 800378c:	4b58      	ldr	r3, [pc, #352]	; (80038f0 <HAL_GPIO_Init+0x2e4>)
 800378e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003798:	4a56      	ldr	r2, [pc, #344]	; (80038f4 <HAL_GPIO_Init+0x2e8>)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	089b      	lsrs	r3, r3, #2
 800379e:	3302      	adds	r3, #2
 80037a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	220f      	movs	r2, #15
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037c2:	d01f      	beq.n	8003804 <HAL_GPIO_Init+0x1f8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a4c      	ldr	r2, [pc, #304]	; (80038f8 <HAL_GPIO_Init+0x2ec>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d019      	beq.n	8003800 <HAL_GPIO_Init+0x1f4>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a4b      	ldr	r2, [pc, #300]	; (80038fc <HAL_GPIO_Init+0x2f0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <HAL_GPIO_Init+0x1f0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a4a      	ldr	r2, [pc, #296]	; (8003900 <HAL_GPIO_Init+0x2f4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00d      	beq.n	80037f8 <HAL_GPIO_Init+0x1ec>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a49      	ldr	r2, [pc, #292]	; (8003904 <HAL_GPIO_Init+0x2f8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <HAL_GPIO_Init+0x1e8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a48      	ldr	r2, [pc, #288]	; (8003908 <HAL_GPIO_Init+0x2fc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d101      	bne.n	80037f0 <HAL_GPIO_Init+0x1e4>
 80037ec:	2305      	movs	r3, #5
 80037ee:	e00a      	b.n	8003806 <HAL_GPIO_Init+0x1fa>
 80037f0:	2306      	movs	r3, #6
 80037f2:	e008      	b.n	8003806 <HAL_GPIO_Init+0x1fa>
 80037f4:	2304      	movs	r3, #4
 80037f6:	e006      	b.n	8003806 <HAL_GPIO_Init+0x1fa>
 80037f8:	2303      	movs	r3, #3
 80037fa:	e004      	b.n	8003806 <HAL_GPIO_Init+0x1fa>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e002      	b.n	8003806 <HAL_GPIO_Init+0x1fa>
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <HAL_GPIO_Init+0x1fa>
 8003804:	2300      	movs	r3, #0
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	f002 0203 	and.w	r2, r2, #3
 800380c:	0092      	lsls	r2, r2, #2
 800380e:	4093      	lsls	r3, r2
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003816:	4937      	ldr	r1, [pc, #220]	; (80038f4 <HAL_GPIO_Init+0x2e8>)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	089b      	lsrs	r3, r3, #2
 800381c:	3302      	adds	r3, #2
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003824:	4b39      	ldr	r3, [pc, #228]	; (800390c <HAL_GPIO_Init+0x300>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	43db      	mvns	r3, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4013      	ands	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003848:	4a30      	ldr	r2, [pc, #192]	; (800390c <HAL_GPIO_Init+0x300>)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800384e:	4b2f      	ldr	r3, [pc, #188]	; (800390c <HAL_GPIO_Init+0x300>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	43db      	mvns	r3, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003872:	4a26      	ldr	r2, [pc, #152]	; (800390c <HAL_GPIO_Init+0x300>)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003878:	4b24      	ldr	r3, [pc, #144]	; (800390c <HAL_GPIO_Init+0x300>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	43db      	mvns	r3, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800389c:	4a1b      	ldr	r2, [pc, #108]	; (800390c <HAL_GPIO_Init+0x300>)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038a2:	4b1a      	ldr	r3, [pc, #104]	; (800390c <HAL_GPIO_Init+0x300>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4013      	ands	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038c6:	4a11      	ldr	r2, [pc, #68]	; (800390c <HAL_GPIO_Init+0x300>)
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	3301      	adds	r3, #1
 80038d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f47f ae9d 	bne.w	800361c <HAL_GPIO_Init+0x10>
  }
}
 80038e2:	bf00      	nop
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40010000 	.word	0x40010000
 80038f8:	48000400 	.word	0x48000400
 80038fc:	48000800 	.word	0x48000800
 8003900:	48000c00 	.word	0x48000c00
 8003904:	48001000 	.word	0x48001000
 8003908:	48001400 	.word	0x48001400
 800390c:	40010400 	.word	0x40010400

08003910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	807b      	strh	r3, [r7, #2]
 800391c:	4613      	mov	r3, r2
 800391e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003920:	787b      	ldrb	r3, [r7, #1]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800392c:	e002      	b.n	8003934 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d141      	bne.n	80039d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800394e:	4b4b      	ldr	r3, [pc, #300]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395a:	d131      	bne.n	80039c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800395c:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800395e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003962:	4a46      	ldr	r2, [pc, #280]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003968:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800396c:	4b43      	ldr	r3, [pc, #268]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003974:	4a41      	ldr	r2, [pc, #260]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800397a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800397c:	4b40      	ldr	r3, [pc, #256]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2232      	movs	r2, #50	; 0x32
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	4a3f      	ldr	r2, [pc, #252]	; (8003a84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003988:	fba2 2303 	umull	r2, r3, r2, r3
 800398c:	0c9b      	lsrs	r3, r3, #18
 800398e:	3301      	adds	r3, #1
 8003990:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003992:	e002      	b.n	800399a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	3b01      	subs	r3, #1
 8003998:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800399a:	4b38      	ldr	r3, [pc, #224]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a6:	d102      	bne.n	80039ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f2      	bne.n	8003994 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039ae:	4b33      	ldr	r3, [pc, #204]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ba:	d158      	bne.n	8003a6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e057      	b.n	8003a70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039c0:	4b2e      	ldr	r3, [pc, #184]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c6:	4a2d      	ldr	r2, [pc, #180]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039d0:	e04d      	b.n	8003a6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d8:	d141      	bne.n	8003a5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039da:	4b28      	ldr	r3, [pc, #160]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e6:	d131      	bne.n	8003a4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039e8:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ee:	4a23      	ldr	r2, [pc, #140]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039f8:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a00:	4a1e      	ldr	r2, [pc, #120]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a08:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2232      	movs	r2, #50	; 0x32
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	4a1c      	ldr	r2, [pc, #112]	; (8003a84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a14:	fba2 2303 	umull	r2, r3, r2, r3
 8003a18:	0c9b      	lsrs	r3, r3, #18
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a1e:	e002      	b.n	8003a26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a26:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a32:	d102      	bne.n	8003a3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f2      	bne.n	8003a20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a46:	d112      	bne.n	8003a6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e011      	b.n	8003a70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a5c:	e007      	b.n	8003a6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a5e:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a66:	4a05      	ldr	r2, [pc, #20]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	40007000 	.word	0x40007000
 8003a80:	20000408 	.word	0x20000408
 8003a84:	431bde83 	.word	0x431bde83

08003a88 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a04      	ldr	r2, [pc, #16]	; (8003aa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a96:	6093      	str	r3, [r2, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40007000 	.word	0x40007000

08003aa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e308      	b.n	80040cc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d075      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ac6:	4ba3      	ldr	r3, [pc, #652]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ad0:	4ba0      	ldr	r3, [pc, #640]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	2b0c      	cmp	r3, #12
 8003ade:	d102      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x3e>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d002      	beq.n	8003aec <HAL_RCC_OscConfig+0x44>
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d10b      	bne.n	8003b04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aec:	4b99      	ldr	r3, [pc, #612]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d05b      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x108>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d157      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e2e3      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0c:	d106      	bne.n	8003b1c <HAL_RCC_OscConfig+0x74>
 8003b0e:	4b91      	ldr	r3, [pc, #580]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a90      	ldr	r2, [pc, #576]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e01d      	b.n	8003b58 <HAL_RCC_OscConfig+0xb0>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x98>
 8003b26:	4b8b      	ldr	r3, [pc, #556]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a8a      	ldr	r2, [pc, #552]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	4b88      	ldr	r3, [pc, #544]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a87      	ldr	r2, [pc, #540]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e00b      	b.n	8003b58 <HAL_RCC_OscConfig+0xb0>
 8003b40:	4b84      	ldr	r3, [pc, #528]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a83      	ldr	r2, [pc, #524]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	4b81      	ldr	r3, [pc, #516]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a80      	ldr	r2, [pc, #512]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d013      	beq.n	8003b88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fd fc6e 	bl	8001440 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b68:	f7fd fc6a 	bl	8001440 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e2a8      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b7a:	4b76      	ldr	r3, [pc, #472]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0xc0>
 8003b86:	e014      	b.n	8003bb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fd fc5a 	bl	8001440 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b90:	f7fd fc56 	bl	8001440 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	; 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e294      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ba2:	4b6c      	ldr	r3, [pc, #432]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0xe8>
 8003bae:	e000      	b.n	8003bb2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d075      	beq.n	8003caa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bbe:	4b65      	ldr	r3, [pc, #404]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bc8:	4b62      	ldr	r3, [pc, #392]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b0c      	cmp	r3, #12
 8003bd6:	d102      	bne.n	8003bde <HAL_RCC_OscConfig+0x136>
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d002      	beq.n	8003be4 <HAL_RCC_OscConfig+0x13c>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d11f      	bne.n	8003c24 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be4:	4b5b      	ldr	r3, [pc, #364]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_OscConfig+0x154>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e267      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfc:	4b55      	ldr	r3, [pc, #340]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	4952      	ldr	r1, [pc, #328]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c10:	4b51      	ldr	r3, [pc, #324]	; (8003d58 <HAL_RCC_OscConfig+0x2b0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fd fbc7 	bl	80013a8 <HAL_InitTick>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d043      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e253      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d023      	beq.n	8003c74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c2c:	4b49      	ldr	r3, [pc, #292]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a48      	ldr	r2, [pc, #288]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fd fc02 	bl	8001440 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c40:	f7fd fbfe 	bl	8001440 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e23c      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c52:	4b40      	ldr	r3, [pc, #256]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5e:	4b3d      	ldr	r3, [pc, #244]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	061b      	lsls	r3, r3, #24
 8003c6c:	4939      	ldr	r1, [pc, #228]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]
 8003c72:	e01a      	b.n	8003caa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c74:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a36      	ldr	r2, [pc, #216]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003c7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fd fbde 	bl	8001440 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c88:	f7fd fbda 	bl	8001440 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e218      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c9a:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x1e0>
 8003ca6:	e000      	b.n	8003caa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ca8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d03c      	beq.n	8003d30 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d01c      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cbe:	4b25      	ldr	r3, [pc, #148]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc4:	4a23      	ldr	r2, [pc, #140]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cce:	f7fd fbb7 	bl	8001440 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd6:	f7fd fbb3 	bl	8001440 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e1f1      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ef      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x22e>
 8003cf6:	e01b      	b.n	8003d30 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf8:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfe:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fd fb9a 	bl	8001440 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d10:	f7fd fb96 	bl	8001440 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e1d4      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1ef      	bne.n	8003d10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80ab 	beq.w	8003e94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d42:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_RCC_OscConfig+0x2b4>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e005      	b.n	8003d5e <HAL_RCC_OscConfig+0x2b6>
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
 8003d58:	2000040c 	.word	0x2000040c
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00d      	beq.n	8003d7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d62:	4baf      	ldr	r3, [pc, #700]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d66:	4aae      	ldr	r2, [pc, #696]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d6e:	4bac      	ldr	r3, [pc, #688]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d7e:	4ba9      	ldr	r3, [pc, #676]	; (8004024 <HAL_RCC_OscConfig+0x57c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d118      	bne.n	8003dbc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d8a:	4ba6      	ldr	r3, [pc, #664]	; (8004024 <HAL_RCC_OscConfig+0x57c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4aa5      	ldr	r2, [pc, #660]	; (8004024 <HAL_RCC_OscConfig+0x57c>)
 8003d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d96:	f7fd fb53 	bl	8001440 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9e:	f7fd fb4f 	bl	8001440 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e18d      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db0:	4b9c      	ldr	r3, [pc, #624]	; (8004024 <HAL_RCC_OscConfig+0x57c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d108      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x32e>
 8003dc4:	4b96      	ldr	r3, [pc, #600]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	4a95      	ldr	r2, [pc, #596]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dd4:	e024      	b.n	8003e20 <HAL_RCC_OscConfig+0x378>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b05      	cmp	r3, #5
 8003ddc:	d110      	bne.n	8003e00 <HAL_RCC_OscConfig+0x358>
 8003dde:	4b90      	ldr	r3, [pc, #576]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de4:	4a8e      	ldr	r2, [pc, #568]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003de6:	f043 0304 	orr.w	r3, r3, #4
 8003dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dee:	4b8c      	ldr	r3, [pc, #560]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	4a8a      	ldr	r2, [pc, #552]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dfe:	e00f      	b.n	8003e20 <HAL_RCC_OscConfig+0x378>
 8003e00:	4b87      	ldr	r3, [pc, #540]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	4a86      	ldr	r2, [pc, #536]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e10:	4b83      	ldr	r3, [pc, #524]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	4a82      	ldr	r2, [pc, #520]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003e18:	f023 0304 	bic.w	r3, r3, #4
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d016      	beq.n	8003e56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fd fb0a 	bl	8001440 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fd fb06 	bl	8001440 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e142      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e46:	4b76      	ldr	r3, [pc, #472]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ed      	beq.n	8003e30 <HAL_RCC_OscConfig+0x388>
 8003e54:	e015      	b.n	8003e82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e56:	f7fd faf3 	bl	8001440 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e5c:	e00a      	b.n	8003e74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5e:	f7fd faef 	bl	8001440 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e12b      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e74:	4b6a      	ldr	r3, [pc, #424]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1ed      	bne.n	8003e5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e82:	7ffb      	ldrb	r3, [r7, #31]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d105      	bne.n	8003e94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e88:	4b65      	ldr	r3, [pc, #404]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	4a64      	ldr	r2, [pc, #400]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d03c      	beq.n	8003f1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01c      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ea8:	4b5d      	ldr	r3, [pc, #372]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eae:	4a5c      	ldr	r2, [pc, #368]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb8:	f7fd fac2 	bl	8001440 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ec0:	f7fd fabe 	bl	8001440 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e0fc      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ed2:	4b53      	ldr	r3, [pc, #332]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003ed4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0ef      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x418>
 8003ee0:	e01b      	b.n	8003f1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ee2:	4b4f      	ldr	r3, [pc, #316]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ee8:	4a4d      	ldr	r2, [pc, #308]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fd faa5 	bl	8001440 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003efa:	f7fd faa1 	bl	8001440 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e0df      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f0c:	4b44      	ldr	r3, [pc, #272]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1ef      	bne.n	8003efa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 80d3 	beq.w	80040ca <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f24:	4b3e      	ldr	r3, [pc, #248]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 030c 	and.w	r3, r3, #12
 8003f2c:	2b0c      	cmp	r3, #12
 8003f2e:	f000 808d 	beq.w	800404c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d15a      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3a:	4b39      	ldr	r3, [pc, #228]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a38      	ldr	r2, [pc, #224]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003f40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fd fa7b 	bl	8001440 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7fd fa77 	bl	8001440 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e0b5      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f60:	4b2f      	ldr	r3, [pc, #188]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f0      	bne.n	8003f4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f6c:	4b2c      	ldr	r3, [pc, #176]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	4b2d      	ldr	r3, [pc, #180]	; (8004028 <HAL_RCC_OscConfig+0x580>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6a11      	ldr	r1, [r2, #32]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f7c:	3a01      	subs	r2, #1
 8003f7e:	0112      	lsls	r2, r2, #4
 8003f80:	4311      	orrs	r1, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003f86:	0212      	lsls	r2, r2, #8
 8003f88:	4311      	orrs	r1, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f8e:	0852      	lsrs	r2, r2, #1
 8003f90:	3a01      	subs	r2, #1
 8003f92:	0552      	lsls	r2, r2, #21
 8003f94:	4311      	orrs	r1, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f9a:	0852      	lsrs	r2, r2, #1
 8003f9c:	3a01      	subs	r2, #1
 8003f9e:	0652      	lsls	r2, r2, #25
 8003fa0:	4311      	orrs	r1, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fa6:	06d2      	lsls	r2, r2, #27
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	491d      	ldr	r1, [pc, #116]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb0:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1a      	ldr	r2, [pc, #104]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fbc:	4b18      	ldr	r3, [pc, #96]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4a17      	ldr	r2, [pc, #92]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7fd fa3a 	bl	8001440 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fd fa36 	bl	8001440 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e074      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe2:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x528>
 8003fee:	e06c      	b.n	80040ca <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ffa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ffc:	4b08      	ldr	r3, [pc, #32]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4a07      	ldr	r2, [pc, #28]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4a04      	ldr	r2, [pc, #16]	; (8004020 <HAL_RCC_OscConfig+0x578>)
 800400e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004016:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fd fa12 	bl	8001440 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800401e:	e00e      	b.n	800403e <HAL_RCC_OscConfig+0x596>
 8004020:	40021000 	.word	0x40021000
 8004024:	40007000 	.word	0x40007000
 8004028:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402c:	f7fd fa08 	bl	8001440 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e046      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800403e:	4b25      	ldr	r3, [pc, #148]	; (80040d4 <HAL_RCC_OscConfig+0x62c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x584>
 800404a:	e03e      	b.n	80040ca <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e039      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004058:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <HAL_RCC_OscConfig+0x62c>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f003 0203 	and.w	r2, r3, #3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	429a      	cmp	r2, r3
 800406a:	d12c      	bne.n	80040c6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	3b01      	subs	r3, #1
 8004078:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d123      	bne.n	80040c6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d11b      	bne.n	80040c6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d113      	bne.n	80040c6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	3b01      	subs	r3, #1
 80040ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d109      	bne.n	80040c6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040bc:	085b      	lsrs	r3, r3, #1
 80040be:	3b01      	subs	r3, #1
 80040c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d001      	beq.n	80040ca <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3720      	adds	r7, #32
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40021000 	.word	0x40021000

080040d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e11e      	b.n	800432e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f0:	4b91      	ldr	r3, [pc, #580]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d910      	bls.n	8004120 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	4b8e      	ldr	r3, [pc, #568]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 020f 	bic.w	r2, r3, #15
 8004106:	498c      	ldr	r1, [pc, #560]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	4313      	orrs	r3, r2
 800410c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b8a      	ldr	r3, [pc, #552]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e106      	b.n	800432e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d073      	beq.n	8004214 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b03      	cmp	r3, #3
 8004132:	d129      	bne.n	8004188 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004134:	4b81      	ldr	r3, [pc, #516]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0f4      	b.n	800432e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004144:	f000 f99e 	bl	8004484 <RCC_GetSysClockFreqFromPLLSource>
 8004148:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4a7c      	ldr	r2, [pc, #496]	; (8004340 <HAL_RCC_ClockConfig+0x268>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d93f      	bls.n	80041d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004152:	4b7a      	ldr	r3, [pc, #488]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004166:	2b00      	cmp	r3, #0
 8004168:	d033      	beq.n	80041d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800416e:	2b00      	cmp	r3, #0
 8004170:	d12f      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004172:	4b72      	ldr	r3, [pc, #456]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800417a:	4a70      	ldr	r2, [pc, #448]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 800417c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004180:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004182:	2380      	movs	r3, #128	; 0x80
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	e024      	b.n	80041d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004190:	4b6a      	ldr	r3, [pc, #424]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d109      	bne.n	80041b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0c6      	b.n	800432e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a0:	4b66      	ldr	r3, [pc, #408]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0be      	b.n	800432e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80041b0:	f000 f8ce 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 80041b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	4a61      	ldr	r2, [pc, #388]	; (8004340 <HAL_RCC_ClockConfig+0x268>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d909      	bls.n	80041d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041be:	4b5f      	ldr	r3, [pc, #380]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041c6:	4a5d      	ldr	r2, [pc, #372]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 80041c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041d2:	4b5a      	ldr	r3, [pc, #360]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f023 0203 	bic.w	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4957      	ldr	r1, [pc, #348]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e4:	f7fd f92c 	bl	8001440 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ec:	f7fd f928 	bl	8001440 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e095      	b.n	800432e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004202:	4b4e      	ldr	r3, [pc, #312]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 020c 	and.w	r2, r3, #12
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	429a      	cmp	r2, r3
 8004212:	d1eb      	bne.n	80041ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d023      	beq.n	8004268 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800422c:	4b43      	ldr	r3, [pc, #268]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a42      	ldr	r2, [pc, #264]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 8004232:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004236:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d007      	beq.n	8004254 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004244:	4b3d      	ldr	r3, [pc, #244]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800424c:	4a3b      	ldr	r2, [pc, #236]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 800424e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004252:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004254:	4b39      	ldr	r3, [pc, #228]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4936      	ldr	r1, [pc, #216]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
 8004266:	e008      	b.n	800427a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b80      	cmp	r3, #128	; 0x80
 800426c:	d105      	bne.n	800427a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800426e:	4b33      	ldr	r3, [pc, #204]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	4a32      	ldr	r2, [pc, #200]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 8004274:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004278:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800427a:	4b2f      	ldr	r3, [pc, #188]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d21d      	bcs.n	80042c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004288:	4b2b      	ldr	r3, [pc, #172]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 020f 	bic.w	r2, r3, #15
 8004290:	4929      	ldr	r1, [pc, #164]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	4313      	orrs	r3, r2
 8004296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004298:	f7fd f8d2 	bl	8001440 <HAL_GetTick>
 800429c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429e:	e00a      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a0:	f7fd f8ce 	bl	8001440 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e03b      	b.n	800432e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b6:	4b20      	ldr	r3, [pc, #128]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d1ed      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042d0:	4b1a      	ldr	r3, [pc, #104]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4917      	ldr	r1, [pc, #92]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ee:	4b13      	ldr	r3, [pc, #76]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	490f      	ldr	r1, [pc, #60]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004302:	f000 f825 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 8004306:	4602      	mov	r2, r0
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <HAL_RCC_ClockConfig+0x264>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	091b      	lsrs	r3, r3, #4
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	490c      	ldr	r1, [pc, #48]	; (8004344 <HAL_RCC_ClockConfig+0x26c>)
 8004314:	5ccb      	ldrb	r3, [r1, r3]
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	fa22 f303 	lsr.w	r3, r2, r3
 800431e:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <HAL_RCC_ClockConfig+0x270>)
 8004320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <HAL_RCC_ClockConfig+0x274>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fd f83e 	bl	80013a8 <HAL_InitTick>
 800432c:	4603      	mov	r3, r0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40022000 	.word	0x40022000
 800433c:	40021000 	.word	0x40021000
 8004340:	04c4b400 	.word	0x04c4b400
 8004344:	08006eb8 	.word	0x08006eb8
 8004348:	20000408 	.word	0x20000408
 800434c:	2000040c 	.word	0x2000040c

08004350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004356:	4b2c      	ldr	r3, [pc, #176]	; (8004408 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b04      	cmp	r3, #4
 8004360:	d102      	bne.n	8004368 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004362:	4b2a      	ldr	r3, [pc, #168]	; (800440c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	e047      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004368:	4b27      	ldr	r3, [pc, #156]	; (8004408 <HAL_RCC_GetSysClockFreq+0xb8>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 030c 	and.w	r3, r3, #12
 8004370:	2b08      	cmp	r3, #8
 8004372:	d102      	bne.n	800437a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004374:	4b26      	ldr	r3, [pc, #152]	; (8004410 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	e03e      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800437a:	4b23      	ldr	r3, [pc, #140]	; (8004408 <HAL_RCC_GetSysClockFreq+0xb8>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	2b0c      	cmp	r3, #12
 8004384:	d136      	bne.n	80043f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004386:	4b20      	ldr	r3, [pc, #128]	; (8004408 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004390:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	3301      	adds	r3, #1
 800439c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d10c      	bne.n	80043be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043a4:	4a1a      	ldr	r2, [pc, #104]	; (8004410 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	4a16      	ldr	r2, [pc, #88]	; (8004408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ae:	68d2      	ldr	r2, [r2, #12]
 80043b0:	0a12      	lsrs	r2, r2, #8
 80043b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	617b      	str	r3, [r7, #20]
      break;
 80043bc:	e00c      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043be:	4a13      	ldr	r2, [pc, #76]	; (800440c <HAL_RCC_GetSysClockFreq+0xbc>)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c6:	4a10      	ldr	r2, [pc, #64]	; (8004408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043c8:	68d2      	ldr	r2, [r2, #12]
 80043ca:	0a12      	lsrs	r2, r2, #8
 80043cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043d0:	fb02 f303 	mul.w	r3, r2, r3
 80043d4:	617b      	str	r3, [r7, #20]
      break;
 80043d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	0e5b      	lsrs	r3, r3, #25
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	3301      	adds	r3, #1
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	e001      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043f8:	693b      	ldr	r3, [r7, #16]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000
 800440c:	00f42400 	.word	0x00f42400
 8004410:	016e3600 	.word	0x016e3600

08004414 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004418:	4b03      	ldr	r3, [pc, #12]	; (8004428 <HAL_RCC_GetHCLKFreq+0x14>)
 800441a:	681b      	ldr	r3, [r3, #0]
}
 800441c:	4618      	mov	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000408 	.word	0x20000408

0800442c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004430:	f7ff fff0 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	0a1b      	lsrs	r3, r3, #8
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	4904      	ldr	r1, [pc, #16]	; (8004454 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40021000 	.word	0x40021000
 8004454:	08006ec8 	.word	0x08006ec8

08004458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800445c:	f7ff ffda 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 8004460:	4602      	mov	r2, r0
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	0adb      	lsrs	r3, r3, #11
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	4904      	ldr	r1, [pc, #16]	; (8004480 <HAL_RCC_GetPCLK2Freq+0x28>)
 800446e:	5ccb      	ldrb	r3, [r1, r3]
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000
 8004480:	08006ec8 	.word	0x08006ec8

08004484 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800448a:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004494:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	3301      	adds	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d10c      	bne.n	80044c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044a8:	4a17      	ldr	r2, [pc, #92]	; (8004508 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	4a14      	ldr	r2, [pc, #80]	; (8004504 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044b2:	68d2      	ldr	r2, [r2, #12]
 80044b4:	0a12      	lsrs	r2, r2, #8
 80044b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
 80044be:	617b      	str	r3, [r7, #20]
    break;
 80044c0:	e00c      	b.n	80044dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044c2:	4a12      	ldr	r2, [pc, #72]	; (800450c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	4a0e      	ldr	r2, [pc, #56]	; (8004504 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044cc:	68d2      	ldr	r2, [r2, #12]
 80044ce:	0a12      	lsrs	r2, r2, #8
 80044d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044d4:	fb02 f303 	mul.w	r3, r2, r3
 80044d8:	617b      	str	r3, [r7, #20]
    break;
 80044da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	0e5b      	lsrs	r3, r3, #25
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	3301      	adds	r3, #1
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80044f6:	687b      	ldr	r3, [r7, #4]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	40021000 	.word	0x40021000
 8004508:	016e3600 	.word	0x016e3600
 800450c:	00f42400 	.word	0x00f42400

08004510 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004518:	2300      	movs	r3, #0
 800451a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800451c:	2300      	movs	r3, #0
 800451e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8098 	beq.w	800465e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452e:	2300      	movs	r3, #0
 8004530:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004532:	4b43      	ldr	r3, [pc, #268]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10d      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453e:	4b40      	ldr	r3, [pc, #256]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004542:	4a3f      	ldr	r2, [pc, #252]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004548:	6593      	str	r3, [r2, #88]	; 0x58
 800454a:	4b3d      	ldr	r3, [pc, #244]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800454c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004556:	2301      	movs	r3, #1
 8004558:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800455a:	4b3a      	ldr	r3, [pc, #232]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a39      	ldr	r2, [pc, #228]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004564:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004566:	f7fc ff6b 	bl	8001440 <HAL_GetTick>
 800456a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800456c:	e009      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456e:	f7fc ff67 	bl	8001440 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d902      	bls.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	74fb      	strb	r3, [r7, #19]
        break;
 8004580:	e005      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004582:	4b30      	ldr	r3, [pc, #192]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0ef      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800458e:	7cfb      	ldrb	r3, [r7, #19]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d159      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004594:	4b2a      	ldr	r3, [pc, #168]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01e      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d019      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045b0:	4b23      	ldr	r3, [pc, #140]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045bc:	4b20      	ldr	r3, [pc, #128]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c2:	4a1f      	ldr	r2, [pc, #124]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045cc:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d2:	4a1b      	ldr	r2, [pc, #108]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045dc:	4a18      	ldr	r2, [pc, #96]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d016      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ee:	f7fc ff27 	bl	8001440 <HAL_GetTick>
 80045f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045f4:	e00b      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f6:	f7fc ff23 	bl	8001440 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	f241 3288 	movw	r2, #5000	; 0x1388
 8004604:	4293      	cmp	r3, r2
 8004606:	d902      	bls.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	74fb      	strb	r3, [r7, #19]
            break;
 800460c:	e006      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0ec      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800461c:	7cfb      	ldrb	r3, [r7, #19]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10b      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004622:	4b07      	ldr	r3, [pc, #28]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004630:	4903      	ldr	r1, [pc, #12]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004638:	e008      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800463a:	7cfb      	ldrb	r3, [r7, #19]
 800463c:	74bb      	strb	r3, [r7, #18]
 800463e:	e005      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004640:	40021000 	.word	0x40021000
 8004644:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	7cfb      	ldrb	r3, [r7, #19]
 800464a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800464c:	7c7b      	ldrb	r3, [r7, #17]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d105      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004652:	4baf      	ldr	r3, [pc, #700]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004656:	4aae      	ldr	r2, [pc, #696]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800465c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800466a:	4ba9      	ldr	r3, [pc, #676]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004670:	f023 0203 	bic.w	r2, r3, #3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	49a5      	ldr	r1, [pc, #660]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800468c:	4ba0      	ldr	r3, [pc, #640]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	f023 020c 	bic.w	r2, r3, #12
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	499d      	ldr	r1, [pc, #628]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046ae:	4b98      	ldr	r3, [pc, #608]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4994      	ldr	r1, [pc, #592]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046d0:	4b8f      	ldr	r3, [pc, #572]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	498c      	ldr	r1, [pc, #560]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046f2:	4b87      	ldr	r3, [pc, #540]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	4983      	ldr	r1, [pc, #524]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004714:	4b7e      	ldr	r3, [pc, #504]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	497b      	ldr	r1, [pc, #492]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004736:	4b76      	ldr	r3, [pc, #472]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	4972      	ldr	r1, [pc, #456]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004758:	4b6d      	ldr	r3, [pc, #436]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	496a      	ldr	r1, [pc, #424]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800477a:	4b65      	ldr	r3, [pc, #404]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	4961      	ldr	r1, [pc, #388]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800479c:	4b5c      	ldr	r3, [pc, #368]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800479e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047a2:	f023 0203 	bic.w	r2, r3, #3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	4959      	ldr	r1, [pc, #356]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047be:	4b54      	ldr	r3, [pc, #336]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	4950      	ldr	r1, [pc, #320]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d015      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047e0:	4b4b      	ldr	r3, [pc, #300]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	4948      	ldr	r1, [pc, #288]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047fe:	d105      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004800:	4b43      	ldr	r3, [pc, #268]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a42      	ldr	r2, [pc, #264]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800480a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004814:	2b00      	cmp	r3, #0
 8004816:	d015      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004818:	4b3d      	ldr	r3, [pc, #244]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004826:	493a      	ldr	r1, [pc, #232]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004836:	d105      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004838:	4b35      	ldr	r3, [pc, #212]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4a34      	ldr	r2, [pc, #208]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800483e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004842:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d015      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004850:	4b2f      	ldr	r3, [pc, #188]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	492c      	ldr	r1, [pc, #176]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800486e:	d105      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004870:	4b27      	ldr	r3, [pc, #156]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4a26      	ldr	r2, [pc, #152]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800487a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d015      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004888:	4b21      	ldr	r3, [pc, #132]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004896:	491e      	ldr	r1, [pc, #120]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048a6:	d105      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	4a18      	ldr	r2, [pc, #96]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d015      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048c0:	4b13      	ldr	r3, [pc, #76]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	4910      	ldr	r1, [pc, #64]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048de:	d105      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	4a0a      	ldr	r2, [pc, #40]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d018      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004906:	4902      	ldr	r1, [pc, #8]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800490e:	e001      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004910:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800491c:	d105      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800491e:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	4a20      	ldr	r2, [pc, #128]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004928:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d015      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004936:	4b1b      	ldr	r3, [pc, #108]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004944:	4917      	ldr	r1, [pc, #92]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004954:	d105      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004956:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	4a12      	ldr	r2, [pc, #72]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800495c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004960:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d015      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004970:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004974:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497c:	4909      	ldr	r1, [pc, #36]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004988:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800498c:	d105      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	4a04      	ldr	r2, [pc, #16]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004998:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800499a:	7cbb      	ldrb	r3, [r7, #18]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40021000 	.word	0x40021000

080049a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e049      	b.n	8004a4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fc fb68 	bl	80010a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f000 fb68 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d001      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e054      	b.n	8004b1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a26      	ldr	r2, [pc, #152]	; (8004b28 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d022      	beq.n	8004ad8 <HAL_TIM_Base_Start_IT+0x80>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9a:	d01d      	beq.n	8004ad8 <HAL_TIM_Base_Start_IT+0x80>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a22      	ldr	r2, [pc, #136]	; (8004b2c <HAL_TIM_Base_Start_IT+0xd4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d018      	beq.n	8004ad8 <HAL_TIM_Base_Start_IT+0x80>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a21      	ldr	r2, [pc, #132]	; (8004b30 <HAL_TIM_Base_Start_IT+0xd8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d013      	beq.n	8004ad8 <HAL_TIM_Base_Start_IT+0x80>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a1f      	ldr	r2, [pc, #124]	; (8004b34 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00e      	beq.n	8004ad8 <HAL_TIM_Base_Start_IT+0x80>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a1e      	ldr	r2, [pc, #120]	; (8004b38 <HAL_TIM_Base_Start_IT+0xe0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d009      	beq.n	8004ad8 <HAL_TIM_Base_Start_IT+0x80>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a1c      	ldr	r2, [pc, #112]	; (8004b3c <HAL_TIM_Base_Start_IT+0xe4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d004      	beq.n	8004ad8 <HAL_TIM_Base_Start_IT+0x80>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <HAL_TIM_Base_Start_IT+0xe8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d115      	bne.n	8004b04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <HAL_TIM_Base_Start_IT+0xec>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b06      	cmp	r3, #6
 8004ae8:	d015      	beq.n	8004b16 <HAL_TIM_Base_Start_IT+0xbe>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af0:	d011      	beq.n	8004b16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0201 	orr.w	r2, r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b02:	e008      	b.n	8004b16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	e000      	b.n	8004b18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40000400 	.word	0x40000400
 8004b30:	40000800 	.word	0x40000800
 8004b34:	40000c00 	.word	0x40000c00
 8004b38:	40013400 	.word	0x40013400
 8004b3c:	40014000 	.word	0x40014000
 8004b40:	40015000 	.word	0x40015000
 8004b44:	00010007 	.word	0x00010007

08004b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d122      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d11b      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0202 	mvn.w	r2, #2
 8004b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa78 	bl	8005080 <HAL_TIM_IC_CaptureCallback>
 8004b90:	e005      	b.n	8004b9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fa6a 	bl	800506c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fa7b 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d122      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d11b      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0204 	mvn.w	r2, #4
 8004bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fa4e 	bl	8005080 <HAL_TIM_IC_CaptureCallback>
 8004be4:	e005      	b.n	8004bf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fa40 	bl	800506c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fa51 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d122      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d11b      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0208 	mvn.w	r2, #8
 8004c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2204      	movs	r2, #4
 8004c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fa24 	bl	8005080 <HAL_TIM_IC_CaptureCallback>
 8004c38:	e005      	b.n	8004c46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa16 	bl	800506c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fa27 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	d122      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d11b      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0210 	mvn.w	r2, #16
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2208      	movs	r2, #8
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f9fa 	bl	8005080 <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f9ec 	bl	800506c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f9fd 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d10e      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d107      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0201 	mvn.w	r2, #1
 8004cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fb fd02 	bl	80006d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd6:	2b80      	cmp	r3, #128	; 0x80
 8004cd8:	d10e      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce4:	2b80      	cmp	r3, #128	; 0x80
 8004ce6:	d107      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fbc6 	bl	8005484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d06:	d10e      	bne.n	8004d26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d12:	2b80      	cmp	r3, #128	; 0x80
 8004d14:	d107      	bne.n	8004d26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fbb9 	bl	8005498 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d10e      	bne.n	8004d52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d107      	bne.n	8004d52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f9ab 	bl	80050a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d10e      	bne.n	8004d7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d107      	bne.n	8004d7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f06f 0220 	mvn.w	r2, #32
 8004d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fb79 	bl	8005470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d8c:	d10f      	bne.n	8004dae <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d9c:	d107      	bne.n	8004dae <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fb7f 	bl	80054ac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004db8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dbc:	d10f      	bne.n	8004dde <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dcc:	d107      	bne.n	8004dde <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fb71 	bl	80054c0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dec:	d10f      	bne.n	8004e0e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dfc:	d107      	bne.n	8004e0e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fb63 	bl	80054d4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e1c:	d10f      	bne.n	8004e3e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e2c:	d107      	bne.n	8004e3e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fb55 	bl	80054e8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e3e:	bf00      	nop
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_TIM_ConfigClockSource+0x18>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e0f5      	b.n	800504c <HAL_TIM_ConfigClockSource+0x204>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004e7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a6e      	ldr	r2, [pc, #440]	; (8005054 <HAL_TIM_ConfigClockSource+0x20c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	f000 80c1 	beq.w	8005022 <HAL_TIM_ConfigClockSource+0x1da>
 8004ea0:	4a6c      	ldr	r2, [pc, #432]	; (8005054 <HAL_TIM_ConfigClockSource+0x20c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	f200 80c6 	bhi.w	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
 8004ea8:	4a6b      	ldr	r2, [pc, #428]	; (8005058 <HAL_TIM_ConfigClockSource+0x210>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	f000 80b9 	beq.w	8005022 <HAL_TIM_ConfigClockSource+0x1da>
 8004eb0:	4a69      	ldr	r2, [pc, #420]	; (8005058 <HAL_TIM_ConfigClockSource+0x210>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	f200 80be 	bhi.w	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
 8004eb8:	4a68      	ldr	r2, [pc, #416]	; (800505c <HAL_TIM_ConfigClockSource+0x214>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	f000 80b1 	beq.w	8005022 <HAL_TIM_ConfigClockSource+0x1da>
 8004ec0:	4a66      	ldr	r2, [pc, #408]	; (800505c <HAL_TIM_ConfigClockSource+0x214>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	f200 80b6 	bhi.w	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
 8004ec8:	4a65      	ldr	r2, [pc, #404]	; (8005060 <HAL_TIM_ConfigClockSource+0x218>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	f000 80a9 	beq.w	8005022 <HAL_TIM_ConfigClockSource+0x1da>
 8004ed0:	4a63      	ldr	r2, [pc, #396]	; (8005060 <HAL_TIM_ConfigClockSource+0x218>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	f200 80ae 	bhi.w	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
 8004ed8:	4a62      	ldr	r2, [pc, #392]	; (8005064 <HAL_TIM_ConfigClockSource+0x21c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	f000 80a1 	beq.w	8005022 <HAL_TIM_ConfigClockSource+0x1da>
 8004ee0:	4a60      	ldr	r2, [pc, #384]	; (8005064 <HAL_TIM_ConfigClockSource+0x21c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	f200 80a6 	bhi.w	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
 8004ee8:	4a5f      	ldr	r2, [pc, #380]	; (8005068 <HAL_TIM_ConfigClockSource+0x220>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	f000 8099 	beq.w	8005022 <HAL_TIM_ConfigClockSource+0x1da>
 8004ef0:	4a5d      	ldr	r2, [pc, #372]	; (8005068 <HAL_TIM_ConfigClockSource+0x220>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	f200 809e 	bhi.w	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
 8004ef8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004efc:	f000 8091 	beq.w	8005022 <HAL_TIM_ConfigClockSource+0x1da>
 8004f00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004f04:	f200 8096 	bhi.w	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f0c:	f000 8089 	beq.w	8005022 <HAL_TIM_ConfigClockSource+0x1da>
 8004f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f14:	f200 808e 	bhi.w	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f1c:	d03e      	beq.n	8004f9c <HAL_TIM_ConfigClockSource+0x154>
 8004f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f22:	f200 8087 	bhi.w	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2a:	f000 8085 	beq.w	8005038 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f32:	d87f      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f34:	2b70      	cmp	r3, #112	; 0x70
 8004f36:	d01a      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0x126>
 8004f38:	2b70      	cmp	r3, #112	; 0x70
 8004f3a:	d87b      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f3c:	2b60      	cmp	r3, #96	; 0x60
 8004f3e:	d050      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x19a>
 8004f40:	2b60      	cmp	r3, #96	; 0x60
 8004f42:	d877      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f44:	2b50      	cmp	r3, #80	; 0x50
 8004f46:	d03c      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x17a>
 8004f48:	2b50      	cmp	r3, #80	; 0x50
 8004f4a:	d873      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f4c:	2b40      	cmp	r3, #64	; 0x40
 8004f4e:	d058      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x1ba>
 8004f50:	2b40      	cmp	r3, #64	; 0x40
 8004f52:	d86f      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f54:	2b30      	cmp	r3, #48	; 0x30
 8004f56:	d064      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x1da>
 8004f58:	2b30      	cmp	r3, #48	; 0x30
 8004f5a:	d86b      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d060      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x1da>
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d867      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d05c      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x1da>
 8004f68:	2b10      	cmp	r3, #16
 8004f6a:	d05a      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f6c:	e062      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	6899      	ldr	r1, [r3, #8]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f000 f9c1 	bl	8005304 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f90:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	609a      	str	r2, [r3, #8]
      break;
 8004f9a:	e04e      	b.n	800503a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	6899      	ldr	r1, [r3, #8]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f000 f9aa 	bl	8005304 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fbe:	609a      	str	r2, [r3, #8]
      break;
 8004fc0:	e03b      	b.n	800503a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6859      	ldr	r1, [r3, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f000 f91c 	bl	800520c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2150      	movs	r1, #80	; 0x50
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 f975 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8004fe0:	e02b      	b.n	800503a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	6859      	ldr	r1, [r3, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f000 f93b 	bl	800526a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2160      	movs	r1, #96	; 0x60
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 f965 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8005000:	e01b      	b.n	800503a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6859      	ldr	r1, [r3, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	461a      	mov	r2, r3
 8005010:	f000 f8fc 	bl	800520c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2140      	movs	r1, #64	; 0x40
 800501a:	4618      	mov	r0, r3
 800501c:	f000 f955 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8005020:	e00b      	b.n	800503a <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4619      	mov	r1, r3
 800502c:	4610      	mov	r0, r2
 800502e:	f000 f94c 	bl	80052ca <TIM_ITRx_SetConfig>
        break;
 8005032:	e002      	b.n	800503a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8005034:	bf00      	nop
 8005036:	e000      	b.n	800503a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8005038:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	00100070 	.word	0x00100070
 8005058:	00100060 	.word	0x00100060
 800505c:	00100050 	.word	0x00100050
 8005060:	00100040 	.word	0x00100040
 8005064:	00100030 	.word	0x00100030
 8005068:	00100020 	.word	0x00100020

0800506c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a46      	ldr	r2, [pc, #280]	; (80051e8 <TIM_Base_SetConfig+0x12c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d017      	beq.n	8005104 <TIM_Base_SetConfig+0x48>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050da:	d013      	beq.n	8005104 <TIM_Base_SetConfig+0x48>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a43      	ldr	r2, [pc, #268]	; (80051ec <TIM_Base_SetConfig+0x130>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00f      	beq.n	8005104 <TIM_Base_SetConfig+0x48>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a42      	ldr	r2, [pc, #264]	; (80051f0 <TIM_Base_SetConfig+0x134>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00b      	beq.n	8005104 <TIM_Base_SetConfig+0x48>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a41      	ldr	r2, [pc, #260]	; (80051f4 <TIM_Base_SetConfig+0x138>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d007      	beq.n	8005104 <TIM_Base_SetConfig+0x48>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a40      	ldr	r2, [pc, #256]	; (80051f8 <TIM_Base_SetConfig+0x13c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_Base_SetConfig+0x48>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a3f      	ldr	r2, [pc, #252]	; (80051fc <TIM_Base_SetConfig+0x140>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d108      	bne.n	8005116 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a33      	ldr	r2, [pc, #204]	; (80051e8 <TIM_Base_SetConfig+0x12c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d023      	beq.n	8005166 <TIM_Base_SetConfig+0xaa>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005124:	d01f      	beq.n	8005166 <TIM_Base_SetConfig+0xaa>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a30      	ldr	r2, [pc, #192]	; (80051ec <TIM_Base_SetConfig+0x130>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d01b      	beq.n	8005166 <TIM_Base_SetConfig+0xaa>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2f      	ldr	r2, [pc, #188]	; (80051f0 <TIM_Base_SetConfig+0x134>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d017      	beq.n	8005166 <TIM_Base_SetConfig+0xaa>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2e      	ldr	r2, [pc, #184]	; (80051f4 <TIM_Base_SetConfig+0x138>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d013      	beq.n	8005166 <TIM_Base_SetConfig+0xaa>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a2d      	ldr	r2, [pc, #180]	; (80051f8 <TIM_Base_SetConfig+0x13c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00f      	beq.n	8005166 <TIM_Base_SetConfig+0xaa>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2d      	ldr	r2, [pc, #180]	; (8005200 <TIM_Base_SetConfig+0x144>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00b      	beq.n	8005166 <TIM_Base_SetConfig+0xaa>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2c      	ldr	r2, [pc, #176]	; (8005204 <TIM_Base_SetConfig+0x148>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d007      	beq.n	8005166 <TIM_Base_SetConfig+0xaa>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2b      	ldr	r2, [pc, #172]	; (8005208 <TIM_Base_SetConfig+0x14c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <TIM_Base_SetConfig+0xaa>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a26      	ldr	r2, [pc, #152]	; (80051fc <TIM_Base_SetConfig+0x140>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d108      	bne.n	8005178 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800516c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a12      	ldr	r2, [pc, #72]	; (80051e8 <TIM_Base_SetConfig+0x12c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d013      	beq.n	80051cc <TIM_Base_SetConfig+0x110>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a14      	ldr	r2, [pc, #80]	; (80051f8 <TIM_Base_SetConfig+0x13c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00f      	beq.n	80051cc <TIM_Base_SetConfig+0x110>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a14      	ldr	r2, [pc, #80]	; (8005200 <TIM_Base_SetConfig+0x144>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00b      	beq.n	80051cc <TIM_Base_SetConfig+0x110>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a13      	ldr	r2, [pc, #76]	; (8005204 <TIM_Base_SetConfig+0x148>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d007      	beq.n	80051cc <TIM_Base_SetConfig+0x110>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a12      	ldr	r2, [pc, #72]	; (8005208 <TIM_Base_SetConfig+0x14c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_Base_SetConfig+0x110>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a0d      	ldr	r2, [pc, #52]	; (80051fc <TIM_Base_SetConfig+0x140>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d103      	bne.n	80051d4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	615a      	str	r2, [r3, #20]
}
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40012c00 	.word	0x40012c00
 80051ec:	40000400 	.word	0x40000400
 80051f0:	40000800 	.word	0x40000800
 80051f4:	40000c00 	.word	0x40000c00
 80051f8:	40013400 	.word	0x40013400
 80051fc:	40015000 	.word	0x40015000
 8005200:	40014000 	.word	0x40014000
 8005204:	40014400 	.word	0x40014400
 8005208:	40014800 	.word	0x40014800

0800520c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f023 0201 	bic.w	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f023 030a 	bic.w	r3, r3, #10
 8005248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800526a:	b480      	push	{r7}
 800526c:	b087      	sub	sp, #28
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f023 0210 	bic.w	r2, r3, #16
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005294:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	031b      	lsls	r3, r3, #12
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	621a      	str	r2, [r3, #32]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80052e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f043 0307 	orr.w	r3, r3, #7
 80052f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	609a      	str	r2, [r3, #8]
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800531e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	021a      	lsls	r2, r3, #8
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	431a      	orrs	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4313      	orrs	r3, r2
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	609a      	str	r2, [r3, #8]
}
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005358:	2302      	movs	r3, #2
 800535a:	e074      	b.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a34      	ldr	r2, [pc, #208]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d009      	beq.n	800539a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a33      	ldr	r2, [pc, #204]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d004      	beq.n	800539a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a31      	ldr	r2, [pc, #196]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d108      	bne.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a21      	ldr	r2, [pc, #132]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d022      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053dc:	d01d      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1f      	ldr	r2, [pc, #124]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d018      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1d      	ldr	r2, [pc, #116]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d013      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1c      	ldr	r2, [pc, #112]	; (8005468 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00e      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a15      	ldr	r2, [pc, #84]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d009      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a18      	ldr	r2, [pc, #96]	; (800546c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d004      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a11      	ldr	r2, [pc, #68]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d10c      	bne.n	8005434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	4313      	orrs	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40013400 	.word	0x40013400
 800545c:	40015000 	.word	0x40015000
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800
 8005468:	40000c00 	.word	0x40000c00
 800546c:	40014000 	.word	0x40014000

08005470 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e042      	b.n	8005594 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005514:	2b00      	cmp	r3, #0
 8005516:	d106      	bne.n	8005526 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7fb fe37 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2224      	movs	r2, #36	; 0x24
 800552a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fac6 	bl	8005ad0 <UART_SetConfig>
 8005544:	4603      	mov	r3, r0
 8005546:	2b01      	cmp	r3, #1
 8005548:	d101      	bne.n	800554e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e022      	b.n	8005594 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fd84 	bl	8006064 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800556a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800557a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fe0b 	bl	80061a8 <UART_CheckIdleState>
 8005592:	4603      	mov	r3, r0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	4613      	mov	r3, r2
 80055a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	d131      	bne.n	8005618 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <HAL_UART_Receive_IT+0x24>
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e02a      	b.n	800561a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Receive_IT+0x36>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e023      	b.n	800561a <HAL_UART_Receive_IT+0x7e>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a0f      	ldr	r2, [pc, #60]	; (8005624 <HAL_UART_Receive_IT+0x88>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00e      	beq.n	8005608 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005606:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005608:	88fb      	ldrh	r3, [r7, #6]
 800560a:	461a      	mov	r2, r3
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 fe96 	bl	8006340 <UART_Start_Receive_IT>
 8005614:	4603      	mov	r3, r0
 8005616:	e000      	b.n	800561a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005618:	2302      	movs	r3, #2
  }
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40008000 	.word	0x40008000

08005628 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	f640 030f 	movw	r3, #2063	; 0x80f
 800564e:	4013      	ands	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d118      	bne.n	800568a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d013      	beq.n	800568a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d104      	bne.n	8005676 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d009      	beq.n	800568a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 81fb 	beq.w	8005a76 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4798      	blx	r3
      }
      return;
 8005688:	e1f5      	b.n	8005a76 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80ef 	beq.w	8005870 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4b73      	ldr	r3, [pc, #460]	; (8005864 <HAL_UART_IRQHandler+0x23c>)
 8005696:	4013      	ands	r3, r2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d105      	bne.n	80056a8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4b72      	ldr	r3, [pc, #456]	; (8005868 <HAL_UART_IRQHandler+0x240>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 80e4 	beq.w	8005870 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d010      	beq.n	80056d4 <HAL_UART_IRQHandler+0xac>
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00b      	beq.n	80056d4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2201      	movs	r2, #1
 80056c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ca:	f043 0201 	orr.w	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d010      	beq.n	8005700 <HAL_UART_IRQHandler+0xd8>
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00b      	beq.n	8005700 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2202      	movs	r2, #2
 80056ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056f6:	f043 0204 	orr.w	r2, r3, #4
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	d010      	beq.n	800572c <HAL_UART_IRQHandler+0x104>
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00b      	beq.n	800572c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2204      	movs	r2, #4
 800571a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005722:	f043 0202 	orr.w	r2, r3, #2
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d015      	beq.n	8005762 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b00      	cmp	r3, #0
 800573e:	d104      	bne.n	800574a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	4b48      	ldr	r3, [pc, #288]	; (8005864 <HAL_UART_IRQHandler+0x23c>)
 8005744:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00b      	beq.n	8005762 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2208      	movs	r2, #8
 8005750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005758:	f043 0208 	orr.w	r2, r3, #8
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005768:	2b00      	cmp	r3, #0
 800576a:	d011      	beq.n	8005790 <HAL_UART_IRQHandler+0x168>
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00c      	beq.n	8005790 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800577e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005786:	f043 0220 	orr.w	r2, r3, #32
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 816f 	beq.w	8005a7a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d011      	beq.n	80057ca <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d007      	beq.n	80057ca <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	d004      	beq.n	80057ea <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d031      	beq.n	800584e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fe66 	bl	80064bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fa:	2b40      	cmp	r3, #64	; 0x40
 80057fc:	d123      	bne.n	8005846 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800580c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005812:	2b00      	cmp	r3, #0
 8005814:	d013      	beq.n	800583e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800581a:	4a14      	ldr	r2, [pc, #80]	; (800586c <HAL_UART_IRQHandler+0x244>)
 800581c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005822:	4618      	mov	r0, r3
 8005824:	f7fd fe8b 	bl	800353e <HAL_DMA_Abort_IT>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d017      	beq.n	800585e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005838:	4610      	mov	r0, r2
 800583a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583c:	e00f      	b.n	800585e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f930 	bl	8005aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005844:	e00b      	b.n	800585e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f92c 	bl	8005aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584c:	e007      	b.n	800585e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f928 	bl	8005aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800585c:	e10d      	b.n	8005a7a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800585e:	bf00      	nop
    return;
 8005860:	e10b      	b.n	8005a7a <HAL_UART_IRQHandler+0x452>
 8005862:	bf00      	nop
 8005864:	10000001 	.word	0x10000001
 8005868:	04000120 	.word	0x04000120
 800586c:	08006521 	.word	0x08006521

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005874:	2b01      	cmp	r3, #1
 8005876:	f040 80ab 	bne.w	80059d0 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80a5 	beq.w	80059d0 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 809f 	beq.w	80059d0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2210      	movs	r2, #16
 8005898:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a4:	2b40      	cmp	r3, #64	; 0x40
 80058a6:	d155      	bne.n	8005954 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80058b2:	893b      	ldrh	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80e2 	beq.w	8005a7e <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058c0:	893a      	ldrh	r2, [r7, #8]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	f080 80db 	bcs.w	8005a7e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	893a      	ldrh	r2, [r7, #8]
 80058cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d12b      	bne.n	8005938 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058ee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0201 	bic.w	r2, r2, #1
 80058fe:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800590e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0210 	bic.w	r2, r2, #16
 800592c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005932:	4618      	mov	r0, r3
 8005934:	f7fd fdaa 	bl	800348c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005944:	b29b      	uxth	r3, r3
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	b29b      	uxth	r3, r3
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f8b3 	bl	8005ab8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005952:	e094      	b.n	8005a7e <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005960:	b29b      	uxth	r3, r3
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 8087 	beq.w	8005a82 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8005974:	897b      	ldrh	r3, [r7, #10]
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 8083 	beq.w	8005a82 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800598a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6812      	ldr	r2, [r2, #0]
 8005996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800599a:	f023 0301 	bic.w	r3, r3, #1
 800599e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0210 	bic.w	r2, r2, #16
 80059c2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059c4:	897b      	ldrh	r3, [r7, #10]
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f875 	bl	8005ab8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059ce:	e058      	b.n	8005a82 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00d      	beq.n	80059f6 <HAL_UART_IRQHandler+0x3ce>
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80059ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f001 f8a2 	bl	8006b38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059f4:	e048      	b.n	8005a88 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d012      	beq.n	8005a26 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d104      	bne.n	8005a14 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d008      	beq.n	8005a26 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d034      	beq.n	8005a86 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4798      	blx	r3
    }
    return;
 8005a24:	e02f      	b.n	8005a86 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d008      	beq.n	8005a42 <HAL_UART_IRQHandler+0x41a>
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fd86 	bl	800654c <UART_EndTransmit_IT>
    return;
 8005a40:	e022      	b.n	8005a88 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d008      	beq.n	8005a5e <HAL_UART_IRQHandler+0x436>
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 f882 	bl	8006b60 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a5c:	e014      	b.n	8005a88 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00f      	beq.n	8005a88 <HAL_UART_IRQHandler+0x460>
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	da0c      	bge.n	8005a88 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f001 f86c 	bl	8006b4c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a74:	e008      	b.n	8005a88 <HAL_UART_IRQHandler+0x460>
      return;
 8005a76:	bf00      	nop
 8005a78:	e006      	b.n	8005a88 <HAL_UART_IRQHandler+0x460>
    return;
 8005a7a:	bf00      	nop
 8005a7c:	e004      	b.n	8005a88 <HAL_UART_IRQHandler+0x460>
      return;
 8005a7e:	bf00      	nop
 8005a80:	e002      	b.n	8005a88 <HAL_UART_IRQHandler+0x460>
      return;
 8005a82:	bf00      	nop
 8005a84:	e000      	b.n	8005a88 <HAL_UART_IRQHandler+0x460>
    return;
 8005a86:	bf00      	nop
  }
}
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop

08005a90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ad0:	b5b0      	push	{r4, r5, r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	4bb1      	ldr	r3, [pc, #708]	; (8005dc0 <UART_SetConfig+0x2f0>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6812      	ldr	r2, [r2, #0]
 8005b02:	69f9      	ldr	r1, [r7, #28]
 8005b04:	430b      	orrs	r3, r1
 8005b06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4aa6      	ldr	r2, [pc, #664]	; (8005dc4 <UART_SetConfig+0x2f4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d004      	beq.n	8005b38 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005b42:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6812      	ldr	r2, [r2, #0]
 8005b4a:	69f9      	ldr	r1, [r7, #28]
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	f023 010f 	bic.w	r1, r3, #15
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a97      	ldr	r2, [pc, #604]	; (8005dc8 <UART_SetConfig+0x2f8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d120      	bne.n	8005bb2 <UART_SetConfig+0xe2>
 8005b70:	4b96      	ldr	r3, [pc, #600]	; (8005dcc <UART_SetConfig+0x2fc>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d816      	bhi.n	8005bac <UART_SetConfig+0xdc>
 8005b7e:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <UART_SetConfig+0xb4>)
 8005b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b84:	08005b95 	.word	0x08005b95
 8005b88:	08005ba1 	.word	0x08005ba1
 8005b8c:	08005b9b 	.word	0x08005b9b
 8005b90:	08005ba7 	.word	0x08005ba7
 8005b94:	2301      	movs	r3, #1
 8005b96:	76fb      	strb	r3, [r7, #27]
 8005b98:	e0e7      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	76fb      	strb	r3, [r7, #27]
 8005b9e:	e0e4      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005ba0:	2304      	movs	r3, #4
 8005ba2:	76fb      	strb	r3, [r7, #27]
 8005ba4:	e0e1      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005ba6:	2308      	movs	r3, #8
 8005ba8:	76fb      	strb	r3, [r7, #27]
 8005baa:	e0de      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005bac:	2310      	movs	r3, #16
 8005bae:	76fb      	strb	r3, [r7, #27]
 8005bb0:	e0db      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a86      	ldr	r2, [pc, #536]	; (8005dd0 <UART_SetConfig+0x300>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d132      	bne.n	8005c22 <UART_SetConfig+0x152>
 8005bbc:	4b83      	ldr	r3, [pc, #524]	; (8005dcc <UART_SetConfig+0x2fc>)
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc2:	f003 030c 	and.w	r3, r3, #12
 8005bc6:	2b0c      	cmp	r3, #12
 8005bc8:	d828      	bhi.n	8005c1c <UART_SetConfig+0x14c>
 8005bca:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <UART_SetConfig+0x100>)
 8005bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd0:	08005c05 	.word	0x08005c05
 8005bd4:	08005c1d 	.word	0x08005c1d
 8005bd8:	08005c1d 	.word	0x08005c1d
 8005bdc:	08005c1d 	.word	0x08005c1d
 8005be0:	08005c11 	.word	0x08005c11
 8005be4:	08005c1d 	.word	0x08005c1d
 8005be8:	08005c1d 	.word	0x08005c1d
 8005bec:	08005c1d 	.word	0x08005c1d
 8005bf0:	08005c0b 	.word	0x08005c0b
 8005bf4:	08005c1d 	.word	0x08005c1d
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c1d 	.word	0x08005c1d
 8005c00:	08005c17 	.word	0x08005c17
 8005c04:	2300      	movs	r3, #0
 8005c06:	76fb      	strb	r3, [r7, #27]
 8005c08:	e0af      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	76fb      	strb	r3, [r7, #27]
 8005c0e:	e0ac      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005c10:	2304      	movs	r3, #4
 8005c12:	76fb      	strb	r3, [r7, #27]
 8005c14:	e0a9      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005c16:	2308      	movs	r3, #8
 8005c18:	76fb      	strb	r3, [r7, #27]
 8005c1a:	e0a6      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	76fb      	strb	r3, [r7, #27]
 8005c20:	e0a3      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a6b      	ldr	r2, [pc, #428]	; (8005dd4 <UART_SetConfig+0x304>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d120      	bne.n	8005c6e <UART_SetConfig+0x19e>
 8005c2c:	4b67      	ldr	r3, [pc, #412]	; (8005dcc <UART_SetConfig+0x2fc>)
 8005c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c36:	2b30      	cmp	r3, #48	; 0x30
 8005c38:	d013      	beq.n	8005c62 <UART_SetConfig+0x192>
 8005c3a:	2b30      	cmp	r3, #48	; 0x30
 8005c3c:	d814      	bhi.n	8005c68 <UART_SetConfig+0x198>
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d009      	beq.n	8005c56 <UART_SetConfig+0x186>
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d810      	bhi.n	8005c68 <UART_SetConfig+0x198>
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <UART_SetConfig+0x180>
 8005c4a:	2b10      	cmp	r3, #16
 8005c4c:	d006      	beq.n	8005c5c <UART_SetConfig+0x18c>
 8005c4e:	e00b      	b.n	8005c68 <UART_SetConfig+0x198>
 8005c50:	2300      	movs	r3, #0
 8005c52:	76fb      	strb	r3, [r7, #27]
 8005c54:	e089      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005c56:	2302      	movs	r3, #2
 8005c58:	76fb      	strb	r3, [r7, #27]
 8005c5a:	e086      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005c5c:	2304      	movs	r3, #4
 8005c5e:	76fb      	strb	r3, [r7, #27]
 8005c60:	e083      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005c62:	2308      	movs	r3, #8
 8005c64:	76fb      	strb	r3, [r7, #27]
 8005c66:	e080      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005c68:	2310      	movs	r3, #16
 8005c6a:	76fb      	strb	r3, [r7, #27]
 8005c6c:	e07d      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a59      	ldr	r2, [pc, #356]	; (8005dd8 <UART_SetConfig+0x308>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d120      	bne.n	8005cba <UART_SetConfig+0x1ea>
 8005c78:	4b54      	ldr	r3, [pc, #336]	; (8005dcc <UART_SetConfig+0x2fc>)
 8005c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c82:	2bc0      	cmp	r3, #192	; 0xc0
 8005c84:	d013      	beq.n	8005cae <UART_SetConfig+0x1de>
 8005c86:	2bc0      	cmp	r3, #192	; 0xc0
 8005c88:	d814      	bhi.n	8005cb4 <UART_SetConfig+0x1e4>
 8005c8a:	2b80      	cmp	r3, #128	; 0x80
 8005c8c:	d009      	beq.n	8005ca2 <UART_SetConfig+0x1d2>
 8005c8e:	2b80      	cmp	r3, #128	; 0x80
 8005c90:	d810      	bhi.n	8005cb4 <UART_SetConfig+0x1e4>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <UART_SetConfig+0x1cc>
 8005c96:	2b40      	cmp	r3, #64	; 0x40
 8005c98:	d006      	beq.n	8005ca8 <UART_SetConfig+0x1d8>
 8005c9a:	e00b      	b.n	8005cb4 <UART_SetConfig+0x1e4>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	76fb      	strb	r3, [r7, #27]
 8005ca0:	e063      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	76fb      	strb	r3, [r7, #27]
 8005ca6:	e060      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005ca8:	2304      	movs	r3, #4
 8005caa:	76fb      	strb	r3, [r7, #27]
 8005cac:	e05d      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005cae:	2308      	movs	r3, #8
 8005cb0:	76fb      	strb	r3, [r7, #27]
 8005cb2:	e05a      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005cb4:	2310      	movs	r3, #16
 8005cb6:	76fb      	strb	r3, [r7, #27]
 8005cb8:	e057      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a47      	ldr	r2, [pc, #284]	; (8005ddc <UART_SetConfig+0x30c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d125      	bne.n	8005d10 <UART_SetConfig+0x240>
 8005cc4:	4b41      	ldr	r3, [pc, #260]	; (8005dcc <UART_SetConfig+0x2fc>)
 8005cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd2:	d017      	beq.n	8005d04 <UART_SetConfig+0x234>
 8005cd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd8:	d817      	bhi.n	8005d0a <UART_SetConfig+0x23a>
 8005cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cde:	d00b      	beq.n	8005cf8 <UART_SetConfig+0x228>
 8005ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce4:	d811      	bhi.n	8005d0a <UART_SetConfig+0x23a>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <UART_SetConfig+0x222>
 8005cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cee:	d006      	beq.n	8005cfe <UART_SetConfig+0x22e>
 8005cf0:	e00b      	b.n	8005d0a <UART_SetConfig+0x23a>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	76fb      	strb	r3, [r7, #27]
 8005cf6:	e038      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	76fb      	strb	r3, [r7, #27]
 8005cfc:	e035      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005cfe:	2304      	movs	r3, #4
 8005d00:	76fb      	strb	r3, [r7, #27]
 8005d02:	e032      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005d04:	2308      	movs	r3, #8
 8005d06:	76fb      	strb	r3, [r7, #27]
 8005d08:	e02f      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005d0a:	2310      	movs	r3, #16
 8005d0c:	76fb      	strb	r3, [r7, #27]
 8005d0e:	e02c      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a2b      	ldr	r2, [pc, #172]	; (8005dc4 <UART_SetConfig+0x2f4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d125      	bne.n	8005d66 <UART_SetConfig+0x296>
 8005d1a:	4b2c      	ldr	r3, [pc, #176]	; (8005dcc <UART_SetConfig+0x2fc>)
 8005d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d28:	d017      	beq.n	8005d5a <UART_SetConfig+0x28a>
 8005d2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d2e:	d817      	bhi.n	8005d60 <UART_SetConfig+0x290>
 8005d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d34:	d00b      	beq.n	8005d4e <UART_SetConfig+0x27e>
 8005d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d3a:	d811      	bhi.n	8005d60 <UART_SetConfig+0x290>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <UART_SetConfig+0x278>
 8005d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d44:	d006      	beq.n	8005d54 <UART_SetConfig+0x284>
 8005d46:	e00b      	b.n	8005d60 <UART_SetConfig+0x290>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	76fb      	strb	r3, [r7, #27]
 8005d4c:	e00d      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	76fb      	strb	r3, [r7, #27]
 8005d52:	e00a      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005d54:	2304      	movs	r3, #4
 8005d56:	76fb      	strb	r3, [r7, #27]
 8005d58:	e007      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005d5a:	2308      	movs	r3, #8
 8005d5c:	76fb      	strb	r3, [r7, #27]
 8005d5e:	e004      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005d60:	2310      	movs	r3, #16
 8005d62:	76fb      	strb	r3, [r7, #27]
 8005d64:	e001      	b.n	8005d6a <UART_SetConfig+0x29a>
 8005d66:	2310      	movs	r3, #16
 8005d68:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a15      	ldr	r2, [pc, #84]	; (8005dc4 <UART_SetConfig+0x2f4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	f040 809f 	bne.w	8005eb4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d76:	7efb      	ldrb	r3, [r7, #27]
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d837      	bhi.n	8005dec <UART_SetConfig+0x31c>
 8005d7c:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <UART_SetConfig+0x2b4>)
 8005d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d82:	bf00      	nop
 8005d84:	08005da9 	.word	0x08005da9
 8005d88:	08005ded 	.word	0x08005ded
 8005d8c:	08005db1 	.word	0x08005db1
 8005d90:	08005ded 	.word	0x08005ded
 8005d94:	08005db7 	.word	0x08005db7
 8005d98:	08005ded 	.word	0x08005ded
 8005d9c:	08005ded 	.word	0x08005ded
 8005da0:	08005ded 	.word	0x08005ded
 8005da4:	08005de5 	.word	0x08005de5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da8:	f7fe fb40 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 8005dac:	6178      	str	r0, [r7, #20]
        break;
 8005dae:	e022      	b.n	8005df6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005db0:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <UART_SetConfig+0x310>)
 8005db2:	617b      	str	r3, [r7, #20]
        break;
 8005db4:	e01f      	b.n	8005df6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005db6:	f7fe facb 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 8005dba:	6178      	str	r0, [r7, #20]
        break;
 8005dbc:	e01b      	b.n	8005df6 <UART_SetConfig+0x326>
 8005dbe:	bf00      	nop
 8005dc0:	cfff69f3 	.word	0xcfff69f3
 8005dc4:	40008000 	.word	0x40008000
 8005dc8:	40013800 	.word	0x40013800
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	40004400 	.word	0x40004400
 8005dd4:	40004800 	.word	0x40004800
 8005dd8:	40004c00 	.word	0x40004c00
 8005ddc:	40005000 	.word	0x40005000
 8005de0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005de4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005de8:	617b      	str	r3, [r7, #20]
        break;
 8005dea:	e004      	b.n	8005df6 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	76bb      	strb	r3, [r7, #26]
        break;
 8005df4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 811b 	beq.w	8006034 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	4a96      	ldr	r2, [pc, #600]	; (800605c <UART_SetConfig+0x58c>)
 8005e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e10:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	4613      	mov	r3, r2
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	4413      	add	r3, r2
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d305      	bcc.n	8005e2e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d902      	bls.n	8005e34 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	76bb      	strb	r3, [r7, #26]
 8005e32:	e0ff      	b.n	8006034 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f04f 0100 	mov.w	r1, #0
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	4a86      	ldr	r2, [pc, #536]	; (800605c <UART_SetConfig+0x58c>)
 8005e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	f04f 0300 	mov.w	r3, #0
 8005e4c:	f7fa f9e4 	bl	8000218 <__aeabi_uldivmod>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4610      	mov	r0, r2
 8005e56:	4619      	mov	r1, r3
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	020b      	lsls	r3, r1, #8
 8005e62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e66:	0202      	lsls	r2, r0, #8
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	6849      	ldr	r1, [r1, #4]
 8005e6c:	0849      	lsrs	r1, r1, #1
 8005e6e:	4608      	mov	r0, r1
 8005e70:	f04f 0100 	mov.w	r1, #0
 8005e74:	1814      	adds	r4, r2, r0
 8005e76:	eb43 0501 	adc.w	r5, r3, r1
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	4620      	mov	r0, r4
 8005e86:	4629      	mov	r1, r5
 8005e88:	f7fa f9c6 	bl	8000218 <__aeabi_uldivmod>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4613      	mov	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e9a:	d308      	bcc.n	8005eae <UART_SetConfig+0x3de>
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ea2:	d204      	bcs.n	8005eae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	60da      	str	r2, [r3, #12]
 8005eac:	e0c2      	b.n	8006034 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	76bb      	strb	r3, [r7, #26]
 8005eb2:	e0bf      	b.n	8006034 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ebc:	d165      	bne.n	8005f8a <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8005ebe:	7efb      	ldrb	r3, [r7, #27]
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d828      	bhi.n	8005f16 <UART_SetConfig+0x446>
 8005ec4:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <UART_SetConfig+0x3fc>)
 8005ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eca:	bf00      	nop
 8005ecc:	08005ef1 	.word	0x08005ef1
 8005ed0:	08005ef9 	.word	0x08005ef9
 8005ed4:	08005f01 	.word	0x08005f01
 8005ed8:	08005f17 	.word	0x08005f17
 8005edc:	08005f07 	.word	0x08005f07
 8005ee0:	08005f17 	.word	0x08005f17
 8005ee4:	08005f17 	.word	0x08005f17
 8005ee8:	08005f17 	.word	0x08005f17
 8005eec:	08005f0f 	.word	0x08005f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ef0:	f7fe fa9c 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 8005ef4:	6178      	str	r0, [r7, #20]
        break;
 8005ef6:	e013      	b.n	8005f20 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef8:	f7fe faae 	bl	8004458 <HAL_RCC_GetPCLK2Freq>
 8005efc:	6178      	str	r0, [r7, #20]
        break;
 8005efe:	e00f      	b.n	8005f20 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f00:	4b57      	ldr	r3, [pc, #348]	; (8006060 <UART_SetConfig+0x590>)
 8005f02:	617b      	str	r3, [r7, #20]
        break;
 8005f04:	e00c      	b.n	8005f20 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f06:	f7fe fa23 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 8005f0a:	6178      	str	r0, [r7, #20]
        break;
 8005f0c:	e008      	b.n	8005f20 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f12:	617b      	str	r3, [r7, #20]
        break;
 8005f14:	e004      	b.n	8005f20 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	76bb      	strb	r3, [r7, #26]
        break;
 8005f1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 8086 	beq.w	8006034 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	4a4b      	ldr	r2, [pc, #300]	; (800605c <UART_SetConfig+0x58c>)
 8005f2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f32:	461a      	mov	r2, r3
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f3a:	005a      	lsls	r2, r3, #1
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	441a      	add	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	2b0f      	cmp	r3, #15
 8005f54:	d916      	bls.n	8005f84 <UART_SetConfig+0x4b4>
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5c:	d212      	bcs.n	8005f84 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	f023 030f 	bic.w	r3, r3, #15
 8005f66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	085b      	lsrs	r3, r3, #1
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	89fb      	ldrh	r3, [r7, #14]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	89fa      	ldrh	r2, [r7, #14]
 8005f80:	60da      	str	r2, [r3, #12]
 8005f82:	e057      	b.n	8006034 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	76bb      	strb	r3, [r7, #26]
 8005f88:	e054      	b.n	8006034 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f8a:	7efb      	ldrb	r3, [r7, #27]
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d828      	bhi.n	8005fe2 <UART_SetConfig+0x512>
 8005f90:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <UART_SetConfig+0x4c8>)
 8005f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f96:	bf00      	nop
 8005f98:	08005fbd 	.word	0x08005fbd
 8005f9c:	08005fc5 	.word	0x08005fc5
 8005fa0:	08005fcd 	.word	0x08005fcd
 8005fa4:	08005fe3 	.word	0x08005fe3
 8005fa8:	08005fd3 	.word	0x08005fd3
 8005fac:	08005fe3 	.word	0x08005fe3
 8005fb0:	08005fe3 	.word	0x08005fe3
 8005fb4:	08005fe3 	.word	0x08005fe3
 8005fb8:	08005fdb 	.word	0x08005fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fbc:	f7fe fa36 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 8005fc0:	6178      	str	r0, [r7, #20]
        break;
 8005fc2:	e013      	b.n	8005fec <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fc4:	f7fe fa48 	bl	8004458 <HAL_RCC_GetPCLK2Freq>
 8005fc8:	6178      	str	r0, [r7, #20]
        break;
 8005fca:	e00f      	b.n	8005fec <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fcc:	4b24      	ldr	r3, [pc, #144]	; (8006060 <UART_SetConfig+0x590>)
 8005fce:	617b      	str	r3, [r7, #20]
        break;
 8005fd0:	e00c      	b.n	8005fec <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fd2:	f7fe f9bd 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 8005fd6:	6178      	str	r0, [r7, #20]
        break;
 8005fd8:	e008      	b.n	8005fec <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fde:	617b      	str	r3, [r7, #20]
        break;
 8005fe0:	e004      	b.n	8005fec <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	76bb      	strb	r3, [r7, #26]
        break;
 8005fea:	bf00      	nop
    }

    if (pclk != 0U)
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d020      	beq.n	8006034 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	4a19      	ldr	r2, [pc, #100]	; (800605c <UART_SetConfig+0x58c>)
 8005ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	fbb3 f2f2 	udiv	r2, r3, r2
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	441a      	add	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	fbb2 f3f3 	udiv	r3, r2, r3
 8006014:	b29b      	uxth	r3, r3
 8006016:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	2b0f      	cmp	r3, #15
 800601c:	d908      	bls.n	8006030 <UART_SetConfig+0x560>
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006024:	d204      	bcs.n	8006030 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	60da      	str	r2, [r3, #12]
 800602e:	e001      	b.n	8006034 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006050:	7ebb      	ldrb	r3, [r7, #26]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3720      	adds	r7, #32
 8006056:	46bd      	mov	sp, r7
 8006058:	bdb0      	pop	{r4, r5, r7, pc}
 800605a:	bf00      	nop
 800605c:	08006ed0 	.word	0x08006ed0
 8006060:	00f42400 	.word	0x00f42400

08006064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00a      	beq.n	800608e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00a      	beq.n	80060d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00a      	beq.n	8006116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	d01a      	beq.n	800617a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006162:	d10a      	bne.n	800617a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	605a      	str	r2, [r3, #4]
  }
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061b8:	f7fb f942 	bl	8001440 <HAL_GetTick>
 80061bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d10e      	bne.n	80061ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f82f 	bl	800623e <UART_WaitOnFlagUntilTimeout>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e025      	b.n	8006236 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d10e      	bne.n	8006216 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f819 	bl	800623e <UART_WaitOnFlagUntilTimeout>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e00f      	b.n	8006236 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2220      	movs	r2, #32
 800621a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2220      	movs	r2, #32
 8006222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	603b      	str	r3, [r7, #0]
 800624a:	4613      	mov	r3, r2
 800624c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800624e:	e062      	b.n	8006316 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006256:	d05e      	beq.n	8006316 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006258:	f7fb f8f2 	bl	8001440 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	429a      	cmp	r2, r3
 8006266:	d302      	bcc.n	800626e <UART_WaitOnFlagUntilTimeout+0x30>
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d11d      	bne.n	80062aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800627c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0201 	bic.w	r2, r2, #1
 800628c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2220      	movs	r2, #32
 8006292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2220      	movs	r2, #32
 800629a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e045      	b.n	8006336 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0304 	and.w	r3, r3, #4
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d02e      	beq.n	8006316 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062c6:	d126      	bne.n	8006316 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062e0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0201 	bic.w	r2, r2, #1
 80062f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2220      	movs	r2, #32
 8006306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e00f      	b.n	8006336 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69da      	ldr	r2, [r3, #28]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4013      	ands	r3, r2
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	429a      	cmp	r2, r3
 8006324:	bf0c      	ite	eq
 8006326:	2301      	moveq	r3, #1
 8006328:	2300      	movne	r3, #0
 800632a:	b2db      	uxtb	r3, r3
 800632c:	461a      	mov	r2, r3
 800632e:	79fb      	ldrb	r3, [r7, #7]
 8006330:	429a      	cmp	r2, r3
 8006332:	d08d      	beq.n	8006250 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	4613      	mov	r3, r2
 800634c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	88fa      	ldrh	r2, [r7, #6]
 8006358:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	88fa      	ldrh	r2, [r7, #6]
 8006360:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006372:	d10e      	bne.n	8006392 <UART_Start_Receive_IT+0x52>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d105      	bne.n	8006388 <UART_Start_Receive_IT+0x48>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006382:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006386:	e02d      	b.n	80063e4 <UART_Start_Receive_IT+0xa4>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	22ff      	movs	r2, #255	; 0xff
 800638c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006390:	e028      	b.n	80063e4 <UART_Start_Receive_IT+0xa4>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10d      	bne.n	80063b6 <UART_Start_Receive_IT+0x76>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d104      	bne.n	80063ac <UART_Start_Receive_IT+0x6c>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	22ff      	movs	r2, #255	; 0xff
 80063a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063aa:	e01b      	b.n	80063e4 <UART_Start_Receive_IT+0xa4>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	227f      	movs	r2, #127	; 0x7f
 80063b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063b4:	e016      	b.n	80063e4 <UART_Start_Receive_IT+0xa4>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063be:	d10d      	bne.n	80063dc <UART_Start_Receive_IT+0x9c>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d104      	bne.n	80063d2 <UART_Start_Receive_IT+0x92>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	227f      	movs	r2, #127	; 0x7f
 80063cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063d0:	e008      	b.n	80063e4 <UART_Start_Receive_IT+0xa4>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	223f      	movs	r2, #63	; 0x3f
 80063d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063da:	e003      	b.n	80063e4 <UART_Start_Receive_IT+0xa4>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2222      	movs	r2, #34	; 0x22
 80063f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800640c:	d12a      	bne.n	8006464 <UART_Start_Receive_IT+0x124>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	429a      	cmp	r2, r3
 8006418:	d324      	bcc.n	8006464 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006422:	d107      	bne.n	8006434 <UART_Start_Receive_IT+0xf4>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d103      	bne.n	8006434 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4a1f      	ldr	r2, [pc, #124]	; (80064ac <UART_Start_Receive_IT+0x16c>)
 8006430:	671a      	str	r2, [r3, #112]	; 0x70
 8006432:	e002      	b.n	800643a <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4a1e      	ldr	r2, [pc, #120]	; (80064b0 <UART_Start_Receive_IT+0x170>)
 8006438:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006450:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006460:	609a      	str	r2, [r3, #8]
 8006462:	e01b      	b.n	800649c <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646c:	d107      	bne.n	800647e <UART_Start_Receive_IT+0x13e>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d103      	bne.n	800647e <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4a0e      	ldr	r2, [pc, #56]	; (80064b4 <UART_Start_Receive_IT+0x174>)
 800647a:	671a      	str	r2, [r3, #112]	; 0x70
 800647c:	e002      	b.n	8006484 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4a0d      	ldr	r2, [pc, #52]	; (80064b8 <UART_Start_Receive_IT+0x178>)
 8006482:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800649a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	08006935 	.word	0x08006935
 80064b0:	08006731 	.word	0x08006731
 80064b4:	08006659 	.word	0x08006659
 80064b8:	08006581 	.word	0x08006581

080064bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064d2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064e2:	f023 0301 	bic.w	r3, r3, #1
 80064e6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d107      	bne.n	8006500 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0210 	bic.w	r2, r2, #16
 80064fe:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2220      	movs	r2, #32
 8006504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f7ff fab0 	bl	8005aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006544:	bf00      	nop
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006562:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2220      	movs	r2, #32
 8006568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff fa8c 	bl	8005a90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006578:	bf00      	nop
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800658e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006596:	2b22      	cmp	r3, #34	; 0x22
 8006598:	d152      	bne.n	8006640 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065a2:	89bb      	ldrh	r3, [r7, #12]
 80065a4:	b2d9      	uxtb	r1, r3
 80065a6:	89fb      	ldrh	r3, [r7, #14]
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ae:	400a      	ands	r2, r1
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d139      	bne.n	8006650 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065ea:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0201 	bic.w	r2, r2, #1
 80065fa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800660e:	2b01      	cmp	r3, #1
 8006610:	d10f      	bne.n	8006632 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0210 	bic.w	r2, r2, #16
 8006620:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff fa44 	bl	8005ab8 <HAL_UARTEx_RxEventCallback>
 8006630:	e002      	b.n	8006638 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fa f928 	bl	8000888 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800663e:	e007      	b.n	8006650 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699a      	ldr	r2, [r3, #24]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0208 	orr.w	r2, r2, #8
 800664e:	619a      	str	r2, [r3, #24]
}
 8006650:	bf00      	nop
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006666:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666e:	2b22      	cmp	r3, #34	; 0x22
 8006670:	d152      	bne.n	8006718 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006680:	89ba      	ldrh	r2, [r7, #12]
 8006682:	89fb      	ldrh	r3, [r7, #14]
 8006684:	4013      	ands	r3, r2
 8006686:	b29a      	uxth	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006690:	1c9a      	adds	r2, r3, #2
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d139      	bne.n	8006728 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066c2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0201 	bic.w	r2, r2, #1
 80066d2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d10f      	bne.n	800670a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0210 	bic.w	r2, r2, #16
 80066f8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff f9d8 	bl	8005ab8 <HAL_UARTEx_RxEventCallback>
 8006708:	e002      	b.n	8006710 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7fa f8bc 	bl	8000888 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006716:	e007      	b.n	8006728 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	699a      	ldr	r2, [r3, #24]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0208 	orr.w	r2, r2, #8
 8006726:	619a      	str	r2, [r3, #24]
}
 8006728:	bf00      	nop
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800673e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675e:	2b22      	cmp	r3, #34	; 0x22
 8006760:	f040 80da 	bne.w	8006918 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800676a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800676c:	e0aa      	b.n	80068c4 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006776:	89bb      	ldrh	r3, [r7, #12]
 8006778:	b2d9      	uxtb	r1, r3
 800677a:	8b7b      	ldrh	r3, [r7, #26]
 800677c:	b2da      	uxtb	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006782:	400a      	ands	r2, r1
 8006784:	b2d2      	uxtb	r2, r2
 8006786:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	b29a      	uxth	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	f003 0307 	and.w	r3, r3, #7
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d04d      	beq.n	8006852 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d010      	beq.n	80067e2 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00b      	beq.n	80067e2 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2201      	movs	r2, #1
 80067d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067d8:	f043 0201 	orr.w	r2, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d010      	beq.n	800680e <UART_RxISR_8BIT_FIFOEN+0xde>
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00b      	beq.n	800680e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2202      	movs	r2, #2
 80067fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006804:	f043 0204 	orr.w	r2, r3, #4
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d010      	beq.n	800683a <UART_RxISR_8BIT_FIFOEN+0x10a>
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00b      	beq.n	800683a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2204      	movs	r2, #4
 8006828:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006830:	f043 0202 	orr.w	r2, r3, #2
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d006      	beq.n	8006852 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7ff f92d 	bl	8005aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d132      	bne.n	80068c4 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800686c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6812      	ldr	r2, [r2, #0]
 8006878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800687c:	f023 0301 	bic.w	r3, r3, #1
 8006880:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2220      	movs	r2, #32
 8006886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006894:	2b01      	cmp	r3, #1
 8006896:	d10f      	bne.n	80068b8 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0210 	bic.w	r2, r2, #16
 80068a6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff f901 	bl	8005ab8 <HAL_UARTEx_RxEventCallback>
 80068b6:	e002      	b.n	80068be <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7f9 ffe5 	bl	8000888 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068c4:	89fb      	ldrh	r3, [r7, #14]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d005      	beq.n	80068d6 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	f003 0320 	and.w	r3, r3, #32
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f47f af4c 	bne.w	800676e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068dc:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80068de:	897b      	ldrh	r3, [r7, #10]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d021      	beq.n	8006928 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80068ea:	897a      	ldrh	r2, [r7, #10]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d21b      	bcs.n	8006928 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80068fe:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a0b      	ldr	r2, [pc, #44]	; (8006930 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8006904:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 0220 	orr.w	r2, r2, #32
 8006914:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006916:	e007      	b.n	8006928 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699a      	ldr	r2, [r3, #24]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0208 	orr.w	r2, r2, #8
 8006926:	619a      	str	r2, [r3, #24]
}
 8006928:	bf00      	nop
 800692a:	3720      	adds	r7, #32
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	08006581 	.word	0x08006581

08006934 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b08a      	sub	sp, #40	; 0x28
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006942:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006962:	2b22      	cmp	r3, #34	; 0x22
 8006964:	f040 80da 	bne.w	8006b1c <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800696e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006970:	e0aa      	b.n	8006ac8 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800697e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006980:	8aba      	ldrh	r2, [r7, #20]
 8006982:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006984:	4013      	ands	r3, r2
 8006986:	b29a      	uxth	r2, r3
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006990:	1c9a      	adds	r2, r3, #2
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d04d      	beq.n	8006a56 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d010      	beq.n	80069e6 <UART_RxISR_16BIT_FIFOEN+0xb2>
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00b      	beq.n	80069e6 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2201      	movs	r2, #1
 80069d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069dc:	f043 0201 	orr.w	r2, r3, #1
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d010      	beq.n	8006a12 <UART_RxISR_16BIT_FIFOEN+0xde>
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00b      	beq.n	8006a12 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2202      	movs	r2, #2
 8006a00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a08:	f043 0204 	orr.w	r2, r3, #4
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d010      	beq.n	8006a3e <UART_RxISR_16BIT_FIFOEN+0x10a>
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00b      	beq.n	8006a3e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2204      	movs	r2, #4
 8006a2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a34:	f043 0202 	orr.w	r2, r3, #2
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d006      	beq.n	8006a56 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff f82b 	bl	8005aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d132      	bne.n	8006ac8 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a70:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6812      	ldr	r2, [r2, #0]
 8006a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d10f      	bne.n	8006abc <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0210 	bic.w	r2, r2, #16
 8006aaa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7fe ffff 	bl	8005ab8 <HAL_UARTEx_RxEventCallback>
 8006aba:	e002      	b.n	8006ac2 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7f9 fee3 	bl	8000888 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ac8:	8afb      	ldrh	r3, [r7, #22]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d005      	beq.n	8006ada <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f47f af4c 	bne.w	8006972 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ae0:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006ae2:	89fb      	ldrh	r3, [r7, #14]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d021      	beq.n	8006b2c <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006aee:	89fa      	ldrh	r2, [r7, #14]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d21b      	bcs.n	8006b2c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006b02:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a0b      	ldr	r2, [pc, #44]	; (8006b34 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8006b08:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 0220 	orr.w	r2, r2, #32
 8006b18:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b1a:	e007      	b.n	8006b2c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0208 	orr.w	r2, r2, #8
 8006b2a:	619a      	str	r2, [r3, #24]
}
 8006b2c:	bf00      	nop
 8006b2e:	3728      	adds	r7, #40	; 0x28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	08006659 	.word	0x08006659

08006b38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <HAL_UARTEx_DisableFifoMode+0x16>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e027      	b.n	8006bda <HAL_UARTEx_DisableFifoMode+0x66>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2224      	movs	r2, #36	; 0x24
 8006b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0201 	bic.w	r2, r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e02d      	b.n	8006c5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2224      	movs	r2, #36	; 0x24
 8006c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0201 	bic.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f850 	bl	8006ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e02d      	b.n	8006cd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2224      	movs	r2, #36	; 0x24
 8006c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0201 	bic.w	r2, r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f812 	bl	8006ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d108      	bne.n	8006d02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d00:	e031      	b.n	8006d66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d02:	2308      	movs	r3, #8
 8006d04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d06:	2308      	movs	r3, #8
 8006d08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	0e5b      	lsrs	r3, r3, #25
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	0f5b      	lsrs	r3, r3, #29
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	7b3a      	ldrb	r2, [r7, #12]
 8006d2e:	4911      	ldr	r1, [pc, #68]	; (8006d74 <UARTEx_SetNbDataToProcess+0x94>)
 8006d30:	5c8a      	ldrb	r2, [r1, r2]
 8006d32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d36:	7b3a      	ldrb	r2, [r7, #12]
 8006d38:	490f      	ldr	r1, [pc, #60]	; (8006d78 <UARTEx_SetNbDataToProcess+0x98>)
 8006d3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	7b7a      	ldrb	r2, [r7, #13]
 8006d4c:	4909      	ldr	r1, [pc, #36]	; (8006d74 <UARTEx_SetNbDataToProcess+0x94>)
 8006d4e:	5c8a      	ldrb	r2, [r1, r2]
 8006d50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d54:	7b7a      	ldrb	r2, [r7, #13]
 8006d56:	4908      	ldr	r1, [pc, #32]	; (8006d78 <UARTEx_SetNbDataToProcess+0x98>)
 8006d58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d66:	bf00      	nop
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	08006ee8 	.word	0x08006ee8
 8006d78:	08006ef0 	.word	0x08006ef0

08006d7c <__libc_init_array>:
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	4d0d      	ldr	r5, [pc, #52]	; (8006db4 <__libc_init_array+0x38>)
 8006d80:	4c0d      	ldr	r4, [pc, #52]	; (8006db8 <__libc_init_array+0x3c>)
 8006d82:	1b64      	subs	r4, r4, r5
 8006d84:	10a4      	asrs	r4, r4, #2
 8006d86:	2600      	movs	r6, #0
 8006d88:	42a6      	cmp	r6, r4
 8006d8a:	d109      	bne.n	8006da0 <__libc_init_array+0x24>
 8006d8c:	4d0b      	ldr	r5, [pc, #44]	; (8006dbc <__libc_init_array+0x40>)
 8006d8e:	4c0c      	ldr	r4, [pc, #48]	; (8006dc0 <__libc_init_array+0x44>)
 8006d90:	f000 f820 	bl	8006dd4 <_init>
 8006d94:	1b64      	subs	r4, r4, r5
 8006d96:	10a4      	asrs	r4, r4, #2
 8006d98:	2600      	movs	r6, #0
 8006d9a:	42a6      	cmp	r6, r4
 8006d9c:	d105      	bne.n	8006daa <__libc_init_array+0x2e>
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}
 8006da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da4:	4798      	blx	r3
 8006da6:	3601      	adds	r6, #1
 8006da8:	e7ee      	b.n	8006d88 <__libc_init_array+0xc>
 8006daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dae:	4798      	blx	r3
 8006db0:	3601      	adds	r6, #1
 8006db2:	e7f2      	b.n	8006d9a <__libc_init_array+0x1e>
 8006db4:	08006f00 	.word	0x08006f00
 8006db8:	08006f00 	.word	0x08006f00
 8006dbc:	08006f00 	.word	0x08006f00
 8006dc0:	08006f04 	.word	0x08006f04

08006dc4 <memset>:
 8006dc4:	4402      	add	r2, r0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d100      	bne.n	8006dce <memset+0xa>
 8006dcc:	4770      	bx	lr
 8006dce:	f803 1b01 	strb.w	r1, [r3], #1
 8006dd2:	e7f9      	b.n	8006dc8 <memset+0x4>

08006dd4 <_init>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	bf00      	nop
 8006dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dda:	bc08      	pop	{r3}
 8006ddc:	469e      	mov	lr, r3
 8006dde:	4770      	bx	lr

08006de0 <_fini>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	bf00      	nop
 8006de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de6:	bc08      	pop	{r3}
 8006de8:	469e      	mov	lr, r3
 8006dea:	4770      	bx	lr
