
Synth G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000740c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080075e4  080075e4  000175e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076f0  080076f0  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  080076f0  080076f0  000176f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076f8  080076f8  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076f8  080076f8  000176f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076fc  080076fc  000176fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08007700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000110  08007810  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08007810  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001810f  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b25  00000000  00000000  0003824f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  0003ad78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  0003c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002905a  00000000  00000000  0003d770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164b9  00000000  00000000  000667ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118387  00000000  00000000  0007cc83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019500a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e20  00000000  00000000  00195060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000110 	.word	0x20000110
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080075cc 	.word	0x080075cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000114 	.word	0x20000114
 8000214:	080075cc 	.word	0x080075cc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b96e 	b.w	8000ce8 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	468c      	mov	ip, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f040 8083 	bne.w	8000b3a <__udivmoddi4+0x116>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4617      	mov	r7, r2
 8000a38:	d947      	bls.n	8000aca <__udivmoddi4+0xa6>
 8000a3a:	fab2 f282 	clz	r2, r2
 8000a3e:	b142      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	f1c2 0020 	rsb	r0, r2, #32
 8000a44:	fa24 f000 	lsr.w	r0, r4, r0
 8000a48:	4091      	lsls	r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a50:	4094      	lsls	r4, r2
 8000a52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a56:	0c23      	lsrs	r3, r4, #16
 8000a58:	fbbc f6f8 	udiv	r6, ip, r8
 8000a5c:	fa1f fe87 	uxth.w	lr, r7
 8000a60:	fb08 c116 	mls	r1, r8, r6, ip
 8000a64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a68:	fb06 f10e 	mul.w	r1, r6, lr
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	d909      	bls.n	8000a84 <__udivmoddi4+0x60>
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a76:	f080 8119 	bcs.w	8000cac <__udivmoddi4+0x288>
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f240 8116 	bls.w	8000cac <__udivmoddi4+0x288>
 8000a80:	3e02      	subs	r6, #2
 8000a82:	443b      	add	r3, r7
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	45a6      	cmp	lr, r4
 8000a9a:	d909      	bls.n	8000ab0 <__udivmoddi4+0x8c>
 8000a9c:	193c      	adds	r4, r7, r4
 8000a9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa2:	f080 8105 	bcs.w	8000cb0 <__udivmoddi4+0x28c>
 8000aa6:	45a6      	cmp	lr, r4
 8000aa8:	f240 8102 	bls.w	8000cb0 <__udivmoddi4+0x28c>
 8000aac:	3802      	subs	r0, #2
 8000aae:	443c      	add	r4, r7
 8000ab0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ab4:	eba4 040e 	sub.w	r4, r4, lr
 8000ab8:	2600      	movs	r6, #0
 8000aba:	b11d      	cbz	r5, 8000ac4 <__udivmoddi4+0xa0>
 8000abc:	40d4      	lsrs	r4, r2
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	b902      	cbnz	r2, 8000ace <__udivmoddi4+0xaa>
 8000acc:	deff      	udf	#255	; 0xff
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	d150      	bne.n	8000b78 <__udivmoddi4+0x154>
 8000ad6:	1bcb      	subs	r3, r1, r7
 8000ad8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000adc:	fa1f f887 	uxth.w	r8, r7
 8000ae0:	2601      	movs	r6, #1
 8000ae2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ae6:	0c21      	lsrs	r1, r4, #16
 8000ae8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af0:	fb08 f30c 	mul.w	r3, r8, ip
 8000af4:	428b      	cmp	r3, r1
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0xe4>
 8000af8:	1879      	adds	r1, r7, r1
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0xe2>
 8000b00:	428b      	cmp	r3, r1
 8000b02:	f200 80e9 	bhi.w	8000cd8 <__udivmoddi4+0x2b4>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1ac9      	subs	r1, r1, r3
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x10c>
 8000b20:	193c      	adds	r4, r7, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x10a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80d9 	bhi.w	8000ce0 <__udivmoddi4+0x2bc>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e7bf      	b.n	8000aba <__udivmoddi4+0x96>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x12e>
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	f000 80b1 	beq.w	8000ca6 <__udivmoddi4+0x282>
 8000b44:	2600      	movs	r6, #0
 8000b46:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	fab3 f683 	clz	r6, r3
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d14a      	bne.n	8000bf0 <__udivmoddi4+0x1cc>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0x140>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 80b8 	bhi.w	8000cd4 <__udivmoddi4+0x2b0>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb61 0103 	sbc.w	r1, r1, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	468c      	mov	ip, r1
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0a8      	beq.n	8000ac4 <__udivmoddi4+0xa0>
 8000b72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b76:	e7a5      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b80:	4097      	lsls	r7, r2
 8000b82:	fa01 f002 	lsl.w	r0, r1, r2
 8000b86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b8a:	40d9      	lsrs	r1, r3
 8000b8c:	4330      	orrs	r0, r6
 8000b8e:	0c03      	lsrs	r3, r0, #16
 8000b90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb06 f108 	mul.w	r1, r6, r8
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	fa04 f402 	lsl.w	r4, r4, r2
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x19c>
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bb2:	f080 808d 	bcs.w	8000cd0 <__udivmoddi4+0x2ac>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 808a 	bls.w	8000cd0 <__udivmoddi4+0x2ac>
 8000bbc:	3e02      	subs	r6, #2
 8000bbe:	443b      	add	r3, r7
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b281      	uxth	r1, r0
 8000bc4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bd0:	fb00 f308 	mul.w	r3, r0, r8
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x1c4>
 8000bd8:	1879      	adds	r1, r7, r1
 8000bda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bde:	d273      	bcs.n	8000cc8 <__udivmoddi4+0x2a4>
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d971      	bls.n	8000cc8 <__udivmoddi4+0x2a4>
 8000be4:	3802      	subs	r0, #2
 8000be6:	4439      	add	r1, r7
 8000be8:	1acb      	subs	r3, r1, r3
 8000bea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bee:	e778      	b.n	8000ae2 <__udivmoddi4+0xbe>
 8000bf0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bf4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bf8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c02:	fa01 f306 	lsl.w	r3, r1, r6
 8000c06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c0e:	431f      	orrs	r7, r3
 8000c10:	0c3b      	lsrs	r3, r7, #16
 8000c12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c16:	fa1f f884 	uxth.w	r8, r4
 8000c1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c22:	fb09 fa08 	mul.w	sl, r9, r8
 8000c26:	458a      	cmp	sl, r1
 8000c28:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x220>
 8000c32:	1861      	adds	r1, r4, r1
 8000c34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c38:	d248      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c3a:	458a      	cmp	sl, r1
 8000c3c:	d946      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000c3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c42:	4421      	add	r1, r4
 8000c44:	eba1 010a 	sub.w	r1, r1, sl
 8000c48:	b2bf      	uxth	r7, r7
 8000c4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c56:	fb00 f808 	mul.w	r8, r0, r8
 8000c5a:	45b8      	cmp	r8, r7
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x24a>
 8000c5e:	19e7      	adds	r7, r4, r7
 8000c60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c64:	d22e      	bcs.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c66:	45b8      	cmp	r8, r7
 8000c68:	d92c      	bls.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4427      	add	r7, r4
 8000c6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c72:	eba7 0708 	sub.w	r7, r7, r8
 8000c76:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7a:	454f      	cmp	r7, r9
 8000c7c:	46c6      	mov	lr, r8
 8000c7e:	4649      	mov	r1, r9
 8000c80:	d31a      	bcc.n	8000cb8 <__udivmoddi4+0x294>
 8000c82:	d017      	beq.n	8000cb4 <__udivmoddi4+0x290>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x27a>
 8000c86:	ebb3 020e 	subs.w	r2, r3, lr
 8000c8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c92:	40f2      	lsrs	r2, r6
 8000c94:	ea4c 0202 	orr.w	r2, ip, r2
 8000c98:	40f7      	lsrs	r7, r6
 8000c9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	462e      	mov	r6, r5
 8000ca8:	4628      	mov	r0, r5
 8000caa:	e70b      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000cac:	4606      	mov	r6, r0
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0x60>
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	e6fd      	b.n	8000ab0 <__udivmoddi4+0x8c>
 8000cb4:	4543      	cmp	r3, r8
 8000cb6:	d2e5      	bcs.n	8000c84 <__udivmoddi4+0x260>
 8000cb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e7df      	b.n	8000c84 <__udivmoddi4+0x260>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e7d2      	b.n	8000c6e <__udivmoddi4+0x24a>
 8000cc8:	4660      	mov	r0, ip
 8000cca:	e78d      	b.n	8000be8 <__udivmoddi4+0x1c4>
 8000ccc:	4681      	mov	r9, r0
 8000cce:	e7b9      	b.n	8000c44 <__udivmoddi4+0x220>
 8000cd0:	4666      	mov	r6, ip
 8000cd2:	e775      	b.n	8000bc0 <__udivmoddi4+0x19c>
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	e74a      	b.n	8000b6e <__udivmoddi4+0x14a>
 8000cd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cdc:	4439      	add	r1, r7
 8000cde:	e713      	b.n	8000b08 <__udivmoddi4+0xe4>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	e724      	b.n	8000b30 <__udivmoddi4+0x10c>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_idiv0>:
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <main>:
uint8_t notes_on = 0;
uint8_t i = 0;


int main(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf0:	f001 f837 	bl	8001d62 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8000cf4:	f000 fa0a 	bl	800110c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf8:	f000 fcfe 	bl	80016f8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cfc:	f000 fcb0 	bl	8001660 <MX_USART1_UART_Init>
  //MX_DMA_Init();
  MX_DAC1_Init();
 8000d00:	f000 fade 	bl	80012c0 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000d04:	f000 fb16 	bl	8001334 <MX_DAC2_Init>
  MX_DAC4_Init();
 8000d08:	f000 fb58 	bl	80013bc <MX_DAC4_Init>
  MX_ADC2_Init();
 8000d0c:	f000 fa66 	bl	80011dc <MX_ADC2_Init>
  MX_TIM2_Init();
 8000d10:	f000 fb98 	bl	8001444 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000d14:	f000 fbe4 	bl	80014e0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000d18:	f000 fc18 	bl	800154c <MX_TIM7_Init>
  MX_TIM8_Init();
 8000d1c:	f000 fc4c 	bl	80015b8 <MX_TIM8_Init>
  MX_DAC4_Init();
 8000d20:	f000 fb4c 	bl	80013bc <MX_DAC4_Init>
  MX_COMP5_Init();
 8000d24:	f000 fd34 	bl	8001790 <MX_COMP5_Init>

  // Enable DAC
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	482f      	ldr	r0, [pc, #188]	; (8000de8 <main+0xfc>)
 8000d2c:	f002 fce1 	bl	80036f2 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8000d30:	2100      	movs	r1, #0
 8000d32:	482e      	ldr	r0, [pc, #184]	; (8000dec <main+0x100>)
 8000d34:	f002 fcdd 	bl	80036f2 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac4, DAC_CHANNEL_1);
 8000d38:	2100      	movs	r1, #0
 8000d3a:	482d      	ldr	r0, [pc, #180]	; (8000df0 <main+0x104>)
 8000d3c:	f002 fcd9 	bl	80036f2 <HAL_DAC_Start>

  // Start comparator
  HAL_COMP_Start(&hcomp5);
 8000d40:	482c      	ldr	r0, [pc, #176]	; (8000df4 <main+0x108>)
 8000d42:	f002 fb5d 	bl	8003400 <HAL_COMP_Start>

  // Enable timers
  HAL_TIM_Base_Start_IT(&htim2);
 8000d46:	482c      	ldr	r0, [pc, #176]	; (8000df8 <main+0x10c>)
 8000d48:	f004 fa82 	bl	8005250 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000d4c:	482b      	ldr	r0, [pc, #172]	; (8000dfc <main+0x110>)
 8000d4e:	f004 fa7f 	bl	8005250 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000d52:	482b      	ldr	r0, [pc, #172]	; (8000e00 <main+0x114>)
 8000d54:	f004 fa7c 	bl	8005250 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000d58:	482a      	ldr	r0, [pc, #168]	; (8000e04 <main+0x118>)
 8000d5a:	f004 fa79 	bl	8005250 <HAL_TIM_Base_Start_IT>

  voices[0].status = 1;
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <main+0x11c>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
  voices[1].status = 0;
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <main+0x11c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	739a      	strb	r2, [r3, #14]
  voices[2].status = 0;
 8000d6a:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <main+0x11c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	771a      	strb	r2, [r3, #28]

  voices[0].index = 0;
 8000d70:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <main+0x11c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	731a      	strb	r2, [r3, #12]
  voices[1].index = 0;
 8000d76:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <main+0x11c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	769a      	strb	r2, [r3, #26]
  voices[2].index = 0;
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <main+0x11c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  notes_on = 1;
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <main+0x120>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]

  TIM2->ARR = ARR_VAL(5000);
 8000d8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d8e:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM6->ARR = ARR_VAL(C4);
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <main+0x124>)
 8000d96:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8000d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM7->ARR = ARR_VAL(E4);
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <main+0x128>)
 8000d9e:	f640 72b7 	movw	r2, #4023	; 0xfb7
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM8->ARR = ARR_VAL(G4);
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <main+0x12c>)
 8000da6:	f640 523b 	movw	r2, #3387	; 0xd3b
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c

  lut = sin_lut;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <main+0x130>)
 8000dae:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <main+0x134>)
 8000db0:	601a      	str	r2, [r3, #0]

  // Main loop - read MIDI and play notes on DAC
  // DAC data handled in UART interrupt callback
  while (1) {
	  //TODO put in function
	  HAL_UART_Receive_IT(&huart1, midi_tmp, 3);
 8000db2:	2203      	movs	r2, #3
 8000db4:	491b      	ldr	r1, [pc, #108]	; (8000e24 <main+0x138>)
 8000db6:	481c      	ldr	r0, [pc, #112]	; (8000e28 <main+0x13c>)
 8000db8:	f004 ffec 	bl	8005d94 <HAL_UART_Receive_IT>
	  if (GLOBAL_MIDI_NOTE_ON) {
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <main+0x140>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b90      	cmp	r3, #144	; 0x90
 8000dc2:	d106      	bne.n	8000dd2 <main+0xe6>
		  MIDI_IN_LED_ON;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dca:	4819      	ldr	r0, [pc, #100]	; (8000e30 <main+0x144>)
 8000dcc:	f003 f99c 	bl	8004108 <HAL_GPIO_WritePin>
 8000dd0:	e7ef      	b.n	8000db2 <main+0xc6>
	  }
	  else if (GLOBAL_MIDI_NOTE_OFF) {
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <main+0x140>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b80      	cmp	r3, #128	; 0x80
 8000dd8:	d1eb      	bne.n	8000db2 <main+0xc6>
		  MIDI_IN_LED_OFF;
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de0:	4813      	ldr	r0, [pc, #76]	; (8000e30 <main+0x144>)
 8000de2:	f003 f991 	bl	8004108 <HAL_GPIO_WritePin>
	  HAL_UART_Receive_IT(&huart1, midi_tmp, 3);
 8000de6:	e7e4      	b.n	8000db2 <main+0xc6>
 8000de8:	20000190 	.word	0x20000190
 8000dec:	20000130 	.word	0x20000130
 8000df0:	20000210 	.word	0x20000210
 8000df4:	2000037c 	.word	0x2000037c
 8000df8:	20000330 	.word	0x20000330
 8000dfc:	200002e4 	.word	0x200002e4
 8000e00:	200003a0 	.word	0x200003a0
 8000e04:	20000144 	.word	0x20000144
 8000e08:	200002b8 	.word	0x200002b8
 8000e0c:	2000012c 	.word	0x2000012c
 8000e10:	40001000 	.word	0x40001000
 8000e14:	40001400 	.word	0x40001400
 8000e18:	40013400 	.word	0x40013400
 8000e1c:	20000100 	.word	0x20000100
 8000e20:	20000000 	.word	0x20000000
 8000e24:	200003ec 	.word	0x200003ec
 8000e28:	20000228 	.word	0x20000228
 8000e2c:	20000224 	.word	0x20000224
 8000e30:	48000400 	.word	0x48000400

08000e34 <HAL_TIM_PeriodElapsedCallback>:
	  }
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
		PUT_TO_DAC(VOICE2);
		if (voices[2].index == NUM_PTS) voices[2].index = 0;
	}
	*/

	if (htim == &htim6) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a8e      	ldr	r2, [pc, #568]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d158      	bne.n	8000ef6 <HAL_TIM_PeriodElapsedCallback+0xc2>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (1./notes_on) * (voices[0].status*lut[voices[0].index++] + voices[1].status*lut[voices[1].index] + voices[2].status*lut[voices[2].index]));
 8000e44:	4b8d      	ldr	r3, [pc, #564]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fb37 	bl	80004bc <__aeabi_i2d>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	498a      	ldr	r1, [pc, #552]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000e58:	f7ff fcc4 	bl	80007e4 <__aeabi_ddiv>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4614      	mov	r4, r2
 8000e62:	461d      	mov	r5, r3
 8000e64:	4b87      	ldr	r3, [pc, #540]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	4b87      	ldr	r3, [pc, #540]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b85      	ldr	r3, [pc, #532]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e70:	7b1b      	ldrb	r3, [r3, #12]
 8000e72:	1c59      	adds	r1, r3, #1
 8000e74:	b2ce      	uxtb	r6, r1
 8000e76:	4983      	ldr	r1, [pc, #524]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e78:	730e      	strb	r6, [r1, #12]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	fb03 f200 	mul.w	r2, r3, r0
 8000e84:	4b7f      	ldr	r3, [pc, #508]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e86:	7b9b      	ldrb	r3, [r3, #14]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	4b7f      	ldr	r3, [pc, #508]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e8c:	6819      	ldr	r1, [r3, #0]
 8000e8e:	4b7d      	ldr	r3, [pc, #500]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e90:	7e9b      	ldrb	r3, [r3, #26]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	440b      	add	r3, r1
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	fb03 f300 	mul.w	r3, r3, r0
 8000e9c:	441a      	add	r2, r3
 8000e9e:	4b79      	ldr	r3, [pc, #484]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ea0:	7f1b      	ldrb	r3, [r3, #28]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	4b78      	ldr	r3, [pc, #480]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000ea6:	6819      	ldr	r1, [r3, #0]
 8000ea8:	4b76      	ldr	r3, [pc, #472]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	440b      	add	r3, r1
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	fb03 f300 	mul.w	r3, r3, r0
 8000eb8:	4413      	add	r3, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fafe 	bl	80004bc <__aeabi_i2d>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	4629      	mov	r1, r5
 8000ec8:	f7ff fb62 	bl	8000590 <__aeabi_dmul>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f7ff fd6e 	bl	80009b4 <__aeabi_d2uiz>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	486b      	ldr	r0, [pc, #428]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000ee0:	f002 fcb4 	bl	800384c <HAL_DAC_SetValue>
		if (voices[0].index == NUM_PTS) voices[0].index = 0;
 8000ee4:	4b67      	ldr	r3, [pc, #412]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ee6:	7b1b      	ldrb	r3, [r3, #12]
 8000ee8:	2b80      	cmp	r3, #128	; 0x80
 8000eea:	f040 80c1 	bne.w	8001070 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8000eee:	4b65      	ldr	r3, [pc, #404]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	731a      	strb	r2, [r3, #12]
		if (voices[2].index == NUM_PTS) voices[2].index = 0;
	}



}
 8000ef4:	e0bc      	b.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x23c>
	else if (htim == &htim7) {
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a65      	ldr	r2, [pc, #404]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d159      	bne.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x17e>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (1./notes_on) * (voices[0].status*lut[voices[0].index] + voices[1].status*lut[voices[1].index++] + voices[2].status*lut[voices[2].index]));
 8000efe:	4b5f      	ldr	r3, [pc, #380]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fada 	bl	80004bc <__aeabi_i2d>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	f04f 0000 	mov.w	r0, #0
 8000f10:	495b      	ldr	r1, [pc, #364]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000f12:	f7ff fc67 	bl	80007e4 <__aeabi_ddiv>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4614      	mov	r4, r2
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	4b59      	ldr	r3, [pc, #356]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4619      	mov	r1, r3
 8000f24:	4b58      	ldr	r3, [pc, #352]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b56      	ldr	r3, [pc, #344]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f2a:	7b1b      	ldrb	r3, [r3, #12]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	fb03 f201 	mul.w	r2, r3, r1
 8000f36:	4b53      	ldr	r3, [pc, #332]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f38:	7b9b      	ldrb	r3, [r3, #14]
 8000f3a:	461e      	mov	r6, r3
 8000f3c:	4b52      	ldr	r3, [pc, #328]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000f3e:	6819      	ldr	r1, [r3, #0]
 8000f40:	4b50      	ldr	r3, [pc, #320]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f42:	7e9b      	ldrb	r3, [r3, #26]
 8000f44:	1c58      	adds	r0, r3, #1
 8000f46:	fa5f fc80 	uxtb.w	ip, r0
 8000f4a:	484e      	ldr	r0, [pc, #312]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f4c:	f880 c01a 	strb.w	ip, [r0, #26]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	440b      	add	r3, r1
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	fb03 f306 	mul.w	r3, r3, r6
 8000f5a:	441a      	add	r2, r3
 8000f5c:	4b49      	ldr	r3, [pc, #292]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f5e:	7f1b      	ldrb	r3, [r3, #28]
 8000f60:	4618      	mov	r0, r3
 8000f62:	4b49      	ldr	r3, [pc, #292]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000f64:	6819      	ldr	r1, [r3, #0]
 8000f66:	4b47      	ldr	r3, [pc, #284]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	440b      	add	r3, r1
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	fb03 f300 	mul.w	r3, r3, r0
 8000f76:	4413      	add	r3, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fa9f 	bl	80004bc <__aeabi_i2d>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4620      	mov	r0, r4
 8000f84:	4629      	mov	r1, r5
 8000f86:	f7ff fb03 	bl	8000590 <__aeabi_dmul>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	f7ff fd0f 	bl	80009b4 <__aeabi_d2uiz>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	483b      	ldr	r0, [pc, #236]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000f9e:	f002 fc55 	bl	800384c <HAL_DAC_SetValue>
		if (voices[1].index == NUM_PTS) voices[1].index = 0;
 8000fa2:	4b38      	ldr	r3, [pc, #224]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fa4:	7e9b      	ldrb	r3, [r3, #26]
 8000fa6:	2b80      	cmp	r3, #128	; 0x80
 8000fa8:	d162      	bne.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8000faa:	4b36      	ldr	r3, [pc, #216]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	769a      	strb	r2, [r3, #26]
}
 8000fb0:	e05e      	b.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x23c>
	else if (htim == &htim8) {
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a37      	ldr	r2, [pc, #220]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d15a      	bne.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x23c>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (1./notes_on) * (voices[0].status*lut[voices[0].index] + voices[1].status*lut[voices[1].index] + voices[2].status*lut[voices[2].index++]));
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fa7c 	bl	80004bc <__aeabi_i2d>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	f04f 0000 	mov.w	r0, #0
 8000fcc:	492c      	ldr	r1, [pc, #176]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000fce:	f7ff fc09 	bl	80007e4 <__aeabi_ddiv>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4614      	mov	r4, r2
 8000fd8:	461d      	mov	r5, r3
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b27      	ldr	r3, [pc, #156]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fe6:	7b1b      	ldrb	r3, [r3, #12]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	fb03 f201 	mul.w	r2, r3, r1
 8000ff2:	4b24      	ldr	r3, [pc, #144]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ff4:	7b9b      	ldrb	r3, [r3, #14]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000ffa:	6819      	ldr	r1, [r3, #0]
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ffe:	7e9b      	ldrb	r3, [r3, #26]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	440b      	add	r3, r1
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	fb03 f300 	mul.w	r3, r3, r0
 800100a:	441a      	add	r2, r3
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800100e:	7f1b      	ldrb	r3, [r3, #28]
 8001010:	461e      	mov	r6, r3
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001014:	6819      	ldr	r1, [r3, #0]
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001018:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800101c:	1c58      	adds	r0, r3, #1
 800101e:	fa5f fc80 	uxtb.w	ip, r0
 8001022:	4818      	ldr	r0, [pc, #96]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001024:	f880 c028 	strb.w	ip, [r0, #40]	; 0x28
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	440b      	add	r3, r1
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	fb03 f306 	mul.w	r3, r3, r6
 8001032:	4413      	add	r3, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa41 	bl	80004bc <__aeabi_i2d>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4620      	mov	r0, r4
 8001040:	4629      	mov	r1, r5
 8001042:	f7ff faa5 	bl	8000590 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff fcb1 	bl	80009b4 <__aeabi_d2uiz>
 8001052:	4603      	mov	r3, r0
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x258>)
 800105a:	f002 fbf7 	bl	800384c <HAL_DAC_SetValue>
		if (voices[2].index == NUM_PTS) voices[2].index = 0;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001064:	2b80      	cmp	r3, #128	; 0x80
 8001066:	d103      	bne.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001078:	200002e4 	.word	0x200002e4
 800107c:	2000012c 	.word	0x2000012c
 8001080:	3ff00000 	.word	0x3ff00000
 8001084:	200002b8 	.word	0x200002b8
 8001088:	20000100 	.word	0x20000100
 800108c:	20000190 	.word	0x20000190
 8001090:	200003a0 	.word	0x200003a0
 8001094:	20000144 	.word	0x20000144

08001098 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	TIM6->ARR = ARR_VAL(NOTE);
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_UART_RxCpltCallback+0x60>)
 80010a2:	785b      	ldrb	r3, [r3, #1]
 80010a4:	3305      	adds	r3, #5
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <HAL_UART_RxCpltCallback+0x64>)
 80010a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ac:	01db      	lsls	r3, r3, #7
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_UART_RxCpltCallback+0x68>)
 80010b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80010b6:	4a13      	ldr	r2, [pc, #76]	; (8001104 <HAL_UART_RxCpltCallback+0x6c>)
 80010b8:	3b01      	subs	r3, #1
 80010ba:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (midi_tmp[0] == 0x90 || midi_tmp[0] == 0x80) {
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_UART_RxCpltCallback+0x70>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b90      	cmp	r3, #144	; 0x90
 80010c2:	d003      	beq.n	80010cc <HAL_UART_RxCpltCallback+0x34>
 80010c4:	4b10      	ldr	r3, [pc, #64]	; (8001108 <HAL_UART_RxCpltCallback+0x70>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b80      	cmp	r3, #128	; 0x80
 80010ca:	d10e      	bne.n	80010ea <HAL_UART_RxCpltCallback+0x52>
		uint8_t i;
		for (i = 0; i < 3; i++) {
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	e008      	b.n	80010e4 <HAL_UART_RxCpltCallback+0x4c>
			midi_msg[i] = midi_tmp[i];
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	490c      	ldr	r1, [pc, #48]	; (8001108 <HAL_UART_RxCpltCallback+0x70>)
 80010d8:	5c89      	ldrb	r1, [r1, r2]
 80010da:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_UART_RxCpltCallback+0x60>)
 80010dc:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 3; i++) {
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	3301      	adds	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d9f3      	bls.n	80010d2 <HAL_UART_RxCpltCallback+0x3a>
		}
	}
}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000224 	.word	0x20000224
 80010fc:	080075e4 	.word	0x080075e4
 8001100:	0a21fe80 	.word	0x0a21fe80
 8001104:	40001000 	.word	0x40001000
 8001108:	200003ec 	.word	0x200003ec

0800110c <SystemClock_Config>:


void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0a8      	sub	sp, #160	; 0xa0
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001116:	2238      	movs	r2, #56	; 0x38
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f006 fa4e 	bl	80075bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001130:	463b      	mov	r3, r7
 8001132:	2254      	movs	r2, #84	; 0x54
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f006 fa40 	bl	80075bc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800113c:	2000      	movs	r0, #0
 800113e:	f002 fffb 	bl	8004138 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001142:	2302      	movs	r3, #2
 8001144:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800114a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114c:	2340      	movs	r3, #64	; 0x40
 800114e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800115c:	2304      	movs	r3, #4
 800115e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001162:	2355      	movs	r3, #85	; 0x55
 8001164:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001174:	2302      	movs	r3, #2
 8001176:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800117e:	4618      	mov	r0, r3
 8001180:	f003 f88e 	bl	80042a0 <HAL_RCC_OscConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800118a:	f000 fb27 	bl	80017dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118e:	230f      	movs	r3, #15
 8001190:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001192:	2303      	movs	r3, #3
 8001194:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011a6:	2104      	movs	r1, #4
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 fb91 	bl	80048d0 <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80011b4:	f000 fb12 	bl	80017dc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 fda0 	bl	8004d08 <HAL_RCCEx_PeriphCLKConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011ce:	f000 fb05 	bl	80017dc <Error_Handler>
  }
}
 80011d2:	bf00      	nop
 80011d4:	37a0      	adds	r7, #160	; 0xa0
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <MX_ADC2_Init>:

static void MX_ADC2_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011e2:	463b      	mov	r3, r7
 80011e4:	2220      	movs	r2, #32
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f006 f9e7 	bl	80075bc <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80011ee:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <MX_ADC2_Init+0xd8>)
 80011f0:	4a31      	ldr	r2, [pc, #196]	; (80012b8 <MX_ADC2_Init+0xdc>)
 80011f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011f4:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <MX_ADC2_Init+0xd8>)
 80011f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011fc:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <MX_ADC2_Init+0xd8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001202:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <MX_ADC2_Init+0xd8>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <MX_ADC2_Init+0xd8>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800120e:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <MX_ADC2_Init+0xd8>)
 8001210:	2201      	movs	r2, #1
 8001212:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <MX_ADC2_Init+0xd8>)
 8001216:	2204      	movs	r2, #4
 8001218:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <MX_ADC2_Init+0xd8>)
 800121c:	2200      	movs	r2, #0
 800121e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <MX_ADC2_Init+0xd8>)
 8001222:	2201      	movs	r2, #1
 8001224:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <MX_ADC2_Init+0xd8>)
 8001228:	2202      	movs	r2, #2
 800122a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800122c:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <MX_ADC2_Init+0xd8>)
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <MX_ADC2_Init+0xd8>)
 8001236:	2200      	movs	r2, #0
 8001238:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800123a:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <MX_ADC2_Init+0xd8>)
 800123c:	2200      	movs	r2, #0
 800123e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_ADC2_Init+0xd8>)
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001248:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <MX_ADC2_Init+0xd8>)
 800124a:	2200      	movs	r2, #0
 800124c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_ADC2_Init+0xd8>)
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001256:	4817      	ldr	r0, [pc, #92]	; (80012b4 <MX_ADC2_Init+0xd8>)
 8001258:	f000 ffec 	bl	8002234 <HAL_ADC_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001262:	f000 fabb 	bl	80017dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <MX_ADC2_Init+0xe0>)
 8001268:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800126a:	2306      	movs	r3, #6
 800126c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001272:	237f      	movs	r3, #127	; 0x7f
 8001274:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001276:	2304      	movs	r3, #4
 8001278:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800127e:	463b      	mov	r3, r7
 8001280:	4619      	mov	r1, r3
 8001282:	480c      	ldr	r0, [pc, #48]	; (80012b4 <MX_ADC2_Init+0xd8>)
 8001284:	f001 f998 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800128e:	f000 faa5 	bl	80017dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001292:	230c      	movs	r3, #12
 8001294:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001296:	463b      	mov	r3, r7
 8001298:	4619      	mov	r1, r3
 800129a:	4806      	ldr	r0, [pc, #24]	; (80012b4 <MX_ADC2_Init+0xd8>)
 800129c:	f001 f98c 	bl	80025b8 <HAL_ADC_ConfigChannel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 80012a6:	f000 fa99 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200001a4 	.word	0x200001a4
 80012b8:	50000100 	.word	0x50000100
 80012bc:	04300002 	.word	0x04300002

080012c0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	; 0x30
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012c6:	463b      	mov	r3, r7
 80012c8:	2230      	movs	r2, #48	; 0x30
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f006 f975 	bl	80075bc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_DAC1_Init+0x6c>)
 80012d4:	4a16      	ldr	r2, [pc, #88]	; (8001330 <MX_DAC1_Init+0x70>)
 80012d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012d8:	4814      	ldr	r0, [pc, #80]	; (800132c <MX_DAC1_Init+0x6c>)
 80012da:	f002 f9e8 	bl	80036ae <HAL_DAC_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012e4:	f000 fa7a 	bl	80017dc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80012e8:	2302      	movs	r3, #2
 80012ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	; (800132c <MX_DAC1_Init+0x6c>)
 8001314:	f002 facc 	bl	80038b0 <HAL_DAC_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800131e:	f000 fa5d 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	3730      	adds	r7, #48	; 0x30
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000190 	.word	0x20000190
 8001330:	50000800 	.word	0x50000800

08001334 <MX_DAC2_Init>:

static void MX_DAC2_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800133a:	463b      	mov	r3, r7
 800133c:	2230      	movs	r2, #48	; 0x30
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f006 f93b 	bl	80075bc <memset>
  /* USER CODE BEGIN DAC2_Init 1 */

  /* USER CODE END DAC2_Init 1 */
  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_DAC2_Init+0x80>)
 8001348:	4a1b      	ldr	r2, [pc, #108]	; (80013b8 <MX_DAC2_Init+0x84>)
 800134a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800134c:	4819      	ldr	r0, [pc, #100]	; (80013b4 <MX_DAC2_Init+0x80>)
 800134e:	f002 f9ae 	bl	80036ae <HAL_DAC_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001358:	f000 fa40 	bl	80017dc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800135c:	2302      	movs	r3, #2
 800135e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800136c:	2312      	movs	r3, #18
 800136e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001378:	2301      	movs	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	4619      	mov	r1, r3
 8001386:	480b      	ldr	r0, [pc, #44]	; (80013b4 <MX_DAC2_Init+0x80>)
 8001388:	f002 fa92 	bl	80038b0 <HAL_DAC_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001392:	f000 fa23 	bl	80017dc <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac2, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 8001396:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 800139a:	2100      	movs	r1, #0
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_DAC2_Init+0x80>)
 800139e:	f002 fc2f 	bl	8003c00 <HAL_DACEx_TriangleWaveGenerate>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_DAC2_Init+0x78>
  {
    Error_Handler();
 80013a8:	f000 fa18 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	3730      	adds	r7, #48	; 0x30
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000130 	.word	0x20000130
 80013b8:	50000c00 	.word	0x50000c00

080013bc <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	; 0x30
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013c2:	463b      	mov	r3, r7
 80013c4:	2230      	movs	r2, #48	; 0x30
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f006 f8f7 	bl	80075bc <memset>
  /* USER CODE BEGIN DAC4_Init 1 */

  /* USER CODE END DAC4_Init 1 */
  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_DAC4_Init+0x80>)
 80013d0:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <MX_DAC4_Init+0x84>)
 80013d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 80013d4:	4819      	ldr	r0, [pc, #100]	; (800143c <MX_DAC4_Init+0x80>)
 80013d6:	f002 f96a 	bl	80036ae <HAL_DAC_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 80013e0:	f000 f9fc 	bl	80017dc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80013e4:	2302      	movs	r3, #2
 80013e6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80013f4:	2312      	movs	r3, #18
 80013f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80013fc:	2302      	movs	r3, #2
 80013fe:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001400:	2302      	movs	r3, #2
 8001402:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	4619      	mov	r1, r3
 800140e:	480b      	ldr	r0, [pc, #44]	; (800143c <MX_DAC4_Init+0x80>)
 8001410:	f002 fa4e 	bl	80038b0 <HAL_DAC_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 800141a:	f000 f9df 	bl	80017dc <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac4, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 800141e:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 8001422:	2100      	movs	r1, #0
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_DAC4_Init+0x80>)
 8001426:	f002 fbeb 	bl	8003c00 <HAL_DACEx_TriangleWaveGenerate>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_DAC4_Init+0x78>
  {
    Error_Handler();
 8001430:	f000 f9d4 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	3730      	adds	r7, #48	; 0x30
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000210 	.word	0x20000210
 8001440:	50001400 	.word	0x50001400

08001444 <MX_TIM2_Init>:
static void MX_TIM2_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001462:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <MX_TIM2_Init+0x98>)
 8001464:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001468:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <MX_TIM2_Init+0x98>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <MX_TIM2_Init+0x98>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001476:	4b19      	ldr	r3, [pc, #100]	; (80014dc <MX_TIM2_Init+0x98>)
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <MX_TIM2_Init+0x98>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <MX_TIM2_Init+0x98>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800148a:	4814      	ldr	r0, [pc, #80]	; (80014dc <MX_TIM2_Init+0x98>)
 800148c:	f003 fe88 	bl	80051a0 <HAL_TIM_Base_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001496:	f000 f9a1 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4619      	mov	r1, r3
 80014a6:	480d      	ldr	r0, [pc, #52]	; (80014dc <MX_TIM2_Init+0x98>)
 80014a8:	f004 f8ca 	bl	8005640 <HAL_TIM_ConfigClockSource>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014b2:	f000 f993 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014b6:	2320      	movs	r3, #32
 80014b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <MX_TIM2_Init+0x98>)
 80014c4:	f004 fb3a 	bl	8005b3c <HAL_TIMEx_MasterConfigSynchronization>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014ce:	f000 f985 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	3720      	adds	r7, #32
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000330 	.word	0x20000330

080014e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_TIM6_Init+0x64>)
 80014f2:	4a15      	ldr	r2, [pc, #84]	; (8001548 <MX_TIM6_Init+0x68>)
 80014f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <MX_TIM6_Init+0x64>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_TIM6_Init+0x64>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = ARR_VAL(C4);
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <MX_TIM6_Init+0x64>)
 8001504:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8001508:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_TIM6_Init+0x64>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <MX_TIM6_Init+0x64>)
 8001512:	f003 fe45 	bl	80051a0 <HAL_TIM_Base_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800151c:	f000 f95e 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001520:	2320      	movs	r3, #32
 8001522:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_TIM6_Init+0x64>)
 800152e:	f004 fb05 	bl	8005b3c <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001538:	f000 f950 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200002e4 	.word	0x200002e4
 8001548:	40001000 	.word	0x40001000

0800154c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_TIM7_Init+0x64>)
 800155e:	4a15      	ldr	r2, [pc, #84]	; (80015b4 <MX_TIM7_Init+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <MX_TIM7_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_TIM7_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = ARR_VAL(C4);
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <MX_TIM7_Init+0x64>)
 8001570:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8001574:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_TIM7_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <MX_TIM7_Init+0x64>)
 800157e:	f003 fe0f 	bl	80051a0 <HAL_TIM_Base_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001588:	f000 f928 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800158c:	2320      	movs	r3, #32
 800158e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_TIM7_Init+0x64>)
 800159a:	f004 facf 	bl	8005b3c <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80015a4:	f000 f91a 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200003a0 	.word	0x200003a0
 80015b4:	40001400 	.word	0x40001400

080015b8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <MX_TIM8_Init+0xa0>)
 80015d8:	4a20      	ldr	r2, [pc, #128]	; (800165c <MX_TIM8_Init+0xa4>)
 80015da:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <MX_TIM8_Init+0xa0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <MX_TIM8_Init+0xa0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = ARR_VAL(C4);
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <MX_TIM8_Init+0xa0>)
 80015ea:	f241 32cc 	movw	r2, #5068	; 0x13cc
 80015ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <MX_TIM8_Init+0xa0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_TIM8_Init+0xa0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_TIM8_Init+0xa0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001602:	4815      	ldr	r0, [pc, #84]	; (8001658 <MX_TIM8_Init+0xa0>)
 8001604:	f003 fdcc 	bl	80051a0 <HAL_TIM_Base_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800160e:	f000 f8e5 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001616:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	4619      	mov	r1, r3
 800161e:	480e      	ldr	r0, [pc, #56]	; (8001658 <MX_TIM8_Init+0xa0>)
 8001620:	f004 f80e 	bl	8005640 <HAL_TIM_ConfigClockSource>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800162a:	f000 f8d7 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800162e:	2320      	movs	r3, #32
 8001630:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4619      	mov	r1, r3
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <MX_TIM8_Init+0xa0>)
 8001640:	f004 fa7c 	bl	8005b3c <HAL_TIMEx_MasterConfigSynchronization>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800164a:	f000 f8c7 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	3720      	adds	r7, #32
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000144 	.word	0x20000144
 800165c:	40013400 	.word	0x40013400

08001660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001664:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <MX_USART1_UART_Init+0x90>)
 8001666:	4a23      	ldr	r2, [pc, #140]	; (80016f4 <MX_USART1_UART_Init+0x94>)
 8001668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 800166a:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <MX_USART1_UART_Init+0x90>)
 800166c:	f647 2212 	movw	r2, #31250	; 0x7a12
 8001670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <MX_USART1_UART_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <MX_USART1_UART_Init+0x90>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <MX_USART1_UART_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_USART1_UART_Init+0x90>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <MX_USART1_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_USART1_UART_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MX_USART1_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_USART1_UART_Init+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_USART1_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a8:	4811      	ldr	r0, [pc, #68]	; (80016f0 <MX_USART1_UART_Init+0x90>)
 80016aa:	f004 fb23 	bl	8005cf4 <HAL_UART_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016b4:	f000 f892 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b8:	2100      	movs	r1, #0
 80016ba:	480d      	ldr	r0, [pc, #52]	; (80016f0 <MX_USART1_UART_Init+0x90>)
 80016bc:	f005 fe8f 	bl	80073de <HAL_UARTEx_SetTxFifoThreshold>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016c6:	f000 f889 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ca:	2100      	movs	r1, #0
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <MX_USART1_UART_Init+0x90>)
 80016ce:	f005 fec4 	bl	800745a <HAL_UARTEx_SetRxFifoThreshold>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016d8:	f000 f880 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <MX_USART1_UART_Init+0x90>)
 80016de:	f005 fe45 	bl	800736c <HAL_UARTEx_DisableFifoMode>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016e8:	f000 f878 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000228 	.word	0x20000228
 80016f4:	40013800 	.word	0x40013800

080016f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <MX_GPIO_Init+0x90>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <MX_GPIO_Init+0x90>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <MX_GPIO_Init+0x90>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_GPIO_Init+0x90>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	4a17      	ldr	r2, [pc, #92]	; (8001788 <MX_GPIO_Init+0x90>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <MX_GPIO_Init+0x90>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <MX_GPIO_Init+0x90>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	4a11      	ldr	r2, [pc, #68]	; (8001788 <MX_GPIO_Init+0x90>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <MX_GPIO_Init+0x90>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800175c:	480b      	ldr	r0, [pc, #44]	; (800178c <MX_GPIO_Init+0x94>)
 800175e:	f002 fcd3 	bl	8004108 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PB11 */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001762:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001766:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	4619      	mov	r1, r3
 800177a:	4804      	ldr	r0, [pc, #16]	; (800178c <MX_GPIO_Init+0x94>)
 800177c:	f002 fb42 	bl	8003e04 <HAL_GPIO_Init>

}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40021000 	.word	0x40021000
 800178c:	48000400 	.word	0x48000400

08001790 <MX_COMP5_Init>:

static void MX_COMP5_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_COMP5_Init+0x44>)
 8001796:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <MX_COMP5_Init+0x48>)
 8001798:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_COMP5_Init+0x44>)
 800179c:	2200      	movs	r2, #0
 800179e:	605a      	str	r2, [r3, #4]
  hcomp5.Init.InputMinus = COMP_INPUT_MINUS_DAC4_CH1;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_COMP5_Init+0x44>)
 80017a2:	2240      	movs	r2, #64	; 0x40
 80017a4:	609a      	str	r2, [r3, #8]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <MX_COMP5_Init+0x44>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_COMP5_Init+0x44>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <MX_COMP5_Init+0x44>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_COMP5_Init+0x44>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_COMP5_Init+0x44>)
 80017c0:	f001 fc8a 	bl	80030d8 <HAL_COMP_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_COMP5_Init+0x3e>
  {
    Error_Handler();
 80017ca:	f000 f807 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000037c 	.word	0x2000037c
 80017d8:	40010210 	.word	0x40010210

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e0:	b672      	cpsid	i
}
 80017e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <Error_Handler+0x8>
	...

080017e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_MspInit+0x44>)
 80017f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f2:	4a0e      	ldr	r2, [pc, #56]	; (800182c <HAL_MspInit+0x44>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6613      	str	r3, [r2, #96]	; 0x60
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_MspInit+0x44>)
 80017fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_MspInit+0x44>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <HAL_MspInit+0x44>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6593      	str	r3, [r2, #88]	; 0x58
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_MspInit+0x44>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800181e:	f002 fd2f 	bl	8004280 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000

08001830 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a15      	ldr	r2, [pc, #84]	; (80018a4 <HAL_ADC_MspInit+0x74>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d124      	bne.n	800189c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_ADC_MspInit+0x78>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	4a14      	ldr	r2, [pc, #80]	; (80018a8 <HAL_ADC_MspInit+0x78>)
 8001858:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800185c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_ADC_MspInit+0x78>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_ADC_MspInit+0x78>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <HAL_ADC_MspInit+0x78>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_ADC_MspInit+0x78>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001882:	2303      	movs	r3, #3
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001886:	2303      	movs	r3, #3
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001898:	f002 fab4 	bl	8003e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800189c:	bf00      	nop
 800189e:	3728      	adds	r7, #40	; 0x28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	50000100 	.word	0x50000100
 80018a8:	40021000 	.word	0x40021000

080018ac <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP5)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1d      	ldr	r2, [pc, #116]	; (8001940 <HAL_COMP_MspInit+0x94>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d134      	bne.n	8001938 <HAL_COMP_MspInit+0x8c>
  {
  /* USER CODE BEGIN COMP5_MspInit 0 */

  /* USER CODE END COMP5_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <HAL_COMP_MspInit+0x98>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	4a1c      	ldr	r2, [pc, #112]	; (8001944 <HAL_COMP_MspInit+0x98>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018da:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <HAL_COMP_MspInit+0x98>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e6:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_COMP_MspInit+0x98>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	4a16      	ldr	r2, [pc, #88]	; (8001944 <HAL_COMP_MspInit+0x98>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_COMP_MspInit+0x98>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**COMP5 GPIO Configuration
    PB13     ------> COMP5_INP
    PC7     ------> COMP5_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001904:	2303      	movs	r3, #3
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	480d      	ldr	r0, [pc, #52]	; (8001948 <HAL_COMP_MspInit+0x9c>)
 8001914:	f002 fa76 	bl	8003e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_COMP5;
 8001928:	2307      	movs	r3, #7
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	4806      	ldr	r0, [pc, #24]	; (800194c <HAL_COMP_MspInit+0xa0>)
 8001934:	f002 fa66 	bl	8003e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP5_MspInit 1 */

  /* USER CODE END COMP5_MspInit 1 */
  }

}
 8001938:	bf00      	nop
 800193a:	3728      	adds	r7, #40	; 0x28
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40010210 	.word	0x40010210
 8001944:	40021000 	.word	0x40021000
 8001948:	48000400 	.word	0x48000400
 800194c:	48000800 	.word	0x48000800

08001950 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08c      	sub	sp, #48	; 0x30
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a44      	ldr	r2, [pc, #272]	; (8001a80 <HAL_DAC_MspInit+0x130>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d12d      	bne.n	80019ce <HAL_DAC_MspInit+0x7e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001972:	4b44      	ldr	r3, [pc, #272]	; (8001a84 <HAL_DAC_MspInit+0x134>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	4a43      	ldr	r2, [pc, #268]	; (8001a84 <HAL_DAC_MspInit+0x134>)
 8001978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197e:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <HAL_DAC_MspInit+0x134>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	4b3e      	ldr	r3, [pc, #248]	; (8001a84 <HAL_DAC_MspInit+0x134>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	4a3d      	ldr	r2, [pc, #244]	; (8001a84 <HAL_DAC_MspInit+0x134>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001996:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <HAL_DAC_MspInit+0x134>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019a2:	2310      	movs	r3, #16
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a6:	2303      	movs	r3, #3
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b8:	f002 fa24 	bl	8003e04 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	2036      	movs	r0, #54	; 0x36
 80019c2:	f001 fe40 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019c6:	2036      	movs	r0, #54	; 0x36
 80019c8:	f001 fe57 	bl	800367a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 80019cc:	e053      	b.n	8001a76 <HAL_DAC_MspInit+0x126>
  else if(hdac->Instance==DAC2)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a2d      	ldr	r2, [pc, #180]	; (8001a88 <HAL_DAC_MspInit+0x138>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d135      	bne.n	8001a44 <HAL_DAC_MspInit+0xf4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80019d8:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <HAL_DAC_MspInit+0x134>)
 80019da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019dc:	4a29      	ldr	r2, [pc, #164]	; (8001a84 <HAL_DAC_MspInit+0x134>)
 80019de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_DAC_MspInit+0x134>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <HAL_DAC_MspInit+0x134>)
 80019f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f4:	4a23      	ldr	r2, [pc, #140]	; (8001a84 <HAL_DAC_MspInit+0x134>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fc:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <HAL_DAC_MspInit+0x134>)
 80019fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a08:	2340      	movs	r3, #64	; 0x40
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a1e:	f002 f9f1 	bl	8003e04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2037      	movs	r0, #55	; 0x37
 8001a28:	f001 fe0d 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001a2c:	2037      	movs	r0, #55	; 0x37
 8001a2e:	f001 fe24 	bl	800367a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	2037      	movs	r0, #55	; 0x37
 8001a38:	f001 fe05 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001a3c:	2037      	movs	r0, #55	; 0x37
 8001a3e:	f001 fe1c 	bl	800367a <HAL_NVIC_EnableIRQ>
}
 8001a42:	e018      	b.n	8001a76 <HAL_DAC_MspInit+0x126>
  else if(hdac->Instance==DAC4)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a10      	ldr	r2, [pc, #64]	; (8001a8c <HAL_DAC_MspInit+0x13c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d113      	bne.n	8001a76 <HAL_DAC_MspInit+0x126>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_DAC_MspInit+0x134>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <HAL_DAC_MspInit+0x134>)
 8001a54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_DAC_MspInit+0x134>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	2037      	movs	r0, #55	; 0x37
 8001a6c:	f001 fdeb 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001a70:	2037      	movs	r0, #55	; 0x37
 8001a72:	f001 fe02 	bl	800367a <HAL_NVIC_EnableIRQ>
}
 8001a76:	bf00      	nop
 8001a78:	3730      	adds	r7, #48	; 0x30
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	50000800 	.word	0x50000800
 8001a84:	40021000 	.word	0x40021000
 8001a88:	50000c00 	.word	0x50000c00
 8001a8c:	50001400 	.word	0x50001400

08001a90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa0:	d114      	bne.n	8001acc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aa2:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <HAL_TIM_Base_MspInit+0xe0>)
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa6:	4a32      	ldr	r2, [pc, #200]	; (8001b70 <HAL_TIM_Base_MspInit+0xe0>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6593      	str	r3, [r2, #88]	; 0x58
 8001aae:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <HAL_TIM_Base_MspInit+0xe0>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	201c      	movs	r0, #28
 8001ac0:	f001 fdc1 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ac4:	201c      	movs	r0, #28
 8001ac6:	f001 fdd8 	bl	800367a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001aca:	e04c      	b.n	8001b66 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a28      	ldr	r2, [pc, #160]	; (8001b74 <HAL_TIM_Base_MspInit+0xe4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d114      	bne.n	8001b00 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_TIM_Base_MspInit+0xe0>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	4a25      	ldr	r2, [pc, #148]	; (8001b70 <HAL_TIM_Base_MspInit+0xe0>)
 8001adc:	f043 0310 	orr.w	r3, r3, #16
 8001ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae2:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <HAL_TIM_Base_MspInit+0xe0>)
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	2036      	movs	r0, #54	; 0x36
 8001af4:	f001 fda7 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001af8:	2036      	movs	r0, #54	; 0x36
 8001afa:	f001 fdbe 	bl	800367a <HAL_NVIC_EnableIRQ>
}
 8001afe:	e032      	b.n	8001b66 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <HAL_TIM_Base_MspInit+0xe8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d114      	bne.n	8001b34 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_TIM_Base_MspInit+0xe0>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <HAL_TIM_Base_MspInit+0xe0>)
 8001b10:	f043 0320 	orr.w	r3, r3, #32
 8001b14:	6593      	str	r3, [r2, #88]	; 0x58
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <HAL_TIM_Base_MspInit+0xe0>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	f003 0320 	and.w	r3, r3, #32
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	2037      	movs	r0, #55	; 0x37
 8001b28:	f001 fd8d 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001b2c:	2037      	movs	r0, #55	; 0x37
 8001b2e:	f001 fda4 	bl	800367a <HAL_NVIC_EnableIRQ>
}
 8001b32:	e018      	b.n	8001b66 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM8)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <HAL_TIM_Base_MspInit+0xec>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d113      	bne.n	8001b66 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_TIM_Base_MspInit+0xe0>)
 8001b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b42:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <HAL_TIM_Base_MspInit+0xe0>)
 8001b44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b48:	6613      	str	r3, [r2, #96]	; 0x60
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_TIM_Base_MspInit+0xe0>)
 8001b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	202c      	movs	r0, #44	; 0x2c
 8001b5c:	f001 fd73 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001b60:	202c      	movs	r0, #44	; 0x2c
 8001b62:	f001 fd8a 	bl	800367a <HAL_NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40001000 	.word	0x40001000
 8001b78:	40001400 	.word	0x40001400
 8001b7c:	40013400 	.word	0x40013400

08001b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <HAL_UART_MspInit+0x8c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d12f      	bne.n	8001c02 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_UART_MspInit+0x90>)
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba6:	4a1a      	ldr	r2, [pc, #104]	; (8001c10 <HAL_UART_MspInit+0x90>)
 8001ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bac:	6613      	str	r3, [r2, #96]	; 0x60
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_UART_MspInit+0x90>)
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_UART_MspInit+0x90>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbe:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <HAL_UART_MspInit+0x90>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_UART_MspInit+0x90>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001bd2:	2330      	movs	r3, #48	; 0x30
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001be2:	2307      	movs	r3, #7
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4809      	ldr	r0, [pc, #36]	; (8001c14 <HAL_UART_MspInit+0x94>)
 8001bee:	f002 f909 	bl	8003e04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	2025      	movs	r0, #37	; 0x25
 8001bf8:	f001 fd25 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bfc:	2025      	movs	r0, #37	; 0x25
 8001bfe:	f001 fd3c 	bl	800367a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c02:	bf00      	nop
 8001c04:	3728      	adds	r7, #40	; 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40013800 	.word	0x40013800
 8001c10:	40021000 	.word	0x40021000
 8001c14:	48000800 	.word	0x48000800

08001c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <NMI_Handler+0x4>

08001c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <HardFault_Handler+0x4>

08001c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <MemManage_Handler+0x4>

08001c2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <BusFault_Handler+0x4>

08001c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <UsageFault_Handler+0x4>

08001c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c64:	f000 f8d0 	bl	8001e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <TIM2_IRQHandler+0x10>)
 8001c72:	f003 fb65 	bl	8005340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000330 	.word	0x20000330

08001c80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <USART1_IRQHandler+0x10>)
 8001c86:	f004 f8cb 	bl	8005e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000228 	.word	0x20000228

08001c94 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <TIM8_UP_IRQHandler+0x10>)
 8001c9a:	f003 fb51 	bl	8005340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000144 	.word	0x20000144

08001ca8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cac:	4803      	ldr	r0, [pc, #12]	; (8001cbc <TIM6_DAC_IRQHandler+0x14>)
 8001cae:	f003 fb47 	bl	8005340 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001cb2:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <TIM6_DAC_IRQHandler+0x18>)
 8001cb4:	f001 fd70 	bl	8003798 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200002e4 	.word	0x200002e4
 8001cc0:	20000190 	.word	0x20000190

08001cc4 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001cc8:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <TIM7_DAC_IRQHandler+0x1c>)
 8001cca:	f003 fb39 	bl	8005340 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac2);
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <TIM7_DAC_IRQHandler+0x20>)
 8001cd0:	f001 fd62 	bl	8003798 <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac4);
 8001cd4:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <TIM7_DAC_IRQHandler+0x24>)
 8001cd6:	f001 fd5f 	bl	8003798 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200003a0 	.word	0x200003a0
 8001ce4:	20000130 	.word	0x20000130
 8001ce8:	20000210 	.word	0x20000210

08001cec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <SystemInit+0x20>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <SystemInit+0x20>)
 8001cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d10:	480d      	ldr	r0, [pc, #52]	; (8001d48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d14:	480d      	ldr	r0, [pc, #52]	; (8001d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d16:	490e      	ldr	r1, [pc, #56]	; (8001d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d18:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <LoopForever+0xe>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d1c:	e002      	b.n	8001d24 <LoopCopyDataInit>

08001d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d22:	3304      	adds	r3, #4

08001d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d28:	d3f9      	bcc.n	8001d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2a:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d2c:	4c0b      	ldr	r4, [pc, #44]	; (8001d5c <LoopForever+0x16>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d30:	e001      	b.n	8001d36 <LoopFillZerobss>

08001d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d34:	3204      	adds	r2, #4

08001d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d38:	d3fb      	bcc.n	8001d32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d3a:	f7ff ffd7 	bl	8001cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d3e:	f005 fc19 	bl	8007574 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d42:	f7fe ffd3 	bl	8000cec <main>

08001d46 <LoopForever>:

LoopForever:
    b LoopForever
 8001d46:	e7fe      	b.n	8001d46 <LoopForever>
  ldr   r0, =_estack
 8001d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d50:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001d54:	08007700 	.word	0x08007700
  ldr r2, =_sbss
 8001d58:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001d5c:	200003f4 	.word	0x200003f4

08001d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC1_2_IRQHandler>

08001d62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6c:	2003      	movs	r0, #3
 8001d6e:	f001 fc5f 	bl	8003630 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d72:	2000      	movs	r0, #0
 8001d74:	f000 f80e 	bl	8001d94 <HAL_InitTick>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	71fb      	strb	r3, [r7, #7]
 8001d82:	e001      	b.n	8001d88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d84:	f7ff fd30 	bl	80017e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d88:	79fb      	ldrb	r3, [r7, #7]

}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_InitTick+0x68>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d022      	beq.n	8001dee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_InitTick+0x6c>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_InitTick+0x68>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001db4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f001 fc6a 	bl	8003696 <HAL_SYSTICK_Config>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10f      	bne.n	8001de8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b0f      	cmp	r3, #15
 8001dcc:	d809      	bhi.n	8001de2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd6:	f001 fc36 	bl	8003646 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_InitTick+0x70>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	e007      	b.n	8001df2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	e004      	b.n	8001df2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	e001      	b.n	8001df2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	2000010c 	.word	0x2000010c
 8001e00:	20000104 	.word	0x20000104
 8001e04:	20000108 	.word	0x20000108

08001e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_IncTick+0x1c>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_IncTick+0x20>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	4a03      	ldr	r2, [pc, #12]	; (8001e24 <HAL_IncTick+0x1c>)
 8001e18:	6013      	str	r3, [r2, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	200003f0 	.word	0x200003f0
 8001e28:	2000010c 	.word	0x2000010c

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200003f0 	.word	0x200003f0

08001e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff ffee 	bl	8001e2c <HAL_GetTick>
 8001e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d004      	beq.n	8001e68 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_Delay+0x40>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4413      	add	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e68:	bf00      	nop
 8001e6a:	f7ff ffdf 	bl	8001e2c <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d8f7      	bhi.n	8001e6a <HAL_Delay+0x26>
  {
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	2000010c 	.word	0x2000010c

08001e88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3360      	adds	r3, #96	; 0x60
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <LL_ADC_SetOffset+0x44>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f28:	bf00      	nop
 8001f2a:	371c      	adds	r7, #28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	03fff000 	.word	0x03fff000

08001f38 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3360      	adds	r3, #96	; 0x60
 8001f46:	461a      	mov	r2, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3360      	adds	r3, #96	; 0x60
 8001f74:	461a      	mov	r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f8e:	bf00      	nop
 8001f90:	371c      	adds	r7, #28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b087      	sub	sp, #28
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	3360      	adds	r3, #96	; 0x60
 8001faa:	461a      	mov	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001fc4:	bf00      	nop
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3360      	adds	r3, #96	; 0x60
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ffa:	bf00      	nop
 8001ffc:	371c      	adds	r7, #28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	615a      	str	r2, [r3, #20]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3330      	adds	r3, #48	; 0x30
 800203c:	461a      	mov	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	4413      	add	r3, r2
 800204a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f003 031f 	and.w	r3, r3, #31
 8002056:	211f      	movs	r1, #31
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	401a      	ands	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	0e9b      	lsrs	r3, r3, #26
 8002064:	f003 011f 	and.w	r1, r3, #31
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f003 031f 	and.w	r3, r3, #31
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	431a      	orrs	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002078:	bf00      	nop
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3314      	adds	r3, #20
 8002094:	461a      	mov	r2, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	0e5b      	lsrs	r3, r3, #25
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	4413      	add	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	0d1b      	lsrs	r3, r3, #20
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	2107      	movs	r1, #7
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	401a      	ands	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	0d1b      	lsrs	r3, r3, #20
 80020be:	f003 031f 	and.w	r3, r3, #31
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	fa01 f303 	lsl.w	r3, r1, r3
 80020c8:	431a      	orrs	r2, r3
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020ce:	bf00      	nop
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f4:	43db      	mvns	r3, r3
 80020f6:	401a      	ands	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f003 0318 	and.w	r3, r3, #24
 80020fe:	4908      	ldr	r1, [pc, #32]	; (8002120 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002100:	40d9      	lsrs	r1, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	400b      	ands	r3, r1
 8002106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210a:	431a      	orrs	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	0007ffff 	.word	0x0007ffff

08002124 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002134:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6093      	str	r3, [r2, #8]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800215c:	d101      	bne.n	8002162 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002184:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021ac:	d101      	bne.n	80021b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <LL_ADC_IsEnabled+0x18>
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <LL_ADC_IsEnabled+0x1a>
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d101      	bne.n	80021fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b08      	cmp	r3, #8
 800221e:	d101      	bne.n	8002224 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e1af      	b.n	80025ae <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff fae7 	bl	8001830 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff67 	bl	8002148 <LL_ADC_IsDeepPowerDownEnabled>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d004      	beq.n	800228a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff4d 	bl	8002124 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff82 	bl	8002198 <LL_ADC_IsInternalRegulatorEnabled>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d115      	bne.n	80022c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ff66 	bl	8002170 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022a4:	4b9f      	ldr	r3, [pc, #636]	; (8002524 <HAL_ADC_Init+0x2f0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	099b      	lsrs	r3, r3, #6
 80022aa:	4a9f      	ldr	r2, [pc, #636]	; (8002528 <HAL_ADC_Init+0x2f4>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	099b      	lsrs	r3, r3, #6
 80022b2:	3301      	adds	r3, #1
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022b8:	e002      	b.n	80022c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	3b01      	subs	r3, #1
 80022be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f9      	bne.n	80022ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff ff64 	bl	8002198 <LL_ADC_IsInternalRegulatorEnabled>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10d      	bne.n	80022f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	f043 0210 	orr.w	r2, r3, #16
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ff75 	bl	80021e6 <LL_ADC_REG_IsConversionOngoing>
 80022fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 8148 	bne.w	800259c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 8144 	bne.w	800259c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800231c:	f043 0202 	orr.w	r2, r3, #2
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff49 	bl	80021c0 <LL_ADC_IsEnabled>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d141      	bne.n	80023b8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800233c:	d004      	beq.n	8002348 <HAL_ADC_Init+0x114>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a7a      	ldr	r2, [pc, #488]	; (800252c <HAL_ADC_Init+0x2f8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d10f      	bne.n	8002368 <HAL_ADC_Init+0x134>
 8002348:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800234c:	f7ff ff38 	bl	80021c0 <LL_ADC_IsEnabled>
 8002350:	4604      	mov	r4, r0
 8002352:	4876      	ldr	r0, [pc, #472]	; (800252c <HAL_ADC_Init+0x2f8>)
 8002354:	f7ff ff34 	bl	80021c0 <LL_ADC_IsEnabled>
 8002358:	4603      	mov	r3, r0
 800235a:	4323      	orrs	r3, r4
 800235c:	2b00      	cmp	r3, #0
 800235e:	bf0c      	ite	eq
 8002360:	2301      	moveq	r3, #1
 8002362:	2300      	movne	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	e012      	b.n	800238e <HAL_ADC_Init+0x15a>
 8002368:	4871      	ldr	r0, [pc, #452]	; (8002530 <HAL_ADC_Init+0x2fc>)
 800236a:	f7ff ff29 	bl	80021c0 <LL_ADC_IsEnabled>
 800236e:	4604      	mov	r4, r0
 8002370:	4870      	ldr	r0, [pc, #448]	; (8002534 <HAL_ADC_Init+0x300>)
 8002372:	f7ff ff25 	bl	80021c0 <LL_ADC_IsEnabled>
 8002376:	4603      	mov	r3, r0
 8002378:	431c      	orrs	r4, r3
 800237a:	486f      	ldr	r0, [pc, #444]	; (8002538 <HAL_ADC_Init+0x304>)
 800237c:	f7ff ff20 	bl	80021c0 <LL_ADC_IsEnabled>
 8002380:	4603      	mov	r3, r0
 8002382:	4323      	orrs	r3, r4
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf0c      	ite	eq
 8002388:	2301      	moveq	r3, #1
 800238a:	2300      	movne	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d012      	beq.n	80023b8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800239a:	d004      	beq.n	80023a6 <HAL_ADC_Init+0x172>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a62      	ldr	r2, [pc, #392]	; (800252c <HAL_ADC_Init+0x2f8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_Init+0x176>
 80023a6:	4a65      	ldr	r2, [pc, #404]	; (800253c <HAL_ADC_Init+0x308>)
 80023a8:	e000      	b.n	80023ac <HAL_ADC_Init+0x178>
 80023aa:	4a65      	ldr	r2, [pc, #404]	; (8002540 <HAL_ADC_Init+0x30c>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4619      	mov	r1, r3
 80023b2:	4610      	mov	r0, r2
 80023b4:	f7ff fd68 	bl	8001e88 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7f5b      	ldrb	r3, [r3, #29]
 80023bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80023c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80023ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d106      	bne.n	80023f4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	3b01      	subs	r3, #1
 80023ec:	045b      	lsls	r3, r3, #17
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d009      	beq.n	8002410 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	4b4b      	ldr	r3, [pc, #300]	; (8002544 <HAL_ADC_Init+0x310>)
 8002418:	4013      	ands	r3, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	69b9      	ldr	r1, [r7, #24]
 8002420:	430b      	orrs	r3, r1
 8002422:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fed1 	bl	80021e6 <LL_ADC_REG_IsConversionOngoing>
 8002444:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fede 	bl	800220c <LL_ADC_INJ_IsConversionOngoing>
 8002450:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d17f      	bne.n	8002558 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d17c      	bne.n	8002558 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002462:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800246a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800247a:	f023 0302 	bic.w	r3, r3, #2
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	69b9      	ldr	r1, [r7, #24]
 8002484:	430b      	orrs	r3, r1
 8002486:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d017      	beq.n	80024c0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800249e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6911      	ldr	r1, [r2, #16]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	430b      	orrs	r3, r1
 80024ba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80024be:	e013      	b.n	80024e8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d12a      	bne.n	8002548 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024fc:	f023 0304 	bic.w	r3, r3, #4
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002508:	4311      	orrs	r1, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002514:	430a      	orrs	r2, r1
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0201 	orr.w	r2, r2, #1
 8002520:	611a      	str	r2, [r3, #16]
 8002522:	e019      	b.n	8002558 <HAL_ADC_Init+0x324>
 8002524:	20000104 	.word	0x20000104
 8002528:	053e2d63 	.word	0x053e2d63
 800252c:	50000100 	.word	0x50000100
 8002530:	50000400 	.word	0x50000400
 8002534:	50000500 	.word	0x50000500
 8002538:	50000600 	.word	0x50000600
 800253c:	50000300 	.word	0x50000300
 8002540:	50000700 	.word	0x50000700
 8002544:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0201 	bic.w	r2, r2, #1
 8002556:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d10c      	bne.n	800257a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f023 010f 	bic.w	r1, r3, #15
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	1e5a      	subs	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
 8002578:	e007      	b.n	800258a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 020f 	bic.w	r2, r2, #15
 8002588:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	f043 0201 	orr.w	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	65da      	str	r2, [r3, #92]	; 0x5c
 800259a:	e007      	b.n	80025ac <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	f043 0210 	orr.w	r2, r3, #16
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3724      	adds	r7, #36	; 0x24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd90      	pop	{r4, r7, pc}
 80025b6:	bf00      	nop

080025b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b0b6      	sub	sp, #216	; 0xd8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d102      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x24>
 80025d6:	2302      	movs	r3, #2
 80025d8:	f000 bc13 	b.w	8002e02 <HAL_ADC_ConfigChannel+0x84a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fdfc 	bl	80021e6 <LL_ADC_REG_IsConversionOngoing>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f040 83f3 	bne.w	8002ddc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6859      	ldr	r1, [r3, #4]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	f7ff fd12 	bl	800202c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fdea 	bl	80021e6 <LL_ADC_REG_IsConversionOngoing>
 8002612:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fdf6 	bl	800220c <LL_ADC_INJ_IsConversionOngoing>
 8002620:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002624:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 81d9 	bne.w	80029e0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800262e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002632:	2b00      	cmp	r3, #0
 8002634:	f040 81d4 	bne.w	80029e0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002640:	d10f      	bne.n	8002662 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2200      	movs	r2, #0
 800264c:	4619      	mov	r1, r3
 800264e:	f7ff fd19 	bl	8002084 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fcd3 	bl	8002006 <LL_ADC_SetSamplingTimeCommonConfig>
 8002660:	e00e      	b.n	8002680 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	461a      	mov	r2, r3
 8002670:	f7ff fd08 	bl	8002084 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fcc3 	bl	8002006 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	08db      	lsrs	r3, r3, #3
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d022      	beq.n	80026e8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6919      	ldr	r1, [r3, #16]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026b2:	f7ff fc1d 	bl	8001ef0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6919      	ldr	r1, [r3, #16]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f7ff fc69 	bl	8001f9a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6919      	ldr	r1, [r3, #16]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	7f1b      	ldrb	r3, [r3, #28]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d102      	bne.n	80026de <HAL_ADC_ConfigChannel+0x126>
 80026d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026dc:	e000      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x128>
 80026de:	2300      	movs	r3, #0
 80026e0:	461a      	mov	r2, r3
 80026e2:	f7ff fc75 	bl	8001fd0 <LL_ADC_SetOffsetSaturation>
 80026e6:	e17b      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fc22 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x15c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fc17 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 800270a:	4603      	mov	r3, r0
 800270c:	0e9b      	lsrs	r3, r3, #26
 800270e:	f003 021f 	and.w	r2, r3, #31
 8002712:	e01e      	b.n	8002752 <HAL_ADC_ConfigChannel+0x19a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fc0c 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 8002720:	4603      	mov	r3, r0
 8002722:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002732:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002736:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800273a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002742:	2320      	movs	r3, #32
 8002744:	e004      	b.n	8002750 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002746:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275a:	2b00      	cmp	r3, #0
 800275c:	d105      	bne.n	800276a <HAL_ADC_ConfigChannel+0x1b2>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0e9b      	lsrs	r3, r3, #26
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	e018      	b.n	800279c <HAL_ADC_ConfigChannel+0x1e4>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002776:	fa93 f3a3 	rbit	r3, r3
 800277a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800277e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002782:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002786:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800278e:	2320      	movs	r3, #32
 8002790:	e004      	b.n	800279c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002792:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800279c:	429a      	cmp	r2, r3
 800279e:	d106      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2200      	movs	r2, #0
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fbdb 	bl	8001f64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2101      	movs	r1, #1
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fbbf 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <HAL_ADC_ConfigChannel+0x222>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2101      	movs	r1, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fbb4 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 80027d0:	4603      	mov	r3, r0
 80027d2:	0e9b      	lsrs	r3, r3, #26
 80027d4:	f003 021f 	and.w	r2, r3, #31
 80027d8:	e01e      	b.n	8002818 <HAL_ADC_ConfigChannel+0x260>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2101      	movs	r1, #1
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fba9 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002800:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002808:	2320      	movs	r3, #32
 800280a:	e004      	b.n	8002816 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800280c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002820:	2b00      	cmp	r3, #0
 8002822:	d105      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x278>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	0e9b      	lsrs	r3, r3, #26
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	e018      	b.n	8002862 <HAL_ADC_ConfigChannel+0x2aa>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002844:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002848:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800284c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002854:	2320      	movs	r3, #32
 8002856:	e004      	b.n	8002862 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002858:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002862:	429a      	cmp	r2, r3
 8002864:	d106      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2200      	movs	r2, #0
 800286c:	2101      	movs	r1, #1
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fb78 	bl	8001f64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2102      	movs	r1, #2
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fb5c 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 8002880:	4603      	mov	r3, r0
 8002882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x2e8>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2102      	movs	r1, #2
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fb51 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	0e9b      	lsrs	r3, r3, #26
 800289a:	f003 021f 	and.w	r2, r3, #31
 800289e:	e01e      	b.n	80028de <HAL_ADC_ConfigChannel+0x326>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2102      	movs	r1, #2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fb46 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80028ce:	2320      	movs	r3, #32
 80028d0:	e004      	b.n	80028dc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80028d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d105      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x33e>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	0e9b      	lsrs	r3, r3, #26
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	e016      	b.n	8002924 <HAL_ADC_ConfigChannel+0x36c>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002908:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800290a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800290e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002916:	2320      	movs	r3, #32
 8002918:	e004      	b.n	8002924 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800291a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002924:	429a      	cmp	r2, r3
 8002926:	d106      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2200      	movs	r2, #0
 800292e:	2102      	movs	r1, #2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fb17 	bl	8001f64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2103      	movs	r1, #3
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fafb 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 8002942:	4603      	mov	r3, r0
 8002944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x3aa>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2103      	movs	r1, #3
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff faf0 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 8002958:	4603      	mov	r3, r0
 800295a:	0e9b      	lsrs	r3, r3, #26
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	e017      	b.n	8002992 <HAL_ADC_ConfigChannel+0x3da>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2103      	movs	r1, #3
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fae5 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 800296e:	4603      	mov	r3, r0
 8002970:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800297a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800297c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800297e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002984:	2320      	movs	r3, #32
 8002986:	e003      	b.n	8002990 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299a:	2b00      	cmp	r3, #0
 800299c:	d105      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x3f2>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	0e9b      	lsrs	r3, r3, #26
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	e011      	b.n	80029ce <HAL_ADC_ConfigChannel+0x416>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80029b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80029c2:	2320      	movs	r3, #32
 80029c4:	e003      	b.n	80029ce <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80029c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d106      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2200      	movs	r2, #0
 80029d8:	2103      	movs	r1, #3
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fac2 	bl	8001f64 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fbeb 	bl	80021c0 <LL_ADC_IsEnabled>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f040 813d 	bne.w	8002c6c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6819      	ldr	r1, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	461a      	mov	r2, r3
 8002a00:	f7ff fb6c 	bl	80020dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4aa2      	ldr	r2, [pc, #648]	; (8002c94 <HAL_ADC_ConfigChannel+0x6dc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	f040 812e 	bne.w	8002c6c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10b      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x480>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0e9b      	lsrs	r3, r3, #26
 8002a26:	3301      	adds	r3, #1
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	2b09      	cmp	r3, #9
 8002a2e:	bf94      	ite	ls
 8002a30:	2301      	movls	r3, #1
 8002a32:	2300      	movhi	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e019      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x4b4>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a48:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a50:	2320      	movs	r3, #32
 8002a52:	e003      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	2b09      	cmp	r3, #9
 8002a64:	bf94      	ite	ls
 8002a66:	2301      	movls	r3, #1
 8002a68:	2300      	movhi	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d079      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d107      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x4d4>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	0e9b      	lsrs	r3, r3, #26
 8002a82:	3301      	adds	r3, #1
 8002a84:	069b      	lsls	r3, r3, #26
 8002a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a8a:	e015      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x500>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a9c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	e003      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	069b      	lsls	r3, r3, #26
 8002ab4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x520>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0e9b      	lsrs	r3, r3, #26
 8002aca:	3301      	adds	r3, #1
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	e017      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x550>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002af0:	2320      	movs	r3, #32
 8002af2:	e003      	b.n	8002afc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	3301      	adds	r3, #1
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2101      	movs	r1, #1
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	ea42 0103 	orr.w	r1, r2, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10a      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x576>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	0e9b      	lsrs	r3, r3, #26
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f003 021f 	and.w	r2, r3, #31
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	051b      	lsls	r3, r3, #20
 8002b2c:	e018      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x5a8>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002b46:	2320      	movs	r3, #32
 8002b48:	e003      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	3301      	adds	r3, #1
 8002b54:	f003 021f 	and.w	r2, r3, #31
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b60:	430b      	orrs	r3, r1
 8002b62:	e07e      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d107      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x5c8>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	0e9b      	lsrs	r3, r3, #26
 8002b76:	3301      	adds	r3, #1
 8002b78:	069b      	lsls	r3, r3, #26
 8002b7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b7e:	e015      	b.n	8002bac <HAL_ADC_ConfigChannel+0x5f4>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b90:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002b98:	2320      	movs	r3, #32
 8002b9a:	e003      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	069b      	lsls	r3, r3, #26
 8002ba8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x614>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0e9b      	lsrs	r3, r3, #26
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	e017      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x644>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	61fb      	str	r3, [r7, #28]
  return result;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002be4:	2320      	movs	r3, #32
 8002be6:	e003      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfc:	ea42 0103 	orr.w	r1, r2, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10d      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x670>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	0e9b      	lsrs	r3, r3, #26
 8002c12:	3301      	adds	r3, #1
 8002c14:	f003 021f 	and.w	r2, r3, #31
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3b1e      	subs	r3, #30
 8002c20:	051b      	lsls	r3, r3, #20
 8002c22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c26:	e01b      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x6a8>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	613b      	str	r3, [r7, #16]
  return result;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002c40:	2320      	movs	r3, #32
 8002c42:	e003      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	f003 021f 	and.w	r2, r3, #31
 8002c52:	4613      	mov	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	3b1e      	subs	r3, #30
 8002c5a:	051b      	lsls	r3, r3, #20
 8002c5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c60:	430b      	orrs	r3, r1
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	6892      	ldr	r2, [r2, #8]
 8002c66:	4619      	mov	r1, r3
 8002c68:	f7ff fa0c 	bl	8002084 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_ADC_ConfigChannel+0x6e0>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80be 	beq.w	8002df6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c82:	d004      	beq.n	8002c8e <HAL_ADC_ConfigChannel+0x6d6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <HAL_ADC_ConfigChannel+0x6e4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10a      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x6ec>
 8002c8e:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <HAL_ADC_ConfigChannel+0x6e8>)
 8002c90:	e009      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x6ee>
 8002c92:	bf00      	nop
 8002c94:	407f0000 	.word	0x407f0000
 8002c98:	80080000 	.word	0x80080000
 8002c9c:	50000100 	.word	0x50000100
 8002ca0:	50000300 	.word	0x50000300
 8002ca4:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HAL_ADC_ConfigChannel+0x854>)
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f914 	bl	8001ed4 <LL_ADC_GetCommonPathInternalCh>
 8002cac:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a56      	ldr	r2, [pc, #344]	; (8002e10 <HAL_ADC_ConfigChannel+0x858>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d004      	beq.n	8002cc4 <HAL_ADC_ConfigChannel+0x70c>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a55      	ldr	r2, [pc, #340]	; (8002e14 <HAL_ADC_ConfigChannel+0x85c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d13a      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d134      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd8:	d005      	beq.n	8002ce6 <HAL_ADC_ConfigChannel+0x72e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a4e      	ldr	r2, [pc, #312]	; (8002e18 <HAL_ADC_ConfigChannel+0x860>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	f040 8085 	bne.w	8002df0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cee:	d004      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0x742>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a49      	ldr	r2, [pc, #292]	; (8002e1c <HAL_ADC_ConfigChannel+0x864>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x746>
 8002cfa:	4a49      	ldr	r2, [pc, #292]	; (8002e20 <HAL_ADC_ConfigChannel+0x868>)
 8002cfc:	e000      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x748>
 8002cfe:	4a43      	ldr	r2, [pc, #268]	; (8002e0c <HAL_ADC_ConfigChannel+0x854>)
 8002d00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f7ff f8cf 	bl	8001eae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d10:	4b44      	ldr	r3, [pc, #272]	; (8002e24 <HAL_ADC_ConfigChannel+0x86c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	4a44      	ldr	r2, [pc, #272]	; (8002e28 <HAL_ADC_ConfigChannel+0x870>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	099b      	lsrs	r3, r3, #6
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	4613      	mov	r3, r2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d2a:	e002      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f9      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d38:	e05a      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a3b      	ldr	r2, [pc, #236]	; (8002e2c <HAL_ADC_ConfigChannel+0x874>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d125      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x7d8>
 8002d44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d11f      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a31      	ldr	r2, [pc, #196]	; (8002e1c <HAL_ADC_ConfigChannel+0x864>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d104      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x7ac>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <HAL_ADC_ConfigChannel+0x878>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d047      	beq.n	8002df4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d6c:	d004      	beq.n	8002d78 <HAL_ADC_ConfigChannel+0x7c0>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2a      	ldr	r2, [pc, #168]	; (8002e1c <HAL_ADC_ConfigChannel+0x864>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d101      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x7c4>
 8002d78:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <HAL_ADC_ConfigChannel+0x868>)
 8002d7a:	e000      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x7c6>
 8002d7c:	4a23      	ldr	r2, [pc, #140]	; (8002e0c <HAL_ADC_ConfigChannel+0x854>)
 8002d7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d86:	4619      	mov	r1, r3
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f7ff f890 	bl	8001eae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d8e:	e031      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a27      	ldr	r2, [pc, #156]	; (8002e34 <HAL_ADC_ConfigChannel+0x87c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d12d      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d127      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <HAL_ADC_ConfigChannel+0x864>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d022      	beq.n	8002df6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db8:	d004      	beq.n	8002dc4 <HAL_ADC_ConfigChannel+0x80c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a17      	ldr	r2, [pc, #92]	; (8002e1c <HAL_ADC_ConfigChannel+0x864>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x810>
 8002dc4:	4a16      	ldr	r2, [pc, #88]	; (8002e20 <HAL_ADC_ConfigChannel+0x868>)
 8002dc6:	e000      	b.n	8002dca <HAL_ADC_ConfigChannel+0x812>
 8002dc8:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <HAL_ADC_ConfigChannel+0x854>)
 8002dca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f7ff f86a 	bl	8001eae <LL_ADC_SetCommonPathInternalCh>
 8002dda:	e00c      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002dee:	e002      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002df0:	bf00      	nop
 8002df2:	e000      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002df4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002dfe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	37d8      	adds	r7, #216	; 0xd8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	50000700 	.word	0x50000700
 8002e10:	c3210000 	.word	0xc3210000
 8002e14:	90c00010 	.word	0x90c00010
 8002e18:	50000600 	.word	0x50000600
 8002e1c:	50000100 	.word	0x50000100
 8002e20:	50000300 	.word	0x50000300
 8002e24:	20000104 	.word	0x20000104
 8002e28:	053e2d63 	.word	0x053e2d63
 8002e2c:	c7520000 	.word	0xc7520000
 8002e30:	50000500 	.word	0x50000500
 8002e34:	cb840000 	.word	0xcb840000

08002e38 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4904      	ldr	r1, [pc, #16]	; (8002e58 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	40010400 	.word	0x40010400

08002e5c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <LL_EXTI_EnableIT_32_63+0x20>)
 8002e66:	6a1a      	ldr	r2, [r3, #32]
 8002e68:	4904      	ldr	r1, [pc, #16]	; (8002e7c <LL_EXTI_EnableIT_32_63+0x20>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	620b      	str	r3, [r1, #32]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	40010400 	.word	0x40010400

08002e80 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <LL_EXTI_DisableIT_0_31+0x24>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	4904      	ldr	r1, [pc, #16]	; (8002ea4 <LL_EXTI_DisableIT_0_31+0x24>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40010400 	.word	0x40010400

08002ea8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <LL_EXTI_DisableIT_32_63+0x24>)
 8002eb2:	6a1a      	ldr	r2, [r3, #32]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	4904      	ldr	r1, [pc, #16]	; (8002ecc <LL_EXTI_DisableIT_32_63+0x24>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	620b      	str	r3, [r1, #32]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40010400 	.word	0x40010400

08002ed0 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	4904      	ldr	r1, [pc, #16]	; (8002ef0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]

}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40010400 	.word	0x40010400

08002ef4 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f00:	4904      	ldr	r1, [pc, #16]	; (8002f14 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40010400 	.word	0x40010400

08002f18 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	4904      	ldr	r1, [pc, #16]	; (8002f3c <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40010400 	.word	0x40010400

08002f40 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	4904      	ldr	r1, [pc, #16]	; (8002f64 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40010400 	.word	0x40010400

08002f68 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	4904      	ldr	r1, [pc, #16]	; (8002f88 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	608b      	str	r3, [r1, #8]

}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	40010400 	.word	0x40010400

08002f8c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f98:	4904      	ldr	r1, [pc, #16]	; (8002fac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40010400 	.word	0x40010400

08002fb0 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002fb8:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	4904      	ldr	r1, [pc, #16]	; (8002fd4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]

}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40010400 	.word	0x40010400

08002fd8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	4904      	ldr	r1, [pc, #16]	; (8002ffc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40010400 	.word	0x40010400

08003000 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	4904      	ldr	r1, [pc, #16]	; (8003020 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4313      	orrs	r3, r2
 8003012:	60cb      	str	r3, [r1, #12]
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40010400 	.word	0x40010400

08003024 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800302e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003030:	4904      	ldr	r1, [pc, #16]	; (8003044 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4313      	orrs	r3, r2
 8003036:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	40010400 	.word	0x40010400

08003048 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	43db      	mvns	r3, r3
 8003058:	4904      	ldr	r1, [pc, #16]	; (800306c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800305a:	4013      	ands	r3, r2
 800305c:	60cb      	str	r3, [r1, #12]
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40010400 	.word	0x40010400

08003070 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800307a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	43db      	mvns	r3, r3
 8003080:	4904      	ldr	r1, [pc, #16]	; (8003094 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003082:	4013      	ands	r3, r2
 8003084:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40010400 	.word	0x40010400

08003098 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80030a0:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6153      	str	r3, [r2, #20]
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40010400 	.word	0x40010400

080030b8 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6353      	str	r3, [r2, #52]	; 0x34
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40010400 	.word	0x40010400

080030d8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d102      	bne.n	80030f4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	77fb      	strb	r3, [r7, #31]
 80030f2:	e180      	b.n	80033f6 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003102:	d102      	bne.n	800310a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	e175      	b.n	80033f6 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	7f5b      	ldrb	r3, [r3, #29]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d108      	bne.n	8003126 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7fe fbc3 	bl	80018ac <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003130:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b98      	ldr	r3, [pc, #608]	; (80033b8 <HAL_COMP_Init+0x2e0>)
 8003158:	4013      	ands	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	6979      	ldr	r1, [r7, #20]
 8003160:	430b      	orrs	r3, r1
 8003162:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d015      	beq.n	800319e <HAL_COMP_Init+0xc6>
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d112      	bne.n	800319e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003178:	4b90      	ldr	r3, [pc, #576]	; (80033bc <HAL_COMP_Init+0x2e4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	099b      	lsrs	r3, r3, #6
 800317e:	4a90      	ldr	r2, [pc, #576]	; (80033c0 <HAL_COMP_Init+0x2e8>)
 8003180:	fba2 2303 	umull	r2, r3, r2, r3
 8003184:	099a      	lsrs	r2, r3, #6
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003190:	e002      	b.n	8003198 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	3b01      	subs	r3, #1
 8003196:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f9      	bne.n	8003192 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a88      	ldr	r2, [pc, #544]	; (80033c4 <HAL_COMP_Init+0x2ec>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d028      	beq.n	80031fa <HAL_COMP_Init+0x122>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a86      	ldr	r2, [pc, #536]	; (80033c8 <HAL_COMP_Init+0x2f0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d020      	beq.n	80031f4 <HAL_COMP_Init+0x11c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a85      	ldr	r2, [pc, #532]	; (80033cc <HAL_COMP_Init+0x2f4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d018      	beq.n	80031ee <HAL_COMP_Init+0x116>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a83      	ldr	r2, [pc, #524]	; (80033d0 <HAL_COMP_Init+0x2f8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d010      	beq.n	80031e8 <HAL_COMP_Init+0x110>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a82      	ldr	r2, [pc, #520]	; (80033d4 <HAL_COMP_Init+0x2fc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d008      	beq.n	80031e2 <HAL_COMP_Init+0x10a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a80      	ldr	r2, [pc, #512]	; (80033d8 <HAL_COMP_Init+0x300>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_COMP_Init+0x106>
 80031da:	2301      	movs	r3, #1
 80031dc:	e00f      	b.n	80031fe <HAL_COMP_Init+0x126>
 80031de:	2302      	movs	r3, #2
 80031e0:	e00d      	b.n	80031fe <HAL_COMP_Init+0x126>
 80031e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80031e6:	e00a      	b.n	80031fe <HAL_COMP_Init+0x126>
 80031e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031ec:	e007      	b.n	80031fe <HAL_COMP_Init+0x126>
 80031ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80031f2:	e004      	b.n	80031fe <HAL_COMP_Init+0x126>
 80031f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031f8:	e001      	b.n	80031fe <HAL_COMP_Init+0x126>
 80031fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031fe:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80b6 	beq.w	800337a <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2b00      	cmp	r3, #0
 8003218:	d011      	beq.n	800323e <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a6e      	ldr	r2, [pc, #440]	; (80033d8 <HAL_COMP_Init+0x300>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d004      	beq.n	800322e <HAL_COMP_Init+0x156>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a6c      	ldr	r2, [pc, #432]	; (80033dc <HAL_COMP_Init+0x304>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d103      	bne.n	8003236 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800322e:	6938      	ldr	r0, [r7, #16]
 8003230:	f7ff feac 	bl	8002f8c <LL_EXTI_EnableRisingTrig_32_63>
 8003234:	e014      	b.n	8003260 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003236:	6938      	ldr	r0, [r7, #16]
 8003238:	f7ff fe96 	bl	8002f68 <LL_EXTI_EnableRisingTrig_0_31>
 800323c:	e010      	b.n	8003260 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a65      	ldr	r2, [pc, #404]	; (80033d8 <HAL_COMP_Init+0x300>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d004      	beq.n	8003252 <HAL_COMP_Init+0x17a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a63      	ldr	r2, [pc, #396]	; (80033dc <HAL_COMP_Init+0x304>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d103      	bne.n	800325a <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8003252:	6938      	ldr	r0, [r7, #16]
 8003254:	f7ff fec0 	bl	8002fd8 <LL_EXTI_DisableRisingTrig_32_63>
 8003258:	e002      	b.n	8003260 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800325a:	6938      	ldr	r0, [r7, #16]
 800325c:	f7ff fea8 	bl	8002fb0 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b00      	cmp	r3, #0
 800326a:	d011      	beq.n	8003290 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a59      	ldr	r2, [pc, #356]	; (80033d8 <HAL_COMP_Init+0x300>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_COMP_Init+0x1a8>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a58      	ldr	r2, [pc, #352]	; (80033dc <HAL_COMP_Init+0x304>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d103      	bne.n	8003288 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8003280:	6938      	ldr	r0, [r7, #16]
 8003282:	f7ff fecf 	bl	8003024 <LL_EXTI_EnableFallingTrig_32_63>
 8003286:	e014      	b.n	80032b2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003288:	6938      	ldr	r0, [r7, #16]
 800328a:	f7ff feb9 	bl	8003000 <LL_EXTI_EnableFallingTrig_0_31>
 800328e:	e010      	b.n	80032b2 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a50      	ldr	r2, [pc, #320]	; (80033d8 <HAL_COMP_Init+0x300>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d004      	beq.n	80032a4 <HAL_COMP_Init+0x1cc>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a4f      	ldr	r2, [pc, #316]	; (80033dc <HAL_COMP_Init+0x304>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d103      	bne.n	80032ac <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80032a4:	6938      	ldr	r0, [r7, #16]
 80032a6:	f7ff fee3 	bl	8003070 <LL_EXTI_DisableFallingTrig_32_63>
 80032aa:	e002      	b.n	80032b2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80032ac:	6938      	ldr	r0, [r7, #16]
 80032ae:	f7ff fecb 	bl	8003048 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a48      	ldr	r2, [pc, #288]	; (80033d8 <HAL_COMP_Init+0x300>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_COMP_Init+0x1ee>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a46      	ldr	r2, [pc, #280]	; (80033dc <HAL_COMP_Init+0x304>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d103      	bne.n	80032ce <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80032c6:	6938      	ldr	r0, [r7, #16]
 80032c8:	f7ff fef6 	bl	80030b8 <LL_EXTI_ClearFlag_32_63>
 80032cc:	e002      	b.n	80032d4 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80032ce:	6938      	ldr	r0, [r7, #16]
 80032d0:	f7ff fee2 	bl	8003098 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d011      	beq.n	8003304 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a3c      	ldr	r2, [pc, #240]	; (80033d8 <HAL_COMP_Init+0x300>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d004      	beq.n	80032f4 <HAL_COMP_Init+0x21c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a3b      	ldr	r2, [pc, #236]	; (80033dc <HAL_COMP_Init+0x304>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d103      	bne.n	80032fc <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80032f4:	6938      	ldr	r0, [r7, #16]
 80032f6:	f7ff fdfd 	bl	8002ef4 <LL_EXTI_EnableEvent_32_63>
 80032fa:	e014      	b.n	8003326 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80032fc:	6938      	ldr	r0, [r7, #16]
 80032fe:	f7ff fde7 	bl	8002ed0 <LL_EXTI_EnableEvent_0_31>
 8003302:	e010      	b.n	8003326 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a33      	ldr	r2, [pc, #204]	; (80033d8 <HAL_COMP_Init+0x300>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d004      	beq.n	8003318 <HAL_COMP_Init+0x240>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a32      	ldr	r2, [pc, #200]	; (80033dc <HAL_COMP_Init+0x304>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d103      	bne.n	8003320 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8003318:	6938      	ldr	r0, [r7, #16]
 800331a:	f7ff fe11 	bl	8002f40 <LL_EXTI_DisableEvent_32_63>
 800331e:	e002      	b.n	8003326 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8003320:	6938      	ldr	r0, [r7, #16]
 8003322:	f7ff fdf9 	bl	8002f18 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d011      	beq.n	8003356 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a28      	ldr	r2, [pc, #160]	; (80033d8 <HAL_COMP_Init+0x300>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d004      	beq.n	8003346 <HAL_COMP_Init+0x26e>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a26      	ldr	r2, [pc, #152]	; (80033dc <HAL_COMP_Init+0x304>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d103      	bne.n	800334e <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8003346:	6938      	ldr	r0, [r7, #16]
 8003348:	f7ff fd88 	bl	8002e5c <LL_EXTI_EnableIT_32_63>
 800334c:	e04b      	b.n	80033e6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800334e:	6938      	ldr	r0, [r7, #16]
 8003350:	f7ff fd72 	bl	8002e38 <LL_EXTI_EnableIT_0_31>
 8003354:	e047      	b.n	80033e6 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <HAL_COMP_Init+0x300>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d004      	beq.n	800336a <HAL_COMP_Init+0x292>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_COMP_Init+0x304>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d103      	bne.n	8003372 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800336a:	6938      	ldr	r0, [r7, #16]
 800336c:	f7ff fd9c 	bl	8002ea8 <LL_EXTI_DisableIT_32_63>
 8003370:	e039      	b.n	80033e6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8003372:	6938      	ldr	r0, [r7, #16]
 8003374:	f7ff fd84 	bl	8002e80 <LL_EXTI_DisableIT_0_31>
 8003378:	e035      	b.n	80033e6 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <HAL_COMP_Init+0x300>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_COMP_Init+0x2b6>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a14      	ldr	r2, [pc, #80]	; (80033dc <HAL_COMP_Init+0x304>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d103      	bne.n	8003396 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800338e:	6938      	ldr	r0, [r7, #16]
 8003390:	f7ff fdd6 	bl	8002f40 <LL_EXTI_DisableEvent_32_63>
 8003394:	e002      	b.n	800339c <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003396:	6938      	ldr	r0, [r7, #16]
 8003398:	f7ff fdbe 	bl	8002f18 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0d      	ldr	r2, [pc, #52]	; (80033d8 <HAL_COMP_Init+0x300>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d004      	beq.n	80033b0 <HAL_COMP_Init+0x2d8>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a0c      	ldr	r2, [pc, #48]	; (80033dc <HAL_COMP_Init+0x304>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d117      	bne.n	80033e0 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80033b0:	6938      	ldr	r0, [r7, #16]
 80033b2:	f7ff fd79 	bl	8002ea8 <LL_EXTI_DisableIT_32_63>
 80033b6:	e016      	b.n	80033e6 <HAL_COMP_Init+0x30e>
 80033b8:	ff007e0f 	.word	0xff007e0f
 80033bc:	20000104 	.word	0x20000104
 80033c0:	053e2d63 	.word	0x053e2d63
 80033c4:	40010200 	.word	0x40010200
 80033c8:	40010204 	.word	0x40010204
 80033cc:	40010208 	.word	0x40010208
 80033d0:	4001020c 	.word	0x4001020c
 80033d4:	40010210 	.word	0x40010210
 80033d8:	40010214 	.word	0x40010214
 80033dc:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80033e0:	6938      	ldr	r0, [r7, #16]
 80033e2:	f7ff fd4d 	bl	8002e80 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	7f5b      	ldrb	r3, [r3, #29]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d102      	bne.n	80033f6 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80033f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3720      	adds	r7, #32
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003408:	2300      	movs	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
 800341a:	e02e      	b.n	800347a <HAL_COMP_Start+0x7a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800342a:	d102      	bne.n	8003432 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
 8003430:	e023      	b.n	800347a <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	7f5b      	ldrb	r3, [r3, #29]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d11c      	bne.n	8003476 <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 8003452:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <HAL_COMP_Start+0x88>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a0d      	ldr	r2, [pc, #52]	; (800348c <HAL_COMP_Start+0x8c>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	0cda      	lsrs	r2, r3, #19
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003466:	e002      	b.n	800346e <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	3b01      	subs	r3, #1
 800346c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f9      	bne.n	8003468 <HAL_COMP_Start+0x68>
 8003474:	e001      	b.n	800347a <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800347a:	7bfb      	ldrb	r3, [r7, #15]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	20000104 	.word	0x20000104
 800348c:	431bde83 	.word	0x431bde83

08003490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <__NVIC_SetPriorityGrouping+0x44>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034ac:	4013      	ands	r3, r2
 80034ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034c2:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <__NVIC_SetPriorityGrouping+0x44>)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	60d3      	str	r3, [r2, #12]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <__NVIC_GetPriorityGrouping+0x18>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	0a1b      	lsrs	r3, r3, #8
 80034e2:	f003 0307 	and.w	r3, r3, #7
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	2b00      	cmp	r3, #0
 8003504:	db0b      	blt.n	800351e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	f003 021f 	and.w	r2, r3, #31
 800350c:	4907      	ldr	r1, [pc, #28]	; (800352c <__NVIC_EnableIRQ+0x38>)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	2001      	movs	r0, #1
 8003516:	fa00 f202 	lsl.w	r2, r0, r2
 800351a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000e100 	.word	0xe000e100

08003530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	2b00      	cmp	r3, #0
 8003542:	db0a      	blt.n	800355a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	490c      	ldr	r1, [pc, #48]	; (800357c <__NVIC_SetPriority+0x4c>)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	440b      	add	r3, r1
 8003554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003558:	e00a      	b.n	8003570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4908      	ldr	r1, [pc, #32]	; (8003580 <__NVIC_SetPriority+0x50>)
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	3b04      	subs	r3, #4
 8003568:	0112      	lsls	r2, r2, #4
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	440b      	add	r3, r1
 800356e:	761a      	strb	r2, [r3, #24]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000e100 	.word	0xe000e100
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003584:	b480      	push	{r7}
 8003586:	b089      	sub	sp, #36	; 0x24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f1c3 0307 	rsb	r3, r3, #7
 800359e:	2b04      	cmp	r3, #4
 80035a0:	bf28      	it	cs
 80035a2:	2304      	movcs	r3, #4
 80035a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2b06      	cmp	r3, #6
 80035ac:	d902      	bls.n	80035b4 <NVIC_EncodePriority+0x30>
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3b03      	subs	r3, #3
 80035b2:	e000      	b.n	80035b6 <NVIC_EncodePriority+0x32>
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b8:	f04f 32ff 	mov.w	r2, #4294967295
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43da      	mvns	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	401a      	ands	r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035cc:	f04f 31ff 	mov.w	r1, #4294967295
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	43d9      	mvns	r1, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035dc:	4313      	orrs	r3, r2
         );
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3724      	adds	r7, #36	; 0x24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035fc:	d301      	bcc.n	8003602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fe:	2301      	movs	r3, #1
 8003600:	e00f      	b.n	8003622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003602:	4a0a      	ldr	r2, [pc, #40]	; (800362c <SysTick_Config+0x40>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360a:	210f      	movs	r1, #15
 800360c:	f04f 30ff 	mov.w	r0, #4294967295
 8003610:	f7ff ff8e 	bl	8003530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <SysTick_Config+0x40>)
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361a:	4b04      	ldr	r3, [pc, #16]	; (800362c <SysTick_Config+0x40>)
 800361c:	2207      	movs	r2, #7
 800361e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	e000e010 	.word	0xe000e010

08003630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff ff29 	bl	8003490 <__NVIC_SetPriorityGrouping>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003654:	f7ff ff40 	bl	80034d8 <__NVIC_GetPriorityGrouping>
 8003658:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	6978      	ldr	r0, [r7, #20]
 8003660:	f7ff ff90 	bl	8003584 <NVIC_EncodePriority>
 8003664:	4602      	mov	r2, r0
 8003666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff5f 	bl	8003530 <__NVIC_SetPriority>
}
 8003672:	bf00      	nop
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	4603      	mov	r3, r0
 8003682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff ff33 	bl	80034f4 <__NVIC_EnableIRQ>
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff ffa4 	bl	80035ec <SysTick_Config>
 80036a4:	4603      	mov	r3, r0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e014      	b.n	80036ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	791b      	ldrb	r3, [r3, #4]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d105      	bne.n	80036d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7fe f93d 	bl	8001950 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2202      	movs	r2, #2
 80036da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	795b      	ldrb	r3, [r3, #5]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_DAC_Start+0x16>
 8003704:	2302      	movs	r3, #2
 8003706:	e043      	b.n	8003790 <HAL_DAC_Start+0x9e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2201      	movs	r2, #1
 8003722:	409a      	lsls	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800372c:	2001      	movs	r0, #1
 800372e:	f7fe fb89 	bl	8001e44 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10f      	bne.n	8003758 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003742:	2b02      	cmp	r3, #2
 8003744:	d11d      	bne.n	8003782 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0201 	orr.w	r2, r2, #1
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	e014      	b.n	8003782 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2102      	movs	r1, #2
 800376a:	fa01 f303 	lsl.w	r3, r1, r3
 800376e:	429a      	cmp	r2, r3
 8003770:	d107      	bne.n	8003782 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0202 	orr.w	r2, r2, #2
 8003780:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ae:	d120      	bne.n	80037f2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037be:	d118      	bne.n	80037f2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2204      	movs	r2, #4
 80037c4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f043 0201 	orr.w	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037ea:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f855 	bl	800389c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003800:	d120      	bne.n	8003844 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800380c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003810:	d118      	bne.n	8003844 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2204      	movs	r2, #4
 8003816:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f043 0202 	orr.w	r2, r3, #2
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800382c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800383c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fa15 	bl	8003c6e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d105      	bne.n	800387c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	3308      	adds	r3, #8
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	e004      	b.n	8003886 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	3314      	adds	r3, #20
 8003884:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	461a      	mov	r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	; 0x28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	795b      	ldrb	r3, [r3, #5]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_DAC_ConfigChannel+0x18>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e192      	b.n	8003bee <HAL_DAC_ConfigChannel+0x33e>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2202      	movs	r2, #2
 80038d2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d174      	bne.n	80039c6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80038dc:	f7fe faa6 	bl	8001e2c <HAL_GetTick>
 80038e0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d134      	bne.n	8003952 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80038e8:	e011      	b.n	800390e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80038ea:	f7fe fa9f 	bl	8001e2c <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d90a      	bls.n	800390e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f043 0208 	orr.w	r2, r3, #8
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2203      	movs	r2, #3
 8003908:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e16f      	b.n	8003bee <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e6      	bne.n	80038ea <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800391c:	2001      	movs	r0, #1
 800391e:	f7fe fa91 	bl	8001e44 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800392a:	641a      	str	r2, [r3, #64]	; 0x40
 800392c:	e01e      	b.n	800396c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800392e:	f7fe fa7d 	bl	8001e2c <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d90a      	bls.n	8003952 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f043 0208 	orr.w	r2, r3, #8
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2203      	movs	r2, #3
 800394c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e14d      	b.n	8003bee <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003958:	2b00      	cmp	r3, #0
 800395a:	dbe8      	blt.n	800392e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800395c:	2001      	movs	r0, #1
 800395e:	f7fe fa71 	bl	8001e44 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800396a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800397c:	fa01 f303 	lsl.w	r3, r1, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	ea02 0103 	and.w	r1, r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	409a      	lsls	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	21ff      	movs	r1, #255	; 0xff
 80039a8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	ea02 0103 	and.w	r1, r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	409a      	lsls	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d11d      	bne.n	8003a0a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	221f      	movs	r2, #31
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e6:	4013      	ands	r3, r2
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fe:	4313      	orrs	r3, r2
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	2207      	movs	r2, #7
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	4013      	ands	r3, r2
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d102      	bne.n	8003a34 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	623b      	str	r3, [r7, #32]
 8003a32:	e00f      	b.n	8003a54 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d102      	bne.n	8003a42 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	623b      	str	r3, [r7, #32]
 8003a40:	e008      	b.n	8003a54 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d102      	bne.n	8003a50 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	623b      	str	r3, [r7, #32]
 8003a4e:	e001      	b.n	8003a54 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	6a3a      	ldr	r2, [r7, #32]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a76:	4013      	ands	r3, r2
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	791b      	ldrb	r3, [r3, #4]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d102      	bne.n	8003a88 <HAL_DAC_ConfigChannel+0x1d8>
 8003a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a86:	e000      	b.n	8003a8a <HAL_DAC_ConfigChannel+0x1da>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	795b      	ldrb	r3, [r3, #5]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d102      	bne.n	8003ab4 <HAL_DAC_ConfigChannel+0x204>
 8003aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ab2:	e000      	b.n	8003ab6 <HAL_DAC_ConfigChannel+0x206>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d114      	bne.n	8003af6 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003acc:	f001 f89e 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8003ad0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	4a48      	ldr	r2, [pc, #288]	; (8003bf8 <HAL_DAC_ConfigChannel+0x348>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d904      	bls.n	8003ae4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae2:	e00f      	b.n	8003b04 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	4a45      	ldr	r2, [pc, #276]	; (8003bfc <HAL_DAC_ConfigChannel+0x34c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d90a      	bls.n	8003b02 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
 8003af4:	e006      	b.n	8003b04 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afc:	4313      	orrs	r3, r2
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
 8003b00:	e000      	b.n	8003b04 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003b02:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b12:	4313      	orrs	r3, r2
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6819      	ldr	r1, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43da      	mvns	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	400a      	ands	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43db      	mvns	r3, r3
 8003b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b56:	4013      	ands	r3, r2
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b78:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6819      	ldr	r1, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	22c0      	movs	r2, #192	; 0xc0
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43da      	mvns	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	400a      	ands	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	089b      	lsrs	r3, r3, #2
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	021b      	lsls	r3, r3, #8
 8003baa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	ea02 0103 	and.w	r1, r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3728      	adds	r7, #40	; 0x28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	09896800 	.word	0x09896800
 8003bfc:	04c4b400 	.word	0x04c4b400

08003c00 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	795b      	ldrb	r3, [r3, #5]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_DACEx_TriangleWaveGenerate+0x18>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e024      	b.n	8003c62 <HAL_DACEx_TriangleWaveGenerate+0x62>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2202      	movs	r2, #2
 8003c22:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8003c34:	fa01 f303 	lsl.w	r3, r1, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	ea02 0103 	and.w	r1, r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d005      	beq.n	8003ca6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2204      	movs	r2, #4
 8003c9e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
 8003ca4:	e037      	b.n	8003d16 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 020e 	bic.w	r2, r2, #14
 8003cb4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cc4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f003 021f 	and.w	r2, r3, #31
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cf2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00c      	beq.n	8003d16 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d0a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d14:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d00d      	beq.n	8003d68 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2204      	movs	r2, #4
 8003d50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	73fb      	strb	r3, [r7, #15]
 8003d66:	e047      	b.n	8003df8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 020e 	bic.w	r2, r2, #14
 8003d76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9c:	f003 021f 	and.w	r2, r3, #31
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	2101      	movs	r1, #1
 8003da6:	fa01 f202 	lsl.w	r2, r1, r2
 8003daa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003db4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00c      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dcc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003dd6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	4798      	blx	r3
    }
  }
  return status;
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e12:	e15a      	b.n	80040ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	2101      	movs	r1, #1
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	4013      	ands	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 814c 	beq.w	80040c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d00b      	beq.n	8003e4c <HAL_GPIO_Init+0x48>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d007      	beq.n	8003e4c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e40:	2b11      	cmp	r3, #17
 8003e42:	d003      	beq.n	8003e4c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b12      	cmp	r3, #18
 8003e4a:	d130      	bne.n	8003eae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	2203      	movs	r2, #3
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4013      	ands	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e82:	2201      	movs	r2, #1
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	091b      	lsrs	r3, r3, #4
 8003e98:	f003 0201 	and.w	r2, r3, #1
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	2203      	movs	r2, #3
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_Init+0xea>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b12      	cmp	r3, #18
 8003eec:	d123      	bne.n	8003f36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	08da      	lsrs	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3208      	adds	r2, #8
 8003ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	220f      	movs	r2, #15
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	08da      	lsrs	r2, r3, #3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3208      	adds	r2, #8
 8003f30:	6939      	ldr	r1, [r7, #16]
 8003f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	2203      	movs	r2, #3
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 0203 	and.w	r2, r3, #3
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80a6 	beq.w	80040c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f78:	4b5b      	ldr	r3, [pc, #364]	; (80040e8 <HAL_GPIO_Init+0x2e4>)
 8003f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7c:	4a5a      	ldr	r2, [pc, #360]	; (80040e8 <HAL_GPIO_Init+0x2e4>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6613      	str	r3, [r2, #96]	; 0x60
 8003f84:	4b58      	ldr	r3, [pc, #352]	; (80040e8 <HAL_GPIO_Init+0x2e4>)
 8003f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f90:	4a56      	ldr	r2, [pc, #344]	; (80040ec <HAL_GPIO_Init+0x2e8>)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	089b      	lsrs	r3, r3, #2
 8003f96:	3302      	adds	r3, #2
 8003f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	220f      	movs	r2, #15
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fba:	d01f      	beq.n	8003ffc <HAL_GPIO_Init+0x1f8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a4c      	ldr	r2, [pc, #304]	; (80040f0 <HAL_GPIO_Init+0x2ec>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d019      	beq.n	8003ff8 <HAL_GPIO_Init+0x1f4>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a4b      	ldr	r2, [pc, #300]	; (80040f4 <HAL_GPIO_Init+0x2f0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <HAL_GPIO_Init+0x1f0>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a4a      	ldr	r2, [pc, #296]	; (80040f8 <HAL_GPIO_Init+0x2f4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00d      	beq.n	8003ff0 <HAL_GPIO_Init+0x1ec>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a49      	ldr	r2, [pc, #292]	; (80040fc <HAL_GPIO_Init+0x2f8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d007      	beq.n	8003fec <HAL_GPIO_Init+0x1e8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a48      	ldr	r2, [pc, #288]	; (8004100 <HAL_GPIO_Init+0x2fc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d101      	bne.n	8003fe8 <HAL_GPIO_Init+0x1e4>
 8003fe4:	2305      	movs	r3, #5
 8003fe6:	e00a      	b.n	8003ffe <HAL_GPIO_Init+0x1fa>
 8003fe8:	2306      	movs	r3, #6
 8003fea:	e008      	b.n	8003ffe <HAL_GPIO_Init+0x1fa>
 8003fec:	2304      	movs	r3, #4
 8003fee:	e006      	b.n	8003ffe <HAL_GPIO_Init+0x1fa>
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e004      	b.n	8003ffe <HAL_GPIO_Init+0x1fa>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e002      	b.n	8003ffe <HAL_GPIO_Init+0x1fa>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <HAL_GPIO_Init+0x1fa>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	f002 0203 	and.w	r2, r2, #3
 8004004:	0092      	lsls	r2, r2, #2
 8004006:	4093      	lsls	r3, r2
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800400e:	4937      	ldr	r1, [pc, #220]	; (80040ec <HAL_GPIO_Init+0x2e8>)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	089b      	lsrs	r3, r3, #2
 8004014:	3302      	adds	r3, #2
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800401c:	4b39      	ldr	r3, [pc, #228]	; (8004104 <HAL_GPIO_Init+0x300>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	43db      	mvns	r3, r3
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4013      	ands	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004040:	4a30      	ldr	r2, [pc, #192]	; (8004104 <HAL_GPIO_Init+0x300>)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004046:	4b2f      	ldr	r3, [pc, #188]	; (8004104 <HAL_GPIO_Init+0x300>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	43db      	mvns	r3, r3
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4013      	ands	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800406a:	4a26      	ldr	r2, [pc, #152]	; (8004104 <HAL_GPIO_Init+0x300>)
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004070:	4b24      	ldr	r3, [pc, #144]	; (8004104 <HAL_GPIO_Init+0x300>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	43db      	mvns	r3, r3
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4013      	ands	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004094:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <HAL_GPIO_Init+0x300>)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800409a:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <HAL_GPIO_Init+0x300>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	43db      	mvns	r3, r3
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4013      	ands	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040be:	4a11      	ldr	r2, [pc, #68]	; (8004104 <HAL_GPIO_Init+0x300>)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	3301      	adds	r3, #1
 80040c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f47f ae9d 	bne.w	8003e14 <HAL_GPIO_Init+0x10>
  }
}
 80040da:	bf00      	nop
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40010000 	.word	0x40010000
 80040f0:	48000400 	.word	0x48000400
 80040f4:	48000800 	.word	0x48000800
 80040f8:	48000c00 	.word	0x48000c00
 80040fc:	48001000 	.word	0x48001000
 8004100:	48001400 	.word	0x48001400
 8004104:	40010400 	.word	0x40010400

08004108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	807b      	strh	r3, [r7, #2]
 8004114:	4613      	mov	r3, r2
 8004116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004118:	787b      	ldrb	r3, [r7, #1]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800411e:	887a      	ldrh	r2, [r7, #2]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004124:	e002      	b.n	800412c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004126:	887a      	ldrh	r2, [r7, #2]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d141      	bne.n	80041ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004146:	4b4b      	ldr	r3, [pc, #300]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800414e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004152:	d131      	bne.n	80041b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004154:	4b47      	ldr	r3, [pc, #284]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800415a:	4a46      	ldr	r2, [pc, #280]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800415c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004160:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004164:	4b43      	ldr	r3, [pc, #268]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800416c:	4a41      	ldr	r2, [pc, #260]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004172:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004174:	4b40      	ldr	r3, [pc, #256]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2232      	movs	r2, #50	; 0x32
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	4a3f      	ldr	r2, [pc, #252]	; (800427c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	0c9b      	lsrs	r3, r3, #18
 8004186:	3301      	adds	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800418a:	e002      	b.n	8004192 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3b01      	subs	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004192:	4b38      	ldr	r3, [pc, #224]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419e:	d102      	bne.n	80041a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f2      	bne.n	800418c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041a6:	4b33      	ldr	r3, [pc, #204]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b2:	d158      	bne.n	8004266 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e057      	b.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041b8:	4b2e      	ldr	r3, [pc, #184]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041be:	4a2d      	ldr	r2, [pc, #180]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041c8:	e04d      	b.n	8004266 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d0:	d141      	bne.n	8004256 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041d2:	4b28      	ldr	r3, [pc, #160]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041de:	d131      	bne.n	8004244 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041e0:	4b24      	ldr	r3, [pc, #144]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e6:	4a23      	ldr	r2, [pc, #140]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041f0:	4b20      	ldr	r3, [pc, #128]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041f8:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004200:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2232      	movs	r2, #50	; 0x32
 8004206:	fb02 f303 	mul.w	r3, r2, r3
 800420a:	4a1c      	ldr	r2, [pc, #112]	; (800427c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800420c:	fba2 2303 	umull	r2, r3, r2, r3
 8004210:	0c9b      	lsrs	r3, r3, #18
 8004212:	3301      	adds	r3, #1
 8004214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004216:	e002      	b.n	800421e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3b01      	subs	r3, #1
 800421c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800421e:	4b15      	ldr	r3, [pc, #84]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422a:	d102      	bne.n	8004232 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f2      	bne.n	8004218 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004232:	4b10      	ldr	r3, [pc, #64]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800423e:	d112      	bne.n	8004266 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e011      	b.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800424a:	4a0a      	ldr	r2, [pc, #40]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800424c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004250:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004254:	e007      	b.n	8004266 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800425e:	4a05      	ldr	r2, [pc, #20]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004264:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	40007000 	.word	0x40007000
 8004278:	20000104 	.word	0x20000104
 800427c:	431bde83 	.word	0x431bde83

08004280 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	4a04      	ldr	r2, [pc, #16]	; (800429c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800428a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800428e:	6093      	str	r3, [r2, #8]
}
 8004290:	bf00      	nop
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40007000 	.word	0x40007000

080042a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e308      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d075      	beq.n	80043aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042be:	4ba3      	ldr	r3, [pc, #652]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c8:	4ba0      	ldr	r3, [pc, #640]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b0c      	cmp	r3, #12
 80042d6:	d102      	bne.n	80042de <HAL_RCC_OscConfig+0x3e>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d002      	beq.n	80042e4 <HAL_RCC_OscConfig+0x44>
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d10b      	bne.n	80042fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e4:	4b99      	ldr	r3, [pc, #612]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d05b      	beq.n	80043a8 <HAL_RCC_OscConfig+0x108>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d157      	bne.n	80043a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e2e3      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004304:	d106      	bne.n	8004314 <HAL_RCC_OscConfig+0x74>
 8004306:	4b91      	ldr	r3, [pc, #580]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a90      	ldr	r2, [pc, #576]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 800430c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	e01d      	b.n	8004350 <HAL_RCC_OscConfig+0xb0>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800431c:	d10c      	bne.n	8004338 <HAL_RCC_OscConfig+0x98>
 800431e:	4b8b      	ldr	r3, [pc, #556]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a8a      	ldr	r2, [pc, #552]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 8004324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	4b88      	ldr	r3, [pc, #544]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a87      	ldr	r2, [pc, #540]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 8004330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e00b      	b.n	8004350 <HAL_RCC_OscConfig+0xb0>
 8004338:	4b84      	ldr	r3, [pc, #528]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a83      	ldr	r2, [pc, #524]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 800433e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	4b81      	ldr	r3, [pc, #516]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a80      	ldr	r2, [pc, #512]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 800434a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800434e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d013      	beq.n	8004380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fd fd68 	bl	8001e2c <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004360:	f7fd fd64 	bl	8001e2c <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b64      	cmp	r3, #100	; 0x64
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e2a8      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004372:	4b76      	ldr	r3, [pc, #472]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0f0      	beq.n	8004360 <HAL_RCC_OscConfig+0xc0>
 800437e:	e014      	b.n	80043aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fd fd54 	bl	8001e2c <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004388:	f7fd fd50 	bl	8001e2c <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b64      	cmp	r3, #100	; 0x64
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e294      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800439a:	4b6c      	ldr	r3, [pc, #432]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f0      	bne.n	8004388 <HAL_RCC_OscConfig+0xe8>
 80043a6:	e000      	b.n	80043aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d075      	beq.n	80044a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043b6:	4b65      	ldr	r3, [pc, #404]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043c0:	4b62      	ldr	r3, [pc, #392]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0303 	and.w	r3, r3, #3
 80043c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b0c      	cmp	r3, #12
 80043ce:	d102      	bne.n	80043d6 <HAL_RCC_OscConfig+0x136>
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d002      	beq.n	80043dc <HAL_RCC_OscConfig+0x13c>
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d11f      	bne.n	800441c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043dc:	4b5b      	ldr	r3, [pc, #364]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_RCC_OscConfig+0x154>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e267      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f4:	4b55      	ldr	r3, [pc, #340]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	061b      	lsls	r3, r3, #24
 8004402:	4952      	ldr	r1, [pc, #328]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 8004404:	4313      	orrs	r3, r2
 8004406:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004408:	4b51      	ldr	r3, [pc, #324]	; (8004550 <HAL_RCC_OscConfig+0x2b0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f7fd fcc1 	bl	8001d94 <HAL_InitTick>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d043      	beq.n	80044a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e253      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d023      	beq.n	800446c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004424:	4b49      	ldr	r3, [pc, #292]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a48      	ldr	r2, [pc, #288]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 800442a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fd fcfc 	bl	8001e2c <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004438:	f7fd fcf8 	bl	8001e2c <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e23c      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800444a:	4b40      	ldr	r3, [pc, #256]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004456:	4b3d      	ldr	r3, [pc, #244]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	061b      	lsls	r3, r3, #24
 8004464:	4939      	ldr	r1, [pc, #228]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 8004466:	4313      	orrs	r3, r2
 8004468:	604b      	str	r3, [r1, #4]
 800446a:	e01a      	b.n	80044a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446c:	4b37      	ldr	r3, [pc, #220]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a36      	ldr	r2, [pc, #216]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 8004472:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fd fcd8 	bl	8001e2c <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004480:	f7fd fcd4 	bl	8001e2c <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e218      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004492:	4b2e      	ldr	r3, [pc, #184]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x1e0>
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d03c      	beq.n	8004528 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01c      	beq.n	80044f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b6:	4b25      	ldr	r3, [pc, #148]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044bc:	4a23      	ldr	r2, [pc, #140]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c6:	f7fd fcb1 	bl	8001e2c <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ce:	f7fd fcad 	bl	8001e2c <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e1f1      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044e0:	4b1a      	ldr	r3, [pc, #104]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 80044e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0ef      	beq.n	80044ce <HAL_RCC_OscConfig+0x22e>
 80044ee:	e01b      	b.n	8004528 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044f0:	4b16      	ldr	r3, [pc, #88]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 80044f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044f6:	4a15      	ldr	r2, [pc, #84]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004500:	f7fd fc94 	bl	8001e2c <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004508:	f7fd fc90 	bl	8001e2c <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e1d4      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800451a:	4b0c      	ldr	r3, [pc, #48]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 800451c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1ef      	bne.n	8004508 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80ab 	beq.w	800468c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004536:	2300      	movs	r3, #0
 8004538:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800453a:	4b04      	ldr	r3, [pc, #16]	; (800454c <HAL_RCC_OscConfig+0x2ac>)
 800453c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_RCC_OscConfig+0x2b4>
 8004546:	2301      	movs	r3, #1
 8004548:	e005      	b.n	8004556 <HAL_RCC_OscConfig+0x2b6>
 800454a:	bf00      	nop
 800454c:	40021000 	.word	0x40021000
 8004550:	20000108 	.word	0x20000108
 8004554:	2300      	movs	r3, #0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00d      	beq.n	8004576 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455a:	4baf      	ldr	r3, [pc, #700]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	4aae      	ldr	r2, [pc, #696]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004564:	6593      	str	r3, [r2, #88]	; 0x58
 8004566:	4bac      	ldr	r3, [pc, #688]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004572:	2301      	movs	r3, #1
 8004574:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004576:	4ba9      	ldr	r3, [pc, #676]	; (800481c <HAL_RCC_OscConfig+0x57c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d118      	bne.n	80045b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004582:	4ba6      	ldr	r3, [pc, #664]	; (800481c <HAL_RCC_OscConfig+0x57c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4aa5      	ldr	r2, [pc, #660]	; (800481c <HAL_RCC_OscConfig+0x57c>)
 8004588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458e:	f7fd fc4d 	bl	8001e2c <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004596:	f7fd fc49 	bl	8001e2c <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e18d      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a8:	4b9c      	ldr	r3, [pc, #624]	; (800481c <HAL_RCC_OscConfig+0x57c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d108      	bne.n	80045ce <HAL_RCC_OscConfig+0x32e>
 80045bc:	4b96      	ldr	r3, [pc, #600]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c2:	4a95      	ldr	r2, [pc, #596]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045cc:	e024      	b.n	8004618 <HAL_RCC_OscConfig+0x378>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b05      	cmp	r3, #5
 80045d4:	d110      	bne.n	80045f8 <HAL_RCC_OscConfig+0x358>
 80045d6:	4b90      	ldr	r3, [pc, #576]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80045d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045dc:	4a8e      	ldr	r2, [pc, #568]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80045de:	f043 0304 	orr.w	r3, r3, #4
 80045e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045e6:	4b8c      	ldr	r3, [pc, #560]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80045e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ec:	4a8a      	ldr	r2, [pc, #552]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045f6:	e00f      	b.n	8004618 <HAL_RCC_OscConfig+0x378>
 80045f8:	4b87      	ldr	r3, [pc, #540]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	4a86      	ldr	r2, [pc, #536]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004608:	4b83      	ldr	r3, [pc, #524]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460e:	4a82      	ldr	r2, [pc, #520]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004610:	f023 0304 	bic.w	r3, r3, #4
 8004614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d016      	beq.n	800464e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004620:	f7fd fc04 	bl	8001e2c <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004626:	e00a      	b.n	800463e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004628:	f7fd fc00 	bl	8001e2c <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f241 3288 	movw	r2, #5000	; 0x1388
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e142      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800463e:	4b76      	ldr	r3, [pc, #472]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0ed      	beq.n	8004628 <HAL_RCC_OscConfig+0x388>
 800464c:	e015      	b.n	800467a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464e:	f7fd fbed 	bl	8001e2c <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004654:	e00a      	b.n	800466c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004656:	f7fd fbe9 	bl	8001e2c <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	f241 3288 	movw	r2, #5000	; 0x1388
 8004664:	4293      	cmp	r3, r2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e12b      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800466c:	4b6a      	ldr	r3, [pc, #424]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1ed      	bne.n	8004656 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800467a:	7ffb      	ldrb	r3, [r7, #31]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d105      	bne.n	800468c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004680:	4b65      	ldr	r3, [pc, #404]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004684:	4a64      	ldr	r2, [pc, #400]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800468a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d03c      	beq.n	8004712 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01c      	beq.n	80046da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046a0:	4b5d      	ldr	r3, [pc, #372]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80046a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046a6:	4a5c      	ldr	r2, [pc, #368]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b0:	f7fd fbbc 	bl	8001e2c <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046b8:	f7fd fbb8 	bl	8001e2c <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e0fc      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046ca:	4b53      	ldr	r3, [pc, #332]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80046cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0ef      	beq.n	80046b8 <HAL_RCC_OscConfig+0x418>
 80046d8:	e01b      	b.n	8004712 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046da:	4b4f      	ldr	r3, [pc, #316]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80046dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046e0:	4a4d      	ldr	r2, [pc, #308]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ea:	f7fd fb9f 	bl	8001e2c <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046f2:	f7fd fb9b 	bl	8001e2c <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e0df      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004704:	4b44      	ldr	r3, [pc, #272]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ef      	bne.n	80046f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80d3 	beq.w	80048c2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800471c:	4b3e      	ldr	r3, [pc, #248]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 030c 	and.w	r3, r3, #12
 8004724:	2b0c      	cmp	r3, #12
 8004726:	f000 808d 	beq.w	8004844 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d15a      	bne.n	80047e8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004732:	4b39      	ldr	r3, [pc, #228]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a38      	ldr	r2, [pc, #224]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004738:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800473c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473e:	f7fd fb75 	bl	8001e2c <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004746:	f7fd fb71 	bl	8001e2c <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e0b5      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004758:	4b2f      	ldr	r3, [pc, #188]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f0      	bne.n	8004746 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004764:	4b2c      	ldr	r3, [pc, #176]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	4b2d      	ldr	r3, [pc, #180]	; (8004820 <HAL_RCC_OscConfig+0x580>)
 800476a:	4013      	ands	r3, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6a11      	ldr	r1, [r2, #32]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004774:	3a01      	subs	r2, #1
 8004776:	0112      	lsls	r2, r2, #4
 8004778:	4311      	orrs	r1, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800477e:	0212      	lsls	r2, r2, #8
 8004780:	4311      	orrs	r1, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004786:	0852      	lsrs	r2, r2, #1
 8004788:	3a01      	subs	r2, #1
 800478a:	0552      	lsls	r2, r2, #21
 800478c:	4311      	orrs	r1, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004792:	0852      	lsrs	r2, r2, #1
 8004794:	3a01      	subs	r2, #1
 8004796:	0652      	lsls	r2, r2, #25
 8004798:	4311      	orrs	r1, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800479e:	06d2      	lsls	r2, r2, #27
 80047a0:	430a      	orrs	r2, r1
 80047a2:	491d      	ldr	r1, [pc, #116]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a8:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1a      	ldr	r2, [pc, #104]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80047ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047b4:	4b18      	ldr	r3, [pc, #96]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4a17      	ldr	r2, [pc, #92]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80047ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fd fb34 	bl	8001e2c <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c8:	f7fd fb30 	bl	8001e2c <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e074      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047da:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0x528>
 80047e6:	e06c      	b.n	80048c2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a0a      	ldr	r2, [pc, #40]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80047ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80047f4:	4b08      	ldr	r3, [pc, #32]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a07      	ldr	r2, [pc, #28]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 80047fa:	f023 0303 	bic.w	r3, r3, #3
 80047fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a04      	ldr	r2, [pc, #16]	; (8004818 <HAL_RCC_OscConfig+0x578>)
 8004806:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800480a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800480e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fd fb0c 	bl	8001e2c <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004816:	e00e      	b.n	8004836 <HAL_RCC_OscConfig+0x596>
 8004818:	40021000 	.word	0x40021000
 800481c:	40007000 	.word	0x40007000
 8004820:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004824:	f7fd fb02 	bl	8001e2c <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e046      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004836:	4b25      	ldr	r3, [pc, #148]	; (80048cc <HAL_RCC_OscConfig+0x62c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x584>
 8004842:	e03e      	b.n	80048c2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e039      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004850:	4b1e      	ldr	r3, [pc, #120]	; (80048cc <HAL_RCC_OscConfig+0x62c>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f003 0203 	and.w	r2, r3, #3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	429a      	cmp	r2, r3
 8004862:	d12c      	bne.n	80048be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	3b01      	subs	r3, #1
 8004870:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004872:	429a      	cmp	r2, r3
 8004874:	d123      	bne.n	80048be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004880:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004882:	429a      	cmp	r2, r3
 8004884:	d11b      	bne.n	80048be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004892:	429a      	cmp	r2, r3
 8004894:	d113      	bne.n	80048be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	085b      	lsrs	r3, r3, #1
 80048a2:	3b01      	subs	r3, #1
 80048a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d109      	bne.n	80048be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	3b01      	subs	r3, #1
 80048b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d001      	beq.n	80048c2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3720      	adds	r7, #32
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40021000 	.word	0x40021000

080048d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e11e      	b.n	8004b26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048e8:	4b91      	ldr	r3, [pc, #580]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d910      	bls.n	8004918 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f6:	4b8e      	ldr	r3, [pc, #568]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f023 020f 	bic.w	r2, r3, #15
 80048fe:	498c      	ldr	r1, [pc, #560]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	4313      	orrs	r3, r2
 8004904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004906:	4b8a      	ldr	r3, [pc, #552]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d001      	beq.n	8004918 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e106      	b.n	8004b26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d073      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d129      	bne.n	8004980 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800492c:	4b81      	ldr	r3, [pc, #516]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0f4      	b.n	8004b26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800493c:	f000 f99e 	bl	8004c7c <RCC_GetSysClockFreqFromPLLSource>
 8004940:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4a7c      	ldr	r2, [pc, #496]	; (8004b38 <HAL_RCC_ClockConfig+0x268>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d93f      	bls.n	80049ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800494a:	4b7a      	ldr	r3, [pc, #488]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d009      	beq.n	800496a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800495e:	2b00      	cmp	r3, #0
 8004960:	d033      	beq.n	80049ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004966:	2b00      	cmp	r3, #0
 8004968:	d12f      	bne.n	80049ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800496a:	4b72      	ldr	r3, [pc, #456]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004972:	4a70      	ldr	r2, [pc, #448]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004978:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800497a:	2380      	movs	r3, #128	; 0x80
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	e024      	b.n	80049ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d107      	bne.n	8004998 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004988:	4b6a      	ldr	r3, [pc, #424]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d109      	bne.n	80049a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0c6      	b.n	8004b26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004998:	4b66      	ldr	r3, [pc, #408]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0be      	b.n	8004b26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80049a8:	f000 f8ce 	bl	8004b48 <HAL_RCC_GetSysClockFreq>
 80049ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4a61      	ldr	r2, [pc, #388]	; (8004b38 <HAL_RCC_ClockConfig+0x268>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d909      	bls.n	80049ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049b6:	4b5f      	ldr	r3, [pc, #380]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049be:	4a5d      	ldr	r2, [pc, #372]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 80049c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80049c6:	2380      	movs	r3, #128	; 0x80
 80049c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049ca:	4b5a      	ldr	r3, [pc, #360]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f023 0203 	bic.w	r2, r3, #3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	4957      	ldr	r1, [pc, #348]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049dc:	f7fd fa26 	bl	8001e2c <HAL_GetTick>
 80049e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e2:	e00a      	b.n	80049fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e4:	f7fd fa22 	bl	8001e2c <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e095      	b.n	8004b26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fa:	4b4e      	ldr	r3, [pc, #312]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 020c 	and.w	r2, r3, #12
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d1eb      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d023      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a24:	4b43      	ldr	r3, [pc, #268]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	4a42      	ldr	r2, [pc, #264]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004a2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004a3c:	4b3d      	ldr	r3, [pc, #244]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a44:	4a3b      	ldr	r2, [pc, #236]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004a46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a4c:	4b39      	ldr	r3, [pc, #228]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	4936      	ldr	r1, [pc, #216]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	608b      	str	r3, [r1, #8]
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2b80      	cmp	r3, #128	; 0x80
 8004a64:	d105      	bne.n	8004a72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a66:	4b33      	ldr	r3, [pc, #204]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	4a32      	ldr	r2, [pc, #200]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004a6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a72:	4b2f      	ldr	r3, [pc, #188]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d21d      	bcs.n	8004abc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a80:	4b2b      	ldr	r3, [pc, #172]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f023 020f 	bic.w	r2, r3, #15
 8004a88:	4929      	ldr	r1, [pc, #164]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a90:	f7fd f9cc 	bl	8001e2c <HAL_GetTick>
 8004a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a96:	e00a      	b.n	8004aae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a98:	f7fd f9c8 	bl	8001e2c <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e03b      	b.n	8004b26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aae:	4b20      	ldr	r3, [pc, #128]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d1ed      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac8:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4917      	ldr	r1, [pc, #92]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	490f      	ldr	r1, [pc, #60]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004afa:	f000 f825 	bl	8004b48 <HAL_RCC_GetSysClockFreq>
 8004afe:	4602      	mov	r2, r0
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	490c      	ldr	r1, [pc, #48]	; (8004b3c <HAL_RCC_ClockConfig+0x26c>)
 8004b0c:	5ccb      	ldrb	r3, [r1, r3]
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	fa22 f303 	lsr.w	r3, r2, r3
 8004b16:	4a0a      	ldr	r2, [pc, #40]	; (8004b40 <HAL_RCC_ClockConfig+0x270>)
 8004b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <HAL_RCC_ClockConfig+0x274>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fd f938 	bl	8001d94 <HAL_InitTick>
 8004b24:	4603      	mov	r3, r0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40022000 	.word	0x40022000
 8004b34:	40021000 	.word	0x40021000
 8004b38:	04c4b400 	.word	0x04c4b400
 8004b3c:	080076b0 	.word	0x080076b0
 8004b40:	20000104 	.word	0x20000104
 8004b44:	20000108 	.word	0x20000108

08004b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b4e:	4b2c      	ldr	r3, [pc, #176]	; (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d102      	bne.n	8004b60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b5a:	4b2a      	ldr	r3, [pc, #168]	; (8004c04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	e047      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b60:	4b27      	ldr	r3, [pc, #156]	; (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d102      	bne.n	8004b72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b6c:	4b26      	ldr	r3, [pc, #152]	; (8004c08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	e03e      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b72:	4b23      	ldr	r3, [pc, #140]	; (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	2b0c      	cmp	r3, #12
 8004b7c:	d136      	bne.n	8004bec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b7e:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b88:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	3301      	adds	r3, #1
 8004b94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d10c      	bne.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b9c:	4a1a      	ldr	r2, [pc, #104]	; (8004c08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba4:	4a16      	ldr	r2, [pc, #88]	; (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ba6:	68d2      	ldr	r2, [r2, #12]
 8004ba8:	0a12      	lsrs	r2, r2, #8
 8004baa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	617b      	str	r3, [r7, #20]
      break;
 8004bb4:	e00c      	b.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bb6:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbe:	4a10      	ldr	r2, [pc, #64]	; (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bc0:	68d2      	ldr	r2, [r2, #12]
 8004bc2:	0a12      	lsrs	r2, r2, #8
 8004bc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bc8:	fb02 f303 	mul.w	r3, r2, r3
 8004bcc:	617b      	str	r3, [r7, #20]
      break;
 8004bce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	0e5b      	lsrs	r3, r3, #25
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	3301      	adds	r3, #1
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	e001      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004bf0:	693b      	ldr	r3, [r7, #16]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40021000 	.word	0x40021000
 8004c04:	00f42400 	.word	0x00f42400
 8004c08:	016e3600 	.word	0x016e3600

08004c0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c12:	681b      	ldr	r3, [r3, #0]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000104 	.word	0x20000104

08004c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c28:	f7ff fff0 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	0a1b      	lsrs	r3, r3, #8
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	4904      	ldr	r1, [pc, #16]	; (8004c4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c3a:	5ccb      	ldrb	r3, [r1, r3]
 8004c3c:	f003 031f 	and.w	r3, r3, #31
 8004c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	080076c0 	.word	0x080076c0

08004c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c54:	f7ff ffda 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	0adb      	lsrs	r3, r3, #11
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	4904      	ldr	r1, [pc, #16]	; (8004c78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c66:	5ccb      	ldrb	r3, [r1, r3]
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40021000 	.word	0x40021000
 8004c78:	080076c0 	.word	0x080076c0

08004c7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c82:	4b1e      	ldr	r3, [pc, #120]	; (8004cfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c8c:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	3301      	adds	r3, #1
 8004c98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d10c      	bne.n	8004cba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ca0:	4a17      	ldr	r2, [pc, #92]	; (8004d00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca8:	4a14      	ldr	r2, [pc, #80]	; (8004cfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004caa:	68d2      	ldr	r2, [r2, #12]
 8004cac:	0a12      	lsrs	r2, r2, #8
 8004cae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cb2:	fb02 f303 	mul.w	r3, r2, r3
 8004cb6:	617b      	str	r3, [r7, #20]
    break;
 8004cb8:	e00c      	b.n	8004cd4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cba:	4a12      	ldr	r2, [pc, #72]	; (8004d04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc2:	4a0e      	ldr	r2, [pc, #56]	; (8004cfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cc4:	68d2      	ldr	r2, [r2, #12]
 8004cc6:	0a12      	lsrs	r2, r2, #8
 8004cc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ccc:	fb02 f303 	mul.w	r3, r2, r3
 8004cd0:	617b      	str	r3, [r7, #20]
    break;
 8004cd2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cd4:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	0e5b      	lsrs	r3, r3, #25
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	3301      	adds	r3, #1
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004cee:	687b      	ldr	r3, [r7, #4]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	016e3600 	.word	0x016e3600
 8004d04:	00f42400 	.word	0x00f42400

08004d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d10:	2300      	movs	r3, #0
 8004d12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d14:	2300      	movs	r3, #0
 8004d16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8098 	beq.w	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d26:	2300      	movs	r3, #0
 8004d28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d2a:	4b43      	ldr	r3, [pc, #268]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10d      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d36:	4b40      	ldr	r3, [pc, #256]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3a:	4a3f      	ldr	r2, [pc, #252]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d40:	6593      	str	r3, [r2, #88]	; 0x58
 8004d42:	4b3d      	ldr	r3, [pc, #244]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d52:	4b3a      	ldr	r3, [pc, #232]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a39      	ldr	r2, [pc, #228]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d5e:	f7fd f865 	bl	8001e2c <HAL_GetTick>
 8004d62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d64:	e009      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d66:	f7fd f861 	bl	8001e2c <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d902      	bls.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	74fb      	strb	r3, [r7, #19]
        break;
 8004d78:	e005      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d7a:	4b30      	ldr	r3, [pc, #192]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0ef      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d86:	7cfb      	ldrb	r3, [r7, #19]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d159      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d8c:	4b2a      	ldr	r3, [pc, #168]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01e      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d019      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004da8:	4b23      	ldr	r3, [pc, #140]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004db4:	4b20      	ldr	r3, [pc, #128]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dba:	4a1f      	ldr	r2, [pc, #124]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dc4:	4b1c      	ldr	r3, [pc, #112]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	4a1b      	ldr	r2, [pc, #108]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dd4:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d016      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de6:	f7fd f821 	bl	8001e2c <HAL_GetTick>
 8004dea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dec:	e00b      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dee:	f7fd f81d 	bl	8001e2c <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d902      	bls.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	74fb      	strb	r3, [r7, #19]
            break;
 8004e04:	e006      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e06:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0ec      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004e14:	7cfb      	ldrb	r3, [r7, #19]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10b      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e1a:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e28:	4903      	ldr	r1, [pc, #12]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e30:	e008      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e32:	7cfb      	ldrb	r3, [r7, #19]
 8004e34:	74bb      	strb	r3, [r7, #18]
 8004e36:	e005      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e40:	7cfb      	ldrb	r3, [r7, #19]
 8004e42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e44:	7c7b      	ldrb	r3, [r7, #17]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d105      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4a:	4baf      	ldr	r3, [pc, #700]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4e:	4aae      	ldr	r2, [pc, #696]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e62:	4ba9      	ldr	r3, [pc, #676]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e68:	f023 0203 	bic.w	r2, r3, #3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	49a5      	ldr	r1, [pc, #660]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e84:	4ba0      	ldr	r3, [pc, #640]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8a:	f023 020c 	bic.w	r2, r3, #12
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	499d      	ldr	r1, [pc, #628]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ea6:	4b98      	ldr	r3, [pc, #608]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	4994      	ldr	r1, [pc, #592]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00a      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ec8:	4b8f      	ldr	r3, [pc, #572]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ece:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	498c      	ldr	r1, [pc, #560]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0310 	and.w	r3, r3, #16
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004eea:	4b87      	ldr	r3, [pc, #540]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	4983      	ldr	r1, [pc, #524]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0320 	and.w	r3, r3, #32
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f0c:	4b7e      	ldr	r3, [pc, #504]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	497b      	ldr	r1, [pc, #492]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f2e:	4b76      	ldr	r3, [pc, #472]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	4972      	ldr	r1, [pc, #456]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f50:	4b6d      	ldr	r3, [pc, #436]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	496a      	ldr	r1, [pc, #424]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f72:	4b65      	ldr	r3, [pc, #404]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	4961      	ldr	r1, [pc, #388]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f94:	4b5c      	ldr	r3, [pc, #368]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f9a:	f023 0203 	bic.w	r2, r3, #3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa2:	4959      	ldr	r1, [pc, #356]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fb6:	4b54      	ldr	r3, [pc, #336]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	4950      	ldr	r1, [pc, #320]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d015      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fd8:	4b4b      	ldr	r3, [pc, #300]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	4948      	ldr	r1, [pc, #288]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff6:	d105      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ff8:	4b43      	ldr	r3, [pc, #268]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	4a42      	ldr	r2, [pc, #264]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005002:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800500c:	2b00      	cmp	r3, #0
 800500e:	d015      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005010:	4b3d      	ldr	r3, [pc, #244]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005016:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501e:	493a      	ldr	r1, [pc, #232]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800502e:	d105      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005030:	4b35      	ldr	r3, [pc, #212]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4a34      	ldr	r2, [pc, #208]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800503a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d015      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005048:	4b2f      	ldr	r3, [pc, #188]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	492c      	ldr	r1, [pc, #176]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005066:	d105      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005068:	4b27      	ldr	r3, [pc, #156]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	4a26      	ldr	r2, [pc, #152]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800506e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005072:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d015      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005080:	4b21      	ldr	r3, [pc, #132]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005086:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508e:	491e      	ldr	r1, [pc, #120]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800509e:	d105      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050a0:	4b19      	ldr	r3, [pc, #100]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	4a18      	ldr	r2, [pc, #96]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d015      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050b8:	4b13      	ldr	r3, [pc, #76]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	4910      	ldr	r1, [pc, #64]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050d6:	d105      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d018      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80050f0:	4b05      	ldr	r3, [pc, #20]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	4902      	ldr	r1, [pc, #8]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005106:	e001      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005108:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005110:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005114:	d105      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005116:	4b21      	ldr	r3, [pc, #132]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	4a20      	ldr	r2, [pc, #128]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800511c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005120:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d015      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800512e:	4b1b      	ldr	r3, [pc, #108]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005134:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800513c:	4917      	ldr	r1, [pc, #92]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514c:	d105      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800514e:	4b13      	ldr	r3, [pc, #76]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	4a12      	ldr	r2, [pc, #72]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005158:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d015      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005168:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800516c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005174:	4909      	ldr	r1, [pc, #36]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005180:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005184:	d105      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005186:	4b05      	ldr	r3, [pc, #20]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	4a04      	ldr	r2, [pc, #16]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800518c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005190:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005192:	7cbb      	ldrb	r3, [r7, #18]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40021000 	.word	0x40021000

080051a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e049      	b.n	8005246 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fc fc62 	bl	8001a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3304      	adds	r3, #4
 80051dc:	4619      	mov	r1, r3
 80051de:	4610      	mov	r0, r2
 80051e0:	f000 fb68 	bl	80058b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	d001      	beq.n	8005268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e054      	b.n	8005312 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a26      	ldr	r2, [pc, #152]	; (8005320 <HAL_TIM_Base_Start_IT+0xd0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d022      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005292:	d01d      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a22      	ldr	r2, [pc, #136]	; (8005324 <HAL_TIM_Base_Start_IT+0xd4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d018      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a21      	ldr	r2, [pc, #132]	; (8005328 <HAL_TIM_Base_Start_IT+0xd8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d013      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1f      	ldr	r2, [pc, #124]	; (800532c <HAL_TIM_Base_Start_IT+0xdc>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00e      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1e      	ldr	r2, [pc, #120]	; (8005330 <HAL_TIM_Base_Start_IT+0xe0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d009      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1c      	ldr	r2, [pc, #112]	; (8005334 <HAL_TIM_Base_Start_IT+0xe4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1b      	ldr	r2, [pc, #108]	; (8005338 <HAL_TIM_Base_Start_IT+0xe8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d115      	bne.n	80052fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	4b19      	ldr	r3, [pc, #100]	; (800533c <HAL_TIM_Base_Start_IT+0xec>)
 80052d8:	4013      	ands	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b06      	cmp	r3, #6
 80052e0:	d015      	beq.n	800530e <HAL_TIM_Base_Start_IT+0xbe>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e8:	d011      	beq.n	800530e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0201 	orr.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fa:	e008      	b.n	800530e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	e000      	b.n	8005310 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40012c00 	.word	0x40012c00
 8005324:	40000400 	.word	0x40000400
 8005328:	40000800 	.word	0x40000800
 800532c:	40000c00 	.word	0x40000c00
 8005330:	40013400 	.word	0x40013400
 8005334:	40014000 	.word	0x40014000
 8005338:	40015000 	.word	0x40015000
 800533c:	00010007 	.word	0x00010007

08005340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b02      	cmp	r3, #2
 8005354:	d122      	bne.n	800539c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b02      	cmp	r3, #2
 8005362:	d11b      	bne.n	800539c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0202 	mvn.w	r2, #2
 800536c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fa78 	bl	8005878 <HAL_TIM_IC_CaptureCallback>
 8005388:	e005      	b.n	8005396 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fa6a 	bl	8005864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fa7b 	bl	800588c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d122      	bne.n	80053f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d11b      	bne.n	80053f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0204 	mvn.w	r2, #4
 80053c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2202      	movs	r2, #2
 80053c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fa4e 	bl	8005878 <HAL_TIM_IC_CaptureCallback>
 80053dc:	e005      	b.n	80053ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fa40 	bl	8005864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fa51 	bl	800588c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d122      	bne.n	8005444 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b08      	cmp	r3, #8
 800540a:	d11b      	bne.n	8005444 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0208 	mvn.w	r2, #8
 8005414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2204      	movs	r2, #4
 800541a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fa24 	bl	8005878 <HAL_TIM_IC_CaptureCallback>
 8005430:	e005      	b.n	800543e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fa16 	bl	8005864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fa27 	bl	800588c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	2b10      	cmp	r3, #16
 8005450:	d122      	bne.n	8005498 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	2b10      	cmp	r3, #16
 800545e:	d11b      	bne.n	8005498 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0210 	mvn.w	r2, #16
 8005468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2208      	movs	r2, #8
 800546e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f9fa 	bl	8005878 <HAL_TIM_IC_CaptureCallback>
 8005484:	e005      	b.n	8005492 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f9ec 	bl	8005864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f9fd 	bl	800588c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d10e      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d107      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f06f 0201 	mvn.w	r2, #1
 80054bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7fb fcb8 	bl	8000e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ce:	2b80      	cmp	r3, #128	; 0x80
 80054d0:	d10e      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054dc:	2b80      	cmp	r3, #128	; 0x80
 80054de:	d107      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fbc6 	bl	8005c7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054fe:	d10e      	bne.n	800551e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550a:	2b80      	cmp	r3, #128	; 0x80
 800550c:	d107      	bne.n	800551e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fbb9 	bl	8005c90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005528:	2b40      	cmp	r3, #64	; 0x40
 800552a:	d10e      	bne.n	800554a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005536:	2b40      	cmp	r3, #64	; 0x40
 8005538:	d107      	bne.n	800554a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f9ab 	bl	80058a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b20      	cmp	r3, #32
 8005556:	d10e      	bne.n	8005576 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b20      	cmp	r3, #32
 8005564:	d107      	bne.n	8005576 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f06f 0220 	mvn.w	r2, #32
 800556e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fb79 	bl	8005c68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005584:	d10f      	bne.n	80055a6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005594:	d107      	bne.n	80055a6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800559e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fb7f 	bl	8005ca4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055b4:	d10f      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055c4:	d107      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80055ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fb71 	bl	8005cb8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055e4:	d10f      	bne.n	8005606 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055f4:	d107      	bne.n	8005606 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80055fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fb63 	bl	8005ccc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005610:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005614:	d10f      	bne.n	8005636 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005620:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005624:	d107      	bne.n	8005636 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800562e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fb55 	bl	8005ce0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005636:	bf00      	nop
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
	...

08005640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_TIM_ConfigClockSource+0x18>
 8005654:	2302      	movs	r3, #2
 8005656:	e0f5      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x204>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800567a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005682:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a6e      	ldr	r2, [pc, #440]	; (800584c <HAL_TIM_ConfigClockSource+0x20c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	f000 80c1 	beq.w	800581a <HAL_TIM_ConfigClockSource+0x1da>
 8005698:	4a6c      	ldr	r2, [pc, #432]	; (800584c <HAL_TIM_ConfigClockSource+0x20c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	f200 80c6 	bhi.w	800582c <HAL_TIM_ConfigClockSource+0x1ec>
 80056a0:	4a6b      	ldr	r2, [pc, #428]	; (8005850 <HAL_TIM_ConfigClockSource+0x210>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	f000 80b9 	beq.w	800581a <HAL_TIM_ConfigClockSource+0x1da>
 80056a8:	4a69      	ldr	r2, [pc, #420]	; (8005850 <HAL_TIM_ConfigClockSource+0x210>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	f200 80be 	bhi.w	800582c <HAL_TIM_ConfigClockSource+0x1ec>
 80056b0:	4a68      	ldr	r2, [pc, #416]	; (8005854 <HAL_TIM_ConfigClockSource+0x214>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	f000 80b1 	beq.w	800581a <HAL_TIM_ConfigClockSource+0x1da>
 80056b8:	4a66      	ldr	r2, [pc, #408]	; (8005854 <HAL_TIM_ConfigClockSource+0x214>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	f200 80b6 	bhi.w	800582c <HAL_TIM_ConfigClockSource+0x1ec>
 80056c0:	4a65      	ldr	r2, [pc, #404]	; (8005858 <HAL_TIM_ConfigClockSource+0x218>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	f000 80a9 	beq.w	800581a <HAL_TIM_ConfigClockSource+0x1da>
 80056c8:	4a63      	ldr	r2, [pc, #396]	; (8005858 <HAL_TIM_ConfigClockSource+0x218>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	f200 80ae 	bhi.w	800582c <HAL_TIM_ConfigClockSource+0x1ec>
 80056d0:	4a62      	ldr	r2, [pc, #392]	; (800585c <HAL_TIM_ConfigClockSource+0x21c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	f000 80a1 	beq.w	800581a <HAL_TIM_ConfigClockSource+0x1da>
 80056d8:	4a60      	ldr	r2, [pc, #384]	; (800585c <HAL_TIM_ConfigClockSource+0x21c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	f200 80a6 	bhi.w	800582c <HAL_TIM_ConfigClockSource+0x1ec>
 80056e0:	4a5f      	ldr	r2, [pc, #380]	; (8005860 <HAL_TIM_ConfigClockSource+0x220>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	f000 8099 	beq.w	800581a <HAL_TIM_ConfigClockSource+0x1da>
 80056e8:	4a5d      	ldr	r2, [pc, #372]	; (8005860 <HAL_TIM_ConfigClockSource+0x220>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	f200 809e 	bhi.w	800582c <HAL_TIM_ConfigClockSource+0x1ec>
 80056f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056f4:	f000 8091 	beq.w	800581a <HAL_TIM_ConfigClockSource+0x1da>
 80056f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056fc:	f200 8096 	bhi.w	800582c <HAL_TIM_ConfigClockSource+0x1ec>
 8005700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005704:	f000 8089 	beq.w	800581a <HAL_TIM_ConfigClockSource+0x1da>
 8005708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800570c:	f200 808e 	bhi.w	800582c <HAL_TIM_ConfigClockSource+0x1ec>
 8005710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005714:	d03e      	beq.n	8005794 <HAL_TIM_ConfigClockSource+0x154>
 8005716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800571a:	f200 8087 	bhi.w	800582c <HAL_TIM_ConfigClockSource+0x1ec>
 800571e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005722:	f000 8085 	beq.w	8005830 <HAL_TIM_ConfigClockSource+0x1f0>
 8005726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572a:	d87f      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x1ec>
 800572c:	2b70      	cmp	r3, #112	; 0x70
 800572e:	d01a      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0x126>
 8005730:	2b70      	cmp	r3, #112	; 0x70
 8005732:	d87b      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x1ec>
 8005734:	2b60      	cmp	r3, #96	; 0x60
 8005736:	d050      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x19a>
 8005738:	2b60      	cmp	r3, #96	; 0x60
 800573a:	d877      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x1ec>
 800573c:	2b50      	cmp	r3, #80	; 0x50
 800573e:	d03c      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x17a>
 8005740:	2b50      	cmp	r3, #80	; 0x50
 8005742:	d873      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x1ec>
 8005744:	2b40      	cmp	r3, #64	; 0x40
 8005746:	d058      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0x1ba>
 8005748:	2b40      	cmp	r3, #64	; 0x40
 800574a:	d86f      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x1ec>
 800574c:	2b30      	cmp	r3, #48	; 0x30
 800574e:	d064      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x1da>
 8005750:	2b30      	cmp	r3, #48	; 0x30
 8005752:	d86b      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x1ec>
 8005754:	2b20      	cmp	r3, #32
 8005756:	d060      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x1da>
 8005758:	2b20      	cmp	r3, #32
 800575a:	d867      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x1ec>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d05c      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x1da>
 8005760:	2b10      	cmp	r3, #16
 8005762:	d05a      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005764:	e062      	b.n	800582c <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6899      	ldr	r1, [r3, #8]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f000 f9c1 	bl	8005afc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005788:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	609a      	str	r2, [r3, #8]
      break;
 8005792:	e04e      	b.n	8005832 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	6899      	ldr	r1, [r3, #8]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f000 f9aa 	bl	8005afc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057b6:	609a      	str	r2, [r3, #8]
      break;
 80057b8:	e03b      	b.n	8005832 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6859      	ldr	r1, [r3, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f000 f91c 	bl	8005a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2150      	movs	r1, #80	; 0x50
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f975 	bl	8005ac2 <TIM_ITRx_SetConfig>
      break;
 80057d8:	e02b      	b.n	8005832 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6859      	ldr	r1, [r3, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	461a      	mov	r2, r3
 80057e8:	f000 f93b 	bl	8005a62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2160      	movs	r1, #96	; 0x60
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 f965 	bl	8005ac2 <TIM_ITRx_SetConfig>
      break;
 80057f8:	e01b      	b.n	8005832 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6859      	ldr	r1, [r3, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	461a      	mov	r2, r3
 8005808:	f000 f8fc 	bl	8005a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2140      	movs	r1, #64	; 0x40
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f955 	bl	8005ac2 <TIM_ITRx_SetConfig>
      break;
 8005818:	e00b      	b.n	8005832 <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4619      	mov	r1, r3
 8005824:	4610      	mov	r0, r2
 8005826:	f000 f94c 	bl	8005ac2 <TIM_ITRx_SetConfig>
        break;
 800582a:	e002      	b.n	8005832 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 800582c:	bf00      	nop
 800582e:	e000      	b.n	8005832 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8005830:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	00100070 	.word	0x00100070
 8005850:	00100060 	.word	0x00100060
 8005854:	00100050 	.word	0x00100050
 8005858:	00100040 	.word	0x00100040
 800585c:	00100030 	.word	0x00100030
 8005860:	00100020 	.word	0x00100020

08005864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a46      	ldr	r2, [pc, #280]	; (80059e0 <TIM_Base_SetConfig+0x12c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d017      	beq.n	80058fc <TIM_Base_SetConfig+0x48>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d2:	d013      	beq.n	80058fc <TIM_Base_SetConfig+0x48>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a43      	ldr	r2, [pc, #268]	; (80059e4 <TIM_Base_SetConfig+0x130>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d00f      	beq.n	80058fc <TIM_Base_SetConfig+0x48>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a42      	ldr	r2, [pc, #264]	; (80059e8 <TIM_Base_SetConfig+0x134>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00b      	beq.n	80058fc <TIM_Base_SetConfig+0x48>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a41      	ldr	r2, [pc, #260]	; (80059ec <TIM_Base_SetConfig+0x138>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d007      	beq.n	80058fc <TIM_Base_SetConfig+0x48>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a40      	ldr	r2, [pc, #256]	; (80059f0 <TIM_Base_SetConfig+0x13c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <TIM_Base_SetConfig+0x48>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a3f      	ldr	r2, [pc, #252]	; (80059f4 <TIM_Base_SetConfig+0x140>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d108      	bne.n	800590e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a33      	ldr	r2, [pc, #204]	; (80059e0 <TIM_Base_SetConfig+0x12c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d023      	beq.n	800595e <TIM_Base_SetConfig+0xaa>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591c:	d01f      	beq.n	800595e <TIM_Base_SetConfig+0xaa>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a30      	ldr	r2, [pc, #192]	; (80059e4 <TIM_Base_SetConfig+0x130>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d01b      	beq.n	800595e <TIM_Base_SetConfig+0xaa>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a2f      	ldr	r2, [pc, #188]	; (80059e8 <TIM_Base_SetConfig+0x134>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d017      	beq.n	800595e <TIM_Base_SetConfig+0xaa>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a2e      	ldr	r2, [pc, #184]	; (80059ec <TIM_Base_SetConfig+0x138>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d013      	beq.n	800595e <TIM_Base_SetConfig+0xaa>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a2d      	ldr	r2, [pc, #180]	; (80059f0 <TIM_Base_SetConfig+0x13c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00f      	beq.n	800595e <TIM_Base_SetConfig+0xaa>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a2d      	ldr	r2, [pc, #180]	; (80059f8 <TIM_Base_SetConfig+0x144>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00b      	beq.n	800595e <TIM_Base_SetConfig+0xaa>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a2c      	ldr	r2, [pc, #176]	; (80059fc <TIM_Base_SetConfig+0x148>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d007      	beq.n	800595e <TIM_Base_SetConfig+0xaa>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a2b      	ldr	r2, [pc, #172]	; (8005a00 <TIM_Base_SetConfig+0x14c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d003      	beq.n	800595e <TIM_Base_SetConfig+0xaa>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a26      	ldr	r2, [pc, #152]	; (80059f4 <TIM_Base_SetConfig+0x140>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d108      	bne.n	8005970 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a12      	ldr	r2, [pc, #72]	; (80059e0 <TIM_Base_SetConfig+0x12c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d013      	beq.n	80059c4 <TIM_Base_SetConfig+0x110>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a14      	ldr	r2, [pc, #80]	; (80059f0 <TIM_Base_SetConfig+0x13c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00f      	beq.n	80059c4 <TIM_Base_SetConfig+0x110>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a14      	ldr	r2, [pc, #80]	; (80059f8 <TIM_Base_SetConfig+0x144>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00b      	beq.n	80059c4 <TIM_Base_SetConfig+0x110>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a13      	ldr	r2, [pc, #76]	; (80059fc <TIM_Base_SetConfig+0x148>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d007      	beq.n	80059c4 <TIM_Base_SetConfig+0x110>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a12      	ldr	r2, [pc, #72]	; (8005a00 <TIM_Base_SetConfig+0x14c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d003      	beq.n	80059c4 <TIM_Base_SetConfig+0x110>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a0d      	ldr	r2, [pc, #52]	; (80059f4 <TIM_Base_SetConfig+0x140>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d103      	bne.n	80059cc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	615a      	str	r2, [r3, #20]
}
 80059d2:	bf00      	nop
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40012c00 	.word	0x40012c00
 80059e4:	40000400 	.word	0x40000400
 80059e8:	40000800 	.word	0x40000800
 80059ec:	40000c00 	.word	0x40000c00
 80059f0:	40013400 	.word	0x40013400
 80059f4:	40015000 	.word	0x40015000
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40014400 	.word	0x40014400
 8005a00:	40014800 	.word	0x40014800

08005a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f023 0201 	bic.w	r2, r3, #1
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f023 030a 	bic.w	r3, r3, #10
 8005a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	621a      	str	r2, [r3, #32]
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b087      	sub	sp, #28
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	f023 0210 	bic.w	r2, r3, #16
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	031b      	lsls	r3, r3, #12
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	621a      	str	r2, [r3, #32]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b085      	sub	sp, #20
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005adc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f043 0307 	orr.w	r3, r3, #7
 8005ae8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	609a      	str	r2, [r3, #8]
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	021a      	lsls	r2, r3, #8
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	609a      	str	r2, [r3, #8]
}
 8005b30:	bf00      	nop
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e074      	b.n	8005c3e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a34      	ldr	r2, [pc, #208]	; (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d009      	beq.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a33      	ldr	r2, [pc, #204]	; (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d004      	beq.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a31      	ldr	r2, [pc, #196]	; (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d108      	bne.n	8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a21      	ldr	r2, [pc, #132]	; (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d022      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd4:	d01d      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a1f      	ldr	r2, [pc, #124]	; (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d018      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a1d      	ldr	r2, [pc, #116]	; (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d013      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a1c      	ldr	r2, [pc, #112]	; (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00e      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a15      	ldr	r2, [pc, #84]	; (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d009      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a18      	ldr	r2, [pc, #96]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d004      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a11      	ldr	r2, [pc, #68]	; (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d10c      	bne.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40012c00 	.word	0x40012c00
 8005c50:	40013400 	.word	0x40013400
 8005c54:	40015000 	.word	0x40015000
 8005c58:	40000400 	.word	0x40000400
 8005c5c:	40000800 	.word	0x40000800
 8005c60:	40000c00 	.word	0x40000c00
 8005c64:	40014000 	.word	0x40014000

08005c68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e042      	b.n	8005d8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d106      	bne.n	8005d1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7fb ff31 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2224      	movs	r2, #36	; 0x24
 8005d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0201 	bic.w	r2, r2, #1
 8005d34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fac6 	bl	80062c8 <UART_SetConfig>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e022      	b.n	8005d8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fd84 	bl	800685c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0201 	orr.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fe0b 	bl	80069a0 <UART_CheckIdleState>
 8005d8a:	4603      	mov	r3, r0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d131      	bne.n	8005e10 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <HAL_UART_Receive_IT+0x24>
 8005db2:	88fb      	ldrh	r3, [r7, #6]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e02a      	b.n	8005e12 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d101      	bne.n	8005dca <HAL_UART_Receive_IT+0x36>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e023      	b.n	8005e12 <HAL_UART_Receive_IT+0x7e>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a0f      	ldr	r2, [pc, #60]	; (8005e1c <HAL_UART_Receive_IT+0x88>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00e      	beq.n	8005e00 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d007      	beq.n	8005e00 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005dfe:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e00:	88fb      	ldrh	r3, [r7, #6]
 8005e02:	461a      	mov	r2, r3
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 fe96 	bl	8006b38 <UART_Start_Receive_IT>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	e000      	b.n	8005e12 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005e10:	2302      	movs	r3, #2
  }
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40008000 	.word	0x40008000

08005e20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e46:	4013      	ands	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d118      	bne.n	8005e82 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d013      	beq.n	8005e82 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d104      	bne.n	8005e6e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d009      	beq.n	8005e82 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 81fb 	beq.w	800626e <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	4798      	blx	r3
      }
      return;
 8005e80:	e1f5      	b.n	800626e <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 80ef 	beq.w	8006068 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4b73      	ldr	r3, [pc, #460]	; (800605c <HAL_UART_IRQHandler+0x23c>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d105      	bne.n	8005ea0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4b72      	ldr	r3, [pc, #456]	; (8006060 <HAL_UART_IRQHandler+0x240>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 80e4 	beq.w	8006068 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d010      	beq.n	8005ecc <HAL_UART_IRQHandler+0xac>
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00b      	beq.n	8005ecc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ec2:	f043 0201 	orr.w	r2, r3, #1
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d010      	beq.n	8005ef8 <HAL_UART_IRQHandler+0xd8>
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00b      	beq.n	8005ef8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eee:	f043 0204 	orr.w	r2, r3, #4
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d010      	beq.n	8005f24 <HAL_UART_IRQHandler+0x104>
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00b      	beq.n	8005f24 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2204      	movs	r2, #4
 8005f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f1a:	f043 0202 	orr.w	r2, r3, #2
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d015      	beq.n	8005f5a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d104      	bne.n	8005f42 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	4b48      	ldr	r3, [pc, #288]	; (800605c <HAL_UART_IRQHandler+0x23c>)
 8005f3c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00b      	beq.n	8005f5a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2208      	movs	r2, #8
 8005f48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f50:	f043 0208 	orr.w	r2, r3, #8
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d011      	beq.n	8005f88 <HAL_UART_IRQHandler+0x168>
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00c      	beq.n	8005f88 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f7e:	f043 0220 	orr.w	r2, r3, #32
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 816f 	beq.w	8006272 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	f003 0320 	and.w	r3, r3, #32
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d011      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d104      	bne.n	8005fb2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d007      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fc8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d004      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d031      	beq.n	8006046 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fe66 	bl	8006cb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff2:	2b40      	cmp	r3, #64	; 0x40
 8005ff4:	d123      	bne.n	800603e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006004:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d013      	beq.n	8006036 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006012:	4a14      	ldr	r2, [pc, #80]	; (8006064 <HAL_UART_IRQHandler+0x244>)
 8006014:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800601a:	4618      	mov	r0, r3
 800601c:	f7fd fe8a 	bl	8003d34 <HAL_DMA_Abort_IT>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d017      	beq.n	8006056 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006030:	4610      	mov	r0, r2
 8006032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006034:	e00f      	b.n	8006056 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f930 	bl	800629c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800603c:	e00b      	b.n	8006056 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f92c 	bl	800629c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006044:	e007      	b.n	8006056 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f928 	bl	800629c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006054:	e10d      	b.n	8006272 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006056:	bf00      	nop
    return;
 8006058:	e10b      	b.n	8006272 <HAL_UART_IRQHandler+0x452>
 800605a:	bf00      	nop
 800605c:	10000001 	.word	0x10000001
 8006060:	04000120 	.word	0x04000120
 8006064:	08006d19 	.word	0x08006d19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800606c:	2b01      	cmp	r3, #1
 800606e:	f040 80ab 	bne.w	80061c8 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	f003 0310 	and.w	r3, r3, #16
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 80a5 	beq.w	80061c8 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	f003 0310 	and.w	r3, r3, #16
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 809f 	beq.w	80061c8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2210      	movs	r2, #16
 8006090:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609c:	2b40      	cmp	r3, #64	; 0x40
 800609e:	d155      	bne.n	800614c <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80060aa:	893b      	ldrh	r3, [r7, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 80e2 	beq.w	8006276 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060b8:	893a      	ldrh	r2, [r7, #8]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	f080 80db 	bcs.w	8006276 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	893a      	ldrh	r2, [r7, #8]
 80060c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0320 	and.w	r3, r3, #32
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d12b      	bne.n	8006130 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060e6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0201 	bic.w	r2, r2, #1
 80060f6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006106:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2220      	movs	r2, #32
 800610c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0210 	bic.w	r2, r2, #16
 8006124:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800612a:	4618      	mov	r0, r3
 800612c:	f7fd fda9 	bl	8003c82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800613c:	b29b      	uxth	r3, r3
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	b29b      	uxth	r3, r3
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f8b3 	bl	80062b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800614a:	e094      	b.n	8006276 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006158:	b29b      	uxth	r3, r3
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 8087 	beq.w	800627a <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 800616c:	897b      	ldrh	r3, [r7, #10]
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 8083 	beq.w	800627a <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006182:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006192:	f023 0301 	bic.w	r3, r3, #1
 8006196:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0210 	bic.w	r2, r2, #16
 80061ba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061bc:	897b      	ldrh	r3, [r7, #10]
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f875 	bl	80062b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061c6:	e058      	b.n	800627a <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00d      	beq.n	80061ee <HAL_UART_IRQHandler+0x3ce>
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80061e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 f8a2 	bl	8007330 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061ec:	e048      	b.n	8006280 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d012      	beq.n	800621e <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d104      	bne.n	800620c <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d008      	beq.n	800621e <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006210:	2b00      	cmp	r3, #0
 8006212:	d034      	beq.n	800627e <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	4798      	blx	r3
    }
    return;
 800621c:	e02f      	b.n	800627e <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006224:	2b00      	cmp	r3, #0
 8006226:	d008      	beq.n	800623a <HAL_UART_IRQHandler+0x41a>
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fd86 	bl	8006d44 <UART_EndTransmit_IT>
    return;
 8006238:	e022      	b.n	8006280 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <HAL_UART_IRQHandler+0x436>
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f001 f882 	bl	8007358 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006254:	e014      	b.n	8006280 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00f      	beq.n	8006280 <HAL_UART_IRQHandler+0x460>
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	da0c      	bge.n	8006280 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f001 f86c 	bl	8007344 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800626c:	e008      	b.n	8006280 <HAL_UART_IRQHandler+0x460>
      return;
 800626e:	bf00      	nop
 8006270:	e006      	b.n	8006280 <HAL_UART_IRQHandler+0x460>
    return;
 8006272:	bf00      	nop
 8006274:	e004      	b.n	8006280 <HAL_UART_IRQHandler+0x460>
      return;
 8006276:	bf00      	nop
 8006278:	e002      	b.n	8006280 <HAL_UART_IRQHandler+0x460>
      return;
 800627a:	bf00      	nop
 800627c:	e000      	b.n	8006280 <HAL_UART_IRQHandler+0x460>
    return;
 800627e:	bf00      	nop
  }
}
 8006280:	3720      	adds	r7, #32
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop

08006288 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c8:	b5b0      	push	{r4, r5, r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	4bb1      	ldr	r3, [pc, #708]	; (80065b8 <UART_SetConfig+0x2f0>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6812      	ldr	r2, [r2, #0]
 80062fa:	69f9      	ldr	r1, [r7, #28]
 80062fc:	430b      	orrs	r3, r1
 80062fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4aa6      	ldr	r2, [pc, #664]	; (80065bc <UART_SetConfig+0x2f4>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d004      	beq.n	8006330 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	4313      	orrs	r3, r2
 800632e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800633a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	69f9      	ldr	r1, [r7, #28]
 8006344:	430b      	orrs	r3, r1
 8006346:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634e:	f023 010f 	bic.w	r1, r3, #15
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a97      	ldr	r2, [pc, #604]	; (80065c0 <UART_SetConfig+0x2f8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d120      	bne.n	80063aa <UART_SetConfig+0xe2>
 8006368:	4b96      	ldr	r3, [pc, #600]	; (80065c4 <UART_SetConfig+0x2fc>)
 800636a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	2b03      	cmp	r3, #3
 8006374:	d816      	bhi.n	80063a4 <UART_SetConfig+0xdc>
 8006376:	a201      	add	r2, pc, #4	; (adr r2, 800637c <UART_SetConfig+0xb4>)
 8006378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637c:	0800638d 	.word	0x0800638d
 8006380:	08006399 	.word	0x08006399
 8006384:	08006393 	.word	0x08006393
 8006388:	0800639f 	.word	0x0800639f
 800638c:	2301      	movs	r3, #1
 800638e:	76fb      	strb	r3, [r7, #27]
 8006390:	e0e7      	b.n	8006562 <UART_SetConfig+0x29a>
 8006392:	2302      	movs	r3, #2
 8006394:	76fb      	strb	r3, [r7, #27]
 8006396:	e0e4      	b.n	8006562 <UART_SetConfig+0x29a>
 8006398:	2304      	movs	r3, #4
 800639a:	76fb      	strb	r3, [r7, #27]
 800639c:	e0e1      	b.n	8006562 <UART_SetConfig+0x29a>
 800639e:	2308      	movs	r3, #8
 80063a0:	76fb      	strb	r3, [r7, #27]
 80063a2:	e0de      	b.n	8006562 <UART_SetConfig+0x29a>
 80063a4:	2310      	movs	r3, #16
 80063a6:	76fb      	strb	r3, [r7, #27]
 80063a8:	e0db      	b.n	8006562 <UART_SetConfig+0x29a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a86      	ldr	r2, [pc, #536]	; (80065c8 <UART_SetConfig+0x300>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d132      	bne.n	800641a <UART_SetConfig+0x152>
 80063b4:	4b83      	ldr	r3, [pc, #524]	; (80065c4 <UART_SetConfig+0x2fc>)
 80063b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ba:	f003 030c 	and.w	r3, r3, #12
 80063be:	2b0c      	cmp	r3, #12
 80063c0:	d828      	bhi.n	8006414 <UART_SetConfig+0x14c>
 80063c2:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <UART_SetConfig+0x100>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	080063fd 	.word	0x080063fd
 80063cc:	08006415 	.word	0x08006415
 80063d0:	08006415 	.word	0x08006415
 80063d4:	08006415 	.word	0x08006415
 80063d8:	08006409 	.word	0x08006409
 80063dc:	08006415 	.word	0x08006415
 80063e0:	08006415 	.word	0x08006415
 80063e4:	08006415 	.word	0x08006415
 80063e8:	08006403 	.word	0x08006403
 80063ec:	08006415 	.word	0x08006415
 80063f0:	08006415 	.word	0x08006415
 80063f4:	08006415 	.word	0x08006415
 80063f8:	0800640f 	.word	0x0800640f
 80063fc:	2300      	movs	r3, #0
 80063fe:	76fb      	strb	r3, [r7, #27]
 8006400:	e0af      	b.n	8006562 <UART_SetConfig+0x29a>
 8006402:	2302      	movs	r3, #2
 8006404:	76fb      	strb	r3, [r7, #27]
 8006406:	e0ac      	b.n	8006562 <UART_SetConfig+0x29a>
 8006408:	2304      	movs	r3, #4
 800640a:	76fb      	strb	r3, [r7, #27]
 800640c:	e0a9      	b.n	8006562 <UART_SetConfig+0x29a>
 800640e:	2308      	movs	r3, #8
 8006410:	76fb      	strb	r3, [r7, #27]
 8006412:	e0a6      	b.n	8006562 <UART_SetConfig+0x29a>
 8006414:	2310      	movs	r3, #16
 8006416:	76fb      	strb	r3, [r7, #27]
 8006418:	e0a3      	b.n	8006562 <UART_SetConfig+0x29a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a6b      	ldr	r2, [pc, #428]	; (80065cc <UART_SetConfig+0x304>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d120      	bne.n	8006466 <UART_SetConfig+0x19e>
 8006424:	4b67      	ldr	r3, [pc, #412]	; (80065c4 <UART_SetConfig+0x2fc>)
 8006426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800642e:	2b30      	cmp	r3, #48	; 0x30
 8006430:	d013      	beq.n	800645a <UART_SetConfig+0x192>
 8006432:	2b30      	cmp	r3, #48	; 0x30
 8006434:	d814      	bhi.n	8006460 <UART_SetConfig+0x198>
 8006436:	2b20      	cmp	r3, #32
 8006438:	d009      	beq.n	800644e <UART_SetConfig+0x186>
 800643a:	2b20      	cmp	r3, #32
 800643c:	d810      	bhi.n	8006460 <UART_SetConfig+0x198>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <UART_SetConfig+0x180>
 8006442:	2b10      	cmp	r3, #16
 8006444:	d006      	beq.n	8006454 <UART_SetConfig+0x18c>
 8006446:	e00b      	b.n	8006460 <UART_SetConfig+0x198>
 8006448:	2300      	movs	r3, #0
 800644a:	76fb      	strb	r3, [r7, #27]
 800644c:	e089      	b.n	8006562 <UART_SetConfig+0x29a>
 800644e:	2302      	movs	r3, #2
 8006450:	76fb      	strb	r3, [r7, #27]
 8006452:	e086      	b.n	8006562 <UART_SetConfig+0x29a>
 8006454:	2304      	movs	r3, #4
 8006456:	76fb      	strb	r3, [r7, #27]
 8006458:	e083      	b.n	8006562 <UART_SetConfig+0x29a>
 800645a:	2308      	movs	r3, #8
 800645c:	76fb      	strb	r3, [r7, #27]
 800645e:	e080      	b.n	8006562 <UART_SetConfig+0x29a>
 8006460:	2310      	movs	r3, #16
 8006462:	76fb      	strb	r3, [r7, #27]
 8006464:	e07d      	b.n	8006562 <UART_SetConfig+0x29a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a59      	ldr	r2, [pc, #356]	; (80065d0 <UART_SetConfig+0x308>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d120      	bne.n	80064b2 <UART_SetConfig+0x1ea>
 8006470:	4b54      	ldr	r3, [pc, #336]	; (80065c4 <UART_SetConfig+0x2fc>)
 8006472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006476:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800647a:	2bc0      	cmp	r3, #192	; 0xc0
 800647c:	d013      	beq.n	80064a6 <UART_SetConfig+0x1de>
 800647e:	2bc0      	cmp	r3, #192	; 0xc0
 8006480:	d814      	bhi.n	80064ac <UART_SetConfig+0x1e4>
 8006482:	2b80      	cmp	r3, #128	; 0x80
 8006484:	d009      	beq.n	800649a <UART_SetConfig+0x1d2>
 8006486:	2b80      	cmp	r3, #128	; 0x80
 8006488:	d810      	bhi.n	80064ac <UART_SetConfig+0x1e4>
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <UART_SetConfig+0x1cc>
 800648e:	2b40      	cmp	r3, #64	; 0x40
 8006490:	d006      	beq.n	80064a0 <UART_SetConfig+0x1d8>
 8006492:	e00b      	b.n	80064ac <UART_SetConfig+0x1e4>
 8006494:	2300      	movs	r3, #0
 8006496:	76fb      	strb	r3, [r7, #27]
 8006498:	e063      	b.n	8006562 <UART_SetConfig+0x29a>
 800649a:	2302      	movs	r3, #2
 800649c:	76fb      	strb	r3, [r7, #27]
 800649e:	e060      	b.n	8006562 <UART_SetConfig+0x29a>
 80064a0:	2304      	movs	r3, #4
 80064a2:	76fb      	strb	r3, [r7, #27]
 80064a4:	e05d      	b.n	8006562 <UART_SetConfig+0x29a>
 80064a6:	2308      	movs	r3, #8
 80064a8:	76fb      	strb	r3, [r7, #27]
 80064aa:	e05a      	b.n	8006562 <UART_SetConfig+0x29a>
 80064ac:	2310      	movs	r3, #16
 80064ae:	76fb      	strb	r3, [r7, #27]
 80064b0:	e057      	b.n	8006562 <UART_SetConfig+0x29a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a47      	ldr	r2, [pc, #284]	; (80065d4 <UART_SetConfig+0x30c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d125      	bne.n	8006508 <UART_SetConfig+0x240>
 80064bc:	4b41      	ldr	r3, [pc, #260]	; (80065c4 <UART_SetConfig+0x2fc>)
 80064be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064ca:	d017      	beq.n	80064fc <UART_SetConfig+0x234>
 80064cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064d0:	d817      	bhi.n	8006502 <UART_SetConfig+0x23a>
 80064d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d6:	d00b      	beq.n	80064f0 <UART_SetConfig+0x228>
 80064d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064dc:	d811      	bhi.n	8006502 <UART_SetConfig+0x23a>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <UART_SetConfig+0x222>
 80064e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e6:	d006      	beq.n	80064f6 <UART_SetConfig+0x22e>
 80064e8:	e00b      	b.n	8006502 <UART_SetConfig+0x23a>
 80064ea:	2300      	movs	r3, #0
 80064ec:	76fb      	strb	r3, [r7, #27]
 80064ee:	e038      	b.n	8006562 <UART_SetConfig+0x29a>
 80064f0:	2302      	movs	r3, #2
 80064f2:	76fb      	strb	r3, [r7, #27]
 80064f4:	e035      	b.n	8006562 <UART_SetConfig+0x29a>
 80064f6:	2304      	movs	r3, #4
 80064f8:	76fb      	strb	r3, [r7, #27]
 80064fa:	e032      	b.n	8006562 <UART_SetConfig+0x29a>
 80064fc:	2308      	movs	r3, #8
 80064fe:	76fb      	strb	r3, [r7, #27]
 8006500:	e02f      	b.n	8006562 <UART_SetConfig+0x29a>
 8006502:	2310      	movs	r3, #16
 8006504:	76fb      	strb	r3, [r7, #27]
 8006506:	e02c      	b.n	8006562 <UART_SetConfig+0x29a>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a2b      	ldr	r2, [pc, #172]	; (80065bc <UART_SetConfig+0x2f4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d125      	bne.n	800655e <UART_SetConfig+0x296>
 8006512:	4b2c      	ldr	r3, [pc, #176]	; (80065c4 <UART_SetConfig+0x2fc>)
 8006514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006518:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800651c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006520:	d017      	beq.n	8006552 <UART_SetConfig+0x28a>
 8006522:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006526:	d817      	bhi.n	8006558 <UART_SetConfig+0x290>
 8006528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800652c:	d00b      	beq.n	8006546 <UART_SetConfig+0x27e>
 800652e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006532:	d811      	bhi.n	8006558 <UART_SetConfig+0x290>
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <UART_SetConfig+0x278>
 8006538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653c:	d006      	beq.n	800654c <UART_SetConfig+0x284>
 800653e:	e00b      	b.n	8006558 <UART_SetConfig+0x290>
 8006540:	2300      	movs	r3, #0
 8006542:	76fb      	strb	r3, [r7, #27]
 8006544:	e00d      	b.n	8006562 <UART_SetConfig+0x29a>
 8006546:	2302      	movs	r3, #2
 8006548:	76fb      	strb	r3, [r7, #27]
 800654a:	e00a      	b.n	8006562 <UART_SetConfig+0x29a>
 800654c:	2304      	movs	r3, #4
 800654e:	76fb      	strb	r3, [r7, #27]
 8006550:	e007      	b.n	8006562 <UART_SetConfig+0x29a>
 8006552:	2308      	movs	r3, #8
 8006554:	76fb      	strb	r3, [r7, #27]
 8006556:	e004      	b.n	8006562 <UART_SetConfig+0x29a>
 8006558:	2310      	movs	r3, #16
 800655a:	76fb      	strb	r3, [r7, #27]
 800655c:	e001      	b.n	8006562 <UART_SetConfig+0x29a>
 800655e:	2310      	movs	r3, #16
 8006560:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a15      	ldr	r2, [pc, #84]	; (80065bc <UART_SetConfig+0x2f4>)
 8006568:	4293      	cmp	r3, r2
 800656a:	f040 809f 	bne.w	80066ac <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800656e:	7efb      	ldrb	r3, [r7, #27]
 8006570:	2b08      	cmp	r3, #8
 8006572:	d837      	bhi.n	80065e4 <UART_SetConfig+0x31c>
 8006574:	a201      	add	r2, pc, #4	; (adr r2, 800657c <UART_SetConfig+0x2b4>)
 8006576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657a:	bf00      	nop
 800657c:	080065a1 	.word	0x080065a1
 8006580:	080065e5 	.word	0x080065e5
 8006584:	080065a9 	.word	0x080065a9
 8006588:	080065e5 	.word	0x080065e5
 800658c:	080065af 	.word	0x080065af
 8006590:	080065e5 	.word	0x080065e5
 8006594:	080065e5 	.word	0x080065e5
 8006598:	080065e5 	.word	0x080065e5
 800659c:	080065dd 	.word	0x080065dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a0:	f7fe fb40 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 80065a4:	6178      	str	r0, [r7, #20]
        break;
 80065a6:	e022      	b.n	80065ee <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a8:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <UART_SetConfig+0x310>)
 80065aa:	617b      	str	r3, [r7, #20]
        break;
 80065ac:	e01f      	b.n	80065ee <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ae:	f7fe facb 	bl	8004b48 <HAL_RCC_GetSysClockFreq>
 80065b2:	6178      	str	r0, [r7, #20]
        break;
 80065b4:	e01b      	b.n	80065ee <UART_SetConfig+0x326>
 80065b6:	bf00      	nop
 80065b8:	cfff69f3 	.word	0xcfff69f3
 80065bc:	40008000 	.word	0x40008000
 80065c0:	40013800 	.word	0x40013800
 80065c4:	40021000 	.word	0x40021000
 80065c8:	40004400 	.word	0x40004400
 80065cc:	40004800 	.word	0x40004800
 80065d0:	40004c00 	.word	0x40004c00
 80065d4:	40005000 	.word	0x40005000
 80065d8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065e0:	617b      	str	r3, [r7, #20]
        break;
 80065e2:	e004      	b.n	80065ee <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	76bb      	strb	r3, [r7, #26]
        break;
 80065ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 811b 	beq.w	800682c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	4a96      	ldr	r2, [pc, #600]	; (8006854 <UART_SetConfig+0x58c>)
 80065fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006600:	461a      	mov	r2, r3
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	fbb3 f3f2 	udiv	r3, r3, r2
 8006608:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	4413      	add	r3, r2
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	429a      	cmp	r2, r3
 8006618:	d305      	bcc.n	8006626 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	429a      	cmp	r2, r3
 8006624:	d902      	bls.n	800662c <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	76bb      	strb	r3, [r7, #26]
 800662a:	e0ff      	b.n	800682c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	4618      	mov	r0, r3
 8006630:	f04f 0100 	mov.w	r1, #0
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	4a86      	ldr	r2, [pc, #536]	; (8006854 <UART_SetConfig+0x58c>)
 800663a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800663e:	b29a      	uxth	r2, r3
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	f7fa f9d6 	bl	80009f4 <__aeabi_uldivmod>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4610      	mov	r0, r2
 800664e:	4619      	mov	r1, r3
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	f04f 0300 	mov.w	r3, #0
 8006658:	020b      	lsls	r3, r1, #8
 800665a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800665e:	0202      	lsls	r2, r0, #8
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	6849      	ldr	r1, [r1, #4]
 8006664:	0849      	lsrs	r1, r1, #1
 8006666:	4608      	mov	r0, r1
 8006668:	f04f 0100 	mov.w	r1, #0
 800666c:	1814      	adds	r4, r2, r0
 800666e:	eb43 0501 	adc.w	r5, r3, r1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	461a      	mov	r2, r3
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	4620      	mov	r0, r4
 800667e:	4629      	mov	r1, r5
 8006680:	f7fa f9b8 	bl	80009f4 <__aeabi_uldivmod>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4613      	mov	r3, r2
 800668a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006692:	d308      	bcc.n	80066a6 <UART_SetConfig+0x3de>
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800669a:	d204      	bcs.n	80066a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	60da      	str	r2, [r3, #12]
 80066a4:	e0c2      	b.n	800682c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	76bb      	strb	r3, [r7, #26]
 80066aa:	e0bf      	b.n	800682c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b4:	d165      	bne.n	8006782 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80066b6:	7efb      	ldrb	r3, [r7, #27]
 80066b8:	2b08      	cmp	r3, #8
 80066ba:	d828      	bhi.n	800670e <UART_SetConfig+0x446>
 80066bc:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <UART_SetConfig+0x3fc>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	080066e9 	.word	0x080066e9
 80066c8:	080066f1 	.word	0x080066f1
 80066cc:	080066f9 	.word	0x080066f9
 80066d0:	0800670f 	.word	0x0800670f
 80066d4:	080066ff 	.word	0x080066ff
 80066d8:	0800670f 	.word	0x0800670f
 80066dc:	0800670f 	.word	0x0800670f
 80066e0:	0800670f 	.word	0x0800670f
 80066e4:	08006707 	.word	0x08006707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e8:	f7fe fa9c 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 80066ec:	6178      	str	r0, [r7, #20]
        break;
 80066ee:	e013      	b.n	8006718 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066f0:	f7fe faae 	bl	8004c50 <HAL_RCC_GetPCLK2Freq>
 80066f4:	6178      	str	r0, [r7, #20]
        break;
 80066f6:	e00f      	b.n	8006718 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066f8:	4b57      	ldr	r3, [pc, #348]	; (8006858 <UART_SetConfig+0x590>)
 80066fa:	617b      	str	r3, [r7, #20]
        break;
 80066fc:	e00c      	b.n	8006718 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066fe:	f7fe fa23 	bl	8004b48 <HAL_RCC_GetSysClockFreq>
 8006702:	6178      	str	r0, [r7, #20]
        break;
 8006704:	e008      	b.n	8006718 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800670a:	617b      	str	r3, [r7, #20]
        break;
 800670c:	e004      	b.n	8006718 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	76bb      	strb	r3, [r7, #26]
        break;
 8006716:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8086 	beq.w	800682c <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	4a4b      	ldr	r2, [pc, #300]	; (8006854 <UART_SetConfig+0x58c>)
 8006726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800672a:	461a      	mov	r2, r3
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006732:	005a      	lsls	r2, r3, #1
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	085b      	lsrs	r3, r3, #1
 800673a:	441a      	add	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	fbb2 f3f3 	udiv	r3, r2, r3
 8006744:	b29b      	uxth	r3, r3
 8006746:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2b0f      	cmp	r3, #15
 800674c:	d916      	bls.n	800677c <UART_SetConfig+0x4b4>
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006754:	d212      	bcs.n	800677c <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	b29b      	uxth	r3, r3
 800675a:	f023 030f 	bic.w	r3, r3, #15
 800675e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	085b      	lsrs	r3, r3, #1
 8006764:	b29b      	uxth	r3, r3
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	b29a      	uxth	r2, r3
 800676c:	89fb      	ldrh	r3, [r7, #14]
 800676e:	4313      	orrs	r3, r2
 8006770:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	89fa      	ldrh	r2, [r7, #14]
 8006778:	60da      	str	r2, [r3, #12]
 800677a:	e057      	b.n	800682c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	76bb      	strb	r3, [r7, #26]
 8006780:	e054      	b.n	800682c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006782:	7efb      	ldrb	r3, [r7, #27]
 8006784:	2b08      	cmp	r3, #8
 8006786:	d828      	bhi.n	80067da <UART_SetConfig+0x512>
 8006788:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <UART_SetConfig+0x4c8>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	080067b5 	.word	0x080067b5
 8006794:	080067bd 	.word	0x080067bd
 8006798:	080067c5 	.word	0x080067c5
 800679c:	080067db 	.word	0x080067db
 80067a0:	080067cb 	.word	0x080067cb
 80067a4:	080067db 	.word	0x080067db
 80067a8:	080067db 	.word	0x080067db
 80067ac:	080067db 	.word	0x080067db
 80067b0:	080067d3 	.word	0x080067d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b4:	f7fe fa36 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 80067b8:	6178      	str	r0, [r7, #20]
        break;
 80067ba:	e013      	b.n	80067e4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067bc:	f7fe fa48 	bl	8004c50 <HAL_RCC_GetPCLK2Freq>
 80067c0:	6178      	str	r0, [r7, #20]
        break;
 80067c2:	e00f      	b.n	80067e4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067c4:	4b24      	ldr	r3, [pc, #144]	; (8006858 <UART_SetConfig+0x590>)
 80067c6:	617b      	str	r3, [r7, #20]
        break;
 80067c8:	e00c      	b.n	80067e4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ca:	f7fe f9bd 	bl	8004b48 <HAL_RCC_GetSysClockFreq>
 80067ce:	6178      	str	r0, [r7, #20]
        break;
 80067d0:	e008      	b.n	80067e4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067d6:	617b      	str	r3, [r7, #20]
        break;
 80067d8:	e004      	b.n	80067e4 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	76bb      	strb	r3, [r7, #26]
        break;
 80067e2:	bf00      	nop
    }

    if (pclk != 0U)
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d020      	beq.n	800682c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	4a19      	ldr	r2, [pc, #100]	; (8006854 <UART_SetConfig+0x58c>)
 80067f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067f4:	461a      	mov	r2, r3
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	085b      	lsrs	r3, r3, #1
 8006802:	441a      	add	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	fbb2 f3f3 	udiv	r3, r2, r3
 800680c:	b29b      	uxth	r3, r3
 800680e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2b0f      	cmp	r3, #15
 8006814:	d908      	bls.n	8006828 <UART_SetConfig+0x560>
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800681c:	d204      	bcs.n	8006828 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	60da      	str	r2, [r3, #12]
 8006826:	e001      	b.n	800682c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006848:	7ebb      	ldrb	r3, [r7, #26]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3720      	adds	r7, #32
 800684e:	46bd      	mov	sp, r7
 8006850:	bdb0      	pop	{r4, r5, r7, pc}
 8006852:	bf00      	nop
 8006854:	080076c8 	.word	0x080076c8
 8006858:	00f42400 	.word	0x00f42400

0800685c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00a      	beq.n	8006886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00a      	beq.n	80068a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00a      	beq.n	80068ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	f003 0308 	and.w	r3, r3, #8
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00a      	beq.n	800690e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006912:	f003 0320 	and.w	r3, r3, #32
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01a      	beq.n	8006972 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800695a:	d10a      	bne.n	8006972 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00a      	beq.n	8006994 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	605a      	str	r2, [r3, #4]
  }
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af02      	add	r7, sp, #8
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069b0:	f7fb fa3c 	bl	8001e2c <HAL_GetTick>
 80069b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d10e      	bne.n	80069e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f82f 	bl	8006a36 <UART_WaitOnFlagUntilTimeout>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e025      	b.n	8006a2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d10e      	bne.n	8006a0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f819 	bl	8006a36 <UART_WaitOnFlagUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e00f      	b.n	8006a2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2220      	movs	r2, #32
 8006a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	603b      	str	r3, [r7, #0]
 8006a42:	4613      	mov	r3, r2
 8006a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a46:	e062      	b.n	8006b0e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4e:	d05e      	beq.n	8006b0e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a50:	f7fb f9ec 	bl	8001e2c <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d302      	bcc.n	8006a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d11d      	bne.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0201 	bic.w	r2, r2, #1
 8006a84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e045      	b.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d02e      	beq.n	8006b0e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006abe:	d126      	bne.n	8006b0e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ac8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ad8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0201 	bic.w	r2, r2, #1
 8006ae8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2220      	movs	r2, #32
 8006af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e00f      	b.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69da      	ldr	r2, [r3, #28]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	4013      	ands	r3, r2
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	bf0c      	ite	eq
 8006b1e:	2301      	moveq	r3, #1
 8006b20:	2300      	movne	r3, #0
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	79fb      	ldrb	r3, [r7, #7]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d08d      	beq.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	4613      	mov	r3, r2
 8006b44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	88fa      	ldrh	r2, [r7, #6]
 8006b50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	88fa      	ldrh	r2, [r7, #6]
 8006b58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6a:	d10e      	bne.n	8006b8a <UART_Start_Receive_IT+0x52>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d105      	bne.n	8006b80 <UART_Start_Receive_IT+0x48>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b7e:	e02d      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	22ff      	movs	r2, #255	; 0xff
 8006b84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b88:	e028      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10d      	bne.n	8006bae <UART_Start_Receive_IT+0x76>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d104      	bne.n	8006ba4 <UART_Start_Receive_IT+0x6c>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	22ff      	movs	r2, #255	; 0xff
 8006b9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ba2:	e01b      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	227f      	movs	r2, #127	; 0x7f
 8006ba8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bac:	e016      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bb6:	d10d      	bne.n	8006bd4 <UART_Start_Receive_IT+0x9c>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <UART_Start_Receive_IT+0x92>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	227f      	movs	r2, #127	; 0x7f
 8006bc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bc8:	e008      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	223f      	movs	r2, #63	; 0x3f
 8006bce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bd2:	e003      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2222      	movs	r2, #34	; 0x22
 8006be8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c04:	d12a      	bne.n	8006c5c <UART_Start_Receive_IT+0x124>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c0c:	88fa      	ldrh	r2, [r7, #6]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d324      	bcc.n	8006c5c <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c1a:	d107      	bne.n	8006c2c <UART_Start_Receive_IT+0xf4>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d103      	bne.n	8006c2c <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4a1f      	ldr	r2, [pc, #124]	; (8006ca4 <UART_Start_Receive_IT+0x16c>)
 8006c28:	671a      	str	r2, [r3, #112]	; 0x70
 8006c2a:	e002      	b.n	8006c32 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4a1e      	ldr	r2, [pc, #120]	; (8006ca8 <UART_Start_Receive_IT+0x170>)
 8006c30:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c48:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006c58:	609a      	str	r2, [r3, #8]
 8006c5a:	e01b      	b.n	8006c94 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c64:	d107      	bne.n	8006c76 <UART_Start_Receive_IT+0x13e>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d103      	bne.n	8006c76 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4a0e      	ldr	r2, [pc, #56]	; (8006cac <UART_Start_Receive_IT+0x174>)
 8006c72:	671a      	str	r2, [r3, #112]	; 0x70
 8006c74:	e002      	b.n	8006c7c <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4a0d      	ldr	r2, [pc, #52]	; (8006cb0 <UART_Start_Receive_IT+0x178>)
 8006c7a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006c92:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	0800712d 	.word	0x0800712d
 8006ca8:	08006f29 	.word	0x08006f29
 8006cac:	08006e51 	.word	0x08006e51
 8006cb0:	08006d79 	.word	0x08006d79

08006cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	6812      	ldr	r2, [r2, #0]
 8006cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cda:	f023 0301 	bic.w	r3, r3, #1
 8006cde:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d107      	bne.n	8006cf8 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0210 	bic.w	r2, r2, #16
 8006cf6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7ff fab0 	bl	800629c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d5a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff fa8c 	bl	8006288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d86:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8e:	2b22      	cmp	r3, #34	; 0x22
 8006d90:	d152      	bne.n	8006e38 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d9a:	89bb      	ldrh	r3, [r7, #12]
 8006d9c:	b2d9      	uxtb	r1, r3
 8006d9e:	89fb      	ldrh	r3, [r7, #14]
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da6:	400a      	ands	r2, r1
 8006da8:	b2d2      	uxtb	r2, r2
 8006daa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d139      	bne.n	8006e48 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006de2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0201 	bic.w	r2, r2, #1
 8006df2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d10f      	bne.n	8006e2a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0210 	bic.w	r2, r2, #16
 8006e18:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7ff fa44 	bl	80062b0 <HAL_UARTEx_RxEventCallback>
 8006e28:	e002      	b.n	8006e30 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fa f934 	bl	8001098 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e36:	e007      	b.n	8006e48 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	699a      	ldr	r2, [r3, #24]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0208 	orr.w	r2, r2, #8
 8006e46:	619a      	str	r2, [r3, #24]
}
 8006e48:	bf00      	nop
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e5e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e66:	2b22      	cmp	r3, #34	; 0x22
 8006e68:	d152      	bne.n	8006f10 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e76:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e78:	89ba      	ldrh	r2, [r7, #12]
 8006e7a:	89fb      	ldrh	r3, [r7, #14]
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e88:	1c9a      	adds	r2, r3, #2
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d139      	bne.n	8006f20 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006eba:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0201 	bic.w	r2, r2, #1
 8006eca:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d10f      	bne.n	8006f02 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0210 	bic.w	r2, r2, #16
 8006ef0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff f9d8 	bl	80062b0 <HAL_UARTEx_RxEventCallback>
 8006f00:	e002      	b.n	8006f08 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7fa f8c8 	bl	8001098 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f0e:	e007      	b.n	8006f20 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699a      	ldr	r2, [r3, #24]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0208 	orr.w	r2, r2, #8
 8006f1e:	619a      	str	r2, [r3, #24]
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f36:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f56:	2b22      	cmp	r3, #34	; 0x22
 8006f58:	f040 80da 	bne.w	8007110 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f62:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f64:	e0aa      	b.n	80070bc <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f6e:	89bb      	ldrh	r3, [r7, #12]
 8006f70:	b2d9      	uxtb	r1, r3
 8006f72:	8b7b      	ldrh	r3, [r7, #26]
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7a:	400a      	ands	r2, r1
 8006f7c:	b2d2      	uxtb	r2, r2
 8006f7e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	f003 0307 	and.w	r3, r3, #7
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d04d      	beq.n	800704a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d010      	beq.n	8006fda <UART_RxISR_8BIT_FIFOEN+0xb2>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00b      	beq.n	8006fda <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd0:	f043 0201 	orr.w	r2, r3, #1
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d010      	beq.n	8007006 <UART_RxISR_8BIT_FIFOEN+0xde>
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00b      	beq.n	8007006 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ffc:	f043 0204 	orr.w	r2, r3, #4
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	f003 0304 	and.w	r3, r3, #4
 800700c:	2b00      	cmp	r3, #0
 800700e:	d010      	beq.n	8007032 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00b      	beq.n	8007032 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2204      	movs	r2, #4
 8007020:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007028:	f043 0202 	orr.w	r2, r3, #2
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007038:	2b00      	cmp	r3, #0
 800703a:	d006      	beq.n	800704a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff f92d 	bl	800629c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007050:	b29b      	uxth	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d132      	bne.n	80070bc <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007064:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	6812      	ldr	r2, [r2, #0]
 8007070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007074:	f023 0301 	bic.w	r3, r3, #1
 8007078:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2220      	movs	r2, #32
 800707e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800708c:	2b01      	cmp	r3, #1
 800708e:	d10f      	bne.n	80070b0 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 0210 	bic.w	r2, r2, #16
 800709e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff f901 	bl	80062b0 <HAL_UARTEx_RxEventCallback>
 80070ae:	e002      	b.n	80070b6 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7f9 fff1 	bl	8001098 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070bc:	89fb      	ldrh	r3, [r7, #14]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d005      	beq.n	80070ce <UART_RxISR_8BIT_FIFOEN+0x1a6>
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	f003 0320 	and.w	r3, r3, #32
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f47f af4c 	bne.w	8006f66 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070d4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80070d6:	897b      	ldrh	r3, [r7, #10]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d021      	beq.n	8007120 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80070e2:	897a      	ldrh	r2, [r7, #10]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d21b      	bcs.n	8007120 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689a      	ldr	r2, [r3, #8]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80070f6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a0b      	ldr	r2, [pc, #44]	; (8007128 <UART_RxISR_8BIT_FIFOEN+0x200>)
 80070fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f042 0220 	orr.w	r2, r2, #32
 800710c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800710e:	e007      	b.n	8007120 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	699a      	ldr	r2, [r3, #24]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0208 	orr.w	r2, r2, #8
 800711e:	619a      	str	r2, [r3, #24]
}
 8007120:	bf00      	nop
 8007122:	3720      	adds	r7, #32
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	08006d79 	.word	0x08006d79

0800712c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b08a      	sub	sp, #40	; 0x28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800713a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800715a:	2b22      	cmp	r3, #34	; 0x22
 800715c:	f040 80da 	bne.w	8007314 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007166:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007168:	e0aa      	b.n	80072c0 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007176:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8007178:	8aba      	ldrh	r2, [r7, #20]
 800717a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800717c:	4013      	ands	r3, r2
 800717e:	b29a      	uxth	r2, r3
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007188:	1c9a      	adds	r2, r3, #2
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	b29a      	uxth	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	f003 0307 	and.w	r3, r3, #7
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d04d      	beq.n	800724e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d010      	beq.n	80071de <UART_RxISR_16BIT_FIFOEN+0xb2>
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2201      	movs	r2, #1
 80071cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071d4:	f043 0201 	orr.w	r2, r3, #1
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d010      	beq.n	800720a <UART_RxISR_16BIT_FIFOEN+0xde>
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00b      	beq.n	800720a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2202      	movs	r2, #2
 80071f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007200:	f043 0204 	orr.w	r2, r3, #4
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d010      	beq.n	8007236 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00b      	beq.n	8007236 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2204      	movs	r2, #4
 8007224:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800722c:	f043 0202 	orr.w	r2, r3, #2
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800723c:	2b00      	cmp	r3, #0
 800723e:	d006      	beq.n	800724e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7ff f82b 	bl	800629c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007254:	b29b      	uxth	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d132      	bne.n	80072c0 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007268:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6812      	ldr	r2, [r2, #0]
 8007274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007278:	f023 0301 	bic.w	r3, r3, #1
 800727c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2220      	movs	r2, #32
 8007282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007290:	2b01      	cmp	r3, #1
 8007292:	d10f      	bne.n	80072b4 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0210 	bic.w	r2, r2, #16
 80072a2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7fe ffff 	bl	80062b0 <HAL_UARTEx_RxEventCallback>
 80072b2:	e002      	b.n	80072ba <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7f9 feef 	bl	8001098 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072c0:	8afb      	ldrh	r3, [r7, #22]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 80072c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f47f af4c 	bne.w	800716a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072d8:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80072da:	89fb      	ldrh	r3, [r7, #14]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d021      	beq.n	8007324 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80072e6:	89fa      	ldrh	r2, [r7, #14]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d21b      	bcs.n	8007324 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80072fa:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a0b      	ldr	r2, [pc, #44]	; (800732c <UART_RxISR_16BIT_FIFOEN+0x200>)
 8007300:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f042 0220 	orr.w	r2, r2, #32
 8007310:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007312:	e007      	b.n	8007324 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699a      	ldr	r2, [r3, #24]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0208 	orr.w	r2, r2, #8
 8007322:	619a      	str	r2, [r3, #24]
}
 8007324:	bf00      	nop
 8007326:	3728      	adds	r7, #40	; 0x28
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	08006e51 	.word	0x08006e51

08007330 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800737a:	2b01      	cmp	r3, #1
 800737c:	d101      	bne.n	8007382 <HAL_UARTEx_DisableFifoMode+0x16>
 800737e:	2302      	movs	r3, #2
 8007380:	e027      	b.n	80073d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2224      	movs	r2, #36	; 0x24
 800738e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0201 	bic.w	r2, r2, #1
 80073a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80073b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d101      	bne.n	80073f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073f2:	2302      	movs	r3, #2
 80073f4:	e02d      	b.n	8007452 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2224      	movs	r2, #36	; 0x24
 8007402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0201 	bic.w	r2, r2, #1
 800741c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f850 	bl	80074d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2220      	movs	r2, #32
 8007444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800746e:	2302      	movs	r3, #2
 8007470:	e02d      	b.n	80074ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2224      	movs	r2, #36	; 0x24
 800747e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0201 	bic.w	r2, r2, #1
 8007498:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f812 	bl	80074d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d108      	bne.n	80074fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074f8:	e031      	b.n	800755e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074fa:	2308      	movs	r3, #8
 80074fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074fe:	2308      	movs	r3, #8
 8007500:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	0e5b      	lsrs	r3, r3, #25
 800750a:	b2db      	uxtb	r3, r3
 800750c:	f003 0307 	and.w	r3, r3, #7
 8007510:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	0f5b      	lsrs	r3, r3, #29
 800751a:	b2db      	uxtb	r3, r3
 800751c:	f003 0307 	and.w	r3, r3, #7
 8007520:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	7b3a      	ldrb	r2, [r7, #12]
 8007526:	4911      	ldr	r1, [pc, #68]	; (800756c <UARTEx_SetNbDataToProcess+0x94>)
 8007528:	5c8a      	ldrb	r2, [r1, r2]
 800752a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800752e:	7b3a      	ldrb	r2, [r7, #12]
 8007530:	490f      	ldr	r1, [pc, #60]	; (8007570 <UARTEx_SetNbDataToProcess+0x98>)
 8007532:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007534:	fb93 f3f2 	sdiv	r3, r3, r2
 8007538:	b29a      	uxth	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	7b7a      	ldrb	r2, [r7, #13]
 8007544:	4909      	ldr	r1, [pc, #36]	; (800756c <UARTEx_SetNbDataToProcess+0x94>)
 8007546:	5c8a      	ldrb	r2, [r1, r2]
 8007548:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800754c:	7b7a      	ldrb	r2, [r7, #13]
 800754e:	4908      	ldr	r1, [pc, #32]	; (8007570 <UARTEx_SetNbDataToProcess+0x98>)
 8007550:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007552:	fb93 f3f2 	sdiv	r3, r3, r2
 8007556:	b29a      	uxth	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800755e:	bf00      	nop
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	080076e0 	.word	0x080076e0
 8007570:	080076e8 	.word	0x080076e8

08007574 <__libc_init_array>:
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	4d0d      	ldr	r5, [pc, #52]	; (80075ac <__libc_init_array+0x38>)
 8007578:	4c0d      	ldr	r4, [pc, #52]	; (80075b0 <__libc_init_array+0x3c>)
 800757a:	1b64      	subs	r4, r4, r5
 800757c:	10a4      	asrs	r4, r4, #2
 800757e:	2600      	movs	r6, #0
 8007580:	42a6      	cmp	r6, r4
 8007582:	d109      	bne.n	8007598 <__libc_init_array+0x24>
 8007584:	4d0b      	ldr	r5, [pc, #44]	; (80075b4 <__libc_init_array+0x40>)
 8007586:	4c0c      	ldr	r4, [pc, #48]	; (80075b8 <__libc_init_array+0x44>)
 8007588:	f000 f820 	bl	80075cc <_init>
 800758c:	1b64      	subs	r4, r4, r5
 800758e:	10a4      	asrs	r4, r4, #2
 8007590:	2600      	movs	r6, #0
 8007592:	42a6      	cmp	r6, r4
 8007594:	d105      	bne.n	80075a2 <__libc_init_array+0x2e>
 8007596:	bd70      	pop	{r4, r5, r6, pc}
 8007598:	f855 3b04 	ldr.w	r3, [r5], #4
 800759c:	4798      	blx	r3
 800759e:	3601      	adds	r6, #1
 80075a0:	e7ee      	b.n	8007580 <__libc_init_array+0xc>
 80075a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a6:	4798      	blx	r3
 80075a8:	3601      	adds	r6, #1
 80075aa:	e7f2      	b.n	8007592 <__libc_init_array+0x1e>
 80075ac:	080076f8 	.word	0x080076f8
 80075b0:	080076f8 	.word	0x080076f8
 80075b4:	080076f8 	.word	0x080076f8
 80075b8:	080076fc 	.word	0x080076fc

080075bc <memset>:
 80075bc:	4402      	add	r2, r0
 80075be:	4603      	mov	r3, r0
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d100      	bne.n	80075c6 <memset+0xa>
 80075c4:	4770      	bx	lr
 80075c6:	f803 1b01 	strb.w	r1, [r3], #1
 80075ca:	e7f9      	b.n	80075c0 <memset+0x4>

080075cc <_init>:
 80075cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ce:	bf00      	nop
 80075d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d2:	bc08      	pop	{r3}
 80075d4:	469e      	mov	lr, r3
 80075d6:	4770      	bx	lr

080075d8 <_fini>:
 80075d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075da:	bf00      	nop
 80075dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075de:	bc08      	pop	{r3}
 80075e0:	469e      	mov	lr, r3
 80075e2:	4770      	bx	lr
