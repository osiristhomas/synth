
Synth G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c54  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08006e2c  08006e2c  00016e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f38  08006f38  00020414  2**0
                  CONTENTS
  4 .ARM          00000008  08006f38  08006f38  00016f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f40  08006f40  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f40  08006f40  00016f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f44  08006f44  00016f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000414  20000000  08006f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000414  0800735c  00020414  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  0800735c  00020720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019678  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc2  00000000  00000000  00039abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  0003c680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  0003dc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028813  00000000  00000000  0003f198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d6d  00000000  00000000  000679ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011283d  00000000  00000000  0007e718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00190f55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fa4  00000000  00000000  00190fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000414 	.word	0x20000414
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006e14 	.word	0x08006e14

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000418 	.word	0x20000418
 8000214:	08006e14 	.word	0x08006e14

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
static void MX_ADC2_Init(void);
static void MX_TIM2_Init(void);


int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 ff4f 	bl	80013b6 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 fa7e 	bl	8000a18 <SystemClock_Config>

  	/* Initialize all configured peripherals */
  	MX_GPIO_Init();
 800051c:	f000 fce0 	bl	8000ee0 <MX_GPIO_Init>
    MX_DAC1_Init();
 8000520:	f000 fb4a 	bl	8000bb8 <MX_DAC1_Init>
    MX_USART1_UART_Init();
 8000524:	f000 fc90 	bl	8000e48 <MX_USART1_UART_Init>
    MX_TIM6_Init();
 8000528:	f000 fbce 	bl	8000cc8 <MX_TIM6_Init>
    MX_TIM7_Init();
 800052c:	f000 fc02 	bl	8000d34 <MX_TIM7_Init>
    MX_TIM8_Init();
 8000530:	f000 fc36 	bl	8000da0 <MX_TIM8_Init>
    MX_ADC2_Init();
 8000534:	f000 fad8 	bl	8000ae8 <MX_ADC2_Init>
    MX_TIM2_Init();
 8000538:	f000 fb78 	bl	8000c2c <MX_TIM2_Init>

  // Calibrate ADC
  //HAL_ADCEx_Calibration_Start(&hadc2);

  // Enable DAC
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800053c:	2100      	movs	r1, #0
 800053e:	4845      	ldr	r0, [pc, #276]	; (8000654 <main+0x144>)
 8000540:	f002 fd33 	bl	8002faa <HAL_DAC_Start>

  // Start conversions
  HAL_ADC_Start(&hadc2);
 8000544:	4844      	ldr	r0, [pc, #272]	; (8000658 <main+0x148>)
 8000546:	f001 fbcb 	bl	8001ce0 <HAL_ADC_Start>

  // Enable timers
  HAL_TIM_Base_Start_IT(&htim2);
 800054a:	4844      	ldr	r0, [pc, #272]	; (800065c <main+0x14c>)
 800054c:	f004 faa4 	bl	8004a98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000550:	4843      	ldr	r0, [pc, #268]	; (8000660 <main+0x150>)
 8000552:	f004 faa1 	bl	8004a98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000556:	4843      	ldr	r0, [pc, #268]	; (8000664 <main+0x154>)
 8000558:	f004 fa9e 	bl	8004a98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 800055c:	4842      	ldr	r0, [pc, #264]	; (8000668 <main+0x158>)
 800055e:	f004 fa9b 	bl	8004a98 <HAL_TIM_Base_Start_IT>

  voices[0].status = 0;
 8000562:	4b42      	ldr	r3, [pc, #264]	; (800066c <main+0x15c>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
  voices[1].status = 0;
 8000568:	4b40      	ldr	r3, [pc, #256]	; (800066c <main+0x15c>)
 800056a:	2200      	movs	r2, #0
 800056c:	739a      	strb	r2, [r3, #14]
  voices[2].status = 0;
 800056e:	4b3f      	ldr	r3, [pc, #252]	; (800066c <main+0x15c>)
 8000570:	2200      	movs	r2, #0
 8000572:	771a      	strb	r2, [r3, #28]
  voices[0].index = 0;
 8000574:	4b3d      	ldr	r3, [pc, #244]	; (800066c <main+0x15c>)
 8000576:	2200      	movs	r2, #0
 8000578:	731a      	strb	r2, [r3, #12]
  voices[1].index = 0;
 800057a:	4b3c      	ldr	r3, [pc, #240]	; (800066c <main+0x15c>)
 800057c:	2200      	movs	r2, #0
 800057e:	769a      	strb	r2, [r3, #26]
  voices[2].index = 0;
 8000580:	4b3a      	ldr	r3, [pc, #232]	; (800066c <main+0x15c>)
 8000582:	2200      	movs	r2, #0
 8000584:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  notes_on = 0;
 8000588:	4b39      	ldr	r3, [pc, #228]	; (8000670 <main+0x160>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
  // __HAL_TIM_SET_AUTORELOAD
  TIM6->ARR = ARR_VAL(C4);
 800058e:	4b39      	ldr	r3, [pc, #228]	; (8000674 <main+0x164>)
 8000590:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8000594:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM7->ARR = ARR_VAL(E4);
 8000596:	4b38      	ldr	r3, [pc, #224]	; (8000678 <main+0x168>)
 8000598:	f640 72b7 	movw	r2, #4023	; 0xfb7
 800059c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM8->ARR = ARR_VAL(G4);
 800059e:	4b37      	ldr	r3, [pc, #220]	; (800067c <main+0x16c>)
 80005a0:	f640 523b 	movw	r2, #3387	; 0xd3b
 80005a4:	62da      	str	r2, [r3, #44]	; 0x2c

  lut = sin_lut;
 80005a6:	4b36      	ldr	r3, [pc, #216]	; (8000680 <main+0x170>)
 80005a8:	4a36      	ldr	r2, [pc, #216]	; (8000684 <main+0x174>)
 80005aa:	601a      	str	r2, [r3, #0]

  // Main loop - read MIDI and play notes on DAC
  // DAC data handled in UART interrupt callback
  while (1) {

	  AD_RES = HAL_ADC_GetValue(&hadc2);
 80005ac:	482a      	ldr	r0, [pc, #168]	; (8000658 <main+0x148>)
 80005ae:	f001 fc7b 	bl	8001ea8 <HAL_ADC_GetValue>
 80005b2:	4603      	mov	r3, r0
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	4b34      	ldr	r3, [pc, #208]	; (8000688 <main+0x178>)
 80005b8:	801a      	strh	r2, [r3, #0]

	  //TODO put in function
	  HAL_UART_Receive_IT(&huart1, midi_tmp, 3);
 80005ba:	2203      	movs	r2, #3
 80005bc:	4933      	ldr	r1, [pc, #204]	; (800068c <main+0x17c>)
 80005be:	4834      	ldr	r0, [pc, #208]	; (8000690 <main+0x180>)
 80005c0:	f005 f80c 	bl	80055dc <HAL_UART_Receive_IT>
	  if (GLOBAL_MIDI_NOTE_ON) {
 80005c4:	4b33      	ldr	r3, [pc, #204]	; (8000694 <main+0x184>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b90      	cmp	r3, #144	; 0x90
 80005ca:	d106      	bne.n	80005da <main+0xca>
		  MIDI_IN_LED_ON;
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d2:	4831      	ldr	r0, [pc, #196]	; (8000698 <main+0x188>)
 80005d4:	f003 f9bc 	bl	8003950 <HAL_GPIO_WritePin>
 80005d8:	e009      	b.n	80005ee <main+0xde>
	  }
	  else if (GLOBAL_MIDI_NOTE_OFF) {
 80005da:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <main+0x184>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b80      	cmp	r3, #128	; 0x80
 80005e0:	d105      	bne.n	80005ee <main+0xde>
		  MIDI_IN_LED_OFF;
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e8:	482b      	ldr	r0, [pc, #172]	; (8000698 <main+0x188>)
 80005ea:	f003 f9b1 	bl	8003950 <HAL_GPIO_WritePin>
	  }


	  if (AD_RES >= 0 && AD_RES < 1024) {
 80005ee:	4b26      	ldr	r3, [pc, #152]	; (8000688 <main+0x178>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005f6:	d203      	bcs.n	8000600 <main+0xf0>
	  		lut = sin_lut;
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <main+0x170>)
 80005fa:	4a22      	ldr	r2, [pc, #136]	; (8000684 <main+0x174>)
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	e7d5      	b.n	80005ac <main+0x9c>
	  }
	  else if (AD_RES >= 1024 && AD_RES < 2048) {
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <main+0x178>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000608:	d308      	bcc.n	800061c <main+0x10c>
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <main+0x178>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000612:	d203      	bcs.n	800061c <main+0x10c>
	  		lut = tri_lut;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <main+0x170>)
 8000616:	4a21      	ldr	r2, [pc, #132]	; (800069c <main+0x18c>)
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	e01a      	b.n	8000652 <main+0x142>
	  }
	  else if (AD_RES >= 2048 && AD_RES < 3072) {
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <main+0x178>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000624:	d308      	bcc.n	8000638 <main+0x128>
 8000626:	4b18      	ldr	r3, [pc, #96]	; (8000688 <main+0x178>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800062e:	d203      	bcs.n	8000638 <main+0x128>
	  		lut = saw_lut;
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <main+0x170>)
 8000632:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <main+0x190>)
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	e00c      	b.n	8000652 <main+0x142>
	  }
	  else if (AD_RES >= 3072 && AD_RES < 4096) {
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <main+0x178>)
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000640:	d3b4      	bcc.n	80005ac <main+0x9c>
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <main+0x178>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800064a:	d2af      	bcs.n	80005ac <main+0x9c>
	  		lut = sqr_lut;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <main+0x170>)
 800064e:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <main+0x194>)
 8000650:	601a      	str	r2, [r3, #0]
	  AD_RES = HAL_ADC_GetValue(&hadc2);
 8000652:	e7ab      	b.n	80005ac <main+0x9c>
 8000654:	20000480 	.word	0x20000480
 8000658:	20000494 	.word	0x20000494
 800065c:	20000620 	.word	0x20000620
 8000660:	200005d4 	.word	0x200005d4
 8000664:	200006cc 	.word	0x200006cc
 8000668:	20000434 	.word	0x20000434
 800066c:	200005a8 	.word	0x200005a8
 8000670:	20000430 	.word	0x20000430
 8000674:	40001000 	.word	0x40001000
 8000678:	40001400 	.word	0x40001400
 800067c:	40013400 	.word	0x40013400
 8000680:	20000404 	.word	0x20000404
 8000684:	20000004 	.word	0x20000004
 8000688:	20000432 	.word	0x20000432
 800068c:	20000718 	.word	0x20000718
 8000690:	20000518 	.word	0x20000518
 8000694:	20000514 	.word	0x20000514
 8000698:	48000400 	.word	0x48000400
 800069c:	20000104 	.word	0x20000104
 80006a0:	20000304 	.word	0x20000304
 80006a4:	20000204 	.word	0x20000204

080006a8 <HAL_ADC_ConvCpltCallback>:
}

// TODO doesnt get called
// Switch lookup table based on ADC result
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	AD_RES = HAL_ADC_GetValue(&hadc2);
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <HAL_ADC_ConvCpltCallback+0x20>)
 80006b2:	f001 fbf9 	bl	8001ea8 <HAL_ADC_GetValue>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4b04      	ldr	r3, [pc, #16]	; (80006cc <HAL_ADC_ConvCpltCallback+0x24>)
 80006bc:	801a      	strh	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000494 	.word	0x20000494
 80006cc:	20000432 	.word	0x20000432

080006d0 <HAL_TIM_PeriodElapsedCallback>:

// When timer triggers, put corresponding signal on DAC
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006d0:	b5b0      	push	{r4, r5, r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

	if (htim == &htim6) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a72      	ldr	r2, [pc, #456]	; (80008a4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d146      	bne.n	800076e <HAL_TIM_PeriodElapsedCallback+0x9e>
		PUT_TO_DAC(VOICE0);
 80006e0:	4b71      	ldr	r3, [pc, #452]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	4b71      	ldr	r3, [pc, #452]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	4b6f      	ldr	r3, [pc, #444]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80006ec:	7b1b      	ldrb	r3, [r3, #12]
 80006ee:	1c59      	adds	r1, r3, #1
 80006f0:	b2cc      	uxtb	r4, r1
 80006f2:	496d      	ldr	r1, [pc, #436]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80006f4:	730c      	strb	r4, [r1, #12]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	4413      	add	r3, r2
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	fb03 f200 	mul.w	r2, r3, r0
 8000700:	4b69      	ldr	r3, [pc, #420]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000702:	7b9b      	ldrb	r3, [r3, #14]
 8000704:	4618      	mov	r0, r3
 8000706:	4b69      	ldr	r3, [pc, #420]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000708:	6819      	ldr	r1, [r3, #0]
 800070a:	4b67      	ldr	r3, [pc, #412]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800070c:	7e9b      	ldrb	r3, [r3, #26]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	440b      	add	r3, r1
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	fb03 f300 	mul.w	r3, r3, r0
 8000718:	441a      	add	r2, r3
 800071a:	4b63      	ldr	r3, [pc, #396]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800071c:	7f1b      	ldrb	r3, [r3, #28]
 800071e:	4618      	mov	r0, r3
 8000720:	4b62      	ldr	r3, [pc, #392]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000722:	6819      	ldr	r1, [r3, #0]
 8000724:	4b60      	ldr	r3, [pc, #384]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	440b      	add	r3, r1
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	fb03 f300 	mul.w	r3, r3, r0
 8000734:	4413      	add	r3, r2
 8000736:	ee07 3a90 	vmov	s15, r3
 800073a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800073e:	4b5c      	ldr	r3, [pc, #368]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000740:	edd3 7a00 	vldr	s15, [r3]
 8000744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800074c:	ee17 3a90 	vmov	r3, s15
 8000750:	b29b      	uxth	r3, r3
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	4857      	ldr	r0, [pc, #348]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000758:	f002 fcd4 	bl	8003104 <HAL_DAC_SetValue>
		RESET_INDEX(0);
 800075c:	4b52      	ldr	r3, [pc, #328]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800075e:	7b1b      	ldrb	r3, [r3, #12]
 8000760:	2b80      	cmp	r3, #128	; 0x80
 8000762:	f040 809a 	bne.w	800089a <HAL_TIM_PeriodElapsedCallback+0x1ca>
 8000766:	4b50      	ldr	r3, [pc, #320]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000768:	2200      	movs	r2, #0
 800076a:	731a      	strb	r2, [r3, #12]
		if (voices[2].index == NUM_PTS) voices[2].index = 0;
	}
*/


}
 800076c:	e095      	b.n	800089a <HAL_TIM_PeriodElapsedCallback+0x1ca>
	else if (htim == &htim7) {
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a51      	ldr	r2, [pc, #324]	; (80008b8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d145      	bne.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x132>
		PUT_TO_DAC(VOICE1);
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	4619      	mov	r1, r3
 800077c:	4b4b      	ldr	r3, [pc, #300]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b49      	ldr	r3, [pc, #292]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000782:	7b1b      	ldrb	r3, [r3, #12]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	4413      	add	r3, r2
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	fb03 f201 	mul.w	r2, r3, r1
 800078e:	4b46      	ldr	r3, [pc, #280]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000790:	7b9b      	ldrb	r3, [r3, #14]
 8000792:	461c      	mov	r4, r3
 8000794:	4b45      	ldr	r3, [pc, #276]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000796:	6819      	ldr	r1, [r3, #0]
 8000798:	4b43      	ldr	r3, [pc, #268]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800079a:	7e9b      	ldrb	r3, [r3, #26]
 800079c:	1c58      	adds	r0, r3, #1
 800079e:	b2c5      	uxtb	r5, r0
 80007a0:	4841      	ldr	r0, [pc, #260]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80007a2:	7685      	strb	r5, [r0, #26]
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	440b      	add	r3, r1
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	fb03 f304 	mul.w	r3, r3, r4
 80007ae:	441a      	add	r2, r3
 80007b0:	4b3d      	ldr	r3, [pc, #244]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80007b2:	7f1b      	ldrb	r3, [r3, #28]
 80007b4:	4618      	mov	r0, r3
 80007b6:	4b3d      	ldr	r3, [pc, #244]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80007b8:	6819      	ldr	r1, [r3, #0]
 80007ba:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80007bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	440b      	add	r3, r1
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	fb03 f300 	mul.w	r3, r3, r0
 80007ca:	4413      	add	r3, r2
 80007cc:	ee07 3a90 	vmov	s15, r3
 80007d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007d4:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80007d6:	edd3 7a00 	vldr	s15, [r3]
 80007da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007e2:	ee17 3a90 	vmov	r3, s15
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	2200      	movs	r2, #0
 80007ea:	2100      	movs	r1, #0
 80007ec:	4831      	ldr	r0, [pc, #196]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80007ee:	f002 fc89 	bl	8003104 <HAL_DAC_SetValue>
		RESET_INDEX(1);
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80007f4:	7e9b      	ldrb	r3, [r3, #26]
 80007f6:	2b80      	cmp	r3, #128	; 0x80
 80007f8:	d14f      	bne.n	800089a <HAL_TIM_PeriodElapsedCallback+0x1ca>
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	769a      	strb	r2, [r3, #26]
}
 8000800:	e04b      	b.n	800089a <HAL_TIM_PeriodElapsedCallback+0x1ca>
	else if (htim == &htim8) {
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a2d      	ldr	r2, [pc, #180]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d147      	bne.n	800089a <HAL_TIM_PeriodElapsedCallback+0x1ca>
		PUT_TO_DAC(VOICE2);
 800080a:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	4619      	mov	r1, r3
 8000810:	4b26      	ldr	r3, [pc, #152]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000816:	7b1b      	ldrb	r3, [r3, #12]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	fb03 f201 	mul.w	r2, r3, r1
 8000822:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000824:	7b9b      	ldrb	r3, [r3, #14]
 8000826:	4618      	mov	r0, r3
 8000828:	4b20      	ldr	r3, [pc, #128]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800082a:	6819      	ldr	r1, [r3, #0]
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800082e:	7e9b      	ldrb	r3, [r3, #26]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	440b      	add	r3, r1
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	fb03 f300 	mul.w	r3, r3, r0
 800083a:	441a      	add	r2, r3
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800083e:	7f1b      	ldrb	r3, [r3, #28]
 8000840:	461c      	mov	r4, r3
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000844:	6819      	ldr	r1, [r3, #0]
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800084c:	1c58      	adds	r0, r3, #1
 800084e:	b2c5      	uxtb	r5, r0
 8000850:	4815      	ldr	r0, [pc, #84]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000852:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	440b      	add	r3, r1
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	fb03 f304 	mul.w	r3, r3, r4
 8000860:	4413      	add	r3, r2
 8000862:	ee07 3a90 	vmov	s15, r3
 8000866:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800086c:	edd3 7a00 	vldr	s15, [r3]
 8000870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000878:	ee17 3a90 	vmov	r3, s15
 800087c:	b29b      	uxth	r3, r3
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	480c      	ldr	r0, [pc, #48]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000884:	f002 fc3e 	bl	8003104 <HAL_DAC_SetValue>
		RESET_INDEX(2);
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800088a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800088e:	2b80      	cmp	r3, #128	; 0x80
 8000890:	d103      	bne.n	800089a <HAL_TIM_PeriodElapsedCallback+0x1ca>
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bdb0      	pop	{r4, r5, r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200005d4 	.word	0x200005d4
 80008a8:	200005a8 	.word	0x200005a8
 80008ac:	20000404 	.word	0x20000404
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000480 	.word	0x20000480
 80008b8:	200006cc 	.word	0x200006cc
 80008bc:	20000434 	.word	0x20000434

080008c0 <HAL_UART_RxCpltCallback>:

// When UART message recieved, only valid if starts with 0x80 or 0x90
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

	if (midi_tmp[0] == 0x90) {
 80008c8:	4b48      	ldr	r3, [pc, #288]	; (80009ec <HAL_UART_RxCpltCallback+0x12c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b90      	cmp	r3, #144	; 0x90
 80008ce:	d120      	bne.n	8000912 <HAL_UART_RxCpltCallback+0x52>
		uint8_t i;
		for (i = 0; i < 3; i++) {
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]
 80008d4:	e008      	b.n	80008e8 <HAL_UART_RxCpltCallback+0x28>
			midi_msg[i] = midi_tmp[i];
 80008d6:	7bfa      	ldrb	r2, [r7, #15]
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	4944      	ldr	r1, [pc, #272]	; (80009ec <HAL_UART_RxCpltCallback+0x12c>)
 80008dc:	5c89      	ldrb	r1, [r1, r2]
 80008de:	4a44      	ldr	r2, [pc, #272]	; (80009f0 <HAL_UART_RxCpltCallback+0x130>)
 80008e0:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 3; i++) {
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	3301      	adds	r3, #1
 80008e6:	73fb      	strb	r3, [r7, #15]
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d9f3      	bls.n	80008d6 <HAL_UART_RxCpltCallback+0x16>
		}

		voices[notes_on].status = ON;
 80008ee:	4b41      	ldr	r3, [pc, #260]	; (80009f4 <HAL_UART_RxCpltCallback+0x134>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4619      	mov	r1, r3
 80008f4:	4a40      	ldr	r2, [pc, #256]	; (80009f8 <HAL_UART_RxCpltCallback+0x138>)
 80008f6:	460b      	mov	r3, r1
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	1a5b      	subs	r3, r3, r1
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4413      	add	r3, r2
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
		notes_on++;
 8000904:	4b3b      	ldr	r3, [pc, #236]	; (80009f4 <HAL_UART_RxCpltCallback+0x134>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	3301      	adds	r3, #1
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b39      	ldr	r3, [pc, #228]	; (80009f4 <HAL_UART_RxCpltCallback+0x134>)
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	e023      	b.n	800095a <HAL_UART_RxCpltCallback+0x9a>


	}

	else if (midi_tmp[0] == 0x80) {
 8000912:	4b36      	ldr	r3, [pc, #216]	; (80009ec <HAL_UART_RxCpltCallback+0x12c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b80      	cmp	r3, #128	; 0x80
 8000918:	d11f      	bne.n	800095a <HAL_UART_RxCpltCallback+0x9a>
		uint8_t i;
		for (i = 0; i < 3; i++) {
 800091a:	2300      	movs	r3, #0
 800091c:	73bb      	strb	r3, [r7, #14]
 800091e:	e008      	b.n	8000932 <HAL_UART_RxCpltCallback+0x72>
			midi_msg[i] = midi_tmp[i];
 8000920:	7bba      	ldrb	r2, [r7, #14]
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	4931      	ldr	r1, [pc, #196]	; (80009ec <HAL_UART_RxCpltCallback+0x12c>)
 8000926:	5c89      	ldrb	r1, [r1, r2]
 8000928:	4a31      	ldr	r2, [pc, #196]	; (80009f0 <HAL_UART_RxCpltCallback+0x130>)
 800092a:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 3; i++) {
 800092c:	7bbb      	ldrb	r3, [r7, #14]
 800092e:	3301      	adds	r3, #1
 8000930:	73bb      	strb	r3, [r7, #14]
 8000932:	7bbb      	ldrb	r3, [r7, #14]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d9f3      	bls.n	8000920 <HAL_UART_RxCpltCallback+0x60>
		}

		notes_on--;
 8000938:	4b2e      	ldr	r3, [pc, #184]	; (80009f4 <HAL_UART_RxCpltCallback+0x134>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	3b01      	subs	r3, #1
 800093e:	b2da      	uxtb	r2, r3
 8000940:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <HAL_UART_RxCpltCallback+0x134>)
 8000942:	701a      	strb	r2, [r3, #0]
		voices[notes_on].status = OFF;
 8000944:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <HAL_UART_RxCpltCallback+0x134>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	4a2b      	ldr	r2, [pc, #172]	; (80009f8 <HAL_UART_RxCpltCallback+0x138>)
 800094c:	460b      	mov	r3, r1
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	1a5b      	subs	r3, r3, r1
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4413      	add	r3, r2
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]

	}

	switch (notes_on) {
 800095a:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <HAL_UART_RxCpltCallback+0x134>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b03      	cmp	r3, #3
 8000960:	d02b      	beq.n	80009ba <HAL_UART_RxCpltCallback+0xfa>
 8000962:	2b03      	cmp	r3, #3
 8000964:	dc3c      	bgt.n	80009e0 <HAL_UART_RxCpltCallback+0x120>
 8000966:	2b01      	cmp	r3, #1
 8000968:	d002      	beq.n	8000970 <HAL_UART_RxCpltCallback+0xb0>
 800096a:	2b02      	cmp	r3, #2
 800096c:	d012      	beq.n	8000994 <HAL_UART_RxCpltCallback+0xd4>
			case 3:
				TIM8->ARR = ARR_VAL(NOTE);
				multiplier = 1;
				break;
			}
}
 800096e:	e037      	b.n	80009e0 <HAL_UART_RxCpltCallback+0x120>
				TIM6->ARR = ARR_VAL(NOTE);
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <HAL_UART_RxCpltCallback+0x130>)
 8000972:	785b      	ldrb	r3, [r3, #1]
 8000974:	3301      	adds	r3, #1
 8000976:	4a21      	ldr	r2, [pc, #132]	; (80009fc <HAL_UART_RxCpltCallback+0x13c>)
 8000978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800097c:	01db      	lsls	r3, r3, #7
 800097e:	461a      	mov	r2, r3
 8000980:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <HAL_UART_RxCpltCallback+0x140>)
 8000982:	fbb3 f3f2 	udiv	r3, r3, r2
 8000986:	4a1f      	ldr	r2, [pc, #124]	; (8000a04 <HAL_UART_RxCpltCallback+0x144>)
 8000988:	3b01      	subs	r3, #1
 800098a:	62d3      	str	r3, [r2, #44]	; 0x2c
				multiplier = 3;
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <HAL_UART_RxCpltCallback+0x148>)
 800098e:	4a1f      	ldr	r2, [pc, #124]	; (8000a0c <HAL_UART_RxCpltCallback+0x14c>)
 8000990:	601a      	str	r2, [r3, #0]
				break;
 8000992:	e025      	b.n	80009e0 <HAL_UART_RxCpltCallback+0x120>
				TIM7->ARR = ARR_VAL(NOTE);
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <HAL_UART_RxCpltCallback+0x130>)
 8000996:	785b      	ldrb	r3, [r3, #1]
 8000998:	3301      	adds	r3, #1
 800099a:	4a18      	ldr	r2, [pc, #96]	; (80009fc <HAL_UART_RxCpltCallback+0x13c>)
 800099c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a0:	01db      	lsls	r3, r3, #7
 80009a2:	461a      	mov	r2, r3
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <HAL_UART_RxCpltCallback+0x140>)
 80009a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80009aa:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <HAL_UART_RxCpltCallback+0x150>)
 80009ac:	3b01      	subs	r3, #1
 80009ae:	62d3      	str	r3, [r2, #44]	; 0x2c
				multiplier = 1.5;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_UART_RxCpltCallback+0x148>)
 80009b2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80009b6:	601a      	str	r2, [r3, #0]
				break;
 80009b8:	e012      	b.n	80009e0 <HAL_UART_RxCpltCallback+0x120>
				TIM8->ARR = ARR_VAL(NOTE);
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <HAL_UART_RxCpltCallback+0x130>)
 80009bc:	785b      	ldrb	r3, [r3, #1]
 80009be:	3301      	adds	r3, #1
 80009c0:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <HAL_UART_RxCpltCallback+0x13c>)
 80009c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009c6:	01db      	lsls	r3, r3, #7
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_UART_RxCpltCallback+0x140>)
 80009cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80009d0:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <HAL_UART_RxCpltCallback+0x154>)
 80009d2:	3b01      	subs	r3, #1
 80009d4:	62d3      	str	r3, [r2, #44]	; 0x2c
				multiplier = 1;
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <HAL_UART_RxCpltCallback+0x148>)
 80009d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80009dc:	601a      	str	r2, [r3, #0]
				break;
 80009de:	bf00      	nop
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	20000718 	.word	0x20000718
 80009f0:	20000514 	.word	0x20000514
 80009f4:	20000430 	.word	0x20000430
 80009f8:	200005a8 	.word	0x200005a8
 80009fc:	08006e2c 	.word	0x08006e2c
 8000a00:	0a21fe80 	.word	0x0a21fe80
 8000a04:	40001000 	.word	0x40001000
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	40400000 	.word	0x40400000
 8000a10:	40001400 	.word	0x40001400
 8000a14:	40013400 	.word	0x40013400

08000a18 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b0a8      	sub	sp, #160	; 0xa0
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a22:	2238      	movs	r2, #56	; 0x38
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f006 f9ec 	bl	8006e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2254      	movs	r2, #84	; 0x54
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f006 f9de 	bl	8006e04 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f002 ff99 	bl	8003980 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a56:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a58:	2340      	movs	r3, #64	; 0x40
 8000a5a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a62:	2302      	movs	r3, #2
 8000a64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a6e:	2355      	movs	r3, #85	; 0x55
 8000a70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a86:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f003 f82c 	bl	8003ae8 <HAL_RCC_OscConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a96:	f000 fa6f 	bl	8000f78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 fb2f 	bl	8004118 <HAL_RCC_ClockConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ac0:	f000 fa5a 	bl	8000f78 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000acc:	463b      	mov	r3, r7
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f003 fd3e 	bl	8004550 <HAL_RCCEx_PeriphCLKConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ada:	f000 fa4d 	bl	8000f78 <Error_Handler>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	37a0      	adds	r7, #160	; 0xa0
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <MX_ADC2_Init>:

static void MX_ADC2_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aee:	463b      	mov	r3, r7
 8000af0:	2220      	movs	r2, #32
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f006 f985 	bl	8006e04 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000afa:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000afc:	4a2c      	ldr	r2, [pc, #176]	; (8000bb0 <MX_ADC2_Init+0xc8>)
 8000afe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b00:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b02:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b06:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b08:	4b28      	ldr	r3, [pc, #160]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b0e:	4b27      	ldr	r3, [pc, #156]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000b14:	4b25      	ldr	r3, [pc, #148]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b1a:	4b24      	ldr	r3, [pc, #144]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b22:	2208      	movs	r2, #8
 8000b24:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000b32:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b42:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b66:	4811      	ldr	r0, [pc, #68]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b68:	f000 fef8 	bl	800195c <HAL_ADC_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000b72:	f000 fa01 	bl	8000f78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_ADC2_Init+0xcc>)
 8000b78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7a:	2306      	movs	r3, #6
 8000b7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b82:	237f      	movs	r3, #127	; 0x7f
 8000b84:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b86:	2304      	movs	r3, #4
 8000b88:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b8e:	463b      	mov	r3, r7
 8000b90:	4619      	mov	r1, r3
 8000b92:	4806      	ldr	r0, [pc, #24]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b94:	f001 fc04 	bl	80023a0 <HAL_ADC_ConfigChannel>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000b9e:	f000 f9eb 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	3720      	adds	r7, #32
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000494 	.word	0x20000494
 8000bb0:	50000100 	.word	0x50000100
 8000bb4:	04300002 	.word	0x04300002

08000bb8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	2230      	movs	r2, #48	; 0x30
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f006 f91d 	bl	8006e04 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_DAC1_Init+0x6c>)
 8000bcc:	4a16      	ldr	r2, [pc, #88]	; (8000c28 <MX_DAC1_Init+0x70>)
 8000bce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000bd0:	4814      	ldr	r0, [pc, #80]	; (8000c24 <MX_DAC1_Init+0x6c>)
 8000bd2:	f002 f9c8 	bl	8002f66 <HAL_DAC_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000bdc:	f000 f9cc 	bl	8000f78 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000be0:	2302      	movs	r3, #2
 8000be2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c04:	463b      	mov	r3, r7
 8000c06:	2200      	movs	r2, #0
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4806      	ldr	r0, [pc, #24]	; (8000c24 <MX_DAC1_Init+0x6c>)
 8000c0c:	f002 faac 	bl	8003168 <HAL_DAC_ConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000c16:	f000 f9af 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	3730      	adds	r7, #48	; 0x30
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000480 	.word	0x20000480
 8000c28:	50000800 	.word	0x50000800

08000c2c <MX_TIM2_Init>:
  * @retval None
  */


static void MX_TIM2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000c4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = ARR_VAL(1);
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000c60:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c70:	4813      	ldr	r0, [pc, #76]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000c72:	f003 feb9 	bl	80049e8 <HAL_TIM_Base_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c7c:	f000 f97c 	bl	8000f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000c8e:	f004 f8fb 	bl	8004e88 <HAL_TIM_ConfigClockSource>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c98:	f000 f96e 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c9c:	2320      	movs	r3, #32
 8000c9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000caa:	f004 fb6b 	bl	8005384 <HAL_TIMEx_MasterConfigSynchronization>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cb4:	f000 f960 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	3720      	adds	r7, #32
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000620 	.word	0x20000620
 8000cc4:	001443fc 	.word	0x001443fc

08000cc8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000cda:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <MX_TIM6_Init+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = ARR_VAL(C4);
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000cec:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8000cf0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000cfa:	f003 fe75 	bl	80049e8 <HAL_TIM_Base_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d04:	f000 f938 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d08:	2320      	movs	r3, #32
 8000d0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000d16:	f004 fb35 	bl	8005384 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d20:	f000 f92a 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200005d4 	.word	0x200005d4
 8000d30:	40001000 	.word	0x40001000

08000d34 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_TIM7_Init+0x64>)
 8000d46:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <MX_TIM7_Init+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MX_TIM7_Init+0x64>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_TIM7_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = ARR_VAL(C4);
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <MX_TIM7_Init+0x64>)
 8000d58:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8000d5c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_TIM7_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d64:	480c      	ldr	r0, [pc, #48]	; (8000d98 <MX_TIM7_Init+0x64>)
 8000d66:	f003 fe3f 	bl	80049e8 <HAL_TIM_Base_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000d70:	f000 f902 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d74:	2320      	movs	r3, #32
 8000d76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_TIM7_Init+0x64>)
 8000d82:	f004 faff 	bl	8005384 <HAL_TIMEx_MasterConfigSynchronization>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000d8c:	f000 f8f4 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200006cc 	.word	0x200006cc
 8000d9c:	40001400 	.word	0x40001400

08000da0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <MX_TIM8_Init+0xa0>)
 8000dc0:	4a20      	ldr	r2, [pc, #128]	; (8000e44 <MX_TIM8_Init+0xa4>)
 8000dc2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <MX_TIM8_Init+0xa0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_TIM8_Init+0xa0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = ARR_VAL(C4);
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <MX_TIM8_Init+0xa0>)
 8000dd2:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8000dd6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_TIM8_Init+0xa0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <MX_TIM8_Init+0xa0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <MX_TIM8_Init+0xa0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000dea:	4815      	ldr	r0, [pc, #84]	; (8000e40 <MX_TIM8_Init+0xa0>)
 8000dec:	f003 fdfc 	bl	80049e8 <HAL_TIM_Base_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000df6:	f000 f8bf 	bl	8000f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4619      	mov	r1, r3
 8000e06:	480e      	ldr	r0, [pc, #56]	; (8000e40 <MX_TIM8_Init+0xa0>)
 8000e08:	f004 f83e 	bl	8004e88 <HAL_TIM_ConfigClockSource>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000e12:	f000 f8b1 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e16:	2320      	movs	r3, #32
 8000e18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_TIM8_Init+0xa0>)
 8000e28:	f004 faac 	bl	8005384 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000e32:	f000 f8a1 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3720      	adds	r7, #32
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000434 	.word	0x20000434
 8000e44:	40013400 	.word	0x40013400

08000e48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e4c:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e4e:	4a23      	ldr	r2, [pc, #140]	; (8000edc <MX_USART1_UART_Init+0x94>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e54:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000e58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e90:	4811      	ldr	r0, [pc, #68]	; (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e92:	f004 fb53 	bl	800553c <HAL_UART_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e9c:	f000 f86c 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000ea4:	f005 febf 	bl	8006c26 <HAL_UARTEx_SetTxFifoThreshold>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000eae:	f000 f863 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000eb6:	f005 fef4 	bl	8006ca2 <HAL_UARTEx_SetRxFifoThreshold>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ec0:	f000 f85a 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000ec6:	f005 fe75 	bl	8006bb4 <HAL_UARTEx_DisableFifoMode>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ed0:	f000 f852 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000518 	.word	0x20000518
 8000edc:	40013800 	.word	0x40013800

08000ee0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_GPIO_Init+0x90>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <MX_GPIO_Init+0x90>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_GPIO_Init+0x90>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_GPIO_Init+0x90>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <MX_GPIO_Init+0x90>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_GPIO_Init+0x90>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_GPIO_Init+0x90>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	4a11      	ldr	r2, [pc, #68]	; (8000f70 <MX_GPIO_Init+0x90>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_GPIO_Init+0x90>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f44:	480b      	ldr	r0, [pc, #44]	; (8000f74 <MX_GPIO_Init+0x94>)
 8000f46:	f002 fd03 	bl	8003950 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PB11 */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	4619      	mov	r1, r3
 8000f62:	4804      	ldr	r0, [pc, #16]	; (8000f74 <MX_GPIO_Init+0x94>)
 8000f64:	f002 fb72 	bl	800364c <HAL_GPIO_Init>

}
 8000f68:	bf00      	nop
 8000f6a:	3720      	adds	r7, #32
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021000 	.word	0x40021000
 8000f74:	48000400 	.word	0x48000400

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <Error_Handler+0x8>
	...

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6613      	str	r3, [r2, #96]	; 0x60
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	6593      	str	r3, [r2, #88]	; 0x58
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fba:	f002 fd85 	bl	8003ac8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000

08000fcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a19      	ldr	r2, [pc, #100]	; (8001050 <HAL_ADC_MspInit+0x84>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d12c      	bne.n	8001048 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_ADC_MspInit+0x88>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a18      	ldr	r2, [pc, #96]	; (8001054 <HAL_ADC_MspInit+0x88>)
 8000ff4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_ADC_MspInit+0x88>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_ADC_MspInit+0x88>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <HAL_ADC_MspInit+0x88>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_ADC_MspInit+0x88>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800101e:	2301      	movs	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001022:	2303      	movs	r3, #3
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f002 fb0a 	bl	800364c <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2012      	movs	r0, #18
 800103e:	f001 ff5e 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001042:	2012      	movs	r0, #18
 8001044:	f001 ff75 	bl	8002f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	; 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	50000100 	.word	0x50000100
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a19      	ldr	r2, [pc, #100]	; (80010dc <HAL_DAC_MspInit+0x84>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d12c      	bne.n	80010d4 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <HAL_DAC_MspInit+0x88>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <HAL_DAC_MspInit+0x88>)
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <HAL_DAC_MspInit+0x88>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <HAL_DAC_MspInit+0x88>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <HAL_DAC_MspInit+0x88>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_DAC_MspInit+0x88>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010aa:	2310      	movs	r3, #16
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ae:	2303      	movs	r3, #3
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c0:	f002 fac4 	bl	800364c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2036      	movs	r0, #54	; 0x36
 80010ca:	f001 ff18 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010ce:	2036      	movs	r0, #54	; 0x36
 80010d0:	f001 ff2f 	bl	8002f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	50000800 	.word	0x50000800
 80010e0:	40021000 	.word	0x40021000

080010e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f4:	d114      	bne.n	8001120 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f6:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <HAL_TIM_Base_MspInit+0xe0>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	4a32      	ldr	r2, [pc, #200]	; (80011c4 <HAL_TIM_Base_MspInit+0xe0>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6593      	str	r3, [r2, #88]	; 0x58
 8001102:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <HAL_TIM_Base_MspInit+0xe0>)
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	201c      	movs	r0, #28
 8001114:	f001 fef3 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001118:	201c      	movs	r0, #28
 800111a:	f001 ff0a 	bl	8002f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800111e:	e04c      	b.n	80011ba <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <HAL_TIM_Base_MspInit+0xe4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d114      	bne.n	8001154 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_TIM_Base_MspInit+0xe0>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	4a25      	ldr	r2, [pc, #148]	; (80011c4 <HAL_TIM_Base_MspInit+0xe0>)
 8001130:	f043 0310 	orr.w	r3, r3, #16
 8001134:	6593      	str	r3, [r2, #88]	; 0x58
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <HAL_TIM_Base_MspInit+0xe0>)
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2036      	movs	r0, #54	; 0x36
 8001148:	f001 fed9 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800114c:	2036      	movs	r0, #54	; 0x36
 800114e:	f001 fef0 	bl	8002f32 <HAL_NVIC_EnableIRQ>
}
 8001152:	e032      	b.n	80011ba <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <HAL_TIM_Base_MspInit+0xe8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d114      	bne.n	8001188 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_TIM_Base_MspInit+0xe0>)
 8001160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001162:	4a18      	ldr	r2, [pc, #96]	; (80011c4 <HAL_TIM_Base_MspInit+0xe0>)
 8001164:	f043 0320 	orr.w	r3, r3, #32
 8001168:	6593      	str	r3, [r2, #88]	; 0x58
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_TIM_Base_MspInit+0xe0>)
 800116c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2037      	movs	r0, #55	; 0x37
 800117c:	f001 febf 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001180:	2037      	movs	r0, #55	; 0x37
 8001182:	f001 fed6 	bl	8002f32 <HAL_NVIC_EnableIRQ>
}
 8001186:	e018      	b.n	80011ba <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM8)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <HAL_TIM_Base_MspInit+0xec>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d113      	bne.n	80011ba <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <HAL_TIM_Base_MspInit+0xe0>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <HAL_TIM_Base_MspInit+0xe0>)
 8001198:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800119c:	6613      	str	r3, [r2, #96]	; 0x60
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_TIM_Base_MspInit+0xe0>)
 80011a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	202c      	movs	r0, #44	; 0x2c
 80011b0:	f001 fea5 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 80011b4:	202c      	movs	r0, #44	; 0x2c
 80011b6:	f001 febc 	bl	8002f32 <HAL_NVIC_EnableIRQ>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40001000 	.word	0x40001000
 80011cc:	40001400 	.word	0x40001400
 80011d0:	40013400 	.word	0x40013400

080011d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <HAL_UART_MspInit+0x8c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12f      	bne.n	8001256 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_UART_MspInit+0x90>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fa:	4a1a      	ldr	r2, [pc, #104]	; (8001264 <HAL_UART_MspInit+0x90>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001200:	6613      	str	r3, [r2, #96]	; 0x60
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_UART_MspInit+0x90>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_UART_MspInit+0x90>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a14      	ldr	r2, [pc, #80]	; (8001264 <HAL_UART_MspInit+0x90>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_UART_MspInit+0x90>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001226:	2330      	movs	r3, #48	; 0x30
 8001228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001236:	2307      	movs	r3, #7
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <HAL_UART_MspInit+0x94>)
 8001242:	f002 fa03 	bl	800364c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2025      	movs	r0, #37	; 0x25
 800124c:	f001 fe57 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001250:	2025      	movs	r0, #37	; 0x25
 8001252:	f001 fe6e 	bl	8002f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40013800 	.word	0x40013800
 8001264:	40021000 	.word	0x40021000
 8001268:	48000800 	.word	0x48000800

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <NMI_Handler+0x4>

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <MemManage_Handler+0x4>

0800127e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler+0x4>

0800128a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b8:	f000 f8d0 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <ADC1_2_IRQHandler+0x10>)
 80012c6:	f000 fdfd 	bl	8001ec4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000494 	.word	0x20000494

080012d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <TIM2_IRQHandler+0x10>)
 80012da:	f003 fc55 	bl	8004b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000620 	.word	0x20000620

080012e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <USART1_IRQHandler+0x10>)
 80012ee:	f004 f9bb 	bl	8005668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000518 	.word	0x20000518

080012fc <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <TIM8_UP_IRQHandler+0x10>)
 8001302:	f003 fc41 	bl	8004b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000434 	.word	0x20000434

08001310 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <TIM6_DAC_IRQHandler+0x14>)
 8001316:	f003 fc37 	bl	8004b88 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800131a:	4803      	ldr	r0, [pc, #12]	; (8001328 <TIM6_DAC_IRQHandler+0x18>)
 800131c:	f001 fe98 	bl	8003050 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200005d4 	.word	0x200005d4
 8001328:	20000480 	.word	0x20000480

0800132c <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <TIM7_DAC_IRQHandler+0x10>)
 8001332:	f003 fc29 	bl	8004b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200006cc 	.word	0x200006cc

08001340 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <SystemInit+0x20>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <SystemInit+0x20>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001366:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800136a:	490e      	ldr	r1, [pc, #56]	; (80013a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800136c:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <LoopForever+0xe>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001380:	4c0b      	ldr	r4, [pc, #44]	; (80013b0 <LoopForever+0x16>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800138e:	f7ff ffd7 	bl	8001340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001392:	f005 fd13 	bl	8006dbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001396:	f7ff f8bb 	bl	8000510 <main>

0800139a <LoopForever>:

LoopForever:
    b LoopForever
 800139a:	e7fe      	b.n	800139a <LoopForever>
  ldr   r0, =_estack
 800139c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 80013a8:	08006f48 	.word	0x08006f48
  ldr r2, =_sbss
 80013ac:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 80013b0:	20000720 	.word	0x20000720

080013b4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC3_IRQHandler>

080013b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c0:	2003      	movs	r0, #3
 80013c2:	f001 fd91 	bl	8002ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c6:	2000      	movs	r0, #0
 80013c8:	f000 f80e 	bl	80013e8 <HAL_InitTick>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	e001      	b.n	80013dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013d8:	f7ff fdd4 	bl	8000f84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013dc:	79fb      	ldrb	r3, [r7, #7]

}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_InitTick+0x68>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d022      	beq.n	8001442 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_InitTick+0x6c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_InitTick+0x68>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001408:	fbb1 f3f3 	udiv	r3, r1, r3
 800140c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f001 fd9c 	bl	8002f4e <HAL_SYSTICK_Config>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10f      	bne.n	800143c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b0f      	cmp	r3, #15
 8001420:	d809      	bhi.n	8001436 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001422:	2200      	movs	r2, #0
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	f04f 30ff 	mov.w	r0, #4294967295
 800142a:	f001 fd68 	bl	8002efe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_InitTick+0x70>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	e007      	b.n	8001446 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	e004      	b.n	8001446 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	e001      	b.n	8001446 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000410 	.word	0x20000410
 8001454:	20000408 	.word	0x20000408
 8001458:	2000040c 	.word	0x2000040c

0800145c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_IncTick+0x1c>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_IncTick+0x20>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4413      	add	r3, r2
 800146a:	4a03      	ldr	r2, [pc, #12]	; (8001478 <HAL_IncTick+0x1c>)
 800146c:	6013      	str	r3, [r2, #0]
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	2000071c 	.word	0x2000071c
 800147c:	20000410 	.word	0x20000410

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	2000071c 	.word	0x2000071c

08001498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff ffee 	bl	8001480 <HAL_GetTick>
 80014a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d004      	beq.n	80014bc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_Delay+0x40>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	4413      	add	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014bc:	bf00      	nop
 80014be:	f7ff ffdf 	bl	8001480 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d8f7      	bhi.n	80014be <HAL_Delay+0x26>
  {
  }
}
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000410 	.word	0x20000410

080014dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	609a      	str	r2, [r3, #8]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3360      	adds	r3, #96	; 0x60
 8001556:	461a      	mov	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <LL_ADC_SetOffset+0x44>)
 8001566:	4013      	ands	r3, r2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	4313      	orrs	r3, r2
 8001574:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	03fff000 	.word	0x03fff000

0800158c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3360      	adds	r3, #96	; 0x60
 800159a:	461a      	mov	r2, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	3360      	adds	r3, #96	; 0x60
 80015c8:	461a      	mov	r2, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	431a      	orrs	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015e2:	bf00      	nop
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b087      	sub	sp, #28
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3360      	adds	r3, #96	; 0x60
 80015fe:	461a      	mov	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	431a      	orrs	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001618:	bf00      	nop
 800161a:	371c      	adds	r7, #28
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3360      	adds	r3, #96	; 0x60
 8001634:	461a      	mov	r2, r3
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	431a      	orrs	r2, r3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800164e:	bf00      	nop
 8001650:	371c      	adds	r7, #28
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	615a      	str	r2, [r3, #20]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b087      	sub	sp, #28
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	3330      	adds	r3, #48	; 0x30
 80016b6:	461a      	mov	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	4413      	add	r3, r2
 80016c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	211f      	movs	r1, #31
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	401a      	ands	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	0e9b      	lsrs	r3, r3, #26
 80016de:	f003 011f 	and.w	r1, r3, #31
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	431a      	orrs	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016f2:	bf00      	nop
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3314      	adds	r3, #20
 8001734:	461a      	mov	r2, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	0e5b      	lsrs	r3, r3, #25
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	4413      	add	r3, r2
 8001742:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	0d1b      	lsrs	r3, r3, #20
 800174c:	f003 031f 	and.w	r3, r3, #31
 8001750:	2107      	movs	r1, #7
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	401a      	ands	r2, r3
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	0d1b      	lsrs	r3, r3, #20
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	431a      	orrs	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800176e:	bf00      	nop
 8001770:	371c      	adds	r7, #28
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001794:	43db      	mvns	r3, r3
 8001796:	401a      	ands	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0318 	and.w	r3, r3, #24
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017a0:	40d9      	lsrs	r1, r3
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	400b      	ands	r3, r1
 80017a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017aa:	431a      	orrs	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	0007ffff 	.word	0x0007ffff

080017c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 031f 	and.w	r3, r3, #31
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800180c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6093      	str	r3, [r2, #8]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001834:	d101      	bne.n	800183a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001858:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800185c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001884:	d101      	bne.n	800188a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d101      	bne.n	80018d8 <LL_ADC_IsEnabled+0x18>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <LL_ADC_IsEnabled+0x1a>
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018fa:	f043 0204 	orr.w	r2, r3, #4
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	2b04      	cmp	r3, #4
 8001920:	d101      	bne.n	8001926 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b08      	cmp	r3, #8
 8001946:	d101      	bne.n	800194c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e1af      	b.n	8001cd6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001980:	2b00      	cmp	r3, #0
 8001982:	d109      	bne.n	8001998 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff fb21 	bl	8000fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff3f 	bl	8001820 <LL_ADC_IsDeepPowerDownEnabled>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d004      	beq.n	80019b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff25 	bl	80017fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ff5a 	bl	8001870 <LL_ADC_IsInternalRegulatorEnabled>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d115      	bne.n	80019ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff3e 	bl	8001848 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019cc:	4b9f      	ldr	r3, [pc, #636]	; (8001c4c <HAL_ADC_Init+0x2f0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	099b      	lsrs	r3, r3, #6
 80019d2:	4a9f      	ldr	r2, [pc, #636]	; (8001c50 <HAL_ADC_Init+0x2f4>)
 80019d4:	fba2 2303 	umull	r2, r3, r2, r3
 80019d8:	099b      	lsrs	r3, r3, #6
 80019da:	3301      	adds	r3, #1
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019e0:	e002      	b.n	80019e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f9      	bne.n	80019e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff3c 	bl	8001870 <LL_ADC_IsInternalRegulatorEnabled>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10d      	bne.n	8001a1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a02:	f043 0210 	orr.w	r2, r3, #16
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0e:	f043 0201 	orr.w	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff75 	bl	800190e <LL_ADC_REG_IsConversionOngoing>
 8001a24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 8148 	bne.w	8001cc4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f040 8144 	bne.w	8001cc4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a44:	f043 0202 	orr.w	r2, r3, #2
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff35 	bl	80018c0 <LL_ADC_IsEnabled>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d141      	bne.n	8001ae0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a64:	d004      	beq.n	8001a70 <HAL_ADC_Init+0x114>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a7a      	ldr	r2, [pc, #488]	; (8001c54 <HAL_ADC_Init+0x2f8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d10f      	bne.n	8001a90 <HAL_ADC_Init+0x134>
 8001a70:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a74:	f7ff ff24 	bl	80018c0 <LL_ADC_IsEnabled>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	4876      	ldr	r0, [pc, #472]	; (8001c54 <HAL_ADC_Init+0x2f8>)
 8001a7c:	f7ff ff20 	bl	80018c0 <LL_ADC_IsEnabled>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4323      	orrs	r3, r4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	bf0c      	ite	eq
 8001a88:	2301      	moveq	r3, #1
 8001a8a:	2300      	movne	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	e012      	b.n	8001ab6 <HAL_ADC_Init+0x15a>
 8001a90:	4871      	ldr	r0, [pc, #452]	; (8001c58 <HAL_ADC_Init+0x2fc>)
 8001a92:	f7ff ff15 	bl	80018c0 <LL_ADC_IsEnabled>
 8001a96:	4604      	mov	r4, r0
 8001a98:	4870      	ldr	r0, [pc, #448]	; (8001c5c <HAL_ADC_Init+0x300>)
 8001a9a:	f7ff ff11 	bl	80018c0 <LL_ADC_IsEnabled>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	431c      	orrs	r4, r3
 8001aa2:	486f      	ldr	r0, [pc, #444]	; (8001c60 <HAL_ADC_Init+0x304>)
 8001aa4:	f7ff ff0c 	bl	80018c0 <LL_ADC_IsEnabled>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4323      	orrs	r3, r4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bf0c      	ite	eq
 8001ab0:	2301      	moveq	r3, #1
 8001ab2:	2300      	movne	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d012      	beq.n	8001ae0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac2:	d004      	beq.n	8001ace <HAL_ADC_Init+0x172>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a62      	ldr	r2, [pc, #392]	; (8001c54 <HAL_ADC_Init+0x2f8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Init+0x176>
 8001ace:	4a65      	ldr	r2, [pc, #404]	; (8001c64 <HAL_ADC_Init+0x308>)
 8001ad0:	e000      	b.n	8001ad4 <HAL_ADC_Init+0x178>
 8001ad2:	4a65      	ldr	r2, [pc, #404]	; (8001c68 <HAL_ADC_Init+0x30c>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4610      	mov	r0, r2
 8001adc:	f7ff fcfe 	bl	80014dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7f5b      	ldrb	r3, [r3, #29]
 8001ae4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001af0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001af6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001afe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d106      	bne.n	8001b1c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	3b01      	subs	r3, #1
 8001b14:	045b      	lsls	r3, r3, #17
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d009      	beq.n	8001b38 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	4b4b      	ldr	r3, [pc, #300]	; (8001c6c <HAL_ADC_Init+0x310>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	69b9      	ldr	r1, [r7, #24]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fed1 	bl	800190e <LL_ADC_REG_IsConversionOngoing>
 8001b6c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fede 	bl	8001934 <LL_ADC_INJ_IsConversionOngoing>
 8001b78:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d17f      	bne.n	8001c80 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d17c      	bne.n	8001c80 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b8a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b92:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ba2:	f023 0302 	bic.w	r3, r3, #2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	69b9      	ldr	r1, [r7, #24]
 8001bac:	430b      	orrs	r3, r1
 8001bae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d017      	beq.n	8001be8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bc6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001bd0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6911      	ldr	r1, [r2, #16]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001be6:	e013      	b.n	8001c10 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bf6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c0c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d12a      	bne.n	8001c70 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c24:	f023 0304 	bic.w	r3, r3, #4
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c30:	4311      	orrs	r1, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c36:	4311      	orrs	r1, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0201 	orr.w	r2, r2, #1
 8001c48:	611a      	str	r2, [r3, #16]
 8001c4a:	e019      	b.n	8001c80 <HAL_ADC_Init+0x324>
 8001c4c:	20000408 	.word	0x20000408
 8001c50:	053e2d63 	.word	0x053e2d63
 8001c54:	50000100 	.word	0x50000100
 8001c58:	50000400 	.word	0x50000400
 8001c5c:	50000500 	.word	0x50000500
 8001c60:	50000600 	.word	0x50000600
 8001c64:	50000300 	.word	0x50000300
 8001c68:	50000700 	.word	0x50000700
 8001c6c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d10c      	bne.n	8001ca2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f023 010f 	bic.w	r1, r3, #15
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	1e5a      	subs	r2, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca0:	e007      	b.n	8001cb2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 020f 	bic.w	r2, r2, #15
 8001cb0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb6:	f023 0303 	bic.w	r3, r3, #3
 8001cba:	f043 0201 	orr.w	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cc2:	e007      	b.n	8001cd4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc8:	f043 0210 	orr.w	r2, r3, #16
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	; 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd90      	pop	{r4, r7, pc}
 8001cde:	bf00      	nop

08001ce0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cf0:	d004      	beq.n	8001cfc <HAL_ADC_Start+0x1c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a67      	ldr	r2, [pc, #412]	; (8001e94 <HAL_ADC_Start+0x1b4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_Start+0x20>
 8001cfc:	4b66      	ldr	r3, [pc, #408]	; (8001e98 <HAL_ADC_Start+0x1b8>)
 8001cfe:	e000      	b.n	8001d02 <HAL_ADC_Start+0x22>
 8001d00:	4b66      	ldr	r3, [pc, #408]	; (8001e9c <HAL_ADC_Start+0x1bc>)
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fd5e 	bl	80017c4 <LL_ADC_GetMultimode>
 8001d08:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fdfd 	bl	800190e <LL_ADC_REG_IsConversionOngoing>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 80b4 	bne.w	8001e84 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_Start+0x4a>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e0af      	b.n	8001e8a <HAL_ADC_Start+0x1aa>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 ff74 	bl	8002c20 <ADC_Enable>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f040 809b 	bne.w	8001e7a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a4d      	ldr	r2, [pc, #308]	; (8001e94 <HAL_ADC_Start+0x1b4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d009      	beq.n	8001d76 <HAL_ADC_Start+0x96>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a4e      	ldr	r2, [pc, #312]	; (8001ea0 <HAL_ADC_Start+0x1c0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d002      	beq.n	8001d72 <HAL_ADC_Start+0x92>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	e003      	b.n	8001d7a <HAL_ADC_Start+0x9a>
 8001d72:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <HAL_ADC_Start+0x1c4>)
 8001d74:	e001      	b.n	8001d7a <HAL_ADC_Start+0x9a>
 8001d76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d002      	beq.n	8001d88 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d105      	bne.n	8001d94 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da0:	d106      	bne.n	8001db0 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da6:	f023 0206 	bic.w	r2, r3, #6
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	661a      	str	r2, [r3, #96]	; 0x60
 8001dae:	e002      	b.n	8001db6 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	221c      	movs	r2, #28
 8001dbc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a32      	ldr	r2, [pc, #200]	; (8001e94 <HAL_ADC_Start+0x1b4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d009      	beq.n	8001de4 <HAL_ADC_Start+0x104>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a32      	ldr	r2, [pc, #200]	; (8001ea0 <HAL_ADC_Start+0x1c0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d002      	beq.n	8001de0 <HAL_ADC_Start+0x100>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	e003      	b.n	8001de8 <HAL_ADC_Start+0x108>
 8001de0:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <HAL_ADC_Start+0x1c4>)
 8001de2:	e001      	b.n	8001de8 <HAL_ADC_Start+0x108>
 8001de4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d008      	beq.n	8001e02 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d002      	beq.n	8001e02 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b09      	cmp	r3, #9
 8001e00:	d114      	bne.n	8001e2c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fd5e 	bl	80018e6 <LL_ADC_REG_StartConversion>
 8001e2a:	e02d      	b.n	8001e88 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <HAL_ADC_Start+0x1b4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d009      	beq.n	8001e56 <HAL_ADC_Start+0x176>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <HAL_ADC_Start+0x1c0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d002      	beq.n	8001e52 <HAL_ADC_Start+0x172>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	e003      	b.n	8001e5a <HAL_ADC_Start+0x17a>
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <HAL_ADC_Start+0x1c4>)
 8001e54:	e001      	b.n	8001e5a <HAL_ADC_Start+0x17a>
 8001e56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e5a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00f      	beq.n	8001e88 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e78:	e006      	b.n	8001e88 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001e82:	e001      	b.n	8001e88 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e84:	2302      	movs	r3, #2
 8001e86:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	50000100 	.word	0x50000100
 8001e98:	50000300 	.word	0x50000300
 8001e9c:	50000700 	.word	0x50000700
 8001ea0:	50000500 	.word	0x50000500
 8001ea4:	50000400 	.word	0x50000400

08001ea8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ee8:	d004      	beq.n	8001ef4 <HAL_ADC_IRQHandler+0x30>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a95      	ldr	r2, [pc, #596]	; (8002144 <HAL_ADC_IRQHandler+0x280>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADC_IRQHandler+0x34>
 8001ef4:	4b94      	ldr	r3, [pc, #592]	; (8002148 <HAL_ADC_IRQHandler+0x284>)
 8001ef6:	e000      	b.n	8001efa <HAL_ADC_IRQHandler+0x36>
 8001ef8:	4b94      	ldr	r3, [pc, #592]	; (800214c <HAL_ADC_IRQHandler+0x288>)
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fc62 	bl	80017c4 <LL_ADC_GetMultimode>
 8001f00:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d017      	beq.n	8001f3c <HAL_ADC_IRQHandler+0x78>
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d012      	beq.n	8001f3c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d105      	bne.n	8001f2e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f26:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 ff00 	bl	8002d34 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d004      	beq.n	8001f50 <HAL_ADC_IRQHandler+0x8c>
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10b      	bne.n	8001f68 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8094 	beq.w	8002084 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 808e 	beq.w	8002084 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d105      	bne.n	8001f80 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fb7b 	bl	8001680 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d072      	beq.n	8002076 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a6b      	ldr	r2, [pc, #428]	; (8002144 <HAL_ADC_IRQHandler+0x280>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d009      	beq.n	8001fae <HAL_ADC_IRQHandler+0xea>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a6c      	ldr	r2, [pc, #432]	; (8002150 <HAL_ADC_IRQHandler+0x28c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d002      	beq.n	8001faa <HAL_ADC_IRQHandler+0xe6>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	e003      	b.n	8001fb2 <HAL_ADC_IRQHandler+0xee>
 8001faa:	4b6a      	ldr	r3, [pc, #424]	; (8002154 <HAL_ADC_IRQHandler+0x290>)
 8001fac:	e001      	b.n	8001fb2 <HAL_ADC_IRQHandler+0xee>
 8001fae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d008      	beq.n	8001fcc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	d002      	beq.n	8001fcc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b09      	cmp	r3, #9
 8001fca:	d104      	bne.n	8001fd6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	623b      	str	r3, [r7, #32]
 8001fd4:	e014      	b.n	8002000 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a5a      	ldr	r2, [pc, #360]	; (8002144 <HAL_ADC_IRQHandler+0x280>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d009      	beq.n	8001ff4 <HAL_ADC_IRQHandler+0x130>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a5a      	ldr	r2, [pc, #360]	; (8002150 <HAL_ADC_IRQHandler+0x28c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d002      	beq.n	8001ff0 <HAL_ADC_IRQHandler+0x12c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	e003      	b.n	8001ff8 <HAL_ADC_IRQHandler+0x134>
 8001ff0:	4b58      	ldr	r3, [pc, #352]	; (8002154 <HAL_ADC_IRQHandler+0x290>)
 8001ff2:	e001      	b.n	8001ff8 <HAL_ADC_IRQHandler+0x134>
 8001ff4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ff8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d135      	bne.n	8002076 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b08      	cmp	r3, #8
 8002016:	d12e      	bne.n	8002076 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fc76 	bl	800190e <LL_ADC_REG_IsConversionOngoing>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d11a      	bne.n	800205e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 020c 	bic.w	r2, r2, #12
 8002036:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d112      	bne.n	8002076 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	65da      	str	r2, [r3, #92]	; 0x5c
 800205c:	e00b      	b.n	8002076 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002062:	f043 0210 	orr.w	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206e:	f043 0201 	orr.w	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe fb16 	bl	80006a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	220c      	movs	r2, #12
 8002082:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b00      	cmp	r3, #0
 800208c:	d004      	beq.n	8002098 <HAL_ADC_IRQHandler+0x1d4>
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10b      	bne.n	80020b0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80b2 	beq.w	8002208 <HAL_ADC_IRQHandler+0x344>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 80ac 	beq.w	8002208 <HAL_ADC_IRQHandler+0x344>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fb16 	bl	80016fe <LL_ADC_INJ_IsTriggerSourceSWStart>
 80020d2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fad1 	bl	8001680 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020de:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a17      	ldr	r2, [pc, #92]	; (8002144 <HAL_ADC_IRQHandler+0x280>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d009      	beq.n	80020fe <HAL_ADC_IRQHandler+0x23a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a18      	ldr	r2, [pc, #96]	; (8002150 <HAL_ADC_IRQHandler+0x28c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d002      	beq.n	80020fa <HAL_ADC_IRQHandler+0x236>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	e003      	b.n	8002102 <HAL_ADC_IRQHandler+0x23e>
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_ADC_IRQHandler+0x290>)
 80020fc:	e001      	b.n	8002102 <HAL_ADC_IRQHandler+0x23e>
 80020fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	4293      	cmp	r3, r2
 8002108:	d008      	beq.n	800211c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b06      	cmp	r3, #6
 8002114:	d002      	beq.n	800211c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b07      	cmp	r3, #7
 800211a:	d104      	bne.n	8002126 <HAL_ADC_IRQHandler+0x262>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	623b      	str	r3, [r7, #32]
 8002124:	e01e      	b.n	8002164 <HAL_ADC_IRQHandler+0x2a0>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a06      	ldr	r2, [pc, #24]	; (8002144 <HAL_ADC_IRQHandler+0x280>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d013      	beq.n	8002158 <HAL_ADC_IRQHandler+0x294>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a06      	ldr	r2, [pc, #24]	; (8002150 <HAL_ADC_IRQHandler+0x28c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d002      	beq.n	8002140 <HAL_ADC_IRQHandler+0x27c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	e00d      	b.n	800215c <HAL_ADC_IRQHandler+0x298>
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <HAL_ADC_IRQHandler+0x290>)
 8002142:	e00b      	b.n	800215c <HAL_ADC_IRQHandler+0x298>
 8002144:	50000100 	.word	0x50000100
 8002148:	50000300 	.word	0x50000300
 800214c:	50000700 	.word	0x50000700
 8002150:	50000500 	.word	0x50000500
 8002154:	50000400 	.word	0x50000400
 8002158:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800215c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d047      	beq.n	80021fa <HAL_ADC_IRQHandler+0x336>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <HAL_ADC_IRQHandler+0x2c0>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d03f      	beq.n	80021fa <HAL_ADC_IRQHandler+0x336>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002180:	2b00      	cmp	r3, #0
 8002182:	d13a      	bne.n	80021fa <HAL_ADC_IRQHandler+0x336>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218e:	2b40      	cmp	r3, #64	; 0x40
 8002190:	d133      	bne.n	80021fa <HAL_ADC_IRQHandler+0x336>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d12e      	bne.n	80021fa <HAL_ADC_IRQHandler+0x336>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fbc7 	bl	8001934 <LL_ADC_INJ_IsConversionOngoing>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d11a      	bne.n	80021e2 <HAL_ADC_IRQHandler+0x31e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021ba:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d112      	bne.n	80021fa <HAL_ADC_IRQHandler+0x336>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	f043 0201 	orr.w	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	65da      	str	r2, [r3, #92]	; 0x5c
 80021e0:	e00b      	b.n	80021fa <HAL_ADC_IRQHandler+0x336>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	f043 0210 	orr.w	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fd72 	bl	8002ce4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2260      	movs	r2, #96	; 0x60
 8002206:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220e:	2b00      	cmp	r3, #0
 8002210:	d011      	beq.n	8002236 <HAL_ADC_IRQHandler+0x372>
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00c      	beq.n	8002236 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f8a5 	bl	8002378 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2280      	movs	r2, #128	; 0x80
 8002234:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d012      	beq.n	8002266 <HAL_ADC_IRQHandler+0x3a2>
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00d      	beq.n	8002266 <HAL_ADC_IRQHandler+0x3a2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fd58 	bl	8002d0c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226c:	2b00      	cmp	r3, #0
 800226e:	d012      	beq.n	8002296 <HAL_ADC_IRQHandler+0x3d2>
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <HAL_ADC_IRQHandler+0x3d2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fd4a 	bl	8002d20 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002294:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	d043      	beq.n	8002328 <HAL_ADC_IRQHandler+0x464>
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d03e      	beq.n	8002328 <HAL_ADC_IRQHandler+0x464>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d102      	bne.n	80022b8 <HAL_ADC_IRQHandler+0x3f4>
    {
      overrun_error = 1UL;
 80022b2:	2301      	movs	r3, #1
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
 80022b6:	e021      	b.n	80022fc <HAL_ADC_IRQHandler+0x438>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d015      	beq.n	80022ea <HAL_ADC_IRQHandler+0x426>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022c6:	d004      	beq.n	80022d2 <HAL_ADC_IRQHandler+0x40e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a27      	ldr	r2, [pc, #156]	; (800236c <HAL_ADC_IRQHandler+0x4a8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_IRQHandler+0x412>
 80022d2:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_ADC_IRQHandler+0x4ac>)
 80022d4:	e000      	b.n	80022d8 <HAL_ADC_IRQHandler+0x414>
 80022d6:	4b27      	ldr	r3, [pc, #156]	; (8002374 <HAL_ADC_IRQHandler+0x4b0>)
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fa81 	bl	80017e0 <LL_ADC_GetMultiDMATransfer>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00b      	beq.n	80022fc <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 80022e4:	2301      	movs	r3, #1
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
 80022e8:	e008      	b.n	80022fc <HAL_ADC_IRQHandler+0x438>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 80022f8:	2301      	movs	r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d10e      	bne.n	8002320 <HAL_ADC_IRQHandler+0x45c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002306:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002312:	f043 0202 	orr.w	r2, r3, #2
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f836 	bl	800238c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2210      	movs	r2, #16
 8002326:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232e:	2b00      	cmp	r3, #0
 8002330:	d018      	beq.n	8002364 <HAL_ADC_IRQHandler+0x4a0>
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002338:	2b00      	cmp	r3, #0
 800233a:	d013      	beq.n	8002364 <HAL_ADC_IRQHandler+0x4a0>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234c:	f043 0208 	orr.w	r2, r3, #8
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800235c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fcca 	bl	8002cf8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002364:	bf00      	nop
 8002366:	3728      	adds	r7, #40	; 0x28
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	50000100 	.word	0x50000100
 8002370:	50000300 	.word	0x50000300
 8002374:	50000700 	.word	0x50000700

08002378 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b0b6      	sub	sp, #216	; 0xd8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d102      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x24>
 80023be:	2302      	movs	r3, #2
 80023c0:	f000 bc13 	b.w	8002bea <HAL_ADC_ConfigChannel+0x84a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fa9c 	bl	800190e <LL_ADC_REG_IsConversionOngoing>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f040 83f3 	bne.w	8002bc4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f7ff f95b 	bl	80016a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fa8a 	bl	800190e <LL_ADC_REG_IsConversionOngoing>
 80023fa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fa96 	bl	8001934 <LL_ADC_INJ_IsConversionOngoing>
 8002408:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800240c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 81d9 	bne.w	80027c8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002416:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 81d4 	bne.w	80027c8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002428:	d10f      	bne.n	800244a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	4619      	mov	r1, r3
 8002436:	f7ff f975 	bl	8001724 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff f909 	bl	800165a <LL_ADC_SetSamplingTimeCommonConfig>
 8002448:	e00e      	b.n	8002468 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6819      	ldr	r1, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	461a      	mov	r2, r3
 8002458:	f7ff f964 	bl	8001724 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff f8f9 	bl	800165a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	08db      	lsrs	r3, r3, #3
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b04      	cmp	r3, #4
 8002488:	d022      	beq.n	80024d0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6919      	ldr	r1, [r3, #16]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800249a:	f7ff f853 	bl	8001544 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6919      	ldr	r1, [r3, #16]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	461a      	mov	r2, r3
 80024ac:	f7ff f89f 	bl	80015ee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6919      	ldr	r1, [r3, #16]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	7f1b      	ldrb	r3, [r3, #28]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d102      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x126>
 80024c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024c4:	e000      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x128>
 80024c6:	2300      	movs	r3, #0
 80024c8:	461a      	mov	r2, r3
 80024ca:	f7ff f8ab 	bl	8001624 <LL_ADC_SetOffsetSaturation>
 80024ce:	e17b      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff f858 	bl	800158c <LL_ADC_GetOffsetChannel>
 80024dc:	4603      	mov	r3, r0
 80024de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10a      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x15c>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2100      	movs	r1, #0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff f84d 	bl	800158c <LL_ADC_GetOffsetChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	0e9b      	lsrs	r3, r3, #26
 80024f6:	f003 021f 	and.w	r2, r3, #31
 80024fa:	e01e      	b.n	800253a <HAL_ADC_ConfigChannel+0x19a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff f842 	bl	800158c <LL_ADC_GetOffsetChannel>
 8002508:	4603      	mov	r3, r0
 800250a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800251a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800251e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002522:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800252a:	2320      	movs	r3, #32
 800252c:	e004      	b.n	8002538 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800252e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x1b2>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	0e9b      	lsrs	r3, r3, #26
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	e018      	b.n	8002584 <HAL_ADC_ConfigChannel+0x1e4>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800256a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800256e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002576:	2320      	movs	r3, #32
 8002578:	e004      	b.n	8002584 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800257a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002584:	429a      	cmp	r2, r3
 8002586:	d106      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2200      	movs	r2, #0
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff f811 	bl	80015b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2101      	movs	r1, #1
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe fff5 	bl	800158c <LL_ADC_GetOffsetChannel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x222>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2101      	movs	r1, #1
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe ffea 	bl	800158c <LL_ADC_GetOffsetChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	0e9b      	lsrs	r3, r3, #26
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	e01e      	b.n	8002600 <HAL_ADC_ConfigChannel+0x260>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2101      	movs	r1, #1
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe ffdf 	bl	800158c <LL_ADC_GetOffsetChannel>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80025e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80025e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e004      	b.n	80025fe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80025f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025f8:	fab3 f383 	clz	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x278>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0e9b      	lsrs	r3, r3, #26
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	e018      	b.n	800264a <HAL_ADC_ConfigChannel+0x2aa>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800262c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002634:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800263c:	2320      	movs	r3, #32
 800263e:	e004      	b.n	800264a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002640:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800264a:	429a      	cmp	r2, r3
 800264c:	d106      	bne.n	800265c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2200      	movs	r2, #0
 8002654:	2101      	movs	r1, #1
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe ffae 	bl	80015b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2102      	movs	r1, #2
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe ff92 	bl	800158c <LL_ADC_GetOffsetChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10a      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x2e8>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2102      	movs	r1, #2
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe ff87 	bl	800158c <LL_ADC_GetOffsetChannel>
 800267e:	4603      	mov	r3, r0
 8002680:	0e9b      	lsrs	r3, r3, #26
 8002682:	f003 021f 	and.w	r2, r3, #31
 8002686:	e01e      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x326>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2102      	movs	r1, #2
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe ff7c 	bl	800158c <LL_ADC_GetOffsetChannel>
 8002694:	4603      	mov	r3, r0
 8002696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80026a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80026ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80026b6:	2320      	movs	r3, #32
 80026b8:	e004      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80026ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <HAL_ADC_ConfigChannel+0x33e>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	0e9b      	lsrs	r3, r3, #26
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	e016      	b.n	800270c <HAL_ADC_ConfigChannel+0x36c>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80026f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80026f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80026fe:	2320      	movs	r3, #32
 8002700:	e004      	b.n	800270c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002702:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800270c:	429a      	cmp	r2, r3
 800270e:	d106      	bne.n	800271e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2200      	movs	r2, #0
 8002716:	2102      	movs	r1, #2
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe ff4d 	bl	80015b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2103      	movs	r1, #3
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe ff31 	bl	800158c <LL_ADC_GetOffsetChannel>
 800272a:	4603      	mov	r3, r0
 800272c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10a      	bne.n	800274a <HAL_ADC_ConfigChannel+0x3aa>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2103      	movs	r1, #3
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe ff26 	bl	800158c <LL_ADC_GetOffsetChannel>
 8002740:	4603      	mov	r3, r0
 8002742:	0e9b      	lsrs	r3, r3, #26
 8002744:	f003 021f 	and.w	r2, r3, #31
 8002748:	e017      	b.n	800277a <HAL_ADC_ConfigChannel+0x3da>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2103      	movs	r1, #3
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe ff1b 	bl	800158c <LL_ADC_GetOffsetChannel>
 8002756:	4603      	mov	r3, r0
 8002758:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002764:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002766:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800276c:	2320      	movs	r3, #32
 800276e:	e003      	b.n	8002778 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002782:	2b00      	cmp	r3, #0
 8002784:	d105      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x3f2>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	0e9b      	lsrs	r3, r3, #26
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	e011      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x416>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80027a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80027a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80027aa:	2320      	movs	r3, #32
 80027ac:	e003      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80027ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d106      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2200      	movs	r2, #0
 80027c0:	2103      	movs	r1, #3
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe fef8 	bl	80015b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff f877 	bl	80018c0 <LL_ADC_IsEnabled>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f040 813d 	bne.w	8002a54 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6819      	ldr	r1, [r3, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f7fe ffc8 	bl	800177c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4aa2      	ldr	r2, [pc, #648]	; (8002a7c <HAL_ADC_ConfigChannel+0x6dc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	f040 812e 	bne.w	8002a54 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10b      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x480>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	3301      	adds	r3, #1
 8002810:	f003 031f 	and.w	r3, r3, #31
 8002814:	2b09      	cmp	r3, #9
 8002816:	bf94      	ite	ls
 8002818:	2301      	movls	r3, #1
 800281a:	2300      	movhi	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	e019      	b.n	8002854 <HAL_ADC_ConfigChannel+0x4b4>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800282e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002830:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002838:	2320      	movs	r3, #32
 800283a:	e003      	b.n	8002844 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800283c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	3301      	adds	r3, #1
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	2b09      	cmp	r3, #9
 800284c:	bf94      	ite	ls
 800284e:	2301      	movls	r3, #1
 8002850:	2300      	movhi	r3, #0
 8002852:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002854:	2b00      	cmp	r3, #0
 8002856:	d079      	beq.n	800294c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002860:	2b00      	cmp	r3, #0
 8002862:	d107      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x4d4>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	0e9b      	lsrs	r3, r3, #26
 800286a:	3301      	adds	r3, #1
 800286c:	069b      	lsls	r3, r3, #26
 800286e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002872:	e015      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x500>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002884:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800288c:	2320      	movs	r3, #32
 800288e:	e003      	b.n	8002898 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	3301      	adds	r3, #1
 800289a:	069b      	lsls	r3, r3, #26
 800289c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x520>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	0e9b      	lsrs	r3, r3, #26
 80028b2:	3301      	adds	r3, #1
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	2101      	movs	r1, #1
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	e017      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x550>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80028ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80028d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80028d8:	2320      	movs	r3, #32
 80028da:	e003      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80028dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	f003 031f 	and.w	r3, r3, #31
 80028ea:	2101      	movs	r1, #1
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	ea42 0103 	orr.w	r1, r2, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x576>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	0e9b      	lsrs	r3, r3, #26
 8002906:	3301      	adds	r3, #1
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	051b      	lsls	r3, r3, #20
 8002914:	e018      	b.n	8002948 <HAL_ADC_ConfigChannel+0x5a8>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002926:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800292e:	2320      	movs	r3, #32
 8002930:	e003      	b.n	800293a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	3301      	adds	r3, #1
 800293c:	f003 021f 	and.w	r2, r3, #31
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002948:	430b      	orrs	r3, r1
 800294a:	e07e      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002954:	2b00      	cmp	r3, #0
 8002956:	d107      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x5c8>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0e9b      	lsrs	r3, r3, #26
 800295e:	3301      	adds	r3, #1
 8002960:	069b      	lsls	r3, r3, #26
 8002962:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002966:	e015      	b.n	8002994 <HAL_ADC_ConfigChannel+0x5f4>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002980:	2320      	movs	r3, #32
 8002982:	e003      	b.n	800298c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	3301      	adds	r3, #1
 800298e:	069b      	lsls	r3, r3, #26
 8002990:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x614>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0e9b      	lsrs	r3, r3, #26
 80029a6:	3301      	adds	r3, #1
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	2101      	movs	r1, #1
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	e017      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x644>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	61fb      	str	r3, [r7, #28]
  return result;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80029cc:	2320      	movs	r3, #32
 80029ce:	e003      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	3301      	adds	r3, #1
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	2101      	movs	r1, #1
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	ea42 0103 	orr.w	r1, r2, r3
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10d      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x670>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	0e9b      	lsrs	r3, r3, #26
 80029fa:	3301      	adds	r3, #1
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	3b1e      	subs	r3, #30
 8002a08:	051b      	lsls	r3, r3, #20
 8002a0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	e01b      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x6a8>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	613b      	str	r3, [r7, #16]
  return result;
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002a28:	2320      	movs	r3, #32
 8002a2a:	e003      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	3301      	adds	r3, #1
 8002a36:	f003 021f 	and.w	r2, r3, #31
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	3b1e      	subs	r3, #30
 8002a42:	051b      	lsls	r3, r3, #20
 8002a44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	6892      	ldr	r2, [r2, #8]
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f7fe fe68 	bl	8001724 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_ADC_ConfigChannel+0x6e0>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80be 	beq.w	8002bde <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a6a:	d004      	beq.n	8002a76 <HAL_ADC_ConfigChannel+0x6d6>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <HAL_ADC_ConfigChannel+0x6e4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d10a      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x6ec>
 8002a76:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <HAL_ADC_ConfigChannel+0x6e8>)
 8002a78:	e009      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x6ee>
 8002a7a:	bf00      	nop
 8002a7c:	407f0000 	.word	0x407f0000
 8002a80:	80080000 	.word	0x80080000
 8002a84:	50000100 	.word	0x50000100
 8002a88:	50000300 	.word	0x50000300
 8002a8c:	4b59      	ldr	r3, [pc, #356]	; (8002bf4 <HAL_ADC_ConfigChannel+0x854>)
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fd4a 	bl	8001528 <LL_ADC_GetCommonPathInternalCh>
 8002a94:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a56      	ldr	r2, [pc, #344]	; (8002bf8 <HAL_ADC_ConfigChannel+0x858>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d004      	beq.n	8002aac <HAL_ADC_ConfigChannel+0x70c>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a55      	ldr	r2, [pc, #340]	; (8002bfc <HAL_ADC_ConfigChannel+0x85c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d13a      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002aac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d134      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac0:	d005      	beq.n	8002ace <HAL_ADC_ConfigChannel+0x72e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a4e      	ldr	r2, [pc, #312]	; (8002c00 <HAL_ADC_ConfigChannel+0x860>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	f040 8085 	bne.w	8002bd8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad6:	d004      	beq.n	8002ae2 <HAL_ADC_ConfigChannel+0x742>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a49      	ldr	r2, [pc, #292]	; (8002c04 <HAL_ADC_ConfigChannel+0x864>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x746>
 8002ae2:	4a49      	ldr	r2, [pc, #292]	; (8002c08 <HAL_ADC_ConfigChannel+0x868>)
 8002ae4:	e000      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x748>
 8002ae6:	4a43      	ldr	r2, [pc, #268]	; (8002bf4 <HAL_ADC_ConfigChannel+0x854>)
 8002ae8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002af0:	4619      	mov	r1, r3
 8002af2:	4610      	mov	r0, r2
 8002af4:	f7fe fd05 	bl	8001502 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002af8:	4b44      	ldr	r3, [pc, #272]	; (8002c0c <HAL_ADC_ConfigChannel+0x86c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	099b      	lsrs	r3, r3, #6
 8002afe:	4a44      	ldr	r2, [pc, #272]	; (8002c10 <HAL_ADC_ConfigChannel+0x870>)
 8002b00:	fba2 2303 	umull	r2, r3, r2, r3
 8002b04:	099b      	lsrs	r3, r3, #6
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b12:	e002      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f9      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b20:	e05a      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a3b      	ldr	r2, [pc, #236]	; (8002c14 <HAL_ADC_ConfigChannel+0x874>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d125      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x7d8>
 8002b2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d11f      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a31      	ldr	r2, [pc, #196]	; (8002c04 <HAL_ADC_ConfigChannel+0x864>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d104      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x7ac>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a34      	ldr	r2, [pc, #208]	; (8002c18 <HAL_ADC_ConfigChannel+0x878>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d047      	beq.n	8002bdc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b54:	d004      	beq.n	8002b60 <HAL_ADC_ConfigChannel+0x7c0>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2a      	ldr	r2, [pc, #168]	; (8002c04 <HAL_ADC_ConfigChannel+0x864>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d101      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x7c4>
 8002b60:	4a29      	ldr	r2, [pc, #164]	; (8002c08 <HAL_ADC_ConfigChannel+0x868>)
 8002b62:	e000      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x7c6>
 8002b64:	4a23      	ldr	r2, [pc, #140]	; (8002bf4 <HAL_ADC_ConfigChannel+0x854>)
 8002b66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4610      	mov	r0, r2
 8002b72:	f7fe fcc6 	bl	8001502 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b76:	e031      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a27      	ldr	r2, [pc, #156]	; (8002c1c <HAL_ADC_ConfigChannel+0x87c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d12d      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d127      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1c      	ldr	r2, [pc, #112]	; (8002c04 <HAL_ADC_ConfigChannel+0x864>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d022      	beq.n	8002bde <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ba0:	d004      	beq.n	8002bac <HAL_ADC_ConfigChannel+0x80c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a17      	ldr	r2, [pc, #92]	; (8002c04 <HAL_ADC_ConfigChannel+0x864>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x810>
 8002bac:	4a16      	ldr	r2, [pc, #88]	; (8002c08 <HAL_ADC_ConfigChannel+0x868>)
 8002bae:	e000      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x812>
 8002bb0:	4a10      	ldr	r2, [pc, #64]	; (8002bf4 <HAL_ADC_ConfigChannel+0x854>)
 8002bb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	f7fe fca0 	bl	8001502 <LL_ADC_SetCommonPathInternalCh>
 8002bc2:	e00c      	b.n	8002bde <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002bd6:	e002      	b.n	8002bde <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bd8:	bf00      	nop
 8002bda:	e000      	b.n	8002bde <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bdc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002be6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	37d8      	adds	r7, #216	; 0xd8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	50000700 	.word	0x50000700
 8002bf8:	c3210000 	.word	0xc3210000
 8002bfc:	90c00010 	.word	0x90c00010
 8002c00:	50000600 	.word	0x50000600
 8002c04:	50000100 	.word	0x50000100
 8002c08:	50000300 	.word	0x50000300
 8002c0c:	20000408 	.word	0x20000408
 8002c10:	053e2d63 	.word	0x053e2d63
 8002c14:	c7520000 	.word	0xc7520000
 8002c18:	50000500 	.word	0x50000500
 8002c1c:	cb840000 	.word	0xcb840000

08002c20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe fe47 	bl	80018c0 <LL_ADC_IsEnabled>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d14d      	bne.n	8002cd4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	4b28      	ldr	r3, [pc, #160]	; (8002ce0 <ADC_Enable+0xc0>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00d      	beq.n	8002c62 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	f043 0210 	orr.w	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c56:	f043 0201 	orr.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e039      	b.n	8002cd6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fe16 	bl	8001898 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c6c:	f7fe fc08 	bl	8001480 <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c72:	e028      	b.n	8002cc6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe fe21 	bl	80018c0 <LL_ADC_IsEnabled>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d104      	bne.n	8002c8e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe fe05 	bl	8001898 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c8e:	f7fe fbf7 	bl	8001480 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d914      	bls.n	8002cc6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d00d      	beq.n	8002cc6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	f043 0210 	orr.w	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cba:	f043 0201 	orr.w	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e007      	b.n	8002cd6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d1cf      	bne.n	8002c74 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	8000003f 	.word	0x8000003f

08002ce4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d64:	4013      	ands	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	60d3      	str	r3, [r2, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <__NVIC_GetPriorityGrouping+0x18>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	f003 0307 	and.w	r3, r3, #7
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	db0b      	blt.n	8002dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	4907      	ldr	r1, [pc, #28]	; (8002de4 <__NVIC_EnableIRQ+0x38>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	2001      	movs	r0, #1
 8002dce:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000e100 	.word	0xe000e100

08002de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	6039      	str	r1, [r7, #0]
 8002df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	db0a      	blt.n	8002e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	490c      	ldr	r1, [pc, #48]	; (8002e34 <__NVIC_SetPriority+0x4c>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	0112      	lsls	r2, r2, #4
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e10:	e00a      	b.n	8002e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4908      	ldr	r1, [pc, #32]	; (8002e38 <__NVIC_SetPriority+0x50>)
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	3b04      	subs	r3, #4
 8002e20:	0112      	lsls	r2, r2, #4
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	440b      	add	r3, r1
 8002e26:	761a      	strb	r2, [r3, #24]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000e100 	.word	0xe000e100
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b089      	sub	sp, #36	; 0x24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f1c3 0307 	rsb	r3, r3, #7
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	bf28      	it	cs
 8002e5a:	2304      	movcs	r3, #4
 8002e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3304      	adds	r3, #4
 8002e62:	2b06      	cmp	r3, #6
 8002e64:	d902      	bls.n	8002e6c <NVIC_EncodePriority+0x30>
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3b03      	subs	r3, #3
 8002e6a:	e000      	b.n	8002e6e <NVIC_EncodePriority+0x32>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e70:	f04f 32ff 	mov.w	r2, #4294967295
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	401a      	ands	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e84:	f04f 31ff 	mov.w	r1, #4294967295
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8e:	43d9      	mvns	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e94:	4313      	orrs	r3, r2
         );
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3724      	adds	r7, #36	; 0x24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb4:	d301      	bcc.n	8002eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e00f      	b.n	8002eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eba:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <SysTick_Config+0x40>)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec2:	210f      	movs	r1, #15
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec8:	f7ff ff8e 	bl	8002de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <SysTick_Config+0x40>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <SysTick_Config+0x40>)
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	e000e010 	.word	0xe000e010

08002ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ff29 	bl	8002d48 <__NVIC_SetPriorityGrouping>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	4603      	mov	r3, r0
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f0c:	f7ff ff40 	bl	8002d90 <__NVIC_GetPriorityGrouping>
 8002f10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	6978      	ldr	r0, [r7, #20]
 8002f18:	f7ff ff90 	bl	8002e3c <NVIC_EncodePriority>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff5f 	bl	8002de8 <__NVIC_SetPriority>
}
 8002f2a:	bf00      	nop
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	4603      	mov	r3, r0
 8002f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff33 	bl	8002dac <__NVIC_EnableIRQ>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ffa4 	bl	8002ea4 <SysTick_Config>
 8002f5c:	4603      	mov	r3, r0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e014      	b.n	8002fa2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	791b      	ldrb	r3, [r3, #4]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d105      	bne.n	8002f8e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7fe f865 	bl	8001058 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2202      	movs	r2, #2
 8002f92:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	795b      	ldrb	r3, [r3, #5]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_DAC_Start+0x16>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e043      	b.n	8003048 <HAL_DAC_Start+0x9e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6819      	ldr	r1, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2201      	movs	r2, #1
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f7fe fa57 	bl	8001498 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10f      	bne.n	8003010 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d11d      	bne.n	800303a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0201 	orr.w	r2, r2, #1
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	e014      	b.n	800303a <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2102      	movs	r1, #2
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	429a      	cmp	r2, r3
 8003028:	d107      	bne.n	800303a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0202 	orr.w	r2, r2, #2
 8003038:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003066:	d120      	bne.n	80030aa <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003076:	d118      	bne.n	80030aa <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2204      	movs	r2, #4
 800307c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f043 0201 	orr.w	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003092:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030a2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f855 	bl	8003154 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030b8:	d120      	bne.n	80030fc <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030c8:	d118      	bne.n	80030fc <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2204      	movs	r2, #4
 80030ce:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f043 0202 	orr.w	r2, r3, #2
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80030e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80030f4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f9de 	bl	80034b8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	3308      	adds	r3, #8
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e004      	b.n	800313e <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4413      	add	r3, r2
 800313a:	3314      	adds	r3, #20
 800313c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	461a      	mov	r2, r3
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	; 0x28
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	795b      	ldrb	r3, [r3, #5]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_DAC_ConfigChannel+0x18>
 800317c:	2302      	movs	r3, #2
 800317e:	e192      	b.n	80034a6 <HAL_DAC_ConfigChannel+0x33e>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2202      	movs	r2, #2
 800318a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b04      	cmp	r3, #4
 8003192:	d174      	bne.n	800327e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003194:	f7fe f974 	bl	8001480 <HAL_GetTick>
 8003198:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d134      	bne.n	800320a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031a0:	e011      	b.n	80031c6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031a2:	f7fe f96d 	bl	8001480 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d90a      	bls.n	80031c6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f043 0208 	orr.w	r2, r3, #8
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2203      	movs	r2, #3
 80031c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e16f      	b.n	80034a6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e6      	bne.n	80031a2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80031d4:	2001      	movs	r0, #1
 80031d6:	f7fe f95f 	bl	8001498 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40
 80031e4:	e01e      	b.n	8003224 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031e6:	f7fe f94b 	bl	8001480 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d90a      	bls.n	800320a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f043 0208 	orr.w	r2, r3, #8
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2203      	movs	r2, #3
 8003204:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e14d      	b.n	80034a6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003210:	2b00      	cmp	r3, #0
 8003212:	dbe8      	blt.n	80031e6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003214:	2001      	movs	r0, #1
 8003216:	f7fe f93f 	bl	8001498 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003222:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	ea02 0103 	and.w	r1, r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	409a      	lsls	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	21ff      	movs	r1, #255	; 0xff
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	ea02 0103 	and.w	r1, r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	409a      	lsls	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d11d      	bne.n	80032c2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	221f      	movs	r2, #31
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329e:	4013      	ands	r3, r2
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b6:	4313      	orrs	r3, r2
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2207      	movs	r2, #7
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032da:	4013      	ands	r3, r2
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d102      	bne.n	80032ec <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	623b      	str	r3, [r7, #32]
 80032ea:	e00f      	b.n	800330c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d102      	bne.n	80032fa <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80032f4:	2301      	movs	r3, #1
 80032f6:	623b      	str	r3, [r7, #32]
 80032f8:	e008      	b.n	800330c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003302:	2301      	movs	r3, #1
 8003304:	623b      	str	r3, [r7, #32]
 8003306:	e001      	b.n	800330c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003308:	2300      	movs	r3, #0
 800330a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	6a3a      	ldr	r2, [r7, #32]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332e:	4013      	ands	r3, r2
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	791b      	ldrb	r3, [r3, #4]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d102      	bne.n	8003340 <HAL_DAC_ConfigChannel+0x1d8>
 800333a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800333e:	e000      	b.n	8003342 <HAL_DAC_ConfigChannel+0x1da>
 8003340:	2300      	movs	r3, #0
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335a:	4013      	ands	r3, r2
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	795b      	ldrb	r3, [r3, #5]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d102      	bne.n	800336c <HAL_DAC_ConfigChannel+0x204>
 8003366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800336a:	e000      	b.n	800336e <HAL_DAC_ConfigChannel+0x206>
 800336c:	2300      	movs	r3, #0
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b02      	cmp	r3, #2
 8003382:	d114      	bne.n	80033ae <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003384:	f001 f866 	bl	8004454 <HAL_RCC_GetHCLKFreq>
 8003388:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	4a48      	ldr	r2, [pc, #288]	; (80034b0 <HAL_DAC_ConfigChannel+0x348>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d904      	bls.n	800339c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
 800339a:	e00f      	b.n	80033bc <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	4a45      	ldr	r2, [pc, #276]	; (80034b4 <HAL_DAC_ConfigChannel+0x34c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d90a      	bls.n	80033ba <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
 80033ac:	e006      	b.n	80033bc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b4:	4313      	orrs	r3, r2
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
 80033b8:	e000      	b.n	80033bc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80033ba:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ca:	4313      	orrs	r3, r2
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6819      	ldr	r1, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	400a      	ands	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340e:	4013      	ands	r3, r2
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003426:	4313      	orrs	r3, r2
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003430:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6819      	ldr	r1, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	22c0      	movs	r2, #192	; 0xc0
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43da      	mvns	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	400a      	ands	r2, r1
 800344c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	089b      	lsrs	r3, r3, #2
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	089b      	lsrs	r3, r3, #2
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4313      	orrs	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	f640 710f 	movw	r1, #3855	; 0xf0f
 800347c:	fa01 f303 	lsl.w	r3, r1, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	ea02 0103 	and.w	r1, r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	409a      	lsls	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3728      	adds	r7, #40	; 0x28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	09896800 	.word	0x09896800
 80034b4:	04c4b400 	.word	0x04c4b400

080034b8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d005      	beq.n	80034f0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2204      	movs	r2, #4
 80034e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
 80034ee:	e037      	b.n	8003560 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 020e 	bic.w	r2, r2, #14
 80034fe:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800350e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	f003 021f 	and.w	r2, r3, #31
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	2101      	movs	r1, #1
 800352e:	fa01 f202 	lsl.w	r2, r1, r2
 8003532:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800353c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00c      	beq.n	8003560 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003554:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800355e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d00d      	beq.n	80035b2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2204      	movs	r2, #4
 800359a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	e047      	b.n	8003642 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 020e 	bic.w	r2, r2, #14
 80035c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	f003 021f 	and.w	r2, r3, #31
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	2101      	movs	r1, #1
 80035f0:	fa01 f202 	lsl.w	r2, r1, r2
 80035f4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00c      	beq.n	8003622 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003616:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003620:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4798      	blx	r3
    }
  }
  return status;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800365a:	e15a      	b.n	8003912 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	2101      	movs	r1, #1
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	fa01 f303 	lsl.w	r3, r1, r3
 8003668:	4013      	ands	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 814c 	beq.w	800390c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d00b      	beq.n	8003694 <HAL_GPIO_Init+0x48>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d007      	beq.n	8003694 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003688:	2b11      	cmp	r3, #17
 800368a:	d003      	beq.n	8003694 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b12      	cmp	r3, #18
 8003692:	d130      	bne.n	80036f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	2203      	movs	r2, #3
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036ca:	2201      	movs	r2, #1
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	f003 0201 	and.w	r2, r3, #1
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	2203      	movs	r2, #3
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43db      	mvns	r3, r3
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4013      	ands	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_Init+0xea>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b12      	cmp	r3, #18
 8003734:	d123      	bne.n	800377e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	08da      	lsrs	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3208      	adds	r2, #8
 800373e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003742:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	220f      	movs	r2, #15
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4013      	ands	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	08da      	lsrs	r2, r3, #3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3208      	adds	r2, #8
 8003778:	6939      	ldr	r1, [r7, #16]
 800377a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	2203      	movs	r2, #3
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43db      	mvns	r3, r3
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4013      	ands	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 0203 	and.w	r2, r3, #3
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80a6 	beq.w	800390c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c0:	4b5b      	ldr	r3, [pc, #364]	; (8003930 <HAL_GPIO_Init+0x2e4>)
 80037c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c4:	4a5a      	ldr	r2, [pc, #360]	; (8003930 <HAL_GPIO_Init+0x2e4>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6613      	str	r3, [r2, #96]	; 0x60
 80037cc:	4b58      	ldr	r3, [pc, #352]	; (8003930 <HAL_GPIO_Init+0x2e4>)
 80037ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037d8:	4a56      	ldr	r2, [pc, #344]	; (8003934 <HAL_GPIO_Init+0x2e8>)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	089b      	lsrs	r3, r3, #2
 80037de:	3302      	adds	r3, #2
 80037e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	220f      	movs	r2, #15
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4013      	ands	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003802:	d01f      	beq.n	8003844 <HAL_GPIO_Init+0x1f8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a4c      	ldr	r2, [pc, #304]	; (8003938 <HAL_GPIO_Init+0x2ec>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d019      	beq.n	8003840 <HAL_GPIO_Init+0x1f4>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a4b      	ldr	r2, [pc, #300]	; (800393c <HAL_GPIO_Init+0x2f0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d013      	beq.n	800383c <HAL_GPIO_Init+0x1f0>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a4a      	ldr	r2, [pc, #296]	; (8003940 <HAL_GPIO_Init+0x2f4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00d      	beq.n	8003838 <HAL_GPIO_Init+0x1ec>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a49      	ldr	r2, [pc, #292]	; (8003944 <HAL_GPIO_Init+0x2f8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d007      	beq.n	8003834 <HAL_GPIO_Init+0x1e8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a48      	ldr	r2, [pc, #288]	; (8003948 <HAL_GPIO_Init+0x2fc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d101      	bne.n	8003830 <HAL_GPIO_Init+0x1e4>
 800382c:	2305      	movs	r3, #5
 800382e:	e00a      	b.n	8003846 <HAL_GPIO_Init+0x1fa>
 8003830:	2306      	movs	r3, #6
 8003832:	e008      	b.n	8003846 <HAL_GPIO_Init+0x1fa>
 8003834:	2304      	movs	r3, #4
 8003836:	e006      	b.n	8003846 <HAL_GPIO_Init+0x1fa>
 8003838:	2303      	movs	r3, #3
 800383a:	e004      	b.n	8003846 <HAL_GPIO_Init+0x1fa>
 800383c:	2302      	movs	r3, #2
 800383e:	e002      	b.n	8003846 <HAL_GPIO_Init+0x1fa>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <HAL_GPIO_Init+0x1fa>
 8003844:	2300      	movs	r3, #0
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	f002 0203 	and.w	r2, r2, #3
 800384c:	0092      	lsls	r2, r2, #2
 800384e:	4093      	lsls	r3, r2
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003856:	4937      	ldr	r1, [pc, #220]	; (8003934 <HAL_GPIO_Init+0x2e8>)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	3302      	adds	r3, #2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003864:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_GPIO_Init+0x300>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	43db      	mvns	r3, r3
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4013      	ands	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003888:	4a30      	ldr	r2, [pc, #192]	; (800394c <HAL_GPIO_Init+0x300>)
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800388e:	4b2f      	ldr	r3, [pc, #188]	; (800394c <HAL_GPIO_Init+0x300>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	43db      	mvns	r3, r3
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4013      	ands	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038b2:	4a26      	ldr	r2, [pc, #152]	; (800394c <HAL_GPIO_Init+0x300>)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038b8:	4b24      	ldr	r3, [pc, #144]	; (800394c <HAL_GPIO_Init+0x300>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038dc:	4a1b      	ldr	r2, [pc, #108]	; (800394c <HAL_GPIO_Init+0x300>)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038e2:	4b1a      	ldr	r3, [pc, #104]	; (800394c <HAL_GPIO_Init+0x300>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4013      	ands	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003906:	4a11      	ldr	r2, [pc, #68]	; (800394c <HAL_GPIO_Init+0x300>)
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	3301      	adds	r3, #1
 8003910:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	f47f ae9d 	bne.w	800365c <HAL_GPIO_Init+0x10>
  }
}
 8003922:	bf00      	nop
 8003924:	bf00      	nop
 8003926:	371c      	adds	r7, #28
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	40021000 	.word	0x40021000
 8003934:	40010000 	.word	0x40010000
 8003938:	48000400 	.word	0x48000400
 800393c:	48000800 	.word	0x48000800
 8003940:	48000c00 	.word	0x48000c00
 8003944:	48001000 	.word	0x48001000
 8003948:	48001400 	.word	0x48001400
 800394c:	40010400 	.word	0x40010400

08003950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
 800395c:	4613      	mov	r3, r2
 800395e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003960:	787b      	ldrb	r3, [r7, #1]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003966:	887a      	ldrh	r2, [r7, #2]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800396c:	e002      	b.n	8003974 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800396e:	887a      	ldrh	r2, [r7, #2]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d141      	bne.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800398e:	4b4b      	ldr	r3, [pc, #300]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399a:	d131      	bne.n	8003a00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800399c:	4b47      	ldr	r3, [pc, #284]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800399e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a2:	4a46      	ldr	r2, [pc, #280]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039ac:	4b43      	ldr	r3, [pc, #268]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039b4:	4a41      	ldr	r2, [pc, #260]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039bc:	4b40      	ldr	r3, [pc, #256]	; (8003ac0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2232      	movs	r2, #50	; 0x32
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	4a3f      	ldr	r2, [pc, #252]	; (8003ac4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	0c9b      	lsrs	r3, r3, #18
 80039ce:	3301      	adds	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039d2:	e002      	b.n	80039da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039da:	4b38      	ldr	r3, [pc, #224]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e6:	d102      	bne.n	80039ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f2      	bne.n	80039d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039ee:	4b33      	ldr	r3, [pc, #204]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039fa:	d158      	bne.n	8003aae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e057      	b.n	8003ab0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a00:	4b2e      	ldr	r3, [pc, #184]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a06:	4a2d      	ldr	r2, [pc, #180]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a10:	e04d      	b.n	8003aae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a18:	d141      	bne.n	8003a9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a1a:	4b28      	ldr	r3, [pc, #160]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a26:	d131      	bne.n	8003a8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a28:	4b24      	ldr	r3, [pc, #144]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a2e:	4a23      	ldr	r2, [pc, #140]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a38:	4b20      	ldr	r3, [pc, #128]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a40:	4a1e      	ldr	r2, [pc, #120]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a48:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2232      	movs	r2, #50	; 0x32
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	4a1c      	ldr	r2, [pc, #112]	; (8003ac4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a54:	fba2 2303 	umull	r2, r3, r2, r3
 8003a58:	0c9b      	lsrs	r3, r3, #18
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a5e:	e002      	b.n	8003a66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a72:	d102      	bne.n	8003a7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f2      	bne.n	8003a60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a7a:	4b10      	ldr	r3, [pc, #64]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a86:	d112      	bne.n	8003aae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e011      	b.n	8003ab0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a92:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a9c:	e007      	b.n	8003aae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003aa6:	4a05      	ldr	r2, [pc, #20]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	40007000 	.word	0x40007000
 8003ac0:	20000408 	.word	0x20000408
 8003ac4:	431bde83 	.word	0x431bde83

08003ac8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a04      	ldr	r2, [pc, #16]	; (8003ae4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ad2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad6:	6093      	str	r3, [r2, #8]
}
 8003ad8:	bf00      	nop
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40007000 	.word	0x40007000

08003ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e308      	b.n	800410c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d075      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b06:	4ba3      	ldr	r3, [pc, #652]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b10:	4ba0      	ldr	r3, [pc, #640]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	2b0c      	cmp	r3, #12
 8003b1e:	d102      	bne.n	8003b26 <HAL_RCC_OscConfig+0x3e>
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d002      	beq.n	8003b2c <HAL_RCC_OscConfig+0x44>
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d10b      	bne.n	8003b44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2c:	4b99      	ldr	r3, [pc, #612]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d05b      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x108>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d157      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e2e3      	b.n	800410c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4c:	d106      	bne.n	8003b5c <HAL_RCC_OscConfig+0x74>
 8003b4e:	4b91      	ldr	r3, [pc, #580]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a90      	ldr	r2, [pc, #576]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e01d      	b.n	8003b98 <HAL_RCC_OscConfig+0xb0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x98>
 8003b66:	4b8b      	ldr	r3, [pc, #556]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a8a      	ldr	r2, [pc, #552]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	4b88      	ldr	r3, [pc, #544]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a87      	ldr	r2, [pc, #540]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e00b      	b.n	8003b98 <HAL_RCC_OscConfig+0xb0>
 8003b80:	4b84      	ldr	r3, [pc, #528]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a83      	ldr	r2, [pc, #524]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	4b81      	ldr	r3, [pc, #516]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a80      	ldr	r2, [pc, #512]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d013      	beq.n	8003bc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fd fc6e 	bl	8001480 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba8:	f7fd fc6a 	bl	8001480 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	; 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e2a8      	b.n	800410c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bba:	4b76      	ldr	r3, [pc, #472]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCC_OscConfig+0xc0>
 8003bc6:	e014      	b.n	8003bf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fd fc5a 	bl	8001480 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd0:	f7fd fc56 	bl	8001480 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e294      	b.n	800410c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003be2:	4b6c      	ldr	r3, [pc, #432]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0xe8>
 8003bee:	e000      	b.n	8003bf2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d075      	beq.n	8003cea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bfe:	4b65      	ldr	r3, [pc, #404]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c08:	4b62      	ldr	r3, [pc, #392]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b0c      	cmp	r3, #12
 8003c16:	d102      	bne.n	8003c1e <HAL_RCC_OscConfig+0x136>
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d002      	beq.n	8003c24 <HAL_RCC_OscConfig+0x13c>
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d11f      	bne.n	8003c64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c24:	4b5b      	ldr	r3, [pc, #364]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_OscConfig+0x154>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e267      	b.n	800410c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c3c:	4b55      	ldr	r3, [pc, #340]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	061b      	lsls	r3, r3, #24
 8003c4a:	4952      	ldr	r1, [pc, #328]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c50:	4b51      	ldr	r3, [pc, #324]	; (8003d98 <HAL_RCC_OscConfig+0x2b0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fd fbc7 	bl	80013e8 <HAL_InitTick>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d043      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e253      	b.n	800410c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d023      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c6c:	4b49      	ldr	r3, [pc, #292]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a48      	ldr	r2, [pc, #288]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fd fc02 	bl	8001480 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c80:	f7fd fbfe 	bl	8001480 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e23c      	b.n	800410c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c92:	4b40      	ldr	r3, [pc, #256]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9e:	4b3d      	ldr	r3, [pc, #244]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	061b      	lsls	r3, r3, #24
 8003cac:	4939      	ldr	r1, [pc, #228]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
 8003cb2:	e01a      	b.n	8003cea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cb4:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a36      	ldr	r2, [pc, #216]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003cba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fd fbde 	bl	8001480 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc8:	f7fd fbda 	bl	8001480 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e218      	b.n	800410c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cda:	4b2e      	ldr	r3, [pc, #184]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x1e0>
 8003ce6:	e000      	b.n	8003cea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ce8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d03c      	beq.n	8003d70 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d01c      	beq.n	8003d38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cfe:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d04:	4a23      	ldr	r2, [pc, #140]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0e:	f7fd fbb7 	bl	8001480 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d16:	f7fd fbb3 	bl	8001480 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e1f1      	b.n	800410c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d28:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0ef      	beq.n	8003d16 <HAL_RCC_OscConfig+0x22e>
 8003d36:	e01b      	b.n	8003d70 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d38:	4b16      	ldr	r3, [pc, #88]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3e:	4a15      	ldr	r2, [pc, #84]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	f023 0301 	bic.w	r3, r3, #1
 8003d44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d48:	f7fd fb9a 	bl	8001480 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d50:	f7fd fb96 	bl	8001480 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e1d4      	b.n	800410c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d62:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1ef      	bne.n	8003d50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80ab 	beq.w	8003ed4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d82:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_RCC_OscConfig+0x2b4>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e005      	b.n	8003d9e <HAL_RCC_OscConfig+0x2b6>
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000
 8003d98:	2000040c 	.word	0x2000040c
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00d      	beq.n	8003dbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da2:	4baf      	ldr	r3, [pc, #700]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	4aae      	ldr	r2, [pc, #696]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dac:	6593      	str	r3, [r2, #88]	; 0x58
 8003dae:	4bac      	ldr	r3, [pc, #688]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dbe:	4ba9      	ldr	r3, [pc, #676]	; (8004064 <HAL_RCC_OscConfig+0x57c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d118      	bne.n	8003dfc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dca:	4ba6      	ldr	r3, [pc, #664]	; (8004064 <HAL_RCC_OscConfig+0x57c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4aa5      	ldr	r2, [pc, #660]	; (8004064 <HAL_RCC_OscConfig+0x57c>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd6:	f7fd fb53 	bl	8001480 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dde:	f7fd fb4f 	bl	8001480 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e18d      	b.n	800410c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df0:	4b9c      	ldr	r3, [pc, #624]	; (8004064 <HAL_RCC_OscConfig+0x57c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d108      	bne.n	8003e16 <HAL_RCC_OscConfig+0x32e>
 8003e04:	4b96      	ldr	r3, [pc, #600]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	4a95      	ldr	r2, [pc, #596]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e14:	e024      	b.n	8003e60 <HAL_RCC_OscConfig+0x378>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b05      	cmp	r3, #5
 8003e1c:	d110      	bne.n	8003e40 <HAL_RCC_OscConfig+0x358>
 8003e1e:	4b90      	ldr	r3, [pc, #576]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e24:	4a8e      	ldr	r2, [pc, #568]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003e26:	f043 0304 	orr.w	r3, r3, #4
 8003e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e2e:	4b8c      	ldr	r3, [pc, #560]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e34:	4a8a      	ldr	r2, [pc, #552]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e3e:	e00f      	b.n	8003e60 <HAL_RCC_OscConfig+0x378>
 8003e40:	4b87      	ldr	r3, [pc, #540]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	4a86      	ldr	r2, [pc, #536]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e50:	4b83      	ldr	r3, [pc, #524]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e56:	4a82      	ldr	r2, [pc, #520]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003e58:	f023 0304 	bic.w	r3, r3, #4
 8003e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d016      	beq.n	8003e96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e68:	f7fd fb0a 	bl	8001480 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e70:	f7fd fb06 	bl	8001480 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e142      	b.n	800410c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e86:	4b76      	ldr	r3, [pc, #472]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ed      	beq.n	8003e70 <HAL_RCC_OscConfig+0x388>
 8003e94:	e015      	b.n	8003ec2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e96:	f7fd faf3 	bl	8001480 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e9c:	e00a      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9e:	f7fd faef 	bl	8001480 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e12b      	b.n	800410c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eb4:	4b6a      	ldr	r3, [pc, #424]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1ed      	bne.n	8003e9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ec2:	7ffb      	ldrb	r3, [r7, #31]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d105      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec8:	4b65      	ldr	r3, [pc, #404]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ecc:	4a64      	ldr	r2, [pc, #400]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d03c      	beq.n	8003f5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01c      	beq.n	8003f22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ee8:	4b5d      	ldr	r3, [pc, #372]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eee:	4a5c      	ldr	r2, [pc, #368]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef8:	f7fd fac2 	bl	8001480 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f00:	f7fd fabe 	bl	8001480 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e0fc      	b.n	800410c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f12:	4b53      	ldr	r3, [pc, #332]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ef      	beq.n	8003f00 <HAL_RCC_OscConfig+0x418>
 8003f20:	e01b      	b.n	8003f5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f22:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f28:	4a4d      	ldr	r2, [pc, #308]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f32:	f7fd faa5 	bl	8001480 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f3a:	f7fd faa1 	bl	8001480 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e0df      	b.n	800410c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f4c:	4b44      	ldr	r3, [pc, #272]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1ef      	bne.n	8003f3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80d3 	beq.w	800410a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f64:	4b3e      	ldr	r3, [pc, #248]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 030c 	and.w	r3, r3, #12
 8003f6c:	2b0c      	cmp	r3, #12
 8003f6e:	f000 808d 	beq.w	800408c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d15a      	bne.n	8004030 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7a:	4b39      	ldr	r3, [pc, #228]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a38      	ldr	r2, [pc, #224]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003f80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f86:	f7fd fa7b 	bl	8001480 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8e:	f7fd fa77 	bl	8001480 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e0b5      	b.n	800410c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa0:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1f0      	bne.n	8003f8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fac:	4b2c      	ldr	r3, [pc, #176]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <HAL_RCC_OscConfig+0x580>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6a11      	ldr	r1, [r2, #32]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fbc:	3a01      	subs	r2, #1
 8003fbe:	0112      	lsls	r2, r2, #4
 8003fc0:	4311      	orrs	r1, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003fc6:	0212      	lsls	r2, r2, #8
 8003fc8:	4311      	orrs	r1, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fce:	0852      	lsrs	r2, r2, #1
 8003fd0:	3a01      	subs	r2, #1
 8003fd2:	0552      	lsls	r2, r2, #21
 8003fd4:	4311      	orrs	r1, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fda:	0852      	lsrs	r2, r2, #1
 8003fdc:	3a01      	subs	r2, #1
 8003fde:	0652      	lsls	r2, r2, #25
 8003fe0:	4311      	orrs	r1, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fe6:	06d2      	lsls	r2, r2, #27
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	491d      	ldr	r1, [pc, #116]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1a      	ldr	r2, [pc, #104]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ffa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ffc:	4b18      	ldr	r3, [pc, #96]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4a17      	ldr	r2, [pc, #92]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8004002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004006:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fd fa3a 	bl	8001480 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004010:	f7fd fa36 	bl	8001480 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e074      	b.n	800410c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0x528>
 800402e:	e06c      	b.n	800410a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0a      	ldr	r2, [pc, #40]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8004036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800403a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800403c:	4b08      	ldr	r3, [pc, #32]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4a07      	ldr	r2, [pc, #28]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 8004042:	f023 0303 	bic.w	r3, r3, #3
 8004046:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4a04      	ldr	r2, [pc, #16]	; (8004060 <HAL_RCC_OscConfig+0x578>)
 800404e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004056:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7fd fa12 	bl	8001480 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800405e:	e00e      	b.n	800407e <HAL_RCC_OscConfig+0x596>
 8004060:	40021000 	.word	0x40021000
 8004064:	40007000 	.word	0x40007000
 8004068:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406c:	f7fd fa08 	bl	8001480 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e046      	b.n	800410c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407e:	4b25      	ldr	r3, [pc, #148]	; (8004114 <HAL_RCC_OscConfig+0x62c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x584>
 800408a:	e03e      	b.n	800410a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e039      	b.n	800410c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004098:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <HAL_RCC_OscConfig+0x62c>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f003 0203 	and.w	r2, r3, #3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d12c      	bne.n	8004106 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	3b01      	subs	r3, #1
 80040b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d123      	bne.n	8004106 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d11b      	bne.n	8004106 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d113      	bne.n	8004106 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	085b      	lsrs	r3, r3, #1
 80040ea:	3b01      	subs	r3, #1
 80040ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d109      	bne.n	8004106 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	3b01      	subs	r3, #1
 8004100:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004102:	429a      	cmp	r2, r3
 8004104:	d001      	beq.n	800410a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3720      	adds	r7, #32
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40021000 	.word	0x40021000

08004118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e11e      	b.n	800436e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004130:	4b91      	ldr	r3, [pc, #580]	; (8004378 <HAL_RCC_ClockConfig+0x260>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d910      	bls.n	8004160 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b8e      	ldr	r3, [pc, #568]	; (8004378 <HAL_RCC_ClockConfig+0x260>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 020f 	bic.w	r2, r3, #15
 8004146:	498c      	ldr	r1, [pc, #560]	; (8004378 <HAL_RCC_ClockConfig+0x260>)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	4313      	orrs	r3, r2
 800414c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414e:	4b8a      	ldr	r3, [pc, #552]	; (8004378 <HAL_RCC_ClockConfig+0x260>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e106      	b.n	800436e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d073      	beq.n	8004254 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d129      	bne.n	80041c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004174:	4b81      	ldr	r3, [pc, #516]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0f4      	b.n	800436e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004184:	f000 f99e 	bl	80044c4 <RCC_GetSysClockFreqFromPLLSource>
 8004188:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4a7c      	ldr	r2, [pc, #496]	; (8004380 <HAL_RCC_ClockConfig+0x268>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d93f      	bls.n	8004212 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004192:	4b7a      	ldr	r3, [pc, #488]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d033      	beq.n	8004212 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d12f      	bne.n	8004212 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041b2:	4b72      	ldr	r3, [pc, #456]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ba:	4a70      	ldr	r2, [pc, #448]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 80041bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041c2:	2380      	movs	r3, #128	; 0x80
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e024      	b.n	8004212 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041d0:	4b6a      	ldr	r3, [pc, #424]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d109      	bne.n	80041f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0c6      	b.n	800436e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041e0:	4b66      	ldr	r3, [pc, #408]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0be      	b.n	800436e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80041f0:	f000 f8ce 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4a61      	ldr	r2, [pc, #388]	; (8004380 <HAL_RCC_ClockConfig+0x268>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d909      	bls.n	8004212 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041fe:	4b5f      	ldr	r3, [pc, #380]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004206:	4a5d      	ldr	r2, [pc, #372]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 8004208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800420c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800420e:	2380      	movs	r3, #128	; 0x80
 8004210:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004212:	4b5a      	ldr	r3, [pc, #360]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f023 0203 	bic.w	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4957      	ldr	r1, [pc, #348]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 8004220:	4313      	orrs	r3, r2
 8004222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004224:	f7fd f92c 	bl	8001480 <HAL_GetTick>
 8004228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	e00a      	b.n	8004242 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422c:	f7fd f928 	bl	8001480 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	; 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e095      	b.n	800436e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	4b4e      	ldr	r3, [pc, #312]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 020c 	and.w	r2, r3, #12
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	429a      	cmp	r2, r3
 8004252:	d1eb      	bne.n	800422c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d023      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800426c:	4b43      	ldr	r3, [pc, #268]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	4a42      	ldr	r2, [pc, #264]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 8004272:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004276:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004284:	4b3d      	ldr	r3, [pc, #244]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800428c:	4a3b      	ldr	r2, [pc, #236]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 800428e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004292:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004294:	4b39      	ldr	r3, [pc, #228]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	4936      	ldr	r1, [pc, #216]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
 80042a6:	e008      	b.n	80042ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2b80      	cmp	r3, #128	; 0x80
 80042ac:	d105      	bne.n	80042ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80042ae:	4b33      	ldr	r3, [pc, #204]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	4a32      	ldr	r2, [pc, #200]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 80042b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042ba:	4b2f      	ldr	r3, [pc, #188]	; (8004378 <HAL_RCC_ClockConfig+0x260>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d21d      	bcs.n	8004304 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c8:	4b2b      	ldr	r3, [pc, #172]	; (8004378 <HAL_RCC_ClockConfig+0x260>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f023 020f 	bic.w	r2, r3, #15
 80042d0:	4929      	ldr	r1, [pc, #164]	; (8004378 <HAL_RCC_ClockConfig+0x260>)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042d8:	f7fd f8d2 	bl	8001480 <HAL_GetTick>
 80042dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e0:	f7fd f8ce 	bl	8001480 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e03b      	b.n	800436e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	4b20      	ldr	r3, [pc, #128]	; (8004378 <HAL_RCC_ClockConfig+0x260>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d1ed      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004310:	4b1a      	ldr	r3, [pc, #104]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	4917      	ldr	r1, [pc, #92]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d009      	beq.n	8004342 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800432e:	4b13      	ldr	r3, [pc, #76]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	490f      	ldr	r1, [pc, #60]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 800433e:	4313      	orrs	r3, r2
 8004340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004342:	f000 f825 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 8004346:	4602      	mov	r2, r0
 8004348:	4b0c      	ldr	r3, [pc, #48]	; (800437c <HAL_RCC_ClockConfig+0x264>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	490c      	ldr	r1, [pc, #48]	; (8004384 <HAL_RCC_ClockConfig+0x26c>)
 8004354:	5ccb      	ldrb	r3, [r1, r3]
 8004356:	f003 031f 	and.w	r3, r3, #31
 800435a:	fa22 f303 	lsr.w	r3, r2, r3
 800435e:	4a0a      	ldr	r2, [pc, #40]	; (8004388 <HAL_RCC_ClockConfig+0x270>)
 8004360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004362:	4b0a      	ldr	r3, [pc, #40]	; (800438c <HAL_RCC_ClockConfig+0x274>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fd f83e 	bl	80013e8 <HAL_InitTick>
 800436c:	4603      	mov	r3, r0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40022000 	.word	0x40022000
 800437c:	40021000 	.word	0x40021000
 8004380:	04c4b400 	.word	0x04c4b400
 8004384:	08006ef8 	.word	0x08006ef8
 8004388:	20000408 	.word	0x20000408
 800438c:	2000040c 	.word	0x2000040c

08004390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004396:	4b2c      	ldr	r3, [pc, #176]	; (8004448 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d102      	bne.n	80043a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043a2:	4b2a      	ldr	r3, [pc, #168]	; (800444c <HAL_RCC_GetSysClockFreq+0xbc>)
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	e047      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80043a8:	4b27      	ldr	r3, [pc, #156]	; (8004448 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 030c 	and.w	r3, r3, #12
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d102      	bne.n	80043ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043b4:	4b26      	ldr	r3, [pc, #152]	; (8004450 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043b6:	613b      	str	r3, [r7, #16]
 80043b8:	e03e      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80043ba:	4b23      	ldr	r3, [pc, #140]	; (8004448 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	d136      	bne.n	8004434 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043c6:	4b20      	ldr	r3, [pc, #128]	; (8004448 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043d0:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	3301      	adds	r3, #1
 80043dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d10c      	bne.n	80043fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043e4:	4a1a      	ldr	r2, [pc, #104]	; (8004450 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ec:	4a16      	ldr	r2, [pc, #88]	; (8004448 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ee:	68d2      	ldr	r2, [r2, #12]
 80043f0:	0a12      	lsrs	r2, r2, #8
 80043f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043f6:	fb02 f303 	mul.w	r3, r2, r3
 80043fa:	617b      	str	r3, [r7, #20]
      break;
 80043fc:	e00c      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043fe:	4a13      	ldr	r2, [pc, #76]	; (800444c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	fbb2 f3f3 	udiv	r3, r2, r3
 8004406:	4a10      	ldr	r2, [pc, #64]	; (8004448 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004408:	68d2      	ldr	r2, [r2, #12]
 800440a:	0a12      	lsrs	r2, r2, #8
 800440c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004410:	fb02 f303 	mul.w	r3, r2, r3
 8004414:	617b      	str	r3, [r7, #20]
      break;
 8004416:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCC_GetSysClockFreq+0xb8>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	0e5b      	lsrs	r3, r3, #25
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	3301      	adds	r3, #1
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	e001      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004438:	693b      	ldr	r3, [r7, #16]
}
 800443a:	4618      	mov	r0, r3
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40021000 	.word	0x40021000
 800444c:	00f42400 	.word	0x00f42400
 8004450:	016e3600 	.word	0x016e3600

08004454 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <HAL_RCC_GetHCLKFreq+0x14>)
 800445a:	681b      	ldr	r3, [r3, #0]
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20000408 	.word	0x20000408

0800446c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004470:	f7ff fff0 	bl	8004454 <HAL_RCC_GetHCLKFreq>
 8004474:	4602      	mov	r2, r0
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	0a1b      	lsrs	r3, r3, #8
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	4904      	ldr	r1, [pc, #16]	; (8004494 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004482:	5ccb      	ldrb	r3, [r1, r3]
 8004484:	f003 031f 	and.w	r3, r3, #31
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40021000 	.word	0x40021000
 8004494:	08006f08 	.word	0x08006f08

08004498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800449c:	f7ff ffda 	bl	8004454 <HAL_RCC_GetHCLKFreq>
 80044a0:	4602      	mov	r2, r0
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	0adb      	lsrs	r3, r3, #11
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	4904      	ldr	r1, [pc, #16]	; (80044c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044ae:	5ccb      	ldrb	r3, [r1, r3]
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40021000 	.word	0x40021000
 80044c0:	08006f08 	.word	0x08006f08

080044c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044ca:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044d4:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	091b      	lsrs	r3, r3, #4
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	3301      	adds	r3, #1
 80044e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d10c      	bne.n	8004502 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044e8:	4a17      	ldr	r2, [pc, #92]	; (8004548 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	4a14      	ldr	r2, [pc, #80]	; (8004544 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044f2:	68d2      	ldr	r2, [r2, #12]
 80044f4:	0a12      	lsrs	r2, r2, #8
 80044f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044fa:	fb02 f303 	mul.w	r3, r2, r3
 80044fe:	617b      	str	r3, [r7, #20]
    break;
 8004500:	e00c      	b.n	800451c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004502:	4a12      	ldr	r2, [pc, #72]	; (800454c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	fbb2 f3f3 	udiv	r3, r2, r3
 800450a:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800450c:	68d2      	ldr	r2, [r2, #12]
 800450e:	0a12      	lsrs	r2, r2, #8
 8004510:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004514:	fb02 f303 	mul.w	r3, r2, r3
 8004518:	617b      	str	r3, [r7, #20]
    break;
 800451a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	0e5b      	lsrs	r3, r3, #25
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	3301      	adds	r3, #1
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004536:	687b      	ldr	r3, [r7, #4]
}
 8004538:	4618      	mov	r0, r3
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40021000 	.word	0x40021000
 8004548:	016e3600 	.word	0x016e3600
 800454c:	00f42400 	.word	0x00f42400

08004550 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004558:	2300      	movs	r3, #0
 800455a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800455c:	2300      	movs	r3, #0
 800455e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8098 	beq.w	800469e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800456e:	2300      	movs	r3, #0
 8004570:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004572:	4b43      	ldr	r3, [pc, #268]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10d      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800457e:	4b40      	ldr	r3, [pc, #256]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	4a3f      	ldr	r2, [pc, #252]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004588:	6593      	str	r3, [r2, #88]	; 0x58
 800458a:	4b3d      	ldr	r3, [pc, #244]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800458c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004592:	60bb      	str	r3, [r7, #8]
 8004594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004596:	2301      	movs	r3, #1
 8004598:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800459a:	4b3a      	ldr	r3, [pc, #232]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a39      	ldr	r2, [pc, #228]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045a6:	f7fc ff6b 	bl	8001480 <HAL_GetTick>
 80045aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045ac:	e009      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ae:	f7fc ff67 	bl	8001480 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d902      	bls.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	74fb      	strb	r3, [r7, #19]
        break;
 80045c0:	e005      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045c2:	4b30      	ldr	r3, [pc, #192]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0ef      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80045ce:	7cfb      	ldrb	r3, [r7, #19]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d159      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045d4:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d01e      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d019      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045f0:	4b23      	ldr	r3, [pc, #140]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045fc:	4b20      	ldr	r3, [pc, #128]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004602:	4a1f      	ldr	r2, [pc, #124]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800460c:	4b1c      	ldr	r3, [pc, #112]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004612:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800461c:	4a18      	ldr	r2, [pc, #96]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d016      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462e:	f7fc ff27 	bl	8001480 <HAL_GetTick>
 8004632:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004634:	e00b      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004636:	f7fc ff23 	bl	8001480 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f241 3288 	movw	r2, #5000	; 0x1388
 8004644:	4293      	cmp	r3, r2
 8004646:	d902      	bls.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	74fb      	strb	r3, [r7, #19]
            break;
 800464c:	e006      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464e:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0ec      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800465c:	7cfb      	ldrb	r3, [r7, #19]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10b      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004662:	4b07      	ldr	r3, [pc, #28]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004668:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004670:	4903      	ldr	r1, [pc, #12]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004678:	e008      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800467a:	7cfb      	ldrb	r3, [r7, #19]
 800467c:	74bb      	strb	r3, [r7, #18]
 800467e:	e005      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004680:	40021000 	.word	0x40021000
 8004684:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800468c:	7c7b      	ldrb	r3, [r7, #17]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d105      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004692:	4baf      	ldr	r3, [pc, #700]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004696:	4aae      	ldr	r2, [pc, #696]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800469c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046aa:	4ba9      	ldr	r3, [pc, #676]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f023 0203 	bic.w	r2, r3, #3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	49a5      	ldr	r1, [pc, #660]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046cc:	4ba0      	ldr	r3, [pc, #640]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d2:	f023 020c 	bic.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	499d      	ldr	r1, [pc, #628]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046ee:	4b98      	ldr	r3, [pc, #608]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4994      	ldr	r1, [pc, #592]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004710:	4b8f      	ldr	r3, [pc, #572]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004716:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	498c      	ldr	r1, [pc, #560]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004732:	4b87      	ldr	r3, [pc, #540]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004738:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	4983      	ldr	r1, [pc, #524]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004754:	4b7e      	ldr	r3, [pc, #504]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	497b      	ldr	r1, [pc, #492]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004776:	4b76      	ldr	r3, [pc, #472]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	4972      	ldr	r1, [pc, #456]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004798:	4b6d      	ldr	r3, [pc, #436]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	496a      	ldr	r1, [pc, #424]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047ba:	4b65      	ldr	r3, [pc, #404]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	4961      	ldr	r1, [pc, #388]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047dc:	4b5c      	ldr	r3, [pc, #368]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047e2:	f023 0203 	bic.w	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	4959      	ldr	r1, [pc, #356]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047fe:	4b54      	ldr	r3, [pc, #336]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004804:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	4950      	ldr	r1, [pc, #320]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481c:	2b00      	cmp	r3, #0
 800481e:	d015      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004820:	4b4b      	ldr	r3, [pc, #300]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004826:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	4948      	ldr	r1, [pc, #288]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483e:	d105      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004840:	4b43      	ldr	r3, [pc, #268]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4a42      	ldr	r2, [pc, #264]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800484a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004854:	2b00      	cmp	r3, #0
 8004856:	d015      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004858:	4b3d      	ldr	r3, [pc, #244]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004866:	493a      	ldr	r1, [pc, #232]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004876:	d105      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004878:	4b35      	ldr	r3, [pc, #212]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4a34      	ldr	r2, [pc, #208]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800487e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004882:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d015      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004890:	4b2f      	ldr	r3, [pc, #188]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	492c      	ldr	r1, [pc, #176]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048ae:	d105      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b0:	4b27      	ldr	r3, [pc, #156]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4a26      	ldr	r2, [pc, #152]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d015      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048c8:	4b21      	ldr	r3, [pc, #132]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d6:	491e      	ldr	r1, [pc, #120]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048e6:	d105      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048e8:	4b19      	ldr	r3, [pc, #100]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	4a18      	ldr	r2, [pc, #96]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d015      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004900:	4b13      	ldr	r3, [pc, #76]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004906:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	4910      	ldr	r1, [pc, #64]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800491e:	d105      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4a0a      	ldr	r2, [pc, #40]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004926:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800492a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d018      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	4902      	ldr	r1, [pc, #8]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800494e:	e001      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004950:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800495c:	d105      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800495e:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004968:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d015      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004976:	4b1b      	ldr	r3, [pc, #108]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004984:	4917      	ldr	r1, [pc, #92]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004994:	d105      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	4a12      	ldr	r2, [pc, #72]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a0:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d015      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049ae:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049bc:	4909      	ldr	r1, [pc, #36]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049cc:	d105      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ce:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	4a04      	ldr	r2, [pc, #16]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049d8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80049da:	7cbb      	ldrb	r3, [r7, #18]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40021000 	.word	0x40021000

080049e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e049      	b.n	8004a8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fc fb68 	bl	80010e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3304      	adds	r3, #4
 8004a24:	4619      	mov	r1, r3
 8004a26:	4610      	mov	r0, r2
 8004a28:	f000 fb68 	bl	80050fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d001      	beq.n	8004ab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e054      	b.n	8004b5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a26      	ldr	r2, [pc, #152]	; (8004b68 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d022      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x80>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ada:	d01d      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x80>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a22      	ldr	r2, [pc, #136]	; (8004b6c <HAL_TIM_Base_Start_IT+0xd4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d018      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x80>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a21      	ldr	r2, [pc, #132]	; (8004b70 <HAL_TIM_Base_Start_IT+0xd8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d013      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x80>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1f      	ldr	r2, [pc, #124]	; (8004b74 <HAL_TIM_Base_Start_IT+0xdc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00e      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x80>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1e      	ldr	r2, [pc, #120]	; (8004b78 <HAL_TIM_Base_Start_IT+0xe0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d009      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x80>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1c      	ldr	r2, [pc, #112]	; (8004b7c <HAL_TIM_Base_Start_IT+0xe4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d004      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x80>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1b      	ldr	r2, [pc, #108]	; (8004b80 <HAL_TIM_Base_Start_IT+0xe8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d115      	bne.n	8004b44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <HAL_TIM_Base_Start_IT+0xec>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b06      	cmp	r3, #6
 8004b28:	d015      	beq.n	8004b56 <HAL_TIM_Base_Start_IT+0xbe>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b30:	d011      	beq.n	8004b56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0201 	orr.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b42:	e008      	b.n	8004b56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	e000      	b.n	8004b58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40012c00 	.word	0x40012c00
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	40000800 	.word	0x40000800
 8004b74:	40000c00 	.word	0x40000c00
 8004b78:	40013400 	.word	0x40013400
 8004b7c:	40014000 	.word	0x40014000
 8004b80:	40015000 	.word	0x40015000
 8004b84:	00010007 	.word	0x00010007

08004b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d122      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d11b      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0202 	mvn.w	r2, #2
 8004bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fa78 	bl	80050c0 <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fa6a 	bl	80050ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fa7b 	bl	80050d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d122      	bne.n	8004c38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d11b      	bne.n	8004c38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0204 	mvn.w	r2, #4
 8004c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa4e 	bl	80050c0 <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fa40 	bl	80050ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fa51 	bl	80050d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d122      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0308 	and.w	r3, r3, #8
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d11b      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0208 	mvn.w	r2, #8
 8004c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2204      	movs	r2, #4
 8004c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fa24 	bl	80050c0 <HAL_TIM_IC_CaptureCallback>
 8004c78:	e005      	b.n	8004c86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fa16 	bl	80050ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fa27 	bl	80050d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0310 	and.w	r3, r3, #16
 8004c96:	2b10      	cmp	r3, #16
 8004c98:	d122      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b10      	cmp	r3, #16
 8004ca6:	d11b      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0210 	mvn.w	r2, #16
 8004cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2208      	movs	r2, #8
 8004cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f9fa 	bl	80050c0 <HAL_TIM_IC_CaptureCallback>
 8004ccc:	e005      	b.n	8004cda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f9ec 	bl	80050ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f9fd 	bl	80050d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d10e      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d107      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0201 	mvn.w	r2, #1
 8004d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fb fce2 	bl	80006d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d16:	2b80      	cmp	r3, #128	; 0x80
 8004d18:	d10e      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d24:	2b80      	cmp	r3, #128	; 0x80
 8004d26:	d107      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fbc6 	bl	80054c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d46:	d10e      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d52:	2b80      	cmp	r3, #128	; 0x80
 8004d54:	d107      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fbb9 	bl	80054d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d70:	2b40      	cmp	r3, #64	; 0x40
 8004d72:	d10e      	bne.n	8004d92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	d107      	bne.n	8004d92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f9ab 	bl	80050e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d10e      	bne.n	8004dbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d107      	bne.n	8004dbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f06f 0220 	mvn.w	r2, #32
 8004db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fb79 	bl	80054b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dcc:	d10f      	bne.n	8004dee <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ddc:	d107      	bne.n	8004dee <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fb7f 	bl	80054ec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dfc:	d10f      	bne.n	8004e1e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e0c:	d107      	bne.n	8004e1e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fb71 	bl	8005500 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e2c:	d10f      	bne.n	8004e4e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e3c:	d107      	bne.n	8004e4e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fb63 	bl	8005514 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e5c:	d10f      	bne.n	8004e7e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e6c:	d107      	bne.n	8004e7e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fb55 	bl	8005528 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e7e:	bf00      	nop
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIM_ConfigClockSource+0x18>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e0f5      	b.n	800508c <HAL_TIM_ConfigClockSource+0x204>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004ebe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ec2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a6e      	ldr	r2, [pc, #440]	; (8005094 <HAL_TIM_ConfigClockSource+0x20c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	f000 80c1 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x1da>
 8004ee0:	4a6c      	ldr	r2, [pc, #432]	; (8005094 <HAL_TIM_ConfigClockSource+0x20c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	f200 80c6 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
 8004ee8:	4a6b      	ldr	r2, [pc, #428]	; (8005098 <HAL_TIM_ConfigClockSource+0x210>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	f000 80b9 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x1da>
 8004ef0:	4a69      	ldr	r2, [pc, #420]	; (8005098 <HAL_TIM_ConfigClockSource+0x210>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	f200 80be 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
 8004ef8:	4a68      	ldr	r2, [pc, #416]	; (800509c <HAL_TIM_ConfigClockSource+0x214>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	f000 80b1 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x1da>
 8004f00:	4a66      	ldr	r2, [pc, #408]	; (800509c <HAL_TIM_ConfigClockSource+0x214>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	f200 80b6 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f08:	4a65      	ldr	r2, [pc, #404]	; (80050a0 <HAL_TIM_ConfigClockSource+0x218>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	f000 80a9 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x1da>
 8004f10:	4a63      	ldr	r2, [pc, #396]	; (80050a0 <HAL_TIM_ConfigClockSource+0x218>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	f200 80ae 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f18:	4a62      	ldr	r2, [pc, #392]	; (80050a4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	f000 80a1 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x1da>
 8004f20:	4a60      	ldr	r2, [pc, #384]	; (80050a4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	f200 80a6 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f28:	4a5f      	ldr	r2, [pc, #380]	; (80050a8 <HAL_TIM_ConfigClockSource+0x220>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	f000 8099 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x1da>
 8004f30:	4a5d      	ldr	r2, [pc, #372]	; (80050a8 <HAL_TIM_ConfigClockSource+0x220>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	f200 809e 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004f3c:	f000 8091 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x1da>
 8004f40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004f44:	f200 8096 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f4c:	f000 8089 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x1da>
 8004f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f54:	f200 808e 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f5c:	d03e      	beq.n	8004fdc <HAL_TIM_ConfigClockSource+0x154>
 8004f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f62:	f200 8087 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6a:	f000 8085 	beq.w	8005078 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f72:	d87f      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f74:	2b70      	cmp	r3, #112	; 0x70
 8004f76:	d01a      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0x126>
 8004f78:	2b70      	cmp	r3, #112	; 0x70
 8004f7a:	d87b      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f7c:	2b60      	cmp	r3, #96	; 0x60
 8004f7e:	d050      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x19a>
 8004f80:	2b60      	cmp	r3, #96	; 0x60
 8004f82:	d877      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f84:	2b50      	cmp	r3, #80	; 0x50
 8004f86:	d03c      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x17a>
 8004f88:	2b50      	cmp	r3, #80	; 0x50
 8004f8a:	d873      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d058      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x1ba>
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d86f      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f94:	2b30      	cmp	r3, #48	; 0x30
 8004f96:	d064      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x1da>
 8004f98:	2b30      	cmp	r3, #48	; 0x30
 8004f9a:	d86b      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d060      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x1da>
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d867      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d05c      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x1da>
 8004fa8:	2b10      	cmp	r3, #16
 8004faa:	d05a      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004fac:	e062      	b.n	8005074 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6899      	ldr	r1, [r3, #8]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f000 f9c1 	bl	8005344 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	609a      	str	r2, [r3, #8]
      break;
 8004fda:	e04e      	b.n	800507a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6818      	ldr	r0, [r3, #0]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	6899      	ldr	r1, [r3, #8]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f000 f9aa 	bl	8005344 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ffe:	609a      	str	r2, [r3, #8]
      break;
 8005000:	e03b      	b.n	800507a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6859      	ldr	r1, [r3, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	461a      	mov	r2, r3
 8005010:	f000 f91c 	bl	800524c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2150      	movs	r1, #80	; 0x50
 800501a:	4618      	mov	r0, r3
 800501c:	f000 f975 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8005020:	e02b      	b.n	800507a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6859      	ldr	r1, [r3, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	461a      	mov	r2, r3
 8005030:	f000 f93b 	bl	80052aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2160      	movs	r1, #96	; 0x60
 800503a:	4618      	mov	r0, r3
 800503c:	f000 f965 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8005040:	e01b      	b.n	800507a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6859      	ldr	r1, [r3, #4]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	461a      	mov	r2, r3
 8005050:	f000 f8fc 	bl	800524c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2140      	movs	r1, #64	; 0x40
 800505a:	4618      	mov	r0, r3
 800505c:	f000 f955 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8005060:	e00b      	b.n	800507a <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4619      	mov	r1, r3
 800506c:	4610      	mov	r0, r2
 800506e:	f000 f94c 	bl	800530a <TIM_ITRx_SetConfig>
        break;
 8005072:	e002      	b.n	800507a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8005074:	bf00      	nop
 8005076:	e000      	b.n	800507a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8005078:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	00100070 	.word	0x00100070
 8005098:	00100060 	.word	0x00100060
 800509c:	00100050 	.word	0x00100050
 80050a0:	00100040 	.word	0x00100040
 80050a4:	00100030 	.word	0x00100030
 80050a8:	00100020 	.word	0x00100020

080050ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a46      	ldr	r2, [pc, #280]	; (8005228 <TIM_Base_SetConfig+0x12c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d017      	beq.n	8005144 <TIM_Base_SetConfig+0x48>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511a:	d013      	beq.n	8005144 <TIM_Base_SetConfig+0x48>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a43      	ldr	r2, [pc, #268]	; (800522c <TIM_Base_SetConfig+0x130>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00f      	beq.n	8005144 <TIM_Base_SetConfig+0x48>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a42      	ldr	r2, [pc, #264]	; (8005230 <TIM_Base_SetConfig+0x134>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00b      	beq.n	8005144 <TIM_Base_SetConfig+0x48>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a41      	ldr	r2, [pc, #260]	; (8005234 <TIM_Base_SetConfig+0x138>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d007      	beq.n	8005144 <TIM_Base_SetConfig+0x48>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a40      	ldr	r2, [pc, #256]	; (8005238 <TIM_Base_SetConfig+0x13c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d003      	beq.n	8005144 <TIM_Base_SetConfig+0x48>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a3f      	ldr	r2, [pc, #252]	; (800523c <TIM_Base_SetConfig+0x140>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d108      	bne.n	8005156 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a33      	ldr	r2, [pc, #204]	; (8005228 <TIM_Base_SetConfig+0x12c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d023      	beq.n	80051a6 <TIM_Base_SetConfig+0xaa>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005164:	d01f      	beq.n	80051a6 <TIM_Base_SetConfig+0xaa>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a30      	ldr	r2, [pc, #192]	; (800522c <TIM_Base_SetConfig+0x130>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d01b      	beq.n	80051a6 <TIM_Base_SetConfig+0xaa>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2f      	ldr	r2, [pc, #188]	; (8005230 <TIM_Base_SetConfig+0x134>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d017      	beq.n	80051a6 <TIM_Base_SetConfig+0xaa>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2e      	ldr	r2, [pc, #184]	; (8005234 <TIM_Base_SetConfig+0x138>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <TIM_Base_SetConfig+0xaa>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a2d      	ldr	r2, [pc, #180]	; (8005238 <TIM_Base_SetConfig+0x13c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00f      	beq.n	80051a6 <TIM_Base_SetConfig+0xaa>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a2d      	ldr	r2, [pc, #180]	; (8005240 <TIM_Base_SetConfig+0x144>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00b      	beq.n	80051a6 <TIM_Base_SetConfig+0xaa>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a2c      	ldr	r2, [pc, #176]	; (8005244 <TIM_Base_SetConfig+0x148>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d007      	beq.n	80051a6 <TIM_Base_SetConfig+0xaa>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a2b      	ldr	r2, [pc, #172]	; (8005248 <TIM_Base_SetConfig+0x14c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d003      	beq.n	80051a6 <TIM_Base_SetConfig+0xaa>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a26      	ldr	r2, [pc, #152]	; (800523c <TIM_Base_SetConfig+0x140>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d108      	bne.n	80051b8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a12      	ldr	r2, [pc, #72]	; (8005228 <TIM_Base_SetConfig+0x12c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d013      	beq.n	800520c <TIM_Base_SetConfig+0x110>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a14      	ldr	r2, [pc, #80]	; (8005238 <TIM_Base_SetConfig+0x13c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00f      	beq.n	800520c <TIM_Base_SetConfig+0x110>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a14      	ldr	r2, [pc, #80]	; (8005240 <TIM_Base_SetConfig+0x144>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d00b      	beq.n	800520c <TIM_Base_SetConfig+0x110>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a13      	ldr	r2, [pc, #76]	; (8005244 <TIM_Base_SetConfig+0x148>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d007      	beq.n	800520c <TIM_Base_SetConfig+0x110>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a12      	ldr	r2, [pc, #72]	; (8005248 <TIM_Base_SetConfig+0x14c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d003      	beq.n	800520c <TIM_Base_SetConfig+0x110>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a0d      	ldr	r2, [pc, #52]	; (800523c <TIM_Base_SetConfig+0x140>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d103      	bne.n	8005214 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	615a      	str	r2, [r3, #20]
}
 800521a:	bf00      	nop
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40012c00 	.word	0x40012c00
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800
 8005234:	40000c00 	.word	0x40000c00
 8005238:	40013400 	.word	0x40013400
 800523c:	40015000 	.word	0x40015000
 8005240:	40014000 	.word	0x40014000
 8005244:	40014400 	.word	0x40014400
 8005248:	40014800 	.word	0x40014800

0800524c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f023 0201 	bic.w	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f023 030a 	bic.w	r3, r3, #10
 8005288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b087      	sub	sp, #28
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	f023 0210 	bic.w	r2, r3, #16
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	031b      	lsls	r3, r3, #12
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	621a      	str	r2, [r3, #32]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800530a:	b480      	push	{r7}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	f043 0307 	orr.w	r3, r3, #7
 8005330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	609a      	str	r2, [r3, #8]
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	021a      	lsls	r2, r3, #8
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	431a      	orrs	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4313      	orrs	r3, r2
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	609a      	str	r2, [r3, #8]
}
 8005378:	bf00      	nop
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005398:	2302      	movs	r3, #2
 800539a:	e074      	b.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a34      	ldr	r2, [pc, #208]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d009      	beq.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a33      	ldr	r2, [pc, #204]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d004      	beq.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a31      	ldr	r2, [pc, #196]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d108      	bne.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80053f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a21      	ldr	r2, [pc, #132]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d022      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541c:	d01d      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1f      	ldr	r2, [pc, #124]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d018      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1d      	ldr	r2, [pc, #116]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d013      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1c      	ldr	r2, [pc, #112]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00e      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a15      	ldr	r2, [pc, #84]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a18      	ldr	r2, [pc, #96]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a11      	ldr	r2, [pc, #68]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d10c      	bne.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005460:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	4313      	orrs	r3, r2
 800546a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40012c00 	.word	0x40012c00
 8005498:	40013400 	.word	0x40013400
 800549c:	40015000 	.word	0x40015000
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800
 80054a8:	40000c00 	.word	0x40000c00
 80054ac:	40014000 	.word	0x40014000

080054b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e042      	b.n	80055d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7fb fe37 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2224      	movs	r2, #36	; 0x24
 800556a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0201 	bic.w	r2, r2, #1
 800557c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fac6 	bl	8005b10 <UART_SetConfig>
 8005584:	4603      	mov	r3, r0
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e022      	b.n	80055d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fd84 	bl	80060a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0201 	orr.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fe0b 	bl	80061e8 <UART_CheckIdleState>
 80055d2:	4603      	mov	r3, r0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	4613      	mov	r3, r2
 80055e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d131      	bne.n	8005658 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_UART_Receive_IT+0x24>
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e02a      	b.n	800565a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_UART_Receive_IT+0x36>
 800560e:	2302      	movs	r3, #2
 8005610:	e023      	b.n	800565a <HAL_UART_Receive_IT+0x7e>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a0f      	ldr	r2, [pc, #60]	; (8005664 <HAL_UART_Receive_IT+0x88>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00e      	beq.n	8005648 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005646:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005648:	88fb      	ldrh	r3, [r7, #6]
 800564a:	461a      	mov	r2, r3
 800564c:	68b9      	ldr	r1, [r7, #8]
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 fe96 	bl	8006380 <UART_Start_Receive_IT>
 8005654:	4603      	mov	r3, r0
 8005656:	e000      	b.n	800565a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005658:	2302      	movs	r3, #2
  }
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40008000 	.word	0x40008000

08005668 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	f640 030f 	movw	r3, #2063	; 0x80f
 800568e:	4013      	ands	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d118      	bne.n	80056ca <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d013      	beq.n	80056ca <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d104      	bne.n	80056b6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d009      	beq.n	80056ca <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 81fb 	beq.w	8005ab6 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	4798      	blx	r3
      }
      return;
 80056c8:	e1f5      	b.n	8005ab6 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 80ef 	beq.w	80058b0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4b73      	ldr	r3, [pc, #460]	; (80058a4 <HAL_UART_IRQHandler+0x23c>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d105      	bne.n	80056e8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	4b72      	ldr	r3, [pc, #456]	; (80058a8 <HAL_UART_IRQHandler+0x240>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 80e4 	beq.w	80058b0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d010      	beq.n	8005714 <HAL_UART_IRQHandler+0xac>
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2201      	movs	r2, #1
 8005702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800570a:	f043 0201 	orr.w	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d010      	beq.n	8005740 <HAL_UART_IRQHandler+0xd8>
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00b      	beq.n	8005740 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2202      	movs	r2, #2
 800572e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005736:	f043 0204 	orr.w	r2, r3, #4
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	d010      	beq.n	800576c <HAL_UART_IRQHandler+0x104>
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00b      	beq.n	800576c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2204      	movs	r2, #4
 800575a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005762:	f043 0202 	orr.w	r2, r3, #2
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d015      	beq.n	80057a2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	f003 0320 	and.w	r3, r3, #32
 800577c:	2b00      	cmp	r3, #0
 800577e:	d104      	bne.n	800578a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4b48      	ldr	r3, [pc, #288]	; (80058a4 <HAL_UART_IRQHandler+0x23c>)
 8005784:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00b      	beq.n	80057a2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2208      	movs	r2, #8
 8005790:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005798:	f043 0208 	orr.w	r2, r3, #8
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d011      	beq.n	80057d0 <HAL_UART_IRQHandler+0x168>
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00c      	beq.n	80057d0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057c6:	f043 0220 	orr.w	r2, r3, #32
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 816f 	beq.w	8005aba <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d011      	beq.n	800580a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d104      	bne.n	80057fa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d007      	beq.n	800580a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005810:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581c:	2b40      	cmp	r3, #64	; 0x40
 800581e:	d004      	beq.n	800582a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005826:	2b00      	cmp	r3, #0
 8005828:	d031      	beq.n	800588e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fe66 	bl	80064fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d123      	bne.n	8005886 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800584c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005852:	2b00      	cmp	r3, #0
 8005854:	d013      	beq.n	800587e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800585a:	4a14      	ldr	r2, [pc, #80]	; (80058ac <HAL_UART_IRQHandler+0x244>)
 800585c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005862:	4618      	mov	r0, r3
 8005864:	f7fd fe8b 	bl	800357e <HAL_DMA_Abort_IT>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d017      	beq.n	800589e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005878:	4610      	mov	r0, r2
 800587a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587c:	e00f      	b.n	800589e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f930 	bl	8005ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005884:	e00b      	b.n	800589e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f92c 	bl	8005ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588c:	e007      	b.n	800589e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f928 	bl	8005ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800589c:	e10d      	b.n	8005aba <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589e:	bf00      	nop
    return;
 80058a0:	e10b      	b.n	8005aba <HAL_UART_IRQHandler+0x452>
 80058a2:	bf00      	nop
 80058a4:	10000001 	.word	0x10000001
 80058a8:	04000120 	.word	0x04000120
 80058ac:	08006561 	.word	0x08006561

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	f040 80ab 	bne.w	8005a10 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 80a5 	beq.w	8005a10 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 809f 	beq.w	8005a10 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2210      	movs	r2, #16
 80058d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e4:	2b40      	cmp	r3, #64	; 0x40
 80058e6:	d155      	bne.n	8005994 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80058f2:	893b      	ldrh	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 80e2 	beq.w	8005abe <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005900:	893a      	ldrh	r2, [r7, #8]
 8005902:	429a      	cmp	r2, r3
 8005904:	f080 80db 	bcs.w	8005abe <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	893a      	ldrh	r2, [r7, #8]
 800590c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0320 	and.w	r3, r3, #32
 800591c:	2b00      	cmp	r3, #0
 800591e:	d12b      	bne.n	8005978 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800592e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689a      	ldr	r2, [r3, #8]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0201 	bic.w	r2, r2, #1
 800593e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800594e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0210 	bic.w	r2, r2, #16
 800596c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005972:	4618      	mov	r0, r3
 8005974:	f7fd fdaa 	bl	80034cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005984:	b29b      	uxth	r3, r3
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	b29b      	uxth	r3, r3
 800598a:	4619      	mov	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f8b3 	bl	8005af8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005992:	e094      	b.n	8005abe <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 8087 	beq.w	8005ac2 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 80059b4:	897b      	ldrh	r3, [r7, #10]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 8083 	beq.w	8005ac2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059ca:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6812      	ldr	r2, [r2, #0]
 80059d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059da:	f023 0301 	bic.w	r3, r3, #1
 80059de:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0210 	bic.w	r2, r2, #16
 8005a02:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a04:	897b      	ldrh	r3, [r7, #10]
 8005a06:	4619      	mov	r1, r3
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f875 	bl	8005af8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a0e:	e058      	b.n	8005ac2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00d      	beq.n	8005a36 <HAL_UART_IRQHandler+0x3ce>
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d008      	beq.n	8005a36 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f001 f8a2 	bl	8006b78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a34:	e048      	b.n	8005ac8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d012      	beq.n	8005a66 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d104      	bne.n	8005a54 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d034      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	4798      	blx	r3
    }
    return;
 8005a64:	e02f      	b.n	8005ac6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d008      	beq.n	8005a82 <HAL_UART_IRQHandler+0x41a>
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fd86 	bl	800658c <UART_EndTransmit_IT>
    return;
 8005a80:	e022      	b.n	8005ac8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d008      	beq.n	8005a9e <HAL_UART_IRQHandler+0x436>
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 f882 	bl	8006ba0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a9c:	e014      	b.n	8005ac8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00f      	beq.n	8005ac8 <HAL_UART_IRQHandler+0x460>
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	da0c      	bge.n	8005ac8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f001 f86c 	bl	8006b8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ab4:	e008      	b.n	8005ac8 <HAL_UART_IRQHandler+0x460>
      return;
 8005ab6:	bf00      	nop
 8005ab8:	e006      	b.n	8005ac8 <HAL_UART_IRQHandler+0x460>
    return;
 8005aba:	bf00      	nop
 8005abc:	e004      	b.n	8005ac8 <HAL_UART_IRQHandler+0x460>
      return;
 8005abe:	bf00      	nop
 8005ac0:	e002      	b.n	8005ac8 <HAL_UART_IRQHandler+0x460>
      return;
 8005ac2:	bf00      	nop
 8005ac4:	e000      	b.n	8005ac8 <HAL_UART_IRQHandler+0x460>
    return;
 8005ac6:	bf00      	nop
  }
}
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop

08005ad0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	460b      	mov	r3, r1
 8005b02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b10:	b5b0      	push	{r4, r5, r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4bb1      	ldr	r3, [pc, #708]	; (8005e00 <UART_SetConfig+0x2f0>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	69f9      	ldr	r1, [r7, #28]
 8005b44:	430b      	orrs	r3, r1
 8005b46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4aa6      	ldr	r2, [pc, #664]	; (8005e04 <UART_SetConfig+0x2f4>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d004      	beq.n	8005b78 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005b82:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	69f9      	ldr	r1, [r7, #28]
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	f023 010f 	bic.w	r1, r3, #15
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a97      	ldr	r2, [pc, #604]	; (8005e08 <UART_SetConfig+0x2f8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d120      	bne.n	8005bf2 <UART_SetConfig+0xe2>
 8005bb0:	4b96      	ldr	r3, [pc, #600]	; (8005e0c <UART_SetConfig+0x2fc>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d816      	bhi.n	8005bec <UART_SetConfig+0xdc>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0xb4>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005bd5 	.word	0x08005bd5
 8005bc8:	08005be1 	.word	0x08005be1
 8005bcc:	08005bdb 	.word	0x08005bdb
 8005bd0:	08005be7 	.word	0x08005be7
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	76fb      	strb	r3, [r7, #27]
 8005bd8:	e0e7      	b.n	8005daa <UART_SetConfig+0x29a>
 8005bda:	2302      	movs	r3, #2
 8005bdc:	76fb      	strb	r3, [r7, #27]
 8005bde:	e0e4      	b.n	8005daa <UART_SetConfig+0x29a>
 8005be0:	2304      	movs	r3, #4
 8005be2:	76fb      	strb	r3, [r7, #27]
 8005be4:	e0e1      	b.n	8005daa <UART_SetConfig+0x29a>
 8005be6:	2308      	movs	r3, #8
 8005be8:	76fb      	strb	r3, [r7, #27]
 8005bea:	e0de      	b.n	8005daa <UART_SetConfig+0x29a>
 8005bec:	2310      	movs	r3, #16
 8005bee:	76fb      	strb	r3, [r7, #27]
 8005bf0:	e0db      	b.n	8005daa <UART_SetConfig+0x29a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a86      	ldr	r2, [pc, #536]	; (8005e10 <UART_SetConfig+0x300>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d132      	bne.n	8005c62 <UART_SetConfig+0x152>
 8005bfc:	4b83      	ldr	r3, [pc, #524]	; (8005e0c <UART_SetConfig+0x2fc>)
 8005bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c02:	f003 030c 	and.w	r3, r3, #12
 8005c06:	2b0c      	cmp	r3, #12
 8005c08:	d828      	bhi.n	8005c5c <UART_SetConfig+0x14c>
 8005c0a:	a201      	add	r2, pc, #4	; (adr r2, 8005c10 <UART_SetConfig+0x100>)
 8005c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c10:	08005c45 	.word	0x08005c45
 8005c14:	08005c5d 	.word	0x08005c5d
 8005c18:	08005c5d 	.word	0x08005c5d
 8005c1c:	08005c5d 	.word	0x08005c5d
 8005c20:	08005c51 	.word	0x08005c51
 8005c24:	08005c5d 	.word	0x08005c5d
 8005c28:	08005c5d 	.word	0x08005c5d
 8005c2c:	08005c5d 	.word	0x08005c5d
 8005c30:	08005c4b 	.word	0x08005c4b
 8005c34:	08005c5d 	.word	0x08005c5d
 8005c38:	08005c5d 	.word	0x08005c5d
 8005c3c:	08005c5d 	.word	0x08005c5d
 8005c40:	08005c57 	.word	0x08005c57
 8005c44:	2300      	movs	r3, #0
 8005c46:	76fb      	strb	r3, [r7, #27]
 8005c48:	e0af      	b.n	8005daa <UART_SetConfig+0x29a>
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	76fb      	strb	r3, [r7, #27]
 8005c4e:	e0ac      	b.n	8005daa <UART_SetConfig+0x29a>
 8005c50:	2304      	movs	r3, #4
 8005c52:	76fb      	strb	r3, [r7, #27]
 8005c54:	e0a9      	b.n	8005daa <UART_SetConfig+0x29a>
 8005c56:	2308      	movs	r3, #8
 8005c58:	76fb      	strb	r3, [r7, #27]
 8005c5a:	e0a6      	b.n	8005daa <UART_SetConfig+0x29a>
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	76fb      	strb	r3, [r7, #27]
 8005c60:	e0a3      	b.n	8005daa <UART_SetConfig+0x29a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a6b      	ldr	r2, [pc, #428]	; (8005e14 <UART_SetConfig+0x304>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d120      	bne.n	8005cae <UART_SetConfig+0x19e>
 8005c6c:	4b67      	ldr	r3, [pc, #412]	; (8005e0c <UART_SetConfig+0x2fc>)
 8005c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c76:	2b30      	cmp	r3, #48	; 0x30
 8005c78:	d013      	beq.n	8005ca2 <UART_SetConfig+0x192>
 8005c7a:	2b30      	cmp	r3, #48	; 0x30
 8005c7c:	d814      	bhi.n	8005ca8 <UART_SetConfig+0x198>
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	d009      	beq.n	8005c96 <UART_SetConfig+0x186>
 8005c82:	2b20      	cmp	r3, #32
 8005c84:	d810      	bhi.n	8005ca8 <UART_SetConfig+0x198>
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <UART_SetConfig+0x180>
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d006      	beq.n	8005c9c <UART_SetConfig+0x18c>
 8005c8e:	e00b      	b.n	8005ca8 <UART_SetConfig+0x198>
 8005c90:	2300      	movs	r3, #0
 8005c92:	76fb      	strb	r3, [r7, #27]
 8005c94:	e089      	b.n	8005daa <UART_SetConfig+0x29a>
 8005c96:	2302      	movs	r3, #2
 8005c98:	76fb      	strb	r3, [r7, #27]
 8005c9a:	e086      	b.n	8005daa <UART_SetConfig+0x29a>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	76fb      	strb	r3, [r7, #27]
 8005ca0:	e083      	b.n	8005daa <UART_SetConfig+0x29a>
 8005ca2:	2308      	movs	r3, #8
 8005ca4:	76fb      	strb	r3, [r7, #27]
 8005ca6:	e080      	b.n	8005daa <UART_SetConfig+0x29a>
 8005ca8:	2310      	movs	r3, #16
 8005caa:	76fb      	strb	r3, [r7, #27]
 8005cac:	e07d      	b.n	8005daa <UART_SetConfig+0x29a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a59      	ldr	r2, [pc, #356]	; (8005e18 <UART_SetConfig+0x308>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d120      	bne.n	8005cfa <UART_SetConfig+0x1ea>
 8005cb8:	4b54      	ldr	r3, [pc, #336]	; (8005e0c <UART_SetConfig+0x2fc>)
 8005cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005cc2:	2bc0      	cmp	r3, #192	; 0xc0
 8005cc4:	d013      	beq.n	8005cee <UART_SetConfig+0x1de>
 8005cc6:	2bc0      	cmp	r3, #192	; 0xc0
 8005cc8:	d814      	bhi.n	8005cf4 <UART_SetConfig+0x1e4>
 8005cca:	2b80      	cmp	r3, #128	; 0x80
 8005ccc:	d009      	beq.n	8005ce2 <UART_SetConfig+0x1d2>
 8005cce:	2b80      	cmp	r3, #128	; 0x80
 8005cd0:	d810      	bhi.n	8005cf4 <UART_SetConfig+0x1e4>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <UART_SetConfig+0x1cc>
 8005cd6:	2b40      	cmp	r3, #64	; 0x40
 8005cd8:	d006      	beq.n	8005ce8 <UART_SetConfig+0x1d8>
 8005cda:	e00b      	b.n	8005cf4 <UART_SetConfig+0x1e4>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	76fb      	strb	r3, [r7, #27]
 8005ce0:	e063      	b.n	8005daa <UART_SetConfig+0x29a>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	76fb      	strb	r3, [r7, #27]
 8005ce6:	e060      	b.n	8005daa <UART_SetConfig+0x29a>
 8005ce8:	2304      	movs	r3, #4
 8005cea:	76fb      	strb	r3, [r7, #27]
 8005cec:	e05d      	b.n	8005daa <UART_SetConfig+0x29a>
 8005cee:	2308      	movs	r3, #8
 8005cf0:	76fb      	strb	r3, [r7, #27]
 8005cf2:	e05a      	b.n	8005daa <UART_SetConfig+0x29a>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	76fb      	strb	r3, [r7, #27]
 8005cf8:	e057      	b.n	8005daa <UART_SetConfig+0x29a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a47      	ldr	r2, [pc, #284]	; (8005e1c <UART_SetConfig+0x30c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d125      	bne.n	8005d50 <UART_SetConfig+0x240>
 8005d04:	4b41      	ldr	r3, [pc, #260]	; (8005e0c <UART_SetConfig+0x2fc>)
 8005d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d12:	d017      	beq.n	8005d44 <UART_SetConfig+0x234>
 8005d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d18:	d817      	bhi.n	8005d4a <UART_SetConfig+0x23a>
 8005d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d1e:	d00b      	beq.n	8005d38 <UART_SetConfig+0x228>
 8005d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d24:	d811      	bhi.n	8005d4a <UART_SetConfig+0x23a>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <UART_SetConfig+0x222>
 8005d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d2e:	d006      	beq.n	8005d3e <UART_SetConfig+0x22e>
 8005d30:	e00b      	b.n	8005d4a <UART_SetConfig+0x23a>
 8005d32:	2300      	movs	r3, #0
 8005d34:	76fb      	strb	r3, [r7, #27]
 8005d36:	e038      	b.n	8005daa <UART_SetConfig+0x29a>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	76fb      	strb	r3, [r7, #27]
 8005d3c:	e035      	b.n	8005daa <UART_SetConfig+0x29a>
 8005d3e:	2304      	movs	r3, #4
 8005d40:	76fb      	strb	r3, [r7, #27]
 8005d42:	e032      	b.n	8005daa <UART_SetConfig+0x29a>
 8005d44:	2308      	movs	r3, #8
 8005d46:	76fb      	strb	r3, [r7, #27]
 8005d48:	e02f      	b.n	8005daa <UART_SetConfig+0x29a>
 8005d4a:	2310      	movs	r3, #16
 8005d4c:	76fb      	strb	r3, [r7, #27]
 8005d4e:	e02c      	b.n	8005daa <UART_SetConfig+0x29a>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a2b      	ldr	r2, [pc, #172]	; (8005e04 <UART_SetConfig+0x2f4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d125      	bne.n	8005da6 <UART_SetConfig+0x296>
 8005d5a:	4b2c      	ldr	r3, [pc, #176]	; (8005e0c <UART_SetConfig+0x2fc>)
 8005d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d68:	d017      	beq.n	8005d9a <UART_SetConfig+0x28a>
 8005d6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d6e:	d817      	bhi.n	8005da0 <UART_SetConfig+0x290>
 8005d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d74:	d00b      	beq.n	8005d8e <UART_SetConfig+0x27e>
 8005d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d7a:	d811      	bhi.n	8005da0 <UART_SetConfig+0x290>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <UART_SetConfig+0x278>
 8005d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d84:	d006      	beq.n	8005d94 <UART_SetConfig+0x284>
 8005d86:	e00b      	b.n	8005da0 <UART_SetConfig+0x290>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	76fb      	strb	r3, [r7, #27]
 8005d8c:	e00d      	b.n	8005daa <UART_SetConfig+0x29a>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	76fb      	strb	r3, [r7, #27]
 8005d92:	e00a      	b.n	8005daa <UART_SetConfig+0x29a>
 8005d94:	2304      	movs	r3, #4
 8005d96:	76fb      	strb	r3, [r7, #27]
 8005d98:	e007      	b.n	8005daa <UART_SetConfig+0x29a>
 8005d9a:	2308      	movs	r3, #8
 8005d9c:	76fb      	strb	r3, [r7, #27]
 8005d9e:	e004      	b.n	8005daa <UART_SetConfig+0x29a>
 8005da0:	2310      	movs	r3, #16
 8005da2:	76fb      	strb	r3, [r7, #27]
 8005da4:	e001      	b.n	8005daa <UART_SetConfig+0x29a>
 8005da6:	2310      	movs	r3, #16
 8005da8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a15      	ldr	r2, [pc, #84]	; (8005e04 <UART_SetConfig+0x2f4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	f040 809f 	bne.w	8005ef4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005db6:	7efb      	ldrb	r3, [r7, #27]
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d837      	bhi.n	8005e2c <UART_SetConfig+0x31c>
 8005dbc:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <UART_SetConfig+0x2b4>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005de9 	.word	0x08005de9
 8005dc8:	08005e2d 	.word	0x08005e2d
 8005dcc:	08005df1 	.word	0x08005df1
 8005dd0:	08005e2d 	.word	0x08005e2d
 8005dd4:	08005df7 	.word	0x08005df7
 8005dd8:	08005e2d 	.word	0x08005e2d
 8005ddc:	08005e2d 	.word	0x08005e2d
 8005de0:	08005e2d 	.word	0x08005e2d
 8005de4:	08005e25 	.word	0x08005e25
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005de8:	f7fe fb40 	bl	800446c <HAL_RCC_GetPCLK1Freq>
 8005dec:	6178      	str	r0, [r7, #20]
        break;
 8005dee:	e022      	b.n	8005e36 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <UART_SetConfig+0x310>)
 8005df2:	617b      	str	r3, [r7, #20]
        break;
 8005df4:	e01f      	b.n	8005e36 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005df6:	f7fe facb 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 8005dfa:	6178      	str	r0, [r7, #20]
        break;
 8005dfc:	e01b      	b.n	8005e36 <UART_SetConfig+0x326>
 8005dfe:	bf00      	nop
 8005e00:	cfff69f3 	.word	0xcfff69f3
 8005e04:	40008000 	.word	0x40008000
 8005e08:	40013800 	.word	0x40013800
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	40004400 	.word	0x40004400
 8005e14:	40004800 	.word	0x40004800
 8005e18:	40004c00 	.word	0x40004c00
 8005e1c:	40005000 	.word	0x40005000
 8005e20:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e28:	617b      	str	r3, [r7, #20]
        break;
 8005e2a:	e004      	b.n	8005e36 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	76bb      	strb	r3, [r7, #26]
        break;
 8005e34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 811b 	beq.w	8006074 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	4a96      	ldr	r2, [pc, #600]	; (800609c <UART_SetConfig+0x58c>)
 8005e44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e50:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	4613      	mov	r3, r2
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	4413      	add	r3, r2
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d305      	bcc.n	8005e6e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d902      	bls.n	8005e74 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	76bb      	strb	r3, [r7, #26]
 8005e72:	e0ff      	b.n	8006074 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f04f 0100 	mov.w	r1, #0
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	4a86      	ldr	r2, [pc, #536]	; (800609c <UART_SetConfig+0x58c>)
 8005e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	f7fa f9c4 	bl	8000218 <__aeabi_uldivmod>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4610      	mov	r0, r2
 8005e96:	4619      	mov	r1, r3
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	020b      	lsls	r3, r1, #8
 8005ea2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ea6:	0202      	lsls	r2, r0, #8
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	6849      	ldr	r1, [r1, #4]
 8005eac:	0849      	lsrs	r1, r1, #1
 8005eae:	4608      	mov	r0, r1
 8005eb0:	f04f 0100 	mov.w	r1, #0
 8005eb4:	1814      	adds	r4, r2, r0
 8005eb6:	eb43 0501 	adc.w	r5, r3, r1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f04f 0300 	mov.w	r3, #0
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	f7fa f9a6 	bl	8000218 <__aeabi_uldivmod>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eda:	d308      	bcc.n	8005eee <UART_SetConfig+0x3de>
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ee2:	d204      	bcs.n	8005eee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	60da      	str	r2, [r3, #12]
 8005eec:	e0c2      	b.n	8006074 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	76bb      	strb	r3, [r7, #26]
 8005ef2:	e0bf      	b.n	8006074 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005efc:	d165      	bne.n	8005fca <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8005efe:	7efb      	ldrb	r3, [r7, #27]
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d828      	bhi.n	8005f56 <UART_SetConfig+0x446>
 8005f04:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <UART_SetConfig+0x3fc>)
 8005f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0a:	bf00      	nop
 8005f0c:	08005f31 	.word	0x08005f31
 8005f10:	08005f39 	.word	0x08005f39
 8005f14:	08005f41 	.word	0x08005f41
 8005f18:	08005f57 	.word	0x08005f57
 8005f1c:	08005f47 	.word	0x08005f47
 8005f20:	08005f57 	.word	0x08005f57
 8005f24:	08005f57 	.word	0x08005f57
 8005f28:	08005f57 	.word	0x08005f57
 8005f2c:	08005f4f 	.word	0x08005f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f30:	f7fe fa9c 	bl	800446c <HAL_RCC_GetPCLK1Freq>
 8005f34:	6178      	str	r0, [r7, #20]
        break;
 8005f36:	e013      	b.n	8005f60 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f38:	f7fe faae 	bl	8004498 <HAL_RCC_GetPCLK2Freq>
 8005f3c:	6178      	str	r0, [r7, #20]
        break;
 8005f3e:	e00f      	b.n	8005f60 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f40:	4b57      	ldr	r3, [pc, #348]	; (80060a0 <UART_SetConfig+0x590>)
 8005f42:	617b      	str	r3, [r7, #20]
        break;
 8005f44:	e00c      	b.n	8005f60 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f46:	f7fe fa23 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 8005f4a:	6178      	str	r0, [r7, #20]
        break;
 8005f4c:	e008      	b.n	8005f60 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f52:	617b      	str	r3, [r7, #20]
        break;
 8005f54:	e004      	b.n	8005f60 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	76bb      	strb	r3, [r7, #26]
        break;
 8005f5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 8086 	beq.w	8006074 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	4a4b      	ldr	r2, [pc, #300]	; (800609c <UART_SetConfig+0x58c>)
 8005f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f72:	461a      	mov	r2, r3
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f7a:	005a      	lsls	r2, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	085b      	lsrs	r3, r3, #1
 8005f82:	441a      	add	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	2b0f      	cmp	r3, #15
 8005f94:	d916      	bls.n	8005fc4 <UART_SetConfig+0x4b4>
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f9c:	d212      	bcs.n	8005fc4 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f023 030f 	bic.w	r3, r3, #15
 8005fa6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	89fb      	ldrh	r3, [r7, #14]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	89fa      	ldrh	r2, [r7, #14]
 8005fc0:	60da      	str	r2, [r3, #12]
 8005fc2:	e057      	b.n	8006074 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	76bb      	strb	r3, [r7, #26]
 8005fc8:	e054      	b.n	8006074 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fca:	7efb      	ldrb	r3, [r7, #27]
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d828      	bhi.n	8006022 <UART_SetConfig+0x512>
 8005fd0:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <UART_SetConfig+0x4c8>)
 8005fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd6:	bf00      	nop
 8005fd8:	08005ffd 	.word	0x08005ffd
 8005fdc:	08006005 	.word	0x08006005
 8005fe0:	0800600d 	.word	0x0800600d
 8005fe4:	08006023 	.word	0x08006023
 8005fe8:	08006013 	.word	0x08006013
 8005fec:	08006023 	.word	0x08006023
 8005ff0:	08006023 	.word	0x08006023
 8005ff4:	08006023 	.word	0x08006023
 8005ff8:	0800601b 	.word	0x0800601b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ffc:	f7fe fa36 	bl	800446c <HAL_RCC_GetPCLK1Freq>
 8006000:	6178      	str	r0, [r7, #20]
        break;
 8006002:	e013      	b.n	800602c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006004:	f7fe fa48 	bl	8004498 <HAL_RCC_GetPCLK2Freq>
 8006008:	6178      	str	r0, [r7, #20]
        break;
 800600a:	e00f      	b.n	800602c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800600c:	4b24      	ldr	r3, [pc, #144]	; (80060a0 <UART_SetConfig+0x590>)
 800600e:	617b      	str	r3, [r7, #20]
        break;
 8006010:	e00c      	b.n	800602c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006012:	f7fe f9bd 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 8006016:	6178      	str	r0, [r7, #20]
        break;
 8006018:	e008      	b.n	800602c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800601a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800601e:	617b      	str	r3, [r7, #20]
        break;
 8006020:	e004      	b.n	800602c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	76bb      	strb	r3, [r7, #26]
        break;
 800602a:	bf00      	nop
    }

    if (pclk != 0U)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d020      	beq.n	8006074 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	4a19      	ldr	r2, [pc, #100]	; (800609c <UART_SetConfig+0x58c>)
 8006038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800603c:	461a      	mov	r2, r3
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	fbb3 f2f2 	udiv	r2, r3, r2
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	085b      	lsrs	r3, r3, #1
 800604a:	441a      	add	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	fbb2 f3f3 	udiv	r3, r2, r3
 8006054:	b29b      	uxth	r3, r3
 8006056:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	2b0f      	cmp	r3, #15
 800605c:	d908      	bls.n	8006070 <UART_SetConfig+0x560>
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006064:	d204      	bcs.n	8006070 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	60da      	str	r2, [r3, #12]
 800606e:	e001      	b.n	8006074 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006090:	7ebb      	ldrb	r3, [r7, #26]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3720      	adds	r7, #32
 8006096:	46bd      	mov	sp, r7
 8006098:	bdb0      	pop	{r4, r5, r7, pc}
 800609a:	bf00      	nop
 800609c:	08006f10 	.word	0x08006f10
 80060a0:	00f42400 	.word	0x00f42400

080060a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006116:	f003 0308 	and.w	r3, r3, #8
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006138:	f003 0310 	and.w	r3, r3, #16
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00a      	beq.n	8006156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006180:	2b00      	cmp	r3, #0
 8006182:	d01a      	beq.n	80061ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061a2:	d10a      	bne.n	80061ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	605a      	str	r2, [r3, #4]
  }
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061f8:	f7fb f942 	bl	8001480 <HAL_GetTick>
 80061fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b08      	cmp	r3, #8
 800620a:	d10e      	bne.n	800622a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800620c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f82f 	bl	800627e <UART_WaitOnFlagUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e025      	b.n	8006276 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b04      	cmp	r3, #4
 8006236:	d10e      	bne.n	8006256 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006238:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f819 	bl	800627e <UART_WaitOnFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e00f      	b.n	8006276 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2220      	movs	r2, #32
 800625a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	603b      	str	r3, [r7, #0]
 800628a:	4613      	mov	r3, r2
 800628c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628e:	e062      	b.n	8006356 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d05e      	beq.n	8006356 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006298:	f7fb f8f2 	bl	8001480 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d302      	bcc.n	80062ae <UART_WaitOnFlagUntilTimeout+0x30>
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d11d      	bne.n	80062ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0201 	bic.w	r2, r2, #1
 80062cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2220      	movs	r2, #32
 80062da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e045      	b.n	8006376 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d02e      	beq.n	8006356 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006306:	d126      	bne.n	8006356 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006310:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006320:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0201 	bic.w	r2, r2, #1
 8006330:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2220      	movs	r2, #32
 8006336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2220      	movs	r2, #32
 800633e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e00f      	b.n	8006376 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69da      	ldr	r2, [r3, #28]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4013      	ands	r3, r2
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	429a      	cmp	r2, r3
 8006364:	bf0c      	ite	eq
 8006366:	2301      	moveq	r3, #1
 8006368:	2300      	movne	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	79fb      	ldrb	r3, [r7, #7]
 8006370:	429a      	cmp	r2, r3
 8006372:	d08d      	beq.n	8006290 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	4613      	mov	r3, r2
 800638c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	88fa      	ldrh	r2, [r7, #6]
 8006398:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	88fa      	ldrh	r2, [r7, #6]
 80063a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b2:	d10e      	bne.n	80063d2 <UART_Start_Receive_IT+0x52>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d105      	bne.n	80063c8 <UART_Start_Receive_IT+0x48>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80063c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063c6:	e02d      	b.n	8006424 <UART_Start_Receive_IT+0xa4>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	22ff      	movs	r2, #255	; 0xff
 80063cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063d0:	e028      	b.n	8006424 <UART_Start_Receive_IT+0xa4>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10d      	bne.n	80063f6 <UART_Start_Receive_IT+0x76>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d104      	bne.n	80063ec <UART_Start_Receive_IT+0x6c>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	22ff      	movs	r2, #255	; 0xff
 80063e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063ea:	e01b      	b.n	8006424 <UART_Start_Receive_IT+0xa4>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	227f      	movs	r2, #127	; 0x7f
 80063f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063f4:	e016      	b.n	8006424 <UART_Start_Receive_IT+0xa4>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063fe:	d10d      	bne.n	800641c <UART_Start_Receive_IT+0x9c>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <UART_Start_Receive_IT+0x92>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	227f      	movs	r2, #127	; 0x7f
 800640c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006410:	e008      	b.n	8006424 <UART_Start_Receive_IT+0xa4>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	223f      	movs	r2, #63	; 0x3f
 8006416:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800641a:	e003      	b.n	8006424 <UART_Start_Receive_IT+0xa4>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2222      	movs	r2, #34	; 0x22
 8006430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0201 	orr.w	r2, r2, #1
 8006442:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800644c:	d12a      	bne.n	80064a4 <UART_Start_Receive_IT+0x124>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006454:	88fa      	ldrh	r2, [r7, #6]
 8006456:	429a      	cmp	r2, r3
 8006458:	d324      	bcc.n	80064a4 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006462:	d107      	bne.n	8006474 <UART_Start_Receive_IT+0xf4>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d103      	bne.n	8006474 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4a1f      	ldr	r2, [pc, #124]	; (80064ec <UART_Start_Receive_IT+0x16c>)
 8006470:	671a      	str	r2, [r3, #112]	; 0x70
 8006472:	e002      	b.n	800647a <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4a1e      	ldr	r2, [pc, #120]	; (80064f0 <UART_Start_Receive_IT+0x170>)
 8006478:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006490:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80064a0:	609a      	str	r2, [r3, #8]
 80064a2:	e01b      	b.n	80064dc <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ac:	d107      	bne.n	80064be <UART_Start_Receive_IT+0x13e>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4a0e      	ldr	r2, [pc, #56]	; (80064f4 <UART_Start_Receive_IT+0x174>)
 80064ba:	671a      	str	r2, [r3, #112]	; 0x70
 80064bc:	e002      	b.n	80064c4 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4a0d      	ldr	r2, [pc, #52]	; (80064f8 <UART_Start_Receive_IT+0x178>)
 80064c2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80064da:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	08006975 	.word	0x08006975
 80064f0:	08006771 	.word	0x08006771
 80064f4:	08006699 	.word	0x08006699
 80064f8:	080065c1 	.word	0x080065c1

080064fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006512:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	6812      	ldr	r2, [r2, #0]
 800651e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006522:	f023 0301 	bic.w	r3, r3, #1
 8006526:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800652c:	2b01      	cmp	r3, #1
 800652e:	d107      	bne.n	8006540 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0210 	bic.w	r2, r2, #16
 800653e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2220      	movs	r2, #32
 8006544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff fab0 	bl	8005ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006584:	bf00      	nop
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065a2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff fa8c 	bl	8005ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065b8:	bf00      	nop
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80065ce:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d6:	2b22      	cmp	r3, #34	; 0x22
 80065d8:	d152      	bne.n	8006680 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065e2:	89bb      	ldrh	r3, [r7, #12]
 80065e4:	b2d9      	uxtb	r1, r3
 80065e6:	89fb      	ldrh	r3, [r7, #14]
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ee:	400a      	ands	r2, r1
 80065f0:	b2d2      	uxtb	r2, r2
 80065f2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006604:	b29b      	uxth	r3, r3
 8006606:	3b01      	subs	r3, #1
 8006608:	b29a      	uxth	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006616:	b29b      	uxth	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d139      	bne.n	8006690 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800662a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0201 	bic.w	r2, r2, #1
 800663a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800664e:	2b01      	cmp	r3, #1
 8006650:	d10f      	bne.n	8006672 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0210 	bic.w	r2, r2, #16
 8006660:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006668:	4619      	mov	r1, r3
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7ff fa44 	bl	8005af8 <HAL_UARTEx_RxEventCallback>
 8006670:	e002      	b.n	8006678 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fa f924 	bl	80008c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800667e:	e007      	b.n	8006690 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699a      	ldr	r2, [r3, #24]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0208 	orr.w	r2, r2, #8
 800668e:	619a      	str	r2, [r3, #24]
}
 8006690:	bf00      	nop
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80066a6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ae:	2b22      	cmp	r3, #34	; 0x22
 80066b0:	d152      	bne.n	8006758 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066be:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80066c0:	89ba      	ldrh	r2, [r7, #12]
 80066c2:	89fb      	ldrh	r3, [r7, #14]
 80066c4:	4013      	ands	r3, r2
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d0:	1c9a      	adds	r2, r3, #2
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066dc:	b29b      	uxth	r3, r3
 80066de:	3b01      	subs	r3, #1
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d139      	bne.n	8006768 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006702:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0201 	bic.w	r2, r2, #1
 8006712:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2220      	movs	r2, #32
 8006718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006726:	2b01      	cmp	r3, #1
 8006728:	d10f      	bne.n	800674a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0210 	bic.w	r2, r2, #16
 8006738:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff f9d8 	bl	8005af8 <HAL_UARTEx_RxEventCallback>
 8006748:	e002      	b.n	8006750 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fa f8b8 	bl	80008c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006756:	e007      	b.n	8006768 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699a      	ldr	r2, [r3, #24]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f042 0208 	orr.w	r2, r2, #8
 8006766:	619a      	str	r2, [r3, #24]
}
 8006768:	bf00      	nop
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800677e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679e:	2b22      	cmp	r3, #34	; 0x22
 80067a0:	f040 80da 	bne.w	8006958 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80067aa:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80067ac:	e0aa      	b.n	8006904 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80067b6:	89bb      	ldrh	r3, [r7, #12]
 80067b8:	b2d9      	uxtb	r1, r3
 80067ba:	8b7b      	ldrh	r3, [r7, #26]
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c2:	400a      	ands	r2, r1
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	f003 0307 	and.w	r3, r3, #7
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d04d      	beq.n	8006892 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d010      	beq.n	8006822 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00b      	beq.n	8006822 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2201      	movs	r2, #1
 8006810:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006818:	f043 0201 	orr.w	r2, r3, #1
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d010      	beq.n	800684e <UART_RxISR_8BIT_FIFOEN+0xde>
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00b      	beq.n	800684e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2202      	movs	r2, #2
 800683c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006844:	f043 0204 	orr.w	r2, r3, #4
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b00      	cmp	r3, #0
 8006856:	d010      	beq.n	800687a <UART_RxISR_8BIT_FIFOEN+0x10a>
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00b      	beq.n	800687a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2204      	movs	r2, #4
 8006868:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006870:	f043 0202 	orr.w	r2, r3, #2
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006880:	2b00      	cmp	r3, #0
 8006882:	d006      	beq.n	8006892 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff f92d 	bl	8005ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d132      	bne.n	8006904 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068ac:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6812      	ldr	r2, [r2, #0]
 80068b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068bc:	f023 0301 	bic.w	r3, r3, #1
 80068c0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d10f      	bne.n	80068f8 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0210 	bic.w	r2, r2, #16
 80068e6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7ff f901 	bl	8005af8 <HAL_UARTEx_RxEventCallback>
 80068f6:	e002      	b.n	80068fe <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7f9 ffe1 	bl	80008c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006904:	89fb      	ldrh	r3, [r7, #14]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d005      	beq.n	8006916 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	f47f af4c 	bne.w	80067ae <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800691c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800691e:	897b      	ldrh	r3, [r7, #10]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d021      	beq.n	8006968 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800692a:	897a      	ldrh	r2, [r7, #10]
 800692c:	429a      	cmp	r2, r3
 800692e:	d21b      	bcs.n	8006968 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800693e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a0b      	ldr	r2, [pc, #44]	; (8006970 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8006944:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f042 0220 	orr.w	r2, r2, #32
 8006954:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006956:	e007      	b.n	8006968 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699a      	ldr	r2, [r3, #24]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0208 	orr.w	r2, r2, #8
 8006966:	619a      	str	r2, [r3, #24]
}
 8006968:	bf00      	nop
 800696a:	3720      	adds	r7, #32
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	080065c1 	.word	0x080065c1

08006974 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08a      	sub	sp, #40	; 0x28
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006982:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a2:	2b22      	cmp	r3, #34	; 0x22
 80069a4:	f040 80da 	bne.w	8006b5c <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069ae:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80069b0:	e0aa      	b.n	8006b08 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069be:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80069c0:	8aba      	ldrh	r2, [r7, #20]
 80069c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069c4:	4013      	ands	r3, r2
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d0:	1c9a      	adds	r2, r3, #2
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d04d      	beq.n	8006a96 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d010      	beq.n	8006a26 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00b      	beq.n	8006a26 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2201      	movs	r2, #1
 8006a14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a1c:	f043 0201 	orr.w	r2, r3, #1
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d010      	beq.n	8006a52 <UART_RxISR_16BIT_FIFOEN+0xde>
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00b      	beq.n	8006a52 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a48:	f043 0204 	orr.w	r2, r3, #4
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d010      	beq.n	8006a7e <UART_RxISR_16BIT_FIFOEN+0x10a>
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00b      	beq.n	8006a7e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2204      	movs	r2, #4
 8006a6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a74:	f043 0202 	orr.w	r2, r3, #2
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d006      	beq.n	8006a96 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff f82b 	bl	8005ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d132      	bne.n	8006b08 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ab0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6812      	ldr	r2, [r2, #0]
 8006abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ac0:	f023 0301 	bic.w	r3, r3, #1
 8006ac4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d10f      	bne.n	8006afc <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0210 	bic.w	r2, r2, #16
 8006aea:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7fe ffff 	bl	8005af8 <HAL_UARTEx_RxEventCallback>
 8006afa:	e002      	b.n	8006b02 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7f9 fedf 	bl	80008c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b08:	8afb      	ldrh	r3, [r7, #22]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d005      	beq.n	8006b1a <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f47f af4c 	bne.w	80069b2 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b20:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006b22:	89fb      	ldrh	r3, [r7, #14]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d021      	beq.n	8006b6c <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b2e:	89fa      	ldrh	r2, [r7, #14]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d21b      	bcs.n	8006b6c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006b42:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a0b      	ldr	r2, [pc, #44]	; (8006b74 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8006b48:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f042 0220 	orr.w	r2, r2, #32
 8006b58:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b5a:	e007      	b.n	8006b6c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0208 	orr.w	r2, r2, #8
 8006b6a:	619a      	str	r2, [r3, #24]
}
 8006b6c:	bf00      	nop
 8006b6e:	3728      	adds	r7, #40	; 0x28
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	08006699 	.word	0x08006699

08006b78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d101      	bne.n	8006bca <HAL_UARTEx_DisableFifoMode+0x16>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e027      	b.n	8006c1a <HAL_UARTEx_DisableFifoMode+0x66>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2224      	movs	r2, #36	; 0x24
 8006bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0201 	bic.w	r2, r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bf8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e02d      	b.n	8006c9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2224      	movs	r2, #36	; 0x24
 8006c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0201 	bic.w	r2, r2, #1
 8006c64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f850 	bl	8006d20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e02d      	b.n	8006d16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2224      	movs	r2, #36	; 0x24
 8006cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0201 	bic.w	r2, r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f812 	bl	8006d20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
	...

08006d20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d108      	bne.n	8006d42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d40:	e031      	b.n	8006da6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d42:	2308      	movs	r3, #8
 8006d44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d46:	2308      	movs	r3, #8
 8006d48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	0e5b      	lsrs	r3, r3, #25
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	0f5b      	lsrs	r3, r3, #29
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	f003 0307 	and.w	r3, r3, #7
 8006d68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	7b3a      	ldrb	r2, [r7, #12]
 8006d6e:	4911      	ldr	r1, [pc, #68]	; (8006db4 <UARTEx_SetNbDataToProcess+0x94>)
 8006d70:	5c8a      	ldrb	r2, [r1, r2]
 8006d72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d76:	7b3a      	ldrb	r2, [r7, #12]
 8006d78:	490f      	ldr	r1, [pc, #60]	; (8006db8 <UARTEx_SetNbDataToProcess+0x98>)
 8006d7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	7b7a      	ldrb	r2, [r7, #13]
 8006d8c:	4909      	ldr	r1, [pc, #36]	; (8006db4 <UARTEx_SetNbDataToProcess+0x94>)
 8006d8e:	5c8a      	ldrb	r2, [r1, r2]
 8006d90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d94:	7b7a      	ldrb	r2, [r7, #13]
 8006d96:	4908      	ldr	r1, [pc, #32]	; (8006db8 <UARTEx_SetNbDataToProcess+0x98>)
 8006d98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006da6:	bf00      	nop
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	08006f28 	.word	0x08006f28
 8006db8:	08006f30 	.word	0x08006f30

08006dbc <__libc_init_array>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	4d0d      	ldr	r5, [pc, #52]	; (8006df4 <__libc_init_array+0x38>)
 8006dc0:	4c0d      	ldr	r4, [pc, #52]	; (8006df8 <__libc_init_array+0x3c>)
 8006dc2:	1b64      	subs	r4, r4, r5
 8006dc4:	10a4      	asrs	r4, r4, #2
 8006dc6:	2600      	movs	r6, #0
 8006dc8:	42a6      	cmp	r6, r4
 8006dca:	d109      	bne.n	8006de0 <__libc_init_array+0x24>
 8006dcc:	4d0b      	ldr	r5, [pc, #44]	; (8006dfc <__libc_init_array+0x40>)
 8006dce:	4c0c      	ldr	r4, [pc, #48]	; (8006e00 <__libc_init_array+0x44>)
 8006dd0:	f000 f820 	bl	8006e14 <_init>
 8006dd4:	1b64      	subs	r4, r4, r5
 8006dd6:	10a4      	asrs	r4, r4, #2
 8006dd8:	2600      	movs	r6, #0
 8006dda:	42a6      	cmp	r6, r4
 8006ddc:	d105      	bne.n	8006dea <__libc_init_array+0x2e>
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de4:	4798      	blx	r3
 8006de6:	3601      	adds	r6, #1
 8006de8:	e7ee      	b.n	8006dc8 <__libc_init_array+0xc>
 8006dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dee:	4798      	blx	r3
 8006df0:	3601      	adds	r6, #1
 8006df2:	e7f2      	b.n	8006dda <__libc_init_array+0x1e>
 8006df4:	08006f40 	.word	0x08006f40
 8006df8:	08006f40 	.word	0x08006f40
 8006dfc:	08006f40 	.word	0x08006f40
 8006e00:	08006f44 	.word	0x08006f44

08006e04 <memset>:
 8006e04:	4402      	add	r2, r0
 8006e06:	4603      	mov	r3, r0
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d100      	bne.n	8006e0e <memset+0xa>
 8006e0c:	4770      	bx	lr
 8006e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e12:	e7f9      	b.n	8006e08 <memset+0x4>

08006e14 <_init>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	bf00      	nop
 8006e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1a:	bc08      	pop	{r3}
 8006e1c:	469e      	mov	lr, r3
 8006e1e:	4770      	bx	lr

08006e20 <_fini>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr
