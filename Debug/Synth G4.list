
Synth G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074e4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080076bc  080076bc  000176bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077c8  080077c8  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  080077c8  080077c8  000177c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077d0  080077d0  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077d0  080077d0  000177d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077d4  080077d4  000177d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  080077d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000110  080078e8  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  080078e8  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001810f  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b25  00000000  00000000  0003824f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  0003ad78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  0003c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002905a  00000000  00000000  0003d770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163e4  00000000  00000000  000667ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118387  00000000  00000000  0007cbae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00194f35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e20  00000000  00000000  00194f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000110 	.word	0x20000110
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080076a4 	.word	0x080076a4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000114 	.word	0x20000114
 8000214:	080076a4 	.word	0x080076a4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b96e 	b.w	8000ce8 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	468c      	mov	ip, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f040 8083 	bne.w	8000b3a <__udivmoddi4+0x116>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4617      	mov	r7, r2
 8000a38:	d947      	bls.n	8000aca <__udivmoddi4+0xa6>
 8000a3a:	fab2 f282 	clz	r2, r2
 8000a3e:	b142      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	f1c2 0020 	rsb	r0, r2, #32
 8000a44:	fa24 f000 	lsr.w	r0, r4, r0
 8000a48:	4091      	lsls	r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a50:	4094      	lsls	r4, r2
 8000a52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a56:	0c23      	lsrs	r3, r4, #16
 8000a58:	fbbc f6f8 	udiv	r6, ip, r8
 8000a5c:	fa1f fe87 	uxth.w	lr, r7
 8000a60:	fb08 c116 	mls	r1, r8, r6, ip
 8000a64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a68:	fb06 f10e 	mul.w	r1, r6, lr
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	d909      	bls.n	8000a84 <__udivmoddi4+0x60>
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a76:	f080 8119 	bcs.w	8000cac <__udivmoddi4+0x288>
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f240 8116 	bls.w	8000cac <__udivmoddi4+0x288>
 8000a80:	3e02      	subs	r6, #2
 8000a82:	443b      	add	r3, r7
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	45a6      	cmp	lr, r4
 8000a9a:	d909      	bls.n	8000ab0 <__udivmoddi4+0x8c>
 8000a9c:	193c      	adds	r4, r7, r4
 8000a9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa2:	f080 8105 	bcs.w	8000cb0 <__udivmoddi4+0x28c>
 8000aa6:	45a6      	cmp	lr, r4
 8000aa8:	f240 8102 	bls.w	8000cb0 <__udivmoddi4+0x28c>
 8000aac:	3802      	subs	r0, #2
 8000aae:	443c      	add	r4, r7
 8000ab0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ab4:	eba4 040e 	sub.w	r4, r4, lr
 8000ab8:	2600      	movs	r6, #0
 8000aba:	b11d      	cbz	r5, 8000ac4 <__udivmoddi4+0xa0>
 8000abc:	40d4      	lsrs	r4, r2
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	b902      	cbnz	r2, 8000ace <__udivmoddi4+0xaa>
 8000acc:	deff      	udf	#255	; 0xff
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	d150      	bne.n	8000b78 <__udivmoddi4+0x154>
 8000ad6:	1bcb      	subs	r3, r1, r7
 8000ad8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000adc:	fa1f f887 	uxth.w	r8, r7
 8000ae0:	2601      	movs	r6, #1
 8000ae2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ae6:	0c21      	lsrs	r1, r4, #16
 8000ae8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af0:	fb08 f30c 	mul.w	r3, r8, ip
 8000af4:	428b      	cmp	r3, r1
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0xe4>
 8000af8:	1879      	adds	r1, r7, r1
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0xe2>
 8000b00:	428b      	cmp	r3, r1
 8000b02:	f200 80e9 	bhi.w	8000cd8 <__udivmoddi4+0x2b4>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1ac9      	subs	r1, r1, r3
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x10c>
 8000b20:	193c      	adds	r4, r7, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x10a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80d9 	bhi.w	8000ce0 <__udivmoddi4+0x2bc>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e7bf      	b.n	8000aba <__udivmoddi4+0x96>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x12e>
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	f000 80b1 	beq.w	8000ca6 <__udivmoddi4+0x282>
 8000b44:	2600      	movs	r6, #0
 8000b46:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	fab3 f683 	clz	r6, r3
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d14a      	bne.n	8000bf0 <__udivmoddi4+0x1cc>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0x140>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 80b8 	bhi.w	8000cd4 <__udivmoddi4+0x2b0>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb61 0103 	sbc.w	r1, r1, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	468c      	mov	ip, r1
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0a8      	beq.n	8000ac4 <__udivmoddi4+0xa0>
 8000b72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b76:	e7a5      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b80:	4097      	lsls	r7, r2
 8000b82:	fa01 f002 	lsl.w	r0, r1, r2
 8000b86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b8a:	40d9      	lsrs	r1, r3
 8000b8c:	4330      	orrs	r0, r6
 8000b8e:	0c03      	lsrs	r3, r0, #16
 8000b90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb06 f108 	mul.w	r1, r6, r8
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	fa04 f402 	lsl.w	r4, r4, r2
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x19c>
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bb2:	f080 808d 	bcs.w	8000cd0 <__udivmoddi4+0x2ac>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 808a 	bls.w	8000cd0 <__udivmoddi4+0x2ac>
 8000bbc:	3e02      	subs	r6, #2
 8000bbe:	443b      	add	r3, r7
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b281      	uxth	r1, r0
 8000bc4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bd0:	fb00 f308 	mul.w	r3, r0, r8
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x1c4>
 8000bd8:	1879      	adds	r1, r7, r1
 8000bda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bde:	d273      	bcs.n	8000cc8 <__udivmoddi4+0x2a4>
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d971      	bls.n	8000cc8 <__udivmoddi4+0x2a4>
 8000be4:	3802      	subs	r0, #2
 8000be6:	4439      	add	r1, r7
 8000be8:	1acb      	subs	r3, r1, r3
 8000bea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bee:	e778      	b.n	8000ae2 <__udivmoddi4+0xbe>
 8000bf0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bf4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bf8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c02:	fa01 f306 	lsl.w	r3, r1, r6
 8000c06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c0e:	431f      	orrs	r7, r3
 8000c10:	0c3b      	lsrs	r3, r7, #16
 8000c12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c16:	fa1f f884 	uxth.w	r8, r4
 8000c1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c22:	fb09 fa08 	mul.w	sl, r9, r8
 8000c26:	458a      	cmp	sl, r1
 8000c28:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x220>
 8000c32:	1861      	adds	r1, r4, r1
 8000c34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c38:	d248      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c3a:	458a      	cmp	sl, r1
 8000c3c:	d946      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000c3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c42:	4421      	add	r1, r4
 8000c44:	eba1 010a 	sub.w	r1, r1, sl
 8000c48:	b2bf      	uxth	r7, r7
 8000c4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c56:	fb00 f808 	mul.w	r8, r0, r8
 8000c5a:	45b8      	cmp	r8, r7
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x24a>
 8000c5e:	19e7      	adds	r7, r4, r7
 8000c60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c64:	d22e      	bcs.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c66:	45b8      	cmp	r8, r7
 8000c68:	d92c      	bls.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4427      	add	r7, r4
 8000c6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c72:	eba7 0708 	sub.w	r7, r7, r8
 8000c76:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7a:	454f      	cmp	r7, r9
 8000c7c:	46c6      	mov	lr, r8
 8000c7e:	4649      	mov	r1, r9
 8000c80:	d31a      	bcc.n	8000cb8 <__udivmoddi4+0x294>
 8000c82:	d017      	beq.n	8000cb4 <__udivmoddi4+0x290>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x27a>
 8000c86:	ebb3 020e 	subs.w	r2, r3, lr
 8000c8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c92:	40f2      	lsrs	r2, r6
 8000c94:	ea4c 0202 	orr.w	r2, ip, r2
 8000c98:	40f7      	lsrs	r7, r6
 8000c9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	462e      	mov	r6, r5
 8000ca8:	4628      	mov	r0, r5
 8000caa:	e70b      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000cac:	4606      	mov	r6, r0
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0x60>
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	e6fd      	b.n	8000ab0 <__udivmoddi4+0x8c>
 8000cb4:	4543      	cmp	r3, r8
 8000cb6:	d2e5      	bcs.n	8000c84 <__udivmoddi4+0x260>
 8000cb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e7df      	b.n	8000c84 <__udivmoddi4+0x260>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e7d2      	b.n	8000c6e <__udivmoddi4+0x24a>
 8000cc8:	4660      	mov	r0, ip
 8000cca:	e78d      	b.n	8000be8 <__udivmoddi4+0x1c4>
 8000ccc:	4681      	mov	r9, r0
 8000cce:	e7b9      	b.n	8000c44 <__udivmoddi4+0x220>
 8000cd0:	4666      	mov	r6, ip
 8000cd2:	e775      	b.n	8000bc0 <__udivmoddi4+0x19c>
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	e74a      	b.n	8000b6e <__udivmoddi4+0x14a>
 8000cd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cdc:	4439      	add	r1, r7
 8000cde:	e713      	b.n	8000b08 <__udivmoddi4+0xe4>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	e724      	b.n	8000b30 <__udivmoddi4+0x10c>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_idiv0>:
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <main>:
uint8_t notes_on = 0;
uint8_t i = 0;


int main(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf0:	f001 f833 	bl	8001d5a <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8000cf4:	f000 fa06 	bl	8001104 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf8:	f000 fcfa 	bl	80016f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cfc:	f000 fcac 	bl	8001658 <MX_USART1_UART_Init>
  //MX_DMA_Init();
  MX_DAC1_Init();
 8000d00:	f000 fada 	bl	80012b8 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000d04:	f000 fb12 	bl	800132c <MX_DAC2_Init>
  MX_DAC4_Init();
 8000d08:	f000 fb54 	bl	80013b4 <MX_DAC4_Init>
  MX_ADC2_Init();
 8000d0c:	f000 fa62 	bl	80011d4 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000d10:	f000 fb94 	bl	800143c <MX_TIM2_Init>
  MX_TIM6_Init();
 8000d14:	f000 fbe0 	bl	80014d8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000d18:	f000 fc14 	bl	8001544 <MX_TIM7_Init>
  MX_TIM8_Init();
 8000d1c:	f000 fc48 	bl	80015b0 <MX_TIM8_Init>
  MX_DAC4_Init();
 8000d20:	f000 fb48 	bl	80013b4 <MX_DAC4_Init>
  MX_COMP5_Init();
 8000d24:	f000 fd30 	bl	8001788 <MX_COMP5_Init>

  // Enable DAC
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	482d      	ldr	r0, [pc, #180]	; (8000de0 <main+0xf4>)
 8000d2c:	f002 fcdd 	bl	80036ea <HAL_DAC_Start>
  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8000d30:	2100      	movs	r1, #0
 8000d32:	482c      	ldr	r0, [pc, #176]	; (8000de4 <main+0xf8>)
 8000d34:	f002 fcd9 	bl	80036ea <HAL_DAC_Start>
  HAL_DAC_Start(&hdac4, DAC_CHANNEL_1);
 8000d38:	2100      	movs	r1, #0
 8000d3a:	482b      	ldr	r0, [pc, #172]	; (8000de8 <main+0xfc>)
 8000d3c:	f002 fcd5 	bl	80036ea <HAL_DAC_Start>

  // Start comparator
  HAL_COMP_Start(&hcomp5);
 8000d40:	482a      	ldr	r0, [pc, #168]	; (8000dec <main+0x100>)
 8000d42:	f002 fb59 	bl	80033f8 <HAL_COMP_Start>

  // Enable timers
  HAL_TIM_Base_Start(&htim2);
 8000d46:	482a      	ldr	r0, [pc, #168]	; (8000df0 <main+0x104>)
 8000d48:	f004 fa7e 	bl	8005248 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8000d4c:	4829      	ldr	r0, [pc, #164]	; (8000df4 <main+0x108>)
 8000d4e:	f004 faeb 	bl	8005328 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000d52:	4829      	ldr	r0, [pc, #164]	; (8000df8 <main+0x10c>)
 8000d54:	f004 fae8 	bl	8005328 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000d58:	4828      	ldr	r0, [pc, #160]	; (8000dfc <main+0x110>)
 8000d5a:	f004 fae5 	bl	8005328 <HAL_TIM_Base_Start_IT>

  voices[0].status = 1;
 8000d5e:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <main+0x114>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
  voices[1].status = 1;
 8000d64:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <main+0x114>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	739a      	strb	r2, [r3, #14]
  voices[2].status = 1;
 8000d6a:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <main+0x114>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	771a      	strb	r2, [r3, #28]

  voices[0].index = 0;
 8000d70:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <main+0x114>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	731a      	strb	r2, [r3, #12]
  voices[1].index = 0;
 8000d76:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <main+0x114>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	769a      	strb	r2, [r3, #26]
  voices[2].index = 0;
 8000d7c:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <main+0x114>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  notes_on = 3;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <main+0x118>)
 8000d86:	2203      	movs	r2, #3
 8000d88:	701a      	strb	r2, [r3, #0]

  TIM6->ARR = ARR_VAL(100);
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <main+0x11c>)
 8000d8c:	f243 32e0 	movw	r2, #13280	; 0x33e0
 8000d90:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM7->ARR = ARR_VAL(200);
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <main+0x120>)
 8000d94:	f641 12ef 	movw	r2, #6639	; 0x19ef
 8000d98:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM8->ARR = ARR_VAL(300);
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <main+0x124>)
 8000d9c:	f241 124a 	movw	r2, #4426	; 0x114a
 8000da0:	62da      	str	r2, [r3, #44]	; 0x2c

  lut = sin_lut;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <main+0x128>)
 8000da4:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <main+0x12c>)
 8000da6:	601a      	str	r2, [r3, #0]

  // Main loop - read MIDI and play notes on DAC
  // DAC data handled in UART interrupt callback
  while (1) {
	  //TODO put in function
	  HAL_UART_Receive_IT(&huart1, midi_tmp, 3);
 8000da8:	2203      	movs	r2, #3
 8000daa:	491c      	ldr	r1, [pc, #112]	; (8000e1c <main+0x130>)
 8000dac:	481c      	ldr	r0, [pc, #112]	; (8000e20 <main+0x134>)
 8000dae:	f005 f85d 	bl	8005e6c <HAL_UART_Receive_IT>
	  if (GLOBAL_MIDI_NOTE_ON) {
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <main+0x138>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b90      	cmp	r3, #144	; 0x90
 8000db8:	d106      	bne.n	8000dc8 <main+0xdc>
		  MIDI_IN_LED_ON;
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc0:	4819      	ldr	r0, [pc, #100]	; (8000e28 <main+0x13c>)
 8000dc2:	f003 f99d 	bl	8004100 <HAL_GPIO_WritePin>
 8000dc6:	e7ef      	b.n	8000da8 <main+0xbc>
	  }
	  else if (GLOBAL_MIDI_NOTE_OFF) {
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <main+0x138>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b80      	cmp	r3, #128	; 0x80
 8000dce:	d1eb      	bne.n	8000da8 <main+0xbc>
		  MIDI_IN_LED_OFF;
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd6:	4814      	ldr	r0, [pc, #80]	; (8000e28 <main+0x13c>)
 8000dd8:	f003 f992 	bl	8004100 <HAL_GPIO_WritePin>
	  HAL_UART_Receive_IT(&huart1, midi_tmp, 3);
 8000ddc:	e7e4      	b.n	8000da8 <main+0xbc>
 8000dde:	bf00      	nop
 8000de0:	20000190 	.word	0x20000190
 8000de4:	20000130 	.word	0x20000130
 8000de8:	20000210 	.word	0x20000210
 8000dec:	2000037c 	.word	0x2000037c
 8000df0:	20000330 	.word	0x20000330
 8000df4:	200002e4 	.word	0x200002e4
 8000df8:	200003a0 	.word	0x200003a0
 8000dfc:	20000144 	.word	0x20000144
 8000e00:	200002b8 	.word	0x200002b8
 8000e04:	2000012c 	.word	0x2000012c
 8000e08:	40001000 	.word	0x40001000
 8000e0c:	40001400 	.word	0x40001400
 8000e10:	40013400 	.word	0x40013400
 8000e14:	20000100 	.word	0x20000100
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	200003ec 	.word	0x200003ec
 8000e20:	20000228 	.word	0x20000228
 8000e24:	20000224 	.word	0x20000224
 8000e28:	48000400 	.word	0x48000400

08000e2c <HAL_TIM_PeriodElapsedCallback>:
	  }
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

	if (htim == &htim6) {
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a8e      	ldr	r2, [pc, #568]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d158      	bne.n	8000eee <HAL_TIM_PeriodElapsedCallback+0xc2>
		PUT_TO_DAC(VOICE0);
 8000e3c:	4b8d      	ldr	r3, [pc, #564]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fb3b 	bl	80004bc <__aeabi_i2d>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	f04f 0000 	mov.w	r0, #0
 8000e4e:	498a      	ldr	r1, [pc, #552]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000e50:	f7ff fcc8 	bl	80007e4 <__aeabi_ddiv>
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	4614      	mov	r4, r2
 8000e5a:	461d      	mov	r5, r3
 8000e5c:	4b87      	ldr	r3, [pc, #540]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	4b87      	ldr	r3, [pc, #540]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	4b85      	ldr	r3, [pc, #532]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e68:	7b1b      	ldrb	r3, [r3, #12]
 8000e6a:	1c59      	adds	r1, r3, #1
 8000e6c:	b2ce      	uxtb	r6, r1
 8000e6e:	4983      	ldr	r1, [pc, #524]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e70:	730e      	strb	r6, [r1, #12]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	fb03 f200 	mul.w	r2, r3, r0
 8000e7c:	4b7f      	ldr	r3, [pc, #508]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e7e:	7b9b      	ldrb	r3, [r3, #14]
 8000e80:	4618      	mov	r0, r3
 8000e82:	4b7f      	ldr	r3, [pc, #508]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e84:	6819      	ldr	r1, [r3, #0]
 8000e86:	4b7d      	ldr	r3, [pc, #500]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e88:	7e9b      	ldrb	r3, [r3, #26]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	440b      	add	r3, r1
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	fb03 f300 	mul.w	r3, r3, r0
 8000e94:	441a      	add	r2, r3
 8000e96:	4b79      	ldr	r3, [pc, #484]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000e98:	7f1b      	ldrb	r3, [r3, #28]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	4b78      	ldr	r3, [pc, #480]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000e9e:	6819      	ldr	r1, [r3, #0]
 8000ea0:	4b76      	ldr	r3, [pc, #472]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	440b      	add	r3, r1
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	fb03 f300 	mul.w	r3, r3, r0
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fb02 	bl	80004bc <__aeabi_i2d>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	4629      	mov	r1, r5
 8000ec0:	f7ff fb66 	bl	8000590 <__aeabi_dmul>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f7ff fd72 	bl	80009b4 <__aeabi_d2uiz>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	486b      	ldr	r0, [pc, #428]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000ed8:	f002 fcb4 	bl	8003844 <HAL_DAC_SetValue>
		if (voices[0].index == NUM_PTS) voices[0].index = 0;
 8000edc:	4b67      	ldr	r3, [pc, #412]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ede:	7b1b      	ldrb	r3, [r3, #12]
 8000ee0:	2b80      	cmp	r3, #128	; 0x80
 8000ee2:	f040 80c1 	bne.w	8001068 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8000ee6:	4b65      	ldr	r3, [pc, #404]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	731a      	strb	r2, [r3, #12]
		if (voices[2].index == NUM_PTS) voices[2].index = 0;
	}
*/


}
 8000eec:	e0bc      	b.n	8001068 <HAL_TIM_PeriodElapsedCallback+0x23c>
	else if (htim == &htim7) {
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a65      	ldr	r2, [pc, #404]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d159      	bne.n	8000faa <HAL_TIM_PeriodElapsedCallback+0x17e>
		PUT_TO_DAC(VOICE1);
 8000ef6:	4b5f      	ldr	r3, [pc, #380]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fade 	bl	80004bc <__aeabi_i2d>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	f04f 0000 	mov.w	r0, #0
 8000f08:	495b      	ldr	r1, [pc, #364]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000f0a:	f7ff fc6b 	bl	80007e4 <__aeabi_ddiv>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4614      	mov	r4, r2
 8000f14:	461d      	mov	r5, r3
 8000f16:	4b59      	ldr	r3, [pc, #356]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4b58      	ldr	r3, [pc, #352]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b56      	ldr	r3, [pc, #344]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f22:	7b1b      	ldrb	r3, [r3, #12]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	fb03 f201 	mul.w	r2, r3, r1
 8000f2e:	4b53      	ldr	r3, [pc, #332]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f30:	7b9b      	ldrb	r3, [r3, #14]
 8000f32:	461e      	mov	r6, r3
 8000f34:	4b52      	ldr	r3, [pc, #328]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	4b50      	ldr	r3, [pc, #320]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f3a:	7e9b      	ldrb	r3, [r3, #26]
 8000f3c:	1c58      	adds	r0, r3, #1
 8000f3e:	fa5f fc80 	uxtb.w	ip, r0
 8000f42:	484e      	ldr	r0, [pc, #312]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f44:	f880 c01a 	strb.w	ip, [r0, #26]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	440b      	add	r3, r1
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	fb03 f306 	mul.w	r3, r3, r6
 8000f52:	441a      	add	r2, r3
 8000f54:	4b49      	ldr	r3, [pc, #292]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f56:	7f1b      	ldrb	r3, [r3, #28]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	4b49      	ldr	r3, [pc, #292]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000f5c:	6819      	ldr	r1, [r3, #0]
 8000f5e:	4b47      	ldr	r3, [pc, #284]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	440b      	add	r3, r1
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	fb03 f300 	mul.w	r3, r3, r0
 8000f6e:	4413      	add	r3, r2
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff faa3 	bl	80004bc <__aeabi_i2d>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	f7ff fb07 	bl	8000590 <__aeabi_dmul>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f7ff fd13 	bl	80009b4 <__aeabi_d2uiz>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	483b      	ldr	r0, [pc, #236]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000f96:	f002 fc55 	bl	8003844 <HAL_DAC_SetValue>
		if (voices[1].index == NUM_PTS) voices[1].index = 0;
 8000f9a:	4b38      	ldr	r3, [pc, #224]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f9c:	7e9b      	ldrb	r3, [r3, #26]
 8000f9e:	2b80      	cmp	r3, #128	; 0x80
 8000fa0:	d162      	bne.n	8001068 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8000fa2:	4b36      	ldr	r3, [pc, #216]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	769a      	strb	r2, [r3, #26]
}
 8000fa8:	e05e      	b.n	8001068 <HAL_TIM_PeriodElapsedCallback+0x23c>
	else if (htim == &htim8) {
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a37      	ldr	r2, [pc, #220]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d15a      	bne.n	8001068 <HAL_TIM_PeriodElapsedCallback+0x23c>
		PUT_TO_DAC(VOICE2);
 8000fb2:	4b30      	ldr	r3, [pc, #192]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fa80 	bl	80004bc <__aeabi_i2d>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	f04f 0000 	mov.w	r0, #0
 8000fc4:	492c      	ldr	r1, [pc, #176]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000fc6:	f7ff fc0d 	bl	80007e4 <__aeabi_ddiv>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4614      	mov	r4, r2
 8000fd0:	461d      	mov	r5, r3
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4b29      	ldr	r3, [pc, #164]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fde:	7b1b      	ldrb	r3, [r3, #12]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	fb03 f201 	mul.w	r2, r3, r1
 8000fea:	4b24      	ldr	r3, [pc, #144]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fec:	7b9b      	ldrb	r3, [r3, #14]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	4b23      	ldr	r3, [pc, #140]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000ff2:	6819      	ldr	r1, [r3, #0]
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ff6:	7e9b      	ldrb	r3, [r3, #26]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	440b      	add	r3, r1
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	fb03 f300 	mul.w	r3, r3, r0
 8001002:	441a      	add	r2, r3
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001006:	7f1b      	ldrb	r3, [r3, #28]
 8001008:	461e      	mov	r6, r3
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800100c:	6819      	ldr	r1, [r3, #0]
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001014:	1c58      	adds	r0, r3, #1
 8001016:	fa5f fc80 	uxtb.w	ip, r0
 800101a:	4818      	ldr	r0, [pc, #96]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 800101c:	f880 c028 	strb.w	ip, [r0, #40]	; 0x28
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	440b      	add	r3, r1
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	fb03 f306 	mul.w	r3, r3, r6
 800102a:	4413      	add	r3, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa45 	bl	80004bc <__aeabi_i2d>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4620      	mov	r0, r4
 8001038:	4629      	mov	r1, r5
 800103a:	f7ff faa9 	bl	8000590 <__aeabi_dmul>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fcb5 	bl	80009b4 <__aeabi_d2uiz>
 800104a:	4603      	mov	r3, r0
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001052:	f002 fbf7 	bl	8003844 <HAL_DAC_SetValue>
		if (voices[2].index == NUM_PTS) voices[2].index = 0;
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800105c:	2b80      	cmp	r3, #128	; 0x80
 800105e:	d103      	bne.n	8001068 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001070:	200002e4 	.word	0x200002e4
 8001074:	2000012c 	.word	0x2000012c
 8001078:	3ff00000 	.word	0x3ff00000
 800107c:	200002b8 	.word	0x200002b8
 8001080:	20000100 	.word	0x20000100
 8001084:	20000190 	.word	0x20000190
 8001088:	200003a0 	.word	0x200003a0
 800108c:	20000144 	.word	0x20000144

08001090 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	TIM6->ARR = ARR_VAL(NOTE);
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_UART_RxCpltCallback+0x60>)
 800109a:	785b      	ldrb	r3, [r3, #1]
 800109c:	3305      	adds	r3, #5
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <HAL_UART_RxCpltCallback+0x64>)
 80010a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010a4:	01db      	lsls	r3, r3, #7
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <HAL_UART_RxCpltCallback+0x68>)
 80010aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80010ae:	4a13      	ldr	r2, [pc, #76]	; (80010fc <HAL_UART_RxCpltCallback+0x6c>)
 80010b0:	3b01      	subs	r3, #1
 80010b2:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (midi_tmp[0] == 0x90 || midi_tmp[0] == 0x80) {
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_UART_RxCpltCallback+0x70>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b90      	cmp	r3, #144	; 0x90
 80010ba:	d003      	beq.n	80010c4 <HAL_UART_RxCpltCallback+0x34>
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_UART_RxCpltCallback+0x70>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b80      	cmp	r3, #128	; 0x80
 80010c2:	d10e      	bne.n	80010e2 <HAL_UART_RxCpltCallback+0x52>
		uint8_t i;
		for (i = 0; i < 3; i++) {
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e008      	b.n	80010dc <HAL_UART_RxCpltCallback+0x4c>
			midi_msg[i] = midi_tmp[i];
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	490c      	ldr	r1, [pc, #48]	; (8001100 <HAL_UART_RxCpltCallback+0x70>)
 80010d0:	5c89      	ldrb	r1, [r1, r2]
 80010d2:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_UART_RxCpltCallback+0x60>)
 80010d4:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 3; i++) {
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	3301      	adds	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d9f3      	bls.n	80010ca <HAL_UART_RxCpltCallback+0x3a>
		}
	}
}
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000224 	.word	0x20000224
 80010f4:	080076bc 	.word	0x080076bc
 80010f8:	0a21fe80 	.word	0x0a21fe80
 80010fc:	40001000 	.word	0x40001000
 8001100:	200003ec 	.word	0x200003ec

08001104 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b0a8      	sub	sp, #160	; 0xa0
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800110e:	2238      	movs	r2, #56	; 0x38
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f006 fabe 	bl	8007694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001128:	463b      	mov	r3, r7
 800112a:	2254      	movs	r2, #84	; 0x54
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f006 fab0 	bl	8007694 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001134:	2000      	movs	r0, #0
 8001136:	f002 fffb 	bl	8004130 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113a:	2302      	movs	r3, #2
 800113c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001142:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001144:	2340      	movs	r3, #64	; 0x40
 8001146:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001148:	2302      	movs	r3, #2
 800114a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800114e:	2302      	movs	r3, #2
 8001150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001154:	2304      	movs	r3, #4
 8001156:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800115a:	2355      	movs	r3, #85	; 0x55
 800115c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001160:	2302      	movs	r3, #2
 8001162:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800116c:	2302      	movs	r3, #2
 800116e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001172:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001176:	4618      	mov	r0, r3
 8001178:	f003 f88e 	bl	8004298 <HAL_RCC_OscConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001182:	f000 fb27 	bl	80017d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001186:	230f      	movs	r3, #15
 8001188:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118a:	2303      	movs	r3, #3
 800118c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800119a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800119e:	2104      	movs	r1, #4
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 fb91 	bl	80048c8 <HAL_RCC_ClockConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80011ac:	f000 fb12 	bl	80017d4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	4618      	mov	r0, r3
 80011bc:	f003 fda0 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011c6:	f000 fb05 	bl	80017d4 <Error_Handler>
  }
}
 80011ca:	bf00      	nop
 80011cc:	37a0      	adds	r7, #160	; 0xa0
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <MX_ADC2_Init>:

static void MX_ADC2_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011da:	463b      	mov	r3, r7
 80011dc:	2220      	movs	r2, #32
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f006 fa57 	bl	8007694 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80011e6:	4b31      	ldr	r3, [pc, #196]	; (80012ac <MX_ADC2_Init+0xd8>)
 80011e8:	4a31      	ldr	r2, [pc, #196]	; (80012b0 <MX_ADC2_Init+0xdc>)
 80011ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <MX_ADC2_Init+0xd8>)
 80011ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011f4:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <MX_ADC2_Init+0xd8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <MX_ADC2_Init+0xd8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001200:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <MX_ADC2_Init+0xd8>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001206:	4b29      	ldr	r3, [pc, #164]	; (80012ac <MX_ADC2_Init+0xd8>)
 8001208:	2201      	movs	r2, #1
 800120a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <MX_ADC2_Init+0xd8>)
 800120e:	2204      	movs	r2, #4
 8001210:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <MX_ADC2_Init+0xd8>)
 8001214:	2200      	movs	r2, #0
 8001216:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <MX_ADC2_Init+0xd8>)
 800121a:	2201      	movs	r2, #1
 800121c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <MX_ADC2_Init+0xd8>)
 8001220:	2202      	movs	r2, #2
 8001222:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_ADC2_Init+0xd8>)
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_ADC2_Init+0xd8>)
 800122e:	2200      	movs	r2, #0
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_ADC2_Init+0xd8>)
 8001234:	2200      	movs	r2, #0
 8001236:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_ADC2_Init+0xd8>)
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_ADC2_Init+0xd8>)
 8001242:	2200      	movs	r2, #0
 8001244:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_ADC2_Init+0xd8>)
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800124e:	4817      	ldr	r0, [pc, #92]	; (80012ac <MX_ADC2_Init+0xd8>)
 8001250:	f000 ffec 	bl	800222c <HAL_ADC_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800125a:	f000 fabb 	bl	80017d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_ADC2_Init+0xe0>)
 8001260:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001262:	2306      	movs	r3, #6
 8001264:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800126a:	237f      	movs	r3, #127	; 0x7f
 800126c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800126e:	2304      	movs	r3, #4
 8001270:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001276:	463b      	mov	r3, r7
 8001278:	4619      	mov	r1, r3
 800127a:	480c      	ldr	r0, [pc, #48]	; (80012ac <MX_ADC2_Init+0xd8>)
 800127c:	f001 f998 	bl	80025b0 <HAL_ADC_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001286:	f000 faa5 	bl	80017d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800128a:	230c      	movs	r3, #12
 800128c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800128e:	463b      	mov	r3, r7
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	; (80012ac <MX_ADC2_Init+0xd8>)
 8001294:	f001 f98c 	bl	80025b0 <HAL_ADC_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 800129e:	f000 fa99 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200001a4 	.word	0x200001a4
 80012b0:	50000100 	.word	0x50000100
 80012b4:	04300002 	.word	0x04300002

080012b8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	; 0x30
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012be:	463b      	mov	r3, r7
 80012c0:	2230      	movs	r2, #48	; 0x30
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f006 f9e5 	bl	8007694 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <MX_DAC1_Init+0x6c>)
 80012cc:	4a16      	ldr	r2, [pc, #88]	; (8001328 <MX_DAC1_Init+0x70>)
 80012ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012d0:	4814      	ldr	r0, [pc, #80]	; (8001324 <MX_DAC1_Init+0x6c>)
 80012d2:	f002 f9e8 	bl	80036a6 <HAL_DAC_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012dc:	f000 fa7a 	bl	80017d4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80012e0:	2302      	movs	r3, #2
 80012e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <MX_DAC1_Init+0x6c>)
 800130c:	f002 facc 	bl	80038a8 <HAL_DAC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001316:	f000 fa5d 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	3730      	adds	r7, #48	; 0x30
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000190 	.word	0x20000190
 8001328:	50000800 	.word	0x50000800

0800132c <MX_DAC2_Init>:

static void MX_DAC2_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08c      	sub	sp, #48	; 0x30
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001332:	463b      	mov	r3, r7
 8001334:	2230      	movs	r2, #48	; 0x30
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f006 f9ab 	bl	8007694 <memset>
  /* USER CODE BEGIN DAC2_Init 1 */

  /* USER CODE END DAC2_Init 1 */
  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800133e:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_DAC2_Init+0x80>)
 8001340:	4a1b      	ldr	r2, [pc, #108]	; (80013b0 <MX_DAC2_Init+0x84>)
 8001342:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001344:	4819      	ldr	r0, [pc, #100]	; (80013ac <MX_DAC2_Init+0x80>)
 8001346:	f002 f9ae 	bl	80036a6 <HAL_DAC_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001350:	f000 fa40 	bl	80017d4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001354:	2302      	movs	r3, #2
 8001356:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001364:	2312      	movs	r3, #18
 8001366:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	4619      	mov	r1, r3
 800137e:	480b      	ldr	r0, [pc, #44]	; (80013ac <MX_DAC2_Init+0x80>)
 8001380:	f002 fa92 	bl	80038a8 <HAL_DAC_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 800138a:	f000 fa23 	bl	80017d4 <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac2, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 800138e:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 8001392:	2100      	movs	r1, #0
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_DAC2_Init+0x80>)
 8001396:	f002 fc2f 	bl	8003bf8 <HAL_DACEx_TriangleWaveGenerate>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_DAC2_Init+0x78>
  {
    Error_Handler();
 80013a0:	f000 fa18 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	3730      	adds	r7, #48	; 0x30
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000130 	.word	0x20000130
 80013b0:	50000c00 	.word	0x50000c00

080013b4 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	; 0x30
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013ba:	463b      	mov	r3, r7
 80013bc:	2230      	movs	r2, #48	; 0x30
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f006 f967 	bl	8007694 <memset>
  /* USER CODE BEGIN DAC4_Init 1 */

  /* USER CODE END DAC4_Init 1 */
  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <MX_DAC4_Init+0x80>)
 80013c8:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <MX_DAC4_Init+0x84>)
 80013ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 80013cc:	4819      	ldr	r0, [pc, #100]	; (8001434 <MX_DAC4_Init+0x80>)
 80013ce:	f002 f96a 	bl	80036a6 <HAL_DAC_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 80013d8:	f000 f9fc 	bl	80017d4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80013dc:	2302      	movs	r3, #2
 80013de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80013f4:	2302      	movs	r3, #2
 80013f6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	480b      	ldr	r0, [pc, #44]	; (8001434 <MX_DAC4_Init+0x80>)
 8001408:	f002 fa4e 	bl	80038a8 <HAL_DAC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8001412:	f000 f9df 	bl	80017d4 <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac4, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 8001416:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 800141a:	2100      	movs	r1, #0
 800141c:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_DAC4_Init+0x80>)
 800141e:	f002 fbeb 	bl	8003bf8 <HAL_DACEx_TriangleWaveGenerate>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_DAC4_Init+0x78>
  {
    Error_Handler();
 8001428:	f000 f9d4 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	3730      	adds	r7, #48	; 0x30
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000210 	.word	0x20000210
 8001438:	50001400 	.word	0x50001400

0800143c <MX_TIM2_Init>:
static void MX_TIM2_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <MX_TIM2_Init+0x98>)
 800145c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001460:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_TIM2_Init+0x98>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_TIM2_Init+0x98>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <MX_TIM2_Init+0x98>)
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_TIM2_Init+0x98>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_TIM2_Init+0x98>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001482:	4814      	ldr	r0, [pc, #80]	; (80014d4 <MX_TIM2_Init+0x98>)
 8001484:	f003 fe88 	bl	8005198 <HAL_TIM_Base_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800148e:	f000 f9a1 	bl	80017d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001496:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4619      	mov	r1, r3
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_TIM2_Init+0x98>)
 80014a0:	f004 f93a 	bl	8005718 <HAL_TIM_ConfigClockSource>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014aa:	f000 f993 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014ae:	2320      	movs	r3, #32
 80014b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	4806      	ldr	r0, [pc, #24]	; (80014d4 <MX_TIM2_Init+0x98>)
 80014bc:	f004 fbaa 	bl	8005c14 <HAL_TIMEx_MasterConfigSynchronization>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014c6:	f000 f985 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000330 	.word	0x20000330

080014d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_TIM6_Init+0x64>)
 80014ea:	4a15      	ldr	r2, [pc, #84]	; (8001540 <MX_TIM6_Init+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <MX_TIM6_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_TIM6_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = ARR_VAL(C4);
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_TIM6_Init+0x64>)
 80014fc:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8001500:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_TIM6_Init+0x64>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <MX_TIM6_Init+0x64>)
 800150a:	f003 fe45 	bl	8005198 <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001514:	f000 f95e 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001518:	2320      	movs	r3, #32
 800151a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_TIM6_Init+0x64>)
 8001526:	f004 fb75 	bl	8005c14 <HAL_TIMEx_MasterConfigSynchronization>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001530:	f000 f950 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200002e4 	.word	0x200002e4
 8001540:	40001000 	.word	0x40001000

08001544 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_TIM7_Init+0x64>)
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <MX_TIM7_Init+0x68>)
 8001558:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_TIM7_Init+0x64>)
 800155c:	2200      	movs	r2, #0
 800155e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_TIM7_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = ARR_VAL(C4);
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <MX_TIM7_Init+0x64>)
 8001568:	f241 32cc 	movw	r2, #5068	; 0x13cc
 800156c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_TIM7_Init+0x64>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <MX_TIM7_Init+0x64>)
 8001576:	f003 fe0f 	bl	8005198 <HAL_TIM_Base_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001580:	f000 f928 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001584:	2320      	movs	r3, #32
 8001586:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_TIM7_Init+0x64>)
 8001592:	f004 fb3f 	bl	8005c14 <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800159c:	f000 f91a 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200003a0 	.word	0x200003a0
 80015ac:	40001400 	.word	0x40001400

080015b0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <MX_TIM8_Init+0xa0>)
 80015d0:	4a20      	ldr	r2, [pc, #128]	; (8001654 <MX_TIM8_Init+0xa4>)
 80015d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015d4:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <MX_TIM8_Init+0xa0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <MX_TIM8_Init+0xa0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = ARR_VAL(C4);
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_TIM8_Init+0xa0>)
 80015e2:	f241 32cc 	movw	r2, #5068	; 0x13cc
 80015e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <MX_TIM8_Init+0xa0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_TIM8_Init+0xa0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <MX_TIM8_Init+0xa0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015fa:	4815      	ldr	r0, [pc, #84]	; (8001650 <MX_TIM8_Init+0xa0>)
 80015fc:	f003 fdcc 	bl	8005198 <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001606:	f000 f8e5 	bl	80017d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	4619      	mov	r1, r3
 8001616:	480e      	ldr	r0, [pc, #56]	; (8001650 <MX_TIM8_Init+0xa0>)
 8001618:	f004 f87e 	bl	8005718 <HAL_TIM_ConfigClockSource>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001622:	f000 f8d7 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001626:	2320      	movs	r3, #32
 8001628:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	4619      	mov	r1, r3
 8001636:	4806      	ldr	r0, [pc, #24]	; (8001650 <MX_TIM8_Init+0xa0>)
 8001638:	f004 faec 	bl	8005c14 <HAL_TIMEx_MasterConfigSynchronization>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001642:	f000 f8c7 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000144 	.word	0x20000144
 8001654:	40013400 	.word	0x40013400

08001658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800165e:	4a23      	ldr	r2, [pc, #140]	; (80016ec <MX_USART1_UART_Init+0x94>)
 8001660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001664:	f647 2212 	movw	r2, #31250	; 0x7a12
 8001668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 80016a2:	f004 fb93 	bl	8005dcc <HAL_UART_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016ac:	f000 f892 	bl	80017d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b0:	2100      	movs	r1, #0
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 80016b4:	f005 feff 	bl	80074b6 <HAL_UARTEx_SetTxFifoThreshold>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016be:	f000 f889 	bl	80017d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c2:	2100      	movs	r1, #0
 80016c4:	4808      	ldr	r0, [pc, #32]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 80016c6:	f005 ff34 	bl	8007532 <HAL_UARTEx_SetRxFifoThreshold>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016d0:	f000 f880 	bl	80017d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 80016d6:	f005 feb5 	bl	8007444 <HAL_UARTEx_DisableFifoMode>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016e0:	f000 f878 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000228 	.word	0x20000228
 80016ec:	40013800 	.word	0x40013800

080016f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_GPIO_Init+0x90>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <MX_GPIO_Init+0x90>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_GPIO_Init+0x90>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MX_GPIO_Init+0x90>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <MX_GPIO_Init+0x90>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_GPIO_Init+0x90>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <MX_GPIO_Init+0x90>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	4a11      	ldr	r2, [pc, #68]	; (8001780 <MX_GPIO_Init+0x90>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <MX_GPIO_Init+0x90>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001754:	480b      	ldr	r0, [pc, #44]	; (8001784 <MX_GPIO_Init+0x94>)
 8001756:	f002 fcd3 	bl	8004100 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PB11 */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800175a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800175e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	4619      	mov	r1, r3
 8001772:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_GPIO_Init+0x94>)
 8001774:	f002 fb42 	bl	8003dfc <HAL_GPIO_Init>

}
 8001778:	bf00      	nop
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000
 8001784:	48000400 	.word	0x48000400

08001788 <MX_COMP5_Init>:

static void MX_COMP5_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_COMP5_Init+0x44>)
 800178e:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <MX_COMP5_Init+0x48>)
 8001790:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_COMP5_Init+0x44>)
 8001794:	2200      	movs	r2, #0
 8001796:	605a      	str	r2, [r3, #4]
  hcomp5.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_COMP5_Init+0x44>)
 800179a:	2250      	movs	r2, #80	; 0x50
 800179c:	609a      	str	r2, [r3, #8]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_COMP5_Init+0x44>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_COMP5_Init+0x44>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_COMP5_Init+0x44>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	615a      	str	r2, [r3, #20]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_COMP5_Init+0x44>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_COMP5_Init+0x44>)
 80017b8:	f001 fc8a 	bl	80030d0 <HAL_COMP_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_COMP5_Init+0x3e>
  {
    Error_Handler();
 80017c2:	f000 f807 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000037c 	.word	0x2000037c
 80017d0:	40010210 	.word	0x40010210

080017d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017dc:	e7fe      	b.n	80017dc <Error_Handler+0x8>
	...

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_MspInit+0x44>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ea:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <HAL_MspInit+0x44>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6613      	str	r3, [r2, #96]	; 0x60
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <HAL_MspInit+0x44>)
 80017f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_MspInit+0x44>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	4a08      	ldr	r2, [pc, #32]	; (8001824 <HAL_MspInit+0x44>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	6593      	str	r3, [r2, #88]	; 0x58
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_MspInit+0x44>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001816:	f002 fd2f 	bl	8004278 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000

08001828 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a15      	ldr	r2, [pc, #84]	; (800189c <HAL_ADC_MspInit+0x74>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d124      	bne.n	8001894 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_ADC_MspInit+0x78>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <HAL_ADC_MspInit+0x78>)
 8001850:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_ADC_MspInit+0x78>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_ADC_MspInit+0x78>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <HAL_ADC_MspInit+0x78>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_ADC_MspInit+0x78>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800187a:	2303      	movs	r3, #3
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187e:	2303      	movs	r3, #3
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001890:	f002 fab4 	bl	8003dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	; 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	50000100 	.word	0x50000100
 80018a0:	40021000 	.word	0x40021000

080018a4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP5)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a1d      	ldr	r2, [pc, #116]	; (8001938 <HAL_COMP_MspInit+0x94>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d134      	bne.n	8001930 <HAL_COMP_MspInit+0x8c>
  {
  /* USER CODE BEGIN COMP5_MspInit 0 */

  /* USER CODE END COMP5_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_COMP_MspInit+0x98>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	4a1c      	ldr	r2, [pc, #112]	; (800193c <HAL_COMP_MspInit+0x98>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_COMP_MspInit+0x98>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_COMP_MspInit+0x98>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	4a16      	ldr	r2, [pc, #88]	; (800193c <HAL_COMP_MspInit+0x98>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_COMP_MspInit+0x98>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    /**COMP5 GPIO Configuration
    PB13     ------> COMP5_INP
    PC7     ------> COMP5_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fc:	2303      	movs	r3, #3
 80018fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	480d      	ldr	r0, [pc, #52]	; (8001940 <HAL_COMP_MspInit+0x9c>)
 800190c:	f002 fa76 	bl	8003dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_COMP5;
 8001920:	2307      	movs	r3, #7
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	4806      	ldr	r0, [pc, #24]	; (8001944 <HAL_COMP_MspInit+0xa0>)
 800192c:	f002 fa66 	bl	8003dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP5_MspInit 1 */

  /* USER CODE END COMP5_MspInit 1 */
  }

}
 8001930:	bf00      	nop
 8001932:	3728      	adds	r7, #40	; 0x28
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40010210 	.word	0x40010210
 800193c:	40021000 	.word	0x40021000
 8001940:	48000400 	.word	0x48000400
 8001944:	48000800 	.word	0x48000800

08001948 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08c      	sub	sp, #48	; 0x30
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a44      	ldr	r2, [pc, #272]	; (8001a78 <HAL_DAC_MspInit+0x130>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d12d      	bne.n	80019c6 <HAL_DAC_MspInit+0x7e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800196a:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <HAL_DAC_MspInit+0x134>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a43      	ldr	r2, [pc, #268]	; (8001a7c <HAL_DAC_MspInit+0x134>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <HAL_DAC_MspInit+0x134>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <HAL_DAC_MspInit+0x134>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a3d      	ldr	r2, [pc, #244]	; (8001a7c <HAL_DAC_MspInit+0x134>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <HAL_DAC_MspInit+0x134>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800199a:	2310      	movs	r3, #16
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800199e:	2303      	movs	r3, #3
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	4619      	mov	r1, r3
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b0:	f002 fa24 	bl	8003dfc <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2100      	movs	r1, #0
 80019b8:	2036      	movs	r0, #54	; 0x36
 80019ba:	f001 fe40 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019be:	2036      	movs	r0, #54	; 0x36
 80019c0:	f001 fe57 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 80019c4:	e053      	b.n	8001a6e <HAL_DAC_MspInit+0x126>
  else if(hdac->Instance==DAC2)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a2d      	ldr	r2, [pc, #180]	; (8001a80 <HAL_DAC_MspInit+0x138>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d135      	bne.n	8001a3c <HAL_DAC_MspInit+0xf4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80019d0:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <HAL_DAC_MspInit+0x134>)
 80019d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d4:	4a29      	ldr	r2, [pc, #164]	; (8001a7c <HAL_DAC_MspInit+0x134>)
 80019d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019dc:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <HAL_DAC_MspInit+0x134>)
 80019de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_DAC_MspInit+0x134>)
 80019ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ec:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <HAL_DAC_MspInit+0x134>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_DAC_MspInit+0x134>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a00:	2340      	movs	r3, #64	; 0x40
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a04:	2303      	movs	r3, #3
 8001a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4619      	mov	r1, r3
 8001a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a16:	f002 f9f1 	bl	8003dfc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2037      	movs	r0, #55	; 0x37
 8001a20:	f001 fe0d 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001a24:	2037      	movs	r0, #55	; 0x37
 8001a26:	f001 fe24 	bl	8003672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2037      	movs	r0, #55	; 0x37
 8001a30:	f001 fe05 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001a34:	2037      	movs	r0, #55	; 0x37
 8001a36:	f001 fe1c 	bl	8003672 <HAL_NVIC_EnableIRQ>
}
 8001a3a:	e018      	b.n	8001a6e <HAL_DAC_MspInit+0x126>
  else if(hdac->Instance==DAC4)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <HAL_DAC_MspInit+0x13c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d113      	bne.n	8001a6e <HAL_DAC_MspInit+0x126>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <HAL_DAC_MspInit+0x134>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	4a0c      	ldr	r2, [pc, #48]	; (8001a7c <HAL_DAC_MspInit+0x134>)
 8001a4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_DAC_MspInit+0x134>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	2037      	movs	r0, #55	; 0x37
 8001a64:	f001 fdeb 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001a68:	2037      	movs	r0, #55	; 0x37
 8001a6a:	f001 fe02 	bl	8003672 <HAL_NVIC_EnableIRQ>
}
 8001a6e:	bf00      	nop
 8001a70:	3730      	adds	r7, #48	; 0x30
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	50000800 	.word	0x50000800
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	50000c00 	.word	0x50000c00
 8001a84:	50001400 	.word	0x50001400

08001a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a98:	d114      	bne.n	8001ac4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a9a:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <HAL_TIM_Base_MspInit+0xe0>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	4a32      	ldr	r2, [pc, #200]	; (8001b68 <HAL_TIM_Base_MspInit+0xe0>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa6:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <HAL_TIM_Base_MspInit+0xe0>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	201c      	movs	r0, #28
 8001ab8:	f001 fdc1 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001abc:	201c      	movs	r0, #28
 8001abe:	f001 fdd8 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001ac2:	e04c      	b.n	8001b5e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a28      	ldr	r2, [pc, #160]	; (8001b6c <HAL_TIM_Base_MspInit+0xe4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d114      	bne.n	8001af8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <HAL_TIM_Base_MspInit+0xe0>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	4a25      	ldr	r2, [pc, #148]	; (8001b68 <HAL_TIM_Base_MspInit+0xe0>)
 8001ad4:	f043 0310 	orr.w	r3, r3, #16
 8001ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <HAL_TIM_Base_MspInit+0xe0>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2036      	movs	r0, #54	; 0x36
 8001aec:	f001 fda7 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001af0:	2036      	movs	r0, #54	; 0x36
 8001af2:	f001 fdbe 	bl	8003672 <HAL_NVIC_EnableIRQ>
}
 8001af6:	e032      	b.n	8001b5e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <HAL_TIM_Base_MspInit+0xe8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d114      	bne.n	8001b2c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_TIM_Base_MspInit+0xe0>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	4a18      	ldr	r2, [pc, #96]	; (8001b68 <HAL_TIM_Base_MspInit+0xe0>)
 8001b08:	f043 0320 	orr.w	r3, r3, #32
 8001b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b0e:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <HAL_TIM_Base_MspInit+0xe0>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	f003 0320 	and.w	r3, r3, #32
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2037      	movs	r0, #55	; 0x37
 8001b20:	f001 fd8d 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001b24:	2037      	movs	r0, #55	; 0x37
 8001b26:	f001 fda4 	bl	8003672 <HAL_NVIC_EnableIRQ>
}
 8001b2a:	e018      	b.n	8001b5e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM8)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <HAL_TIM_Base_MspInit+0xec>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d113      	bne.n	8001b5e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_TIM_Base_MspInit+0xe0>)
 8001b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <HAL_TIM_Base_MspInit+0xe0>)
 8001b3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b40:	6613      	str	r3, [r2, #96]	; 0x60
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_TIM_Base_MspInit+0xe0>)
 8001b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	202c      	movs	r0, #44	; 0x2c
 8001b54:	f001 fd73 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001b58:	202c      	movs	r0, #44	; 0x2c
 8001b5a:	f001 fd8a 	bl	8003672 <HAL_NVIC_EnableIRQ>
}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40001000 	.word	0x40001000
 8001b70:	40001400 	.word	0x40001400
 8001b74:	40013400 	.word	0x40013400

08001b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1b      	ldr	r2, [pc, #108]	; (8001c04 <HAL_UART_MspInit+0x8c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d12f      	bne.n	8001bfa <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_UART_MspInit+0x90>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9e:	4a1a      	ldr	r2, [pc, #104]	; (8001c08 <HAL_UART_MspInit+0x90>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <HAL_UART_MspInit+0x90>)
 8001ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_UART_MspInit+0x90>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <HAL_UART_MspInit+0x90>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_UART_MspInit+0x90>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001bca:	2330      	movs	r3, #48	; 0x30
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bda:	2307      	movs	r3, #7
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	4809      	ldr	r0, [pc, #36]	; (8001c0c <HAL_UART_MspInit+0x94>)
 8001be6:	f002 f909 	bl	8003dfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	2025      	movs	r0, #37	; 0x25
 8001bf0:	f001 fd25 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bf4:	2025      	movs	r0, #37	; 0x25
 8001bf6:	f001 fd3c 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bfa:	bf00      	nop
 8001bfc:	3728      	adds	r7, #40	; 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40013800 	.word	0x40013800
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	48000800 	.word	0x48000800

08001c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <NMI_Handler+0x4>

08001c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <HardFault_Handler+0x4>

08001c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <MemManage_Handler+0x4>

08001c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <BusFault_Handler+0x4>

08001c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <UsageFault_Handler+0x4>

08001c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c5c:	f000 f8d0 	bl	8001e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <TIM2_IRQHandler+0x10>)
 8001c6a:	f003 fbd5 	bl	8005418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000330 	.word	0x20000330

08001c78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <USART1_IRQHandler+0x10>)
 8001c7e:	f004 f93b 	bl	8005ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000228 	.word	0x20000228

08001c8c <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <TIM8_UP_IRQHandler+0x10>)
 8001c92:	f003 fbc1 	bl	8005418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000144 	.word	0x20000144

08001ca0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ca4:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <TIM6_DAC_IRQHandler+0x14>)
 8001ca6:	f003 fbb7 	bl	8005418 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001caa:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <TIM6_DAC_IRQHandler+0x18>)
 8001cac:	f001 fd70 	bl	8003790 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200002e4 	.word	0x200002e4
 8001cb8:	20000190 	.word	0x20000190

08001cbc <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <TIM7_DAC_IRQHandler+0x1c>)
 8001cc2:	f003 fba9 	bl	8005418 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac2);
 8001cc6:	4805      	ldr	r0, [pc, #20]	; (8001cdc <TIM7_DAC_IRQHandler+0x20>)
 8001cc8:	f001 fd62 	bl	8003790 <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac4);
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <TIM7_DAC_IRQHandler+0x24>)
 8001cce:	f001 fd5f 	bl	8003790 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200003a0 	.word	0x200003a0
 8001cdc:	20000130 	.word	0x20000130
 8001ce0:	20000210 	.word	0x20000210

08001ce4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <SystemInit+0x20>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <SystemInit+0x20>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d08:	480d      	ldr	r0, [pc, #52]	; (8001d40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d0c:	480d      	ldr	r0, [pc, #52]	; (8001d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d0e:	490e      	ldr	r1, [pc, #56]	; (8001d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d10:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <LoopForever+0xe>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d14:	e002      	b.n	8001d1c <LoopCopyDataInit>

08001d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1a:	3304      	adds	r3, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d20:	d3f9      	bcc.n	8001d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d22:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d24:	4c0b      	ldr	r4, [pc, #44]	; (8001d54 <LoopForever+0x16>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d28:	e001      	b.n	8001d2e <LoopFillZerobss>

08001d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d2c:	3204      	adds	r2, #4

08001d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d30:	d3fb      	bcc.n	8001d2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d32:	f7ff ffd7 	bl	8001ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d36:	f005 fc89 	bl	800764c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d3a:	f7fe ffd7 	bl	8000cec <main>

08001d3e <LoopForever>:

LoopForever:
    b LoopForever
 8001d3e:	e7fe      	b.n	8001d3e <LoopForever>
  ldr   r0, =_estack
 8001d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001d4c:	080077d8 	.word	0x080077d8
  ldr r2, =_sbss
 8001d50:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001d54:	200003f4 	.word	0x200003f4

08001d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC1_2_IRQHandler>

08001d5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f001 fc5f 	bl	8003628 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f000 f80e 	bl	8001d8c <HAL_InitTick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	e001      	b.n	8001d80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d7c:	f7ff fd30 	bl	80017e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d80:	79fb      	ldrb	r3, [r7, #7]

}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_InitTick+0x68>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d022      	beq.n	8001de6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001da0:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_InitTick+0x6c>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <HAL_InitTick+0x68>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	f001 fc6a 	bl	800368e <HAL_SYSTICK_Config>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10f      	bne.n	8001de0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b0f      	cmp	r3, #15
 8001dc4:	d809      	bhi.n	8001dda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	f04f 30ff 	mov.w	r0, #4294967295
 8001dce:	f001 fc36 	bl	800363e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <HAL_InitTick+0x70>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	e007      	b.n	8001dea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	e004      	b.n	8001dea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	e001      	b.n	8001dea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000010c 	.word	0x2000010c
 8001df8:	20000104 	.word	0x20000104
 8001dfc:	20000108 	.word	0x20000108

08001e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_IncTick+0x1c>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_IncTick+0x20>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4a03      	ldr	r2, [pc, #12]	; (8001e1c <HAL_IncTick+0x1c>)
 8001e10:	6013      	str	r3, [r2, #0]
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	200003f0 	.word	0x200003f0
 8001e20:	2000010c 	.word	0x2000010c

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	200003f0 	.word	0x200003f0

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d004      	beq.n	8001e60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_Delay+0x40>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e60:	bf00      	nop
 8001e62:	f7ff ffdf 	bl	8001e24 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d8f7      	bhi.n	8001e62 <HAL_Delay+0x26>
  {
  }
}
 8001e72:	bf00      	nop
 8001e74:	bf00      	nop
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	2000010c 	.word	0x2000010c

08001e80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	609a      	str	r2, [r3, #8]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3360      	adds	r3, #96	; 0x60
 8001efa:	461a      	mov	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <LL_ADC_SetOffset+0x44>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f20:	bf00      	nop
 8001f22:	371c      	adds	r7, #28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	03fff000 	.word	0x03fff000

08001f30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3360      	adds	r3, #96	; 0x60
 8001f3e:	461a      	mov	r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3360      	adds	r3, #96	; 0x60
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f86:	bf00      	nop
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b087      	sub	sp, #28
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3360      	adds	r3, #96	; 0x60
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001fbc:	bf00      	nop
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	3360      	adds	r3, #96	; 0x60
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	431a      	orrs	r2, r3
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ff2:	bf00      	nop
 8001ff4:	371c      	adds	r7, #28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	615a      	str	r2, [r3, #20]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3330      	adds	r3, #48	; 0x30
 8002034:	461a      	mov	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	4413      	add	r3, r2
 8002042:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	211f      	movs	r1, #31
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	401a      	ands	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	0e9b      	lsrs	r3, r3, #26
 800205c:	f003 011f 	and.w	r1, r3, #31
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	431a      	orrs	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3314      	adds	r3, #20
 800208c:	461a      	mov	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	0e5b      	lsrs	r3, r3, #25
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	4413      	add	r3, r2
 800209a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	0d1b      	lsrs	r3, r3, #20
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	2107      	movs	r1, #7
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	401a      	ands	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	0d1b      	lsrs	r3, r3, #20
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	431a      	orrs	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020c6:	bf00      	nop
 80020c8:	371c      	adds	r7, #28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ec:	43db      	mvns	r3, r3
 80020ee:	401a      	ands	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f003 0318 	and.w	r3, r3, #24
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020f8:	40d9      	lsrs	r1, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	400b      	ands	r3, r1
 80020fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002102:	431a      	orrs	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	0007ffff 	.word	0x0007ffff

0800211c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800212c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6093      	str	r3, [r2, #8]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002154:	d101      	bne.n	800215a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002178:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800217c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021a4:	d101      	bne.n	80021aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <LL_ADC_IsEnabled+0x18>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <LL_ADC_IsEnabled+0x1a>
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d101      	bne.n	80021f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b08      	cmp	r3, #8
 8002216:	d101      	bne.n	800221c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b089      	sub	sp, #36	; 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002238:	2300      	movs	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e1af      	b.n	80025a6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff fae7 	bl	8001828 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff67 	bl	8002140 <LL_ADC_IsDeepPowerDownEnabled>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d004      	beq.n	8002282 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff4d 	bl	800211c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff ff82 	bl	8002190 <LL_ADC_IsInternalRegulatorEnabled>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d115      	bne.n	80022be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ff66 	bl	8002168 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800229c:	4b9f      	ldr	r3, [pc, #636]	; (800251c <HAL_ADC_Init+0x2f0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	099b      	lsrs	r3, r3, #6
 80022a2:	4a9f      	ldr	r2, [pc, #636]	; (8002520 <HAL_ADC_Init+0x2f4>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	099b      	lsrs	r3, r3, #6
 80022aa:	3301      	adds	r3, #1
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022b0:	e002      	b.n	80022b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f9      	bne.n	80022b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff ff64 	bl	8002190 <LL_ADC_IsInternalRegulatorEnabled>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10d      	bne.n	80022ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d2:	f043 0210 	orr.w	r2, r3, #16
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022de:	f043 0201 	orr.w	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff75 	bl	80021de <LL_ADC_REG_IsConversionOngoing>
 80022f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 8148 	bne.w	8002594 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 8144 	bne.w	8002594 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002310:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002314:	f043 0202 	orr.w	r2, r3, #2
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff49 	bl	80021b8 <LL_ADC_IsEnabled>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d141      	bne.n	80023b0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002334:	d004      	beq.n	8002340 <HAL_ADC_Init+0x114>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a7a      	ldr	r2, [pc, #488]	; (8002524 <HAL_ADC_Init+0x2f8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d10f      	bne.n	8002360 <HAL_ADC_Init+0x134>
 8002340:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002344:	f7ff ff38 	bl	80021b8 <LL_ADC_IsEnabled>
 8002348:	4604      	mov	r4, r0
 800234a:	4876      	ldr	r0, [pc, #472]	; (8002524 <HAL_ADC_Init+0x2f8>)
 800234c:	f7ff ff34 	bl	80021b8 <LL_ADC_IsEnabled>
 8002350:	4603      	mov	r3, r0
 8002352:	4323      	orrs	r3, r4
 8002354:	2b00      	cmp	r3, #0
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	e012      	b.n	8002386 <HAL_ADC_Init+0x15a>
 8002360:	4871      	ldr	r0, [pc, #452]	; (8002528 <HAL_ADC_Init+0x2fc>)
 8002362:	f7ff ff29 	bl	80021b8 <LL_ADC_IsEnabled>
 8002366:	4604      	mov	r4, r0
 8002368:	4870      	ldr	r0, [pc, #448]	; (800252c <HAL_ADC_Init+0x300>)
 800236a:	f7ff ff25 	bl	80021b8 <LL_ADC_IsEnabled>
 800236e:	4603      	mov	r3, r0
 8002370:	431c      	orrs	r4, r3
 8002372:	486f      	ldr	r0, [pc, #444]	; (8002530 <HAL_ADC_Init+0x304>)
 8002374:	f7ff ff20 	bl	80021b8 <LL_ADC_IsEnabled>
 8002378:	4603      	mov	r3, r0
 800237a:	4323      	orrs	r3, r4
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d012      	beq.n	80023b0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002392:	d004      	beq.n	800239e <HAL_ADC_Init+0x172>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a62      	ldr	r2, [pc, #392]	; (8002524 <HAL_ADC_Init+0x2f8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_Init+0x176>
 800239e:	4a65      	ldr	r2, [pc, #404]	; (8002534 <HAL_ADC_Init+0x308>)
 80023a0:	e000      	b.n	80023a4 <HAL_ADC_Init+0x178>
 80023a2:	4a65      	ldr	r2, [pc, #404]	; (8002538 <HAL_ADC_Init+0x30c>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4619      	mov	r1, r3
 80023aa:	4610      	mov	r0, r2
 80023ac:	f7ff fd68 	bl	8001e80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7f5b      	ldrb	r3, [r3, #29]
 80023b4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80023c0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80023c6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d106      	bne.n	80023ec <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	3b01      	subs	r3, #1
 80023e4:	045b      	lsls	r3, r3, #17
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	4b4b      	ldr	r3, [pc, #300]	; (800253c <HAL_ADC_Init+0x310>)
 8002410:	4013      	ands	r3, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	69b9      	ldr	r1, [r7, #24]
 8002418:	430b      	orrs	r3, r1
 800241a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fed1 	bl	80021de <LL_ADC_REG_IsConversionOngoing>
 800243c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fede 	bl	8002204 <LL_ADC_INJ_IsConversionOngoing>
 8002448:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d17f      	bne.n	8002550 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d17c      	bne.n	8002550 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800245a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002462:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002472:	f023 0302 	bic.w	r3, r3, #2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	69b9      	ldr	r1, [r7, #24]
 800247c:	430b      	orrs	r3, r1
 800247e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d017      	beq.n	80024b8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002496:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6911      	ldr	r1, [r2, #16]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	430b      	orrs	r3, r1
 80024b2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80024b6:	e013      	b.n	80024e0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024dc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d12a      	bne.n	8002540 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002500:	4311      	orrs	r1, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002506:	4311      	orrs	r1, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800250c:	430a      	orrs	r2, r1
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	611a      	str	r2, [r3, #16]
 800251a:	e019      	b.n	8002550 <HAL_ADC_Init+0x324>
 800251c:	20000104 	.word	0x20000104
 8002520:	053e2d63 	.word	0x053e2d63
 8002524:	50000100 	.word	0x50000100
 8002528:	50000400 	.word	0x50000400
 800252c:	50000500 	.word	0x50000500
 8002530:	50000600 	.word	0x50000600
 8002534:	50000300 	.word	0x50000300
 8002538:	50000700 	.word	0x50000700
 800253c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d10c      	bne.n	8002572 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f023 010f 	bic.w	r1, r3, #15
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	1e5a      	subs	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
 8002570:	e007      	b.n	8002582 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 020f 	bic.w	r2, r2, #15
 8002580:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	f023 0303 	bic.w	r3, r3, #3
 800258a:	f043 0201 	orr.w	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	65da      	str	r2, [r3, #92]	; 0x5c
 8002592:	e007      	b.n	80025a4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	f043 0210 	orr.w	r2, r3, #16
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd90      	pop	{r4, r7, pc}
 80025ae:	bf00      	nop

080025b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b0b6      	sub	sp, #216	; 0xd8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d102      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x24>
 80025ce:	2302      	movs	r3, #2
 80025d0:	f000 bc13 	b.w	8002dfa <HAL_ADC_ConfigChannel+0x84a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fdfc 	bl	80021de <LL_ADC_REG_IsConversionOngoing>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f040 83f3 	bne.w	8002dd4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6859      	ldr	r1, [r3, #4]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	f7ff fd12 	bl	8002024 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fdea 	bl	80021de <LL_ADC_REG_IsConversionOngoing>
 800260a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fdf6 	bl	8002204 <LL_ADC_INJ_IsConversionOngoing>
 8002618:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800261c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002620:	2b00      	cmp	r3, #0
 8002622:	f040 81d9 	bne.w	80029d8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002626:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 81d4 	bne.w	80029d8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002638:	d10f      	bne.n	800265a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2200      	movs	r2, #0
 8002644:	4619      	mov	r1, r3
 8002646:	f7ff fd19 	bl	800207c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fcd3 	bl	8001ffe <LL_ADC_SetSamplingTimeCommonConfig>
 8002658:	e00e      	b.n	8002678 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	461a      	mov	r2, r3
 8002668:	f7ff fd08 	bl	800207c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fcc3 	bl	8001ffe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	08db      	lsrs	r3, r3, #3
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	2b04      	cmp	r3, #4
 8002698:	d022      	beq.n	80026e0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6919      	ldr	r1, [r3, #16]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026aa:	f7ff fc1d 	bl	8001ee8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6919      	ldr	r1, [r3, #16]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	461a      	mov	r2, r3
 80026bc:	f7ff fc69 	bl	8001f92 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6919      	ldr	r1, [r3, #16]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	7f1b      	ldrb	r3, [r3, #28]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d102      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x126>
 80026d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d4:	e000      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x128>
 80026d6:	2300      	movs	r3, #0
 80026d8:	461a      	mov	r2, r3
 80026da:	f7ff fc75 	bl	8001fc8 <LL_ADC_SetOffsetSaturation>
 80026de:	e17b      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fc22 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10a      	bne.n	800270c <HAL_ADC_ConfigChannel+0x15c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fc17 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002702:	4603      	mov	r3, r0
 8002704:	0e9b      	lsrs	r3, r3, #26
 8002706:	f003 021f 	and.w	r2, r3, #31
 800270a:	e01e      	b.n	800274a <HAL_ADC_ConfigChannel+0x19a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fc0c 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800272a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800272e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002732:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800273a:	2320      	movs	r3, #32
 800273c:	e004      	b.n	8002748 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800273e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002752:	2b00      	cmp	r3, #0
 8002754:	d105      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x1b2>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	0e9b      	lsrs	r3, r3, #26
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	e018      	b.n	8002794 <HAL_ADC_ConfigChannel+0x1e4>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800277a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800277e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002786:	2320      	movs	r3, #32
 8002788:	e004      	b.n	8002794 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800278a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002794:	429a      	cmp	r2, r3
 8002796:	d106      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2200      	movs	r2, #0
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fbdb 	bl	8001f5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2101      	movs	r1, #1
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fbbf 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10a      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x222>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2101      	movs	r1, #1
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fbb4 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 80027c8:	4603      	mov	r3, r0
 80027ca:	0e9b      	lsrs	r3, r3, #26
 80027cc:	f003 021f 	and.w	r2, r3, #31
 80027d0:	e01e      	b.n	8002810 <HAL_ADC_ConfigChannel+0x260>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2101      	movs	r1, #1
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fba9 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002800:	2320      	movs	r3, #32
 8002802:	e004      	b.n	800280e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002818:	2b00      	cmp	r3, #0
 800281a:	d105      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x278>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	0e9b      	lsrs	r3, r3, #26
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	e018      	b.n	800285a <HAL_ADC_ConfigChannel+0x2aa>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800283c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002844:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800284c:	2320      	movs	r3, #32
 800284e:	e004      	b.n	800285a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002850:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800285a:	429a      	cmp	r2, r3
 800285c:	d106      	bne.n	800286c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	2101      	movs	r1, #1
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fb78 	bl	8001f5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2102      	movs	r1, #2
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fb5c 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10a      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x2e8>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2102      	movs	r1, #2
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fb51 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 800288e:	4603      	mov	r3, r0
 8002890:	0e9b      	lsrs	r3, r3, #26
 8002892:	f003 021f 	and.w	r2, r3, #31
 8002896:	e01e      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x326>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2102      	movs	r1, #2
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fb46 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80028c6:	2320      	movs	r3, #32
 80028c8:	e004      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80028ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d105      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x33e>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	0e9b      	lsrs	r3, r3, #26
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	e016      	b.n	800291c <HAL_ADC_ConfigChannel+0x36c>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002900:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002902:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002906:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800290e:	2320      	movs	r3, #32
 8002910:	e004      	b.n	800291c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002912:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800291c:	429a      	cmp	r2, r3
 800291e:	d106      	bne.n	800292e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2200      	movs	r2, #0
 8002926:	2102      	movs	r1, #2
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fb17 	bl	8001f5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2103      	movs	r1, #3
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fafb 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10a      	bne.n	800295a <HAL_ADC_ConfigChannel+0x3aa>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2103      	movs	r1, #3
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff faf0 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002950:	4603      	mov	r3, r0
 8002952:	0e9b      	lsrs	r3, r3, #26
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	e017      	b.n	800298a <HAL_ADC_ConfigChannel+0x3da>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2103      	movs	r1, #3
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fae5 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002974:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800297c:	2320      	movs	r3, #32
 800297e:	e003      	b.n	8002988 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002982:	fab3 f383 	clz	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002992:	2b00      	cmp	r3, #0
 8002994:	d105      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x3f2>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	0e9b      	lsrs	r3, r3, #26
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	e011      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x416>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80029b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80029ba:	2320      	movs	r3, #32
 80029bc:	e003      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80029be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d106      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2200      	movs	r2, #0
 80029d0:	2103      	movs	r1, #3
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fac2 	bl	8001f5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fbeb 	bl	80021b8 <LL_ADC_IsEnabled>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f040 813d 	bne.w	8002c64 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6819      	ldr	r1, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	461a      	mov	r2, r3
 80029f8:	f7ff fb6c 	bl	80020d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4aa2      	ldr	r2, [pc, #648]	; (8002c8c <HAL_ADC_ConfigChannel+0x6dc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	f040 812e 	bne.w	8002c64 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10b      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x480>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0e9b      	lsrs	r3, r3, #26
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	2b09      	cmp	r3, #9
 8002a26:	bf94      	ite	ls
 8002a28:	2301      	movls	r3, #1
 8002a2a:	2300      	movhi	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	e019      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x4b4>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a40:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a48:	2320      	movs	r3, #32
 8002a4a:	e003      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	2b09      	cmp	r3, #9
 8002a5c:	bf94      	ite	ls
 8002a5e:	2301      	movls	r3, #1
 8002a60:	2300      	movhi	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d079      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d107      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x4d4>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0e9b      	lsrs	r3, r3, #26
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	069b      	lsls	r3, r3, #26
 8002a7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a82:	e015      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x500>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a8c:	fa93 f3a3 	rbit	r3, r3
 8002a90:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a94:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	e003      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	069b      	lsls	r3, r3, #26
 8002aac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d109      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x520>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	2101      	movs	r1, #1
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	e017      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x550>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e003      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	2101      	movs	r1, #1
 8002afc:	fa01 f303 	lsl.w	r3, r1, r3
 8002b00:	ea42 0103 	orr.w	r1, r2, r3
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10a      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x576>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0e9b      	lsrs	r3, r3, #26
 8002b16:	3301      	adds	r3, #1
 8002b18:	f003 021f 	and.w	r2, r3, #31
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	051b      	lsls	r3, r3, #20
 8002b24:	e018      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x5a8>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002b3e:	2320      	movs	r3, #32
 8002b40:	e003      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f003 021f 	and.w	r2, r3, #31
 8002b50:	4613      	mov	r3, r2
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4413      	add	r3, r2
 8002b56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	e07e      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d107      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x5c8>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	3301      	adds	r3, #1
 8002b70:	069b      	lsls	r3, r3, #26
 8002b72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b76:	e015      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x5f4>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002b90:	2320      	movs	r3, #32
 8002b92:	e003      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	069b      	lsls	r3, r3, #26
 8002ba0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d109      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x614>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	0e9b      	lsrs	r3, r3, #26
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	e017      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x644>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	61fb      	str	r3, [r7, #28]
  return result;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	e003      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	3301      	adds	r3, #1
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	ea42 0103 	orr.w	r1, r2, r3
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10d      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x670>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f003 021f 	and.w	r2, r3, #31
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	3b1e      	subs	r3, #30
 8002c18:	051b      	lsls	r3, r3, #20
 8002c1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	e01b      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x6a8>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	613b      	str	r3, [r7, #16]
  return result;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002c38:	2320      	movs	r3, #32
 8002c3a:	e003      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	3301      	adds	r3, #1
 8002c46:	f003 021f 	and.w	r2, r3, #31
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4413      	add	r3, r2
 8002c50:	3b1e      	subs	r3, #30
 8002c52:	051b      	lsls	r3, r3, #20
 8002c54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	6892      	ldr	r2, [r2, #8]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f7ff fa0c 	bl	800207c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_ADC_ConfigChannel+0x6e0>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80be 	beq.w	8002dee <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c7a:	d004      	beq.n	8002c86 <HAL_ADC_ConfigChannel+0x6d6>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <HAL_ADC_ConfigChannel+0x6e4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d10a      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x6ec>
 8002c86:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <HAL_ADC_ConfigChannel+0x6e8>)
 8002c88:	e009      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x6ee>
 8002c8a:	bf00      	nop
 8002c8c:	407f0000 	.word	0x407f0000
 8002c90:	80080000 	.word	0x80080000
 8002c94:	50000100 	.word	0x50000100
 8002c98:	50000300 	.word	0x50000300
 8002c9c:	4b59      	ldr	r3, [pc, #356]	; (8002e04 <HAL_ADC_ConfigChannel+0x854>)
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff f914 	bl	8001ecc <LL_ADC_GetCommonPathInternalCh>
 8002ca4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a56      	ldr	r2, [pc, #344]	; (8002e08 <HAL_ADC_ConfigChannel+0x858>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <HAL_ADC_ConfigChannel+0x70c>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a55      	ldr	r2, [pc, #340]	; (8002e0c <HAL_ADC_ConfigChannel+0x85c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d13a      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d134      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd0:	d005      	beq.n	8002cde <HAL_ADC_ConfigChannel+0x72e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a4e      	ldr	r2, [pc, #312]	; (8002e10 <HAL_ADC_ConfigChannel+0x860>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	f040 8085 	bne.w	8002de8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ce6:	d004      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x742>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a49      	ldr	r2, [pc, #292]	; (8002e14 <HAL_ADC_ConfigChannel+0x864>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x746>
 8002cf2:	4a49      	ldr	r2, [pc, #292]	; (8002e18 <HAL_ADC_ConfigChannel+0x868>)
 8002cf4:	e000      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x748>
 8002cf6:	4a43      	ldr	r2, [pc, #268]	; (8002e04 <HAL_ADC_ConfigChannel+0x854>)
 8002cf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d00:	4619      	mov	r1, r3
 8002d02:	4610      	mov	r0, r2
 8002d04:	f7ff f8cf 	bl	8001ea6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d08:	4b44      	ldr	r3, [pc, #272]	; (8002e1c <HAL_ADC_ConfigChannel+0x86c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	4a44      	ldr	r2, [pc, #272]	; (8002e20 <HAL_ADC_ConfigChannel+0x870>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d22:	e002      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f9      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d30:	e05a      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a3b      	ldr	r2, [pc, #236]	; (8002e24 <HAL_ADC_ConfigChannel+0x874>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d125      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x7d8>
 8002d3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d11f      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a31      	ldr	r2, [pc, #196]	; (8002e14 <HAL_ADC_ConfigChannel+0x864>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d104      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x7ac>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a34      	ldr	r2, [pc, #208]	; (8002e28 <HAL_ADC_ConfigChannel+0x878>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d047      	beq.n	8002dec <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d64:	d004      	beq.n	8002d70 <HAL_ADC_ConfigChannel+0x7c0>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a2a      	ldr	r2, [pc, #168]	; (8002e14 <HAL_ADC_ConfigChannel+0x864>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d101      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x7c4>
 8002d70:	4a29      	ldr	r2, [pc, #164]	; (8002e18 <HAL_ADC_ConfigChannel+0x868>)
 8002d72:	e000      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x7c6>
 8002d74:	4a23      	ldr	r2, [pc, #140]	; (8002e04 <HAL_ADC_ConfigChannel+0x854>)
 8002d76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4610      	mov	r0, r2
 8002d82:	f7ff f890 	bl	8001ea6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d86:	e031      	b.n	8002dec <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a27      	ldr	r2, [pc, #156]	; (8002e2c <HAL_ADC_ConfigChannel+0x87c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d12d      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d127      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1c      	ldr	r2, [pc, #112]	; (8002e14 <HAL_ADC_ConfigChannel+0x864>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d022      	beq.n	8002dee <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db0:	d004      	beq.n	8002dbc <HAL_ADC_ConfigChannel+0x80c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a17      	ldr	r2, [pc, #92]	; (8002e14 <HAL_ADC_ConfigChannel+0x864>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x810>
 8002dbc:	4a16      	ldr	r2, [pc, #88]	; (8002e18 <HAL_ADC_ConfigChannel+0x868>)
 8002dbe:	e000      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x812>
 8002dc0:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <HAL_ADC_ConfigChannel+0x854>)
 8002dc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4610      	mov	r0, r2
 8002dce:	f7ff f86a 	bl	8001ea6 <LL_ADC_SetCommonPathInternalCh>
 8002dd2:	e00c      	b.n	8002dee <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	f043 0220 	orr.w	r2, r3, #32
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002de6:	e002      	b.n	8002dee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002de8:	bf00      	nop
 8002dea:	e000      	b.n	8002dee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002df6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	37d8      	adds	r7, #216	; 0xd8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	50000700 	.word	0x50000700
 8002e08:	c3210000 	.word	0xc3210000
 8002e0c:	90c00010 	.word	0x90c00010
 8002e10:	50000600 	.word	0x50000600
 8002e14:	50000100 	.word	0x50000100
 8002e18:	50000300 	.word	0x50000300
 8002e1c:	20000104 	.word	0x20000104
 8002e20:	053e2d63 	.word	0x053e2d63
 8002e24:	c7520000 	.word	0xc7520000
 8002e28:	50000500 	.word	0x50000500
 8002e2c:	cb840000 	.word	0xcb840000

08002e30 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4904      	ldr	r1, [pc, #16]	; (8002e50 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	600b      	str	r3, [r1, #0]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40010400 	.word	0x40010400

08002e54 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <LL_EXTI_EnableIT_32_63+0x20>)
 8002e5e:	6a1a      	ldr	r2, [r3, #32]
 8002e60:	4904      	ldr	r1, [pc, #16]	; (8002e74 <LL_EXTI_EnableIT_32_63+0x20>)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	620b      	str	r3, [r1, #32]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	40010400 	.word	0x40010400

08002e78 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <LL_EXTI_DisableIT_0_31+0x24>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	4904      	ldr	r1, [pc, #16]	; (8002e9c <LL_EXTI_DisableIT_0_31+0x24>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40010400 	.word	0x40010400

08002ea0 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <LL_EXTI_DisableIT_32_63+0x24>)
 8002eaa:	6a1a      	ldr	r2, [r3, #32]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	4904      	ldr	r1, [pc, #16]	; (8002ec4 <LL_EXTI_DisableIT_32_63+0x24>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	620b      	str	r3, [r1, #32]
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40010400 	.word	0x40010400

08002ec8 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	4904      	ldr	r1, [pc, #16]	; (8002ee8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]

}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	40010400 	.word	0x40010400

08002eec <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <LL_EXTI_EnableEvent_32_63+0x20>)
 8002ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ef8:	4904      	ldr	r1, [pc, #16]	; (8002f0c <LL_EXTI_EnableEvent_32_63+0x20>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	40010400 	.word	0x40010400

08002f10 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	4904      	ldr	r1, [pc, #16]	; (8002f34 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	604b      	str	r3, [r1, #4]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40010400 	.word	0x40010400

08002f38 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <LL_EXTI_DisableEvent_32_63+0x24>)
 8002f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	4904      	ldr	r1, [pc, #16]	; (8002f5c <LL_EXTI_DisableEvent_32_63+0x24>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40010400 	.word	0x40010400

08002f60 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	4904      	ldr	r1, [pc, #16]	; (8002f80 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	608b      	str	r3, [r1, #8]

}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	40010400 	.word	0x40010400

08002f84 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002f8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f90:	4904      	ldr	r1, [pc, #16]	; (8002fa4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	40010400 	.word	0x40010400

08002fa8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	4904      	ldr	r1, [pc, #16]	; (8002fcc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]

}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40010400 	.word	0x40010400

08002fd0 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	4904      	ldr	r1, [pc, #16]	; (8002ff4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40010400 	.word	0x40010400

08002ff8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	4904      	ldr	r1, [pc, #16]	; (8003018 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4313      	orrs	r3, r2
 800300a:	60cb      	str	r3, [r1, #12]
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40010400 	.word	0x40010400

0800301c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003028:	4904      	ldr	r1, [pc, #16]	; (800303c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4313      	orrs	r3, r2
 800302e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	40010400 	.word	0x40010400

08003040 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	43db      	mvns	r3, r3
 8003050:	4904      	ldr	r1, [pc, #16]	; (8003064 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003052:	4013      	ands	r3, r2
 8003054:	60cb      	str	r3, [r1, #12]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40010400 	.word	0x40010400

08003068 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	43db      	mvns	r3, r3
 8003078:	4904      	ldr	r1, [pc, #16]	; (800308c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800307a:	4013      	ands	r3, r2
 800307c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40010400 	.word	0x40010400

08003090 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <LL_EXTI_ClearFlag_0_31+0x1c>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6153      	str	r3, [r2, #20]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40010400 	.word	0x40010400

080030b0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80030b8:	4a04      	ldr	r2, [pc, #16]	; (80030cc <LL_EXTI_ClearFlag_32_63+0x1c>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6353      	str	r3, [r2, #52]	; 0x34
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40010400 	.word	0x40010400

080030d0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d102      	bne.n	80030ec <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	77fb      	strb	r3, [r7, #31]
 80030ea:	e180      	b.n	80033ee <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030fa:	d102      	bne.n	8003102 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e175      	b.n	80033ee <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	7f5b      	ldrb	r3, [r3, #29]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d108      	bne.n	800311e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7fe fbc3 	bl	80018a4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003128:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b98      	ldr	r3, [pc, #608]	; (80033b0 <HAL_COMP_Init+0x2e0>)
 8003150:	4013      	ands	r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	6979      	ldr	r1, [r7, #20]
 8003158:	430b      	orrs	r3, r1
 800315a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d015      	beq.n	8003196 <HAL_COMP_Init+0xc6>
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d112      	bne.n	8003196 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003170:	4b90      	ldr	r3, [pc, #576]	; (80033b4 <HAL_COMP_Init+0x2e4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	099b      	lsrs	r3, r3, #6
 8003176:	4a90      	ldr	r2, [pc, #576]	; (80033b8 <HAL_COMP_Init+0x2e8>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	099a      	lsrs	r2, r3, #6
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003188:	e002      	b.n	8003190 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	3b01      	subs	r3, #1
 800318e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f9      	bne.n	800318a <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a88      	ldr	r2, [pc, #544]	; (80033bc <HAL_COMP_Init+0x2ec>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d028      	beq.n	80031f2 <HAL_COMP_Init+0x122>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a86      	ldr	r2, [pc, #536]	; (80033c0 <HAL_COMP_Init+0x2f0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d020      	beq.n	80031ec <HAL_COMP_Init+0x11c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a85      	ldr	r2, [pc, #532]	; (80033c4 <HAL_COMP_Init+0x2f4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d018      	beq.n	80031e6 <HAL_COMP_Init+0x116>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a83      	ldr	r2, [pc, #524]	; (80033c8 <HAL_COMP_Init+0x2f8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d010      	beq.n	80031e0 <HAL_COMP_Init+0x110>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a82      	ldr	r2, [pc, #520]	; (80033cc <HAL_COMP_Init+0x2fc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d008      	beq.n	80031da <HAL_COMP_Init+0x10a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a80      	ldr	r2, [pc, #512]	; (80033d0 <HAL_COMP_Init+0x300>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <HAL_COMP_Init+0x106>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e00f      	b.n	80031f6 <HAL_COMP_Init+0x126>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e00d      	b.n	80031f6 <HAL_COMP_Init+0x126>
 80031da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80031de:	e00a      	b.n	80031f6 <HAL_COMP_Init+0x126>
 80031e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031e4:	e007      	b.n	80031f6 <HAL_COMP_Init+0x126>
 80031e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80031ea:	e004      	b.n	80031f6 <HAL_COMP_Init+0x126>
 80031ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031f0:	e001      	b.n	80031f6 <HAL_COMP_Init+0x126>
 80031f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031f6:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80b6 	beq.w	8003372 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	d011      	beq.n	8003236 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a6e      	ldr	r2, [pc, #440]	; (80033d0 <HAL_COMP_Init+0x300>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d004      	beq.n	8003226 <HAL_COMP_Init+0x156>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a6c      	ldr	r2, [pc, #432]	; (80033d4 <HAL_COMP_Init+0x304>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d103      	bne.n	800322e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8003226:	6938      	ldr	r0, [r7, #16]
 8003228:	f7ff feac 	bl	8002f84 <LL_EXTI_EnableRisingTrig_32_63>
 800322c:	e014      	b.n	8003258 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800322e:	6938      	ldr	r0, [r7, #16]
 8003230:	f7ff fe96 	bl	8002f60 <LL_EXTI_EnableRisingTrig_0_31>
 8003234:	e010      	b.n	8003258 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a65      	ldr	r2, [pc, #404]	; (80033d0 <HAL_COMP_Init+0x300>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d004      	beq.n	800324a <HAL_COMP_Init+0x17a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a63      	ldr	r2, [pc, #396]	; (80033d4 <HAL_COMP_Init+0x304>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d103      	bne.n	8003252 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800324a:	6938      	ldr	r0, [r7, #16]
 800324c:	f7ff fec0 	bl	8002fd0 <LL_EXTI_DisableRisingTrig_32_63>
 8003250:	e002      	b.n	8003258 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003252:	6938      	ldr	r0, [r7, #16]
 8003254:	f7ff fea8 	bl	8002fa8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	d011      	beq.n	8003288 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a59      	ldr	r2, [pc, #356]	; (80033d0 <HAL_COMP_Init+0x300>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d004      	beq.n	8003278 <HAL_COMP_Init+0x1a8>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a58      	ldr	r2, [pc, #352]	; (80033d4 <HAL_COMP_Init+0x304>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d103      	bne.n	8003280 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8003278:	6938      	ldr	r0, [r7, #16]
 800327a:	f7ff fecf 	bl	800301c <LL_EXTI_EnableFallingTrig_32_63>
 800327e:	e014      	b.n	80032aa <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003280:	6938      	ldr	r0, [r7, #16]
 8003282:	f7ff feb9 	bl	8002ff8 <LL_EXTI_EnableFallingTrig_0_31>
 8003286:	e010      	b.n	80032aa <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a50      	ldr	r2, [pc, #320]	; (80033d0 <HAL_COMP_Init+0x300>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d004      	beq.n	800329c <HAL_COMP_Init+0x1cc>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a4f      	ldr	r2, [pc, #316]	; (80033d4 <HAL_COMP_Init+0x304>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d103      	bne.n	80032a4 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800329c:	6938      	ldr	r0, [r7, #16]
 800329e:	f7ff fee3 	bl	8003068 <LL_EXTI_DisableFallingTrig_32_63>
 80032a2:	e002      	b.n	80032aa <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80032a4:	6938      	ldr	r0, [r7, #16]
 80032a6:	f7ff fecb 	bl	8003040 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a48      	ldr	r2, [pc, #288]	; (80033d0 <HAL_COMP_Init+0x300>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d004      	beq.n	80032be <HAL_COMP_Init+0x1ee>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a46      	ldr	r2, [pc, #280]	; (80033d4 <HAL_COMP_Init+0x304>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d103      	bne.n	80032c6 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80032be:	6938      	ldr	r0, [r7, #16]
 80032c0:	f7ff fef6 	bl	80030b0 <LL_EXTI_ClearFlag_32_63>
 80032c4:	e002      	b.n	80032cc <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80032c6:	6938      	ldr	r0, [r7, #16]
 80032c8:	f7ff fee2 	bl	8003090 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d011      	beq.n	80032fc <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a3c      	ldr	r2, [pc, #240]	; (80033d0 <HAL_COMP_Init+0x300>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d004      	beq.n	80032ec <HAL_COMP_Init+0x21c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a3b      	ldr	r2, [pc, #236]	; (80033d4 <HAL_COMP_Init+0x304>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d103      	bne.n	80032f4 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80032ec:	6938      	ldr	r0, [r7, #16]
 80032ee:	f7ff fdfd 	bl	8002eec <LL_EXTI_EnableEvent_32_63>
 80032f2:	e014      	b.n	800331e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80032f4:	6938      	ldr	r0, [r7, #16]
 80032f6:	f7ff fde7 	bl	8002ec8 <LL_EXTI_EnableEvent_0_31>
 80032fa:	e010      	b.n	800331e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a33      	ldr	r2, [pc, #204]	; (80033d0 <HAL_COMP_Init+0x300>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d004      	beq.n	8003310 <HAL_COMP_Init+0x240>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a32      	ldr	r2, [pc, #200]	; (80033d4 <HAL_COMP_Init+0x304>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d103      	bne.n	8003318 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8003310:	6938      	ldr	r0, [r7, #16]
 8003312:	f7ff fe11 	bl	8002f38 <LL_EXTI_DisableEvent_32_63>
 8003316:	e002      	b.n	800331e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8003318:	6938      	ldr	r0, [r7, #16]
 800331a:	f7ff fdf9 	bl	8002f10 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d011      	beq.n	800334e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a28      	ldr	r2, [pc, #160]	; (80033d0 <HAL_COMP_Init+0x300>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d004      	beq.n	800333e <HAL_COMP_Init+0x26e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a26      	ldr	r2, [pc, #152]	; (80033d4 <HAL_COMP_Init+0x304>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d103      	bne.n	8003346 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800333e:	6938      	ldr	r0, [r7, #16]
 8003340:	f7ff fd88 	bl	8002e54 <LL_EXTI_EnableIT_32_63>
 8003344:	e04b      	b.n	80033de <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8003346:	6938      	ldr	r0, [r7, #16]
 8003348:	f7ff fd72 	bl	8002e30 <LL_EXTI_EnableIT_0_31>
 800334c:	e047      	b.n	80033de <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a1f      	ldr	r2, [pc, #124]	; (80033d0 <HAL_COMP_Init+0x300>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d004      	beq.n	8003362 <HAL_COMP_Init+0x292>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <HAL_COMP_Init+0x304>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d103      	bne.n	800336a <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8003362:	6938      	ldr	r0, [r7, #16]
 8003364:	f7ff fd9c 	bl	8002ea0 <LL_EXTI_DisableIT_32_63>
 8003368:	e039      	b.n	80033de <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800336a:	6938      	ldr	r0, [r7, #16]
 800336c:	f7ff fd84 	bl	8002e78 <LL_EXTI_DisableIT_0_31>
 8003370:	e035      	b.n	80033de <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <HAL_COMP_Init+0x300>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d004      	beq.n	8003386 <HAL_COMP_Init+0x2b6>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a14      	ldr	r2, [pc, #80]	; (80033d4 <HAL_COMP_Init+0x304>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d103      	bne.n	800338e <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8003386:	6938      	ldr	r0, [r7, #16]
 8003388:	f7ff fdd6 	bl	8002f38 <LL_EXTI_DisableEvent_32_63>
 800338c:	e002      	b.n	8003394 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800338e:	6938      	ldr	r0, [r7, #16]
 8003390:	f7ff fdbe 	bl	8002f10 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0d      	ldr	r2, [pc, #52]	; (80033d0 <HAL_COMP_Init+0x300>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d004      	beq.n	80033a8 <HAL_COMP_Init+0x2d8>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <HAL_COMP_Init+0x304>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d117      	bne.n	80033d8 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80033a8:	6938      	ldr	r0, [r7, #16]
 80033aa:	f7ff fd79 	bl	8002ea0 <LL_EXTI_DisableIT_32_63>
 80033ae:	e016      	b.n	80033de <HAL_COMP_Init+0x30e>
 80033b0:	ff007e0f 	.word	0xff007e0f
 80033b4:	20000104 	.word	0x20000104
 80033b8:	053e2d63 	.word	0x053e2d63
 80033bc:	40010200 	.word	0x40010200
 80033c0:	40010204 	.word	0x40010204
 80033c4:	40010208 	.word	0x40010208
 80033c8:	4001020c 	.word	0x4001020c
 80033cc:	40010210 	.word	0x40010210
 80033d0:	40010214 	.word	0x40010214
 80033d4:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80033d8:	6938      	ldr	r0, [r7, #16]
 80033da:	f7ff fd4d 	bl	8002e78 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7f5b      	ldrb	r3, [r3, #29]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80033ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3720      	adds	r7, #32
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003400:	2300      	movs	r3, #0
 8003402:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
 8003412:	e02e      	b.n	8003472 <HAL_COMP_Start+0x7a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800341e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003422:	d102      	bne.n	800342a <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
 8003428:	e023      	b.n	8003472 <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	7f5b      	ldrb	r3, [r3, #29]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d11c      	bne.n	800346e <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 800344a:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <HAL_COMP_Start+0x88>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a0d      	ldr	r2, [pc, #52]	; (8003484 <HAL_COMP_Start+0x8c>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	0cda      	lsrs	r2, r3, #19
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800345e:	e002      	b.n	8003466 <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	3b01      	subs	r3, #1
 8003464:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f9      	bne.n	8003460 <HAL_COMP_Start+0x68>
 800346c:	e001      	b.n	8003472 <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	20000104 	.word	0x20000104
 8003484:	431bde83 	.word	0x431bde83

08003488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <__NVIC_SetPriorityGrouping+0x44>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a4:	4013      	ands	r3, r2
 80034a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ba:	4a04      	ldr	r2, [pc, #16]	; (80034cc <__NVIC_SetPriorityGrouping+0x44>)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	60d3      	str	r3, [r2, #12]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <__NVIC_GetPriorityGrouping+0x18>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	0a1b      	lsrs	r3, r3, #8
 80034da:	f003 0307 	and.w	r3, r3, #7
}
 80034de:	4618      	mov	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	db0b      	blt.n	8003516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	f003 021f 	and.w	r2, r3, #31
 8003504:	4907      	ldr	r1, [pc, #28]	; (8003524 <__NVIC_EnableIRQ+0x38>)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	2001      	movs	r0, #1
 800350e:	fa00 f202 	lsl.w	r2, r0, r2
 8003512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000e100 	.word	0xe000e100

08003528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	6039      	str	r1, [r7, #0]
 8003532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003538:	2b00      	cmp	r3, #0
 800353a:	db0a      	blt.n	8003552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	b2da      	uxtb	r2, r3
 8003540:	490c      	ldr	r1, [pc, #48]	; (8003574 <__NVIC_SetPriority+0x4c>)
 8003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003546:	0112      	lsls	r2, r2, #4
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	440b      	add	r3, r1
 800354c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003550:	e00a      	b.n	8003568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	4908      	ldr	r1, [pc, #32]	; (8003578 <__NVIC_SetPriority+0x50>)
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	3b04      	subs	r3, #4
 8003560:	0112      	lsls	r2, r2, #4
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	440b      	add	r3, r1
 8003566:	761a      	strb	r2, [r3, #24]
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000e100 	.word	0xe000e100
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800357c:	b480      	push	{r7}
 800357e:	b089      	sub	sp, #36	; 0x24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f1c3 0307 	rsb	r3, r3, #7
 8003596:	2b04      	cmp	r3, #4
 8003598:	bf28      	it	cs
 800359a:	2304      	movcs	r3, #4
 800359c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3304      	adds	r3, #4
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	d902      	bls.n	80035ac <NVIC_EncodePriority+0x30>
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3b03      	subs	r3, #3
 80035aa:	e000      	b.n	80035ae <NVIC_EncodePriority+0x32>
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b0:	f04f 32ff 	mov.w	r2, #4294967295
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43da      	mvns	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	401a      	ands	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c4:	f04f 31ff 	mov.w	r1, #4294967295
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	43d9      	mvns	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d4:	4313      	orrs	r3, r2
         );
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3724      	adds	r7, #36	; 0x24
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035f4:	d301      	bcc.n	80035fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f6:	2301      	movs	r3, #1
 80035f8:	e00f      	b.n	800361a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <SysTick_Config+0x40>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003602:	210f      	movs	r1, #15
 8003604:	f04f 30ff 	mov.w	r0, #4294967295
 8003608:	f7ff ff8e 	bl	8003528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <SysTick_Config+0x40>)
 800360e:	2200      	movs	r2, #0
 8003610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003612:	4b04      	ldr	r3, [pc, #16]	; (8003624 <SysTick_Config+0x40>)
 8003614:	2207      	movs	r2, #7
 8003616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	e000e010 	.word	0xe000e010

08003628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ff29 	bl	8003488 <__NVIC_SetPriorityGrouping>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	4603      	mov	r3, r0
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800364c:	f7ff ff40 	bl	80034d0 <__NVIC_GetPriorityGrouping>
 8003650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	f7ff ff90 	bl	800357c <NVIC_EncodePriority>
 800365c:	4602      	mov	r2, r0
 800365e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff5f 	bl	8003528 <__NVIC_SetPriority>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff33 	bl	80034ec <__NVIC_EnableIRQ>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ffa4 	bl	80035e4 <SysTick_Config>
 800369c:	4603      	mov	r3, r0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e014      	b.n	80036e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	791b      	ldrb	r3, [r3, #4]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d105      	bne.n	80036ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7fe f93d 	bl	8001948 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2202      	movs	r2, #2
 80036d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	795b      	ldrb	r3, [r3, #5]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_DAC_Start+0x16>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e043      	b.n	8003788 <HAL_DAC_Start+0x9e>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6819      	ldr	r1, [r3, #0]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2201      	movs	r2, #1
 800371a:	409a      	lsls	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003724:	2001      	movs	r0, #1
 8003726:	f7fe fb89 	bl	8001e3c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10f      	bne.n	8003750 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800373a:	2b02      	cmp	r3, #2
 800373c:	d11d      	bne.n	800377a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0201 	orr.w	r2, r2, #1
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	e014      	b.n	800377a <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2102      	movs	r1, #2
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	429a      	cmp	r2, r3
 8003768:	d107      	bne.n	800377a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0202 	orr.w	r2, r2, #2
 8003778:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a6:	d120      	bne.n	80037ea <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b6:	d118      	bne.n	80037ea <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2204      	movs	r2, #4
 80037bc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f043 0201 	orr.w	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037e2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f855 	bl	8003894 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037f8:	d120      	bne.n	800383c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003808:	d118      	bne.n	800383c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2204      	movs	r2, #4
 800380e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	f043 0202 	orr.w	r2, r3, #2
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003824:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003834:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fa15 	bl	8003c66 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d105      	bne.n	8003874 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4413      	add	r3, r2
 800386e:	3308      	adds	r3, #8
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	e004      	b.n	800387e <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4413      	add	r3, r2
 800387a:	3314      	adds	r3, #20
 800387c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	461a      	mov	r2, r3
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	795b      	ldrb	r3, [r3, #5]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_DAC_ConfigChannel+0x18>
 80038bc:	2302      	movs	r3, #2
 80038be:	e192      	b.n	8003be6 <HAL_DAC_ConfigChannel+0x33e>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2202      	movs	r2, #2
 80038ca:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d174      	bne.n	80039be <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80038d4:	f7fe faa6 	bl	8001e24 <HAL_GetTick>
 80038d8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d134      	bne.n	800394a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80038e0:	e011      	b.n	8003906 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80038e2:	f7fe fa9f 	bl	8001e24 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d90a      	bls.n	8003906 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f043 0208 	orr.w	r2, r3, #8
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2203      	movs	r2, #3
 8003900:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e16f      	b.n	8003be6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e6      	bne.n	80038e2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003914:	2001      	movs	r0, #1
 8003916:	f7fe fa91 	bl	8001e3c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003922:	641a      	str	r2, [r3, #64]	; 0x40
 8003924:	e01e      	b.n	8003964 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003926:	f7fe fa7d 	bl	8001e24 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d90a      	bls.n	800394a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	f043 0208 	orr.w	r2, r3, #8
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2203      	movs	r2, #3
 8003944:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e14d      	b.n	8003be6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003950:	2b00      	cmp	r3, #0
 8003952:	dbe8      	blt.n	8003926 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003954:	2001      	movs	r0, #1
 8003956:	f7fe fa71 	bl	8001e3c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003962:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003974:	fa01 f303 	lsl.w	r3, r1, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	ea02 0103 	and.w	r1, r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	409a      	lsls	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f003 0310 	and.w	r3, r3, #16
 800399e:	21ff      	movs	r1, #255	; 0xff
 80039a0:	fa01 f303 	lsl.w	r3, r1, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	ea02 0103 	and.w	r1, r2, r3
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	409a      	lsls	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d11d      	bne.n	8003a02 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	221f      	movs	r2, #31
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039de:	4013      	ands	r3, r2
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f6:	4313      	orrs	r3, r2
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a00:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2207      	movs	r2, #7
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43db      	mvns	r3, r3
 8003a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d102      	bne.n	8003a2c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	623b      	str	r3, [r7, #32]
 8003a2a:	e00f      	b.n	8003a4c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d102      	bne.n	8003a3a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003a34:	2301      	movs	r3, #1
 8003a36:	623b      	str	r3, [r7, #32]
 8003a38:	e008      	b.n	8003a4c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d102      	bne.n	8003a48 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003a42:	2301      	movs	r3, #1
 8003a44:	623b      	str	r3, [r7, #32]
 8003a46:	e001      	b.n	8003a4c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	6a3a      	ldr	r2, [r7, #32]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6e:	4013      	ands	r3, r2
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	791b      	ldrb	r3, [r3, #4]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d102      	bne.n	8003a80 <HAL_DAC_ConfigChannel+0x1d8>
 8003a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a7e:	e000      	b.n	8003a82 <HAL_DAC_ConfigChannel+0x1da>
 8003a80:	2300      	movs	r3, #0
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	795b      	ldrb	r3, [r3, #5]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d102      	bne.n	8003aac <HAL_DAC_ConfigChannel+0x204>
 8003aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aaa:	e000      	b.n	8003aae <HAL_DAC_ConfigChannel+0x206>
 8003aac:	2300      	movs	r3, #0
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d114      	bne.n	8003aee <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003ac4:	f001 f89e 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8003ac8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	4a48      	ldr	r2, [pc, #288]	; (8003bf0 <HAL_DAC_ConfigChannel+0x348>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d904      	bls.n	8003adc <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ada:	e00f      	b.n	8003afc <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	4a45      	ldr	r2, [pc, #276]	; (8003bf4 <HAL_DAC_ConfigChannel+0x34c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d90a      	bls.n	8003afa <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
 8003aec:	e006      	b.n	8003afc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af4:	4313      	orrs	r3, r2
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
 8003af8:	e000      	b.n	8003afc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003afa:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43da      	mvns	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	400a      	ands	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	4013      	ands	r3, r2
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b66:	4313      	orrs	r3, r2
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b70:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6819      	ldr	r1, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	22c0      	movs	r2, #192	; 0xc0
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43da      	mvns	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	400a      	ands	r2, r1
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	089b      	lsrs	r3, r3, #2
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	ea02 0103 	and.w	r1, r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3728      	adds	r7, #40	; 0x28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	09896800 	.word	0x09896800
 8003bf4:	04c4b400 	.word	0x04c4b400

08003bf8 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	795b      	ldrb	r3, [r3, #5]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_DACEx_TriangleWaveGenerate+0x18>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e024      	b.n	8003c5a <HAL_DACEx_TriangleWaveGenerate+0x62>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8003c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	ea02 0103 	and.w	r1, r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f003 0310 	and.w	r3, r3, #16
 8003c42:	409a      	lsls	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b085      	sub	sp, #20
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d005      	beq.n	8003c9e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2204      	movs	r2, #4
 8003c96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
 8003c9c:	e037      	b.n	8003d0e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 020e 	bic.w	r2, r2, #14
 8003cac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cbc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0201 	bic.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f003 021f 	and.w	r2, r3, #31
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	2101      	movs	r1, #1
 8003cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00c      	beq.n	8003d0e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d02:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d0c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d00d      	beq.n	8003d60 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2204      	movs	r2, #4
 8003d48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
 8003d5e:	e047      	b.n	8003df0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 020e 	bic.w	r2, r2, #14
 8003d6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0201 	bic.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d94:	f003 021f 	and.w	r2, r3, #31
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003da2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003dac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00c      	beq.n	8003dd0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003dce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4798      	blx	r3
    }
  }
  return status;
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e0a:	e15a      	b.n	80040c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	2101      	movs	r1, #1
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	fa01 f303 	lsl.w	r3, r1, r3
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 814c 	beq.w	80040bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d00b      	beq.n	8003e44 <HAL_GPIO_Init+0x48>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d007      	beq.n	8003e44 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e38:	2b11      	cmp	r3, #17
 8003e3a:	d003      	beq.n	8003e44 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b12      	cmp	r3, #18
 8003e42:	d130      	bne.n	8003ea6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	2203      	movs	r2, #3
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 0201 	and.w	r2, r3, #1
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d003      	beq.n	8003ee6 <HAL_GPIO_Init+0xea>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b12      	cmp	r3, #18
 8003ee4:	d123      	bne.n	8003f2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	08da      	lsrs	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3208      	adds	r2, #8
 8003eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	220f      	movs	r2, #15
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4013      	ands	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	08da      	lsrs	r2, r3, #3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3208      	adds	r2, #8
 8003f28:	6939      	ldr	r1, [r7, #16]
 8003f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	2203      	movs	r2, #3
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4013      	ands	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 0203 	and.w	r2, r3, #3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 80a6 	beq.w	80040bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f70:	4b5b      	ldr	r3, [pc, #364]	; (80040e0 <HAL_GPIO_Init+0x2e4>)
 8003f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f74:	4a5a      	ldr	r2, [pc, #360]	; (80040e0 <HAL_GPIO_Init+0x2e4>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	6613      	str	r3, [r2, #96]	; 0x60
 8003f7c:	4b58      	ldr	r3, [pc, #352]	; (80040e0 <HAL_GPIO_Init+0x2e4>)
 8003f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f88:	4a56      	ldr	r2, [pc, #344]	; (80040e4 <HAL_GPIO_Init+0x2e8>)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	089b      	lsrs	r3, r3, #2
 8003f8e:	3302      	adds	r3, #2
 8003f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	220f      	movs	r2, #15
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fb2:	d01f      	beq.n	8003ff4 <HAL_GPIO_Init+0x1f8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a4c      	ldr	r2, [pc, #304]	; (80040e8 <HAL_GPIO_Init+0x2ec>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d019      	beq.n	8003ff0 <HAL_GPIO_Init+0x1f4>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a4b      	ldr	r2, [pc, #300]	; (80040ec <HAL_GPIO_Init+0x2f0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d013      	beq.n	8003fec <HAL_GPIO_Init+0x1f0>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a4a      	ldr	r2, [pc, #296]	; (80040f0 <HAL_GPIO_Init+0x2f4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00d      	beq.n	8003fe8 <HAL_GPIO_Init+0x1ec>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a49      	ldr	r2, [pc, #292]	; (80040f4 <HAL_GPIO_Init+0x2f8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d007      	beq.n	8003fe4 <HAL_GPIO_Init+0x1e8>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a48      	ldr	r2, [pc, #288]	; (80040f8 <HAL_GPIO_Init+0x2fc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d101      	bne.n	8003fe0 <HAL_GPIO_Init+0x1e4>
 8003fdc:	2305      	movs	r3, #5
 8003fde:	e00a      	b.n	8003ff6 <HAL_GPIO_Init+0x1fa>
 8003fe0:	2306      	movs	r3, #6
 8003fe2:	e008      	b.n	8003ff6 <HAL_GPIO_Init+0x1fa>
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	e006      	b.n	8003ff6 <HAL_GPIO_Init+0x1fa>
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e004      	b.n	8003ff6 <HAL_GPIO_Init+0x1fa>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e002      	b.n	8003ff6 <HAL_GPIO_Init+0x1fa>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <HAL_GPIO_Init+0x1fa>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	f002 0203 	and.w	r2, r2, #3
 8003ffc:	0092      	lsls	r2, r2, #2
 8003ffe:	4093      	lsls	r3, r2
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004006:	4937      	ldr	r1, [pc, #220]	; (80040e4 <HAL_GPIO_Init+0x2e8>)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	3302      	adds	r3, #2
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004014:	4b39      	ldr	r3, [pc, #228]	; (80040fc <HAL_GPIO_Init+0x300>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	43db      	mvns	r3, r3
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4013      	ands	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004038:	4a30      	ldr	r2, [pc, #192]	; (80040fc <HAL_GPIO_Init+0x300>)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800403e:	4b2f      	ldr	r3, [pc, #188]	; (80040fc <HAL_GPIO_Init+0x300>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	43db      	mvns	r3, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004062:	4a26      	ldr	r2, [pc, #152]	; (80040fc <HAL_GPIO_Init+0x300>)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004068:	4b24      	ldr	r3, [pc, #144]	; (80040fc <HAL_GPIO_Init+0x300>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	43db      	mvns	r3, r3
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800408c:	4a1b      	ldr	r2, [pc, #108]	; (80040fc <HAL_GPIO_Init+0x300>)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004092:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <HAL_GPIO_Init+0x300>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	43db      	mvns	r3, r3
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4013      	ands	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040b6:	4a11      	ldr	r2, [pc, #68]	; (80040fc <HAL_GPIO_Init+0x300>)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	3301      	adds	r3, #1
 80040c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	fa22 f303 	lsr.w	r3, r2, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f47f ae9d 	bne.w	8003e0c <HAL_GPIO_Init+0x10>
  }
}
 80040d2:	bf00      	nop
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40010000 	.word	0x40010000
 80040e8:	48000400 	.word	0x48000400
 80040ec:	48000800 	.word	0x48000800
 80040f0:	48000c00 	.word	0x48000c00
 80040f4:	48001000 	.word	0x48001000
 80040f8:	48001400 	.word	0x48001400
 80040fc:	40010400 	.word	0x40010400

08004100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	807b      	strh	r3, [r7, #2]
 800410c:	4613      	mov	r3, r2
 800410e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004110:	787b      	ldrb	r3, [r7, #1]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800411c:	e002      	b.n	8004124 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800411e:	887a      	ldrh	r2, [r7, #2]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d141      	bne.n	80041c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800413e:	4b4b      	ldr	r3, [pc, #300]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414a:	d131      	bne.n	80041b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800414c:	4b47      	ldr	r3, [pc, #284]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004152:	4a46      	ldr	r2, [pc, #280]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004158:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800415c:	4b43      	ldr	r3, [pc, #268]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004164:	4a41      	ldr	r2, [pc, #260]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800416a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800416c:	4b40      	ldr	r3, [pc, #256]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2232      	movs	r2, #50	; 0x32
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	4a3f      	ldr	r2, [pc, #252]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004178:	fba2 2303 	umull	r2, r3, r2, r3
 800417c:	0c9b      	lsrs	r3, r3, #18
 800417e:	3301      	adds	r3, #1
 8004180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004182:	e002      	b.n	800418a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3b01      	subs	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800418a:	4b38      	ldr	r3, [pc, #224]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004196:	d102      	bne.n	800419e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f2      	bne.n	8004184 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800419e:	4b33      	ldr	r3, [pc, #204]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041aa:	d158      	bne.n	800425e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e057      	b.n	8004260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041b0:	4b2e      	ldr	r3, [pc, #184]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041b6:	4a2d      	ldr	r2, [pc, #180]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041c0:	e04d      	b.n	800425e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c8:	d141      	bne.n	800424e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041ca:	4b28      	ldr	r3, [pc, #160]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d6:	d131      	bne.n	800423c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041d8:	4b24      	ldr	r3, [pc, #144]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041de:	4a23      	ldr	r2, [pc, #140]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041e8:	4b20      	ldr	r3, [pc, #128]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041f0:	4a1e      	ldr	r2, [pc, #120]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041f8:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2232      	movs	r2, #50	; 0x32
 80041fe:	fb02 f303 	mul.w	r3, r2, r3
 8004202:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	0c9b      	lsrs	r3, r3, #18
 800420a:	3301      	adds	r3, #1
 800420c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800420e:	e002      	b.n	8004216 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	3b01      	subs	r3, #1
 8004214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004216:	4b15      	ldr	r3, [pc, #84]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004222:	d102      	bne.n	800422a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f2      	bne.n	8004210 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800422a:	4b10      	ldr	r3, [pc, #64]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004236:	d112      	bne.n	800425e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e011      	b.n	8004260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004242:	4a0a      	ldr	r2, [pc, #40]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004248:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800424c:	e007      	b.n	800425e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004256:	4a05      	ldr	r2, [pc, #20]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800425c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	40007000 	.word	0x40007000
 8004270:	20000104 	.word	0x20000104
 8004274:	431bde83 	.word	0x431bde83

08004278 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4a04      	ldr	r2, [pc, #16]	; (8004294 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004286:	6093      	str	r3, [r2, #8]
}
 8004288:	bf00      	nop
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40007000 	.word	0x40007000

08004298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e308      	b.n	80048bc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d075      	beq.n	80043a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b6:	4ba3      	ldr	r3, [pc, #652]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c0:	4ba0      	ldr	r3, [pc, #640]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b0c      	cmp	r3, #12
 80042ce:	d102      	bne.n	80042d6 <HAL_RCC_OscConfig+0x3e>
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d002      	beq.n	80042dc <HAL_RCC_OscConfig+0x44>
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d10b      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042dc:	4b99      	ldr	r3, [pc, #612]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d05b      	beq.n	80043a0 <HAL_RCC_OscConfig+0x108>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d157      	bne.n	80043a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e2e3      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fc:	d106      	bne.n	800430c <HAL_RCC_OscConfig+0x74>
 80042fe:	4b91      	ldr	r3, [pc, #580]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a90      	ldr	r2, [pc, #576]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	e01d      	b.n	8004348 <HAL_RCC_OscConfig+0xb0>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004314:	d10c      	bne.n	8004330 <HAL_RCC_OscConfig+0x98>
 8004316:	4b8b      	ldr	r3, [pc, #556]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a8a      	ldr	r2, [pc, #552]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800431c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	4b88      	ldr	r3, [pc, #544]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a87      	ldr	r2, [pc, #540]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e00b      	b.n	8004348 <HAL_RCC_OscConfig+0xb0>
 8004330:	4b84      	ldr	r3, [pc, #528]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a83      	ldr	r2, [pc, #524]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	4b81      	ldr	r3, [pc, #516]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a80      	ldr	r2, [pc, #512]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d013      	beq.n	8004378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fd fd68 	bl	8001e24 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004358:	f7fd fd64 	bl	8001e24 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e2a8      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800436a:	4b76      	ldr	r3, [pc, #472]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0xc0>
 8004376:	e014      	b.n	80043a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fd fd54 	bl	8001e24 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004380:	f7fd fd50 	bl	8001e24 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e294      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004392:	4b6c      	ldr	r3, [pc, #432]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0xe8>
 800439e:	e000      	b.n	80043a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d075      	beq.n	800449a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ae:	4b65      	ldr	r3, [pc, #404]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043b8:	4b62      	ldr	r3, [pc, #392]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b0c      	cmp	r3, #12
 80043c6:	d102      	bne.n	80043ce <HAL_RCC_OscConfig+0x136>
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d002      	beq.n	80043d4 <HAL_RCC_OscConfig+0x13c>
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d11f      	bne.n	8004414 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043d4:	4b5b      	ldr	r3, [pc, #364]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_RCC_OscConfig+0x154>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e267      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b55      	ldr	r3, [pc, #340]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	061b      	lsls	r3, r3, #24
 80043fa:	4952      	ldr	r1, [pc, #328]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004400:	4b51      	ldr	r3, [pc, #324]	; (8004548 <HAL_RCC_OscConfig+0x2b0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f7fd fcc1 	bl	8001d8c <HAL_InitTick>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d043      	beq.n	8004498 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e253      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d023      	beq.n	8004464 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800441c:	4b49      	ldr	r3, [pc, #292]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a48      	ldr	r2, [pc, #288]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fd fcfc 	bl	8001e24 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004430:	f7fd fcf8 	bl	8001e24 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e23c      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004442:	4b40      	ldr	r3, [pc, #256]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444e:	4b3d      	ldr	r3, [pc, #244]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	061b      	lsls	r3, r3, #24
 800445c:	4939      	ldr	r1, [pc, #228]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800445e:	4313      	orrs	r3, r2
 8004460:	604b      	str	r3, [r1, #4]
 8004462:	e01a      	b.n	800449a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004464:	4b37      	ldr	r3, [pc, #220]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a36      	ldr	r2, [pc, #216]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800446a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800446e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7fd fcd8 	bl	8001e24 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004478:	f7fd fcd4 	bl	8001e24 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e218      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800448a:	4b2e      	ldr	r3, [pc, #184]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x1e0>
 8004496:	e000      	b.n	800449a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004498:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d03c      	beq.n	8004520 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d01c      	beq.n	80044e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ae:	4b25      	ldr	r3, [pc, #148]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b4:	4a23      	ldr	r2, [pc, #140]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044be:	f7fd fcb1 	bl	8001e24 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c6:	f7fd fcad 	bl	8001e24 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e1f1      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044d8:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0ef      	beq.n	80044c6 <HAL_RCC_OscConfig+0x22e>
 80044e6:	e01b      	b.n	8004520 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e8:	4b16      	ldr	r3, [pc, #88]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ee:	4a15      	ldr	r2, [pc, #84]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fd fc94 	bl	8001e24 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004500:	f7fd fc90 	bl	8001e24 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e1d4      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004512:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1ef      	bne.n	8004500 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80ab 	beq.w	8004684 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452e:	2300      	movs	r3, #0
 8004530:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004532:	4b04      	ldr	r3, [pc, #16]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_RCC_OscConfig+0x2b4>
 800453e:	2301      	movs	r3, #1
 8004540:	e005      	b.n	800454e <HAL_RCC_OscConfig+0x2b6>
 8004542:	bf00      	nop
 8004544:	40021000 	.word	0x40021000
 8004548:	20000108 	.word	0x20000108
 800454c:	2300      	movs	r3, #0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00d      	beq.n	800456e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004552:	4baf      	ldr	r3, [pc, #700]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004556:	4aae      	ldr	r2, [pc, #696]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455c:	6593      	str	r3, [r2, #88]	; 0x58
 800455e:	4bac      	ldr	r3, [pc, #688]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800456a:	2301      	movs	r3, #1
 800456c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800456e:	4ba9      	ldr	r3, [pc, #676]	; (8004814 <HAL_RCC_OscConfig+0x57c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004576:	2b00      	cmp	r3, #0
 8004578:	d118      	bne.n	80045ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800457a:	4ba6      	ldr	r3, [pc, #664]	; (8004814 <HAL_RCC_OscConfig+0x57c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4aa5      	ldr	r2, [pc, #660]	; (8004814 <HAL_RCC_OscConfig+0x57c>)
 8004580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004586:	f7fd fc4d 	bl	8001e24 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800458e:	f7fd fc49 	bl	8001e24 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e18d      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a0:	4b9c      	ldr	r3, [pc, #624]	; (8004814 <HAL_RCC_OscConfig+0x57c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d108      	bne.n	80045c6 <HAL_RCC_OscConfig+0x32e>
 80045b4:	4b96      	ldr	r3, [pc, #600]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ba:	4a95      	ldr	r2, [pc, #596]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045c4:	e024      	b.n	8004610 <HAL_RCC_OscConfig+0x378>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b05      	cmp	r3, #5
 80045cc:	d110      	bne.n	80045f0 <HAL_RCC_OscConfig+0x358>
 80045ce:	4b90      	ldr	r3, [pc, #576]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80045d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d4:	4a8e      	ldr	r2, [pc, #568]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80045d6:	f043 0304 	orr.w	r3, r3, #4
 80045da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045de:	4b8c      	ldr	r3, [pc, #560]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80045e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e4:	4a8a      	ldr	r2, [pc, #552]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045ee:	e00f      	b.n	8004610 <HAL_RCC_OscConfig+0x378>
 80045f0:	4b87      	ldr	r3, [pc, #540]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	4a86      	ldr	r2, [pc, #536]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004600:	4b83      	ldr	r3, [pc, #524]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	4a82      	ldr	r2, [pc, #520]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004608:	f023 0304 	bic.w	r3, r3, #4
 800460c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d016      	beq.n	8004646 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004618:	f7fd fc04 	bl	8001e24 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800461e:	e00a      	b.n	8004636 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004620:	f7fd fc00 	bl	8001e24 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	; 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e142      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004636:	4b76      	ldr	r3, [pc, #472]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0ed      	beq.n	8004620 <HAL_RCC_OscConfig+0x388>
 8004644:	e015      	b.n	8004672 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004646:	f7fd fbed 	bl	8001e24 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800464c:	e00a      	b.n	8004664 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464e:	f7fd fbe9 	bl	8001e24 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e12b      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004664:	4b6a      	ldr	r3, [pc, #424]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1ed      	bne.n	800464e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004672:	7ffb      	ldrb	r3, [r7, #31]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d105      	bne.n	8004684 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004678:	4b65      	ldr	r3, [pc, #404]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 800467a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467c:	4a64      	ldr	r2, [pc, #400]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 800467e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004682:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b00      	cmp	r3, #0
 800468e:	d03c      	beq.n	800470a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01c      	beq.n	80046d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004698:	4b5d      	ldr	r3, [pc, #372]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 800469a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800469e:	4a5c      	ldr	r2, [pc, #368]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fd fbbc 	bl	8001e24 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046b0:	f7fd fbb8 	bl	8001e24 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e0fc      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046c2:	4b53      	ldr	r3, [pc, #332]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80046c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0ef      	beq.n	80046b0 <HAL_RCC_OscConfig+0x418>
 80046d0:	e01b      	b.n	800470a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046d2:	4b4f      	ldr	r3, [pc, #316]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80046d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046d8:	4a4d      	ldr	r2, [pc, #308]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80046da:	f023 0301 	bic.w	r3, r3, #1
 80046de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e2:	f7fd fb9f 	bl	8001e24 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ea:	f7fd fb9b 	bl	8001e24 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e0df      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046fc:	4b44      	ldr	r3, [pc, #272]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80046fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1ef      	bne.n	80046ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 80d3 	beq.w	80048ba <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004714:	4b3e      	ldr	r3, [pc, #248]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	2b0c      	cmp	r3, #12
 800471e:	f000 808d 	beq.w	800483c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d15a      	bne.n	80047e0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472a:	4b39      	ldr	r3, [pc, #228]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a38      	ldr	r2, [pc, #224]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004730:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004736:	f7fd fb75 	bl	8001e24 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473e:	f7fd fb71 	bl	8001e24 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e0b5      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004750:	4b2f      	ldr	r3, [pc, #188]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1f0      	bne.n	800473e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800475c:	4b2c      	ldr	r3, [pc, #176]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <HAL_RCC_OscConfig+0x580>)
 8004762:	4013      	ands	r3, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6a11      	ldr	r1, [r2, #32]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800476c:	3a01      	subs	r2, #1
 800476e:	0112      	lsls	r2, r2, #4
 8004770:	4311      	orrs	r1, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004776:	0212      	lsls	r2, r2, #8
 8004778:	4311      	orrs	r1, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800477e:	0852      	lsrs	r2, r2, #1
 8004780:	3a01      	subs	r2, #1
 8004782:	0552      	lsls	r2, r2, #21
 8004784:	4311      	orrs	r1, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800478a:	0852      	lsrs	r2, r2, #1
 800478c:	3a01      	subs	r2, #1
 800478e:	0652      	lsls	r2, r2, #25
 8004790:	4311      	orrs	r1, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004796:	06d2      	lsls	r2, r2, #27
 8004798:	430a      	orrs	r2, r1
 800479a:	491d      	ldr	r1, [pc, #116]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 800479c:	4313      	orrs	r3, r2
 800479e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a0:	4b1b      	ldr	r3, [pc, #108]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1a      	ldr	r2, [pc, #104]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047ac:	4b18      	ldr	r3, [pc, #96]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4a17      	ldr	r2, [pc, #92]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fd fb34 	bl	8001e24 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c0:	f7fd fb30 	bl	8001e24 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e074      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d2:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x528>
 80047de:	e06c      	b.n	80048ba <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a0a      	ldr	r2, [pc, #40]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80047ec:	4b08      	ldr	r3, [pc, #32]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4a07      	ldr	r2, [pc, #28]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4a04      	ldr	r2, [pc, #16]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047fe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004806:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fd fb0c 	bl	8001e24 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800480e:	e00e      	b.n	800482e <HAL_RCC_OscConfig+0x596>
 8004810:	40021000 	.word	0x40021000
 8004814:	40007000 	.word	0x40007000
 8004818:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481c:	f7fd fb02 	bl	8001e24 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e046      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800482e:	4b25      	ldr	r3, [pc, #148]	; (80048c4 <HAL_RCC_OscConfig+0x62c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x584>
 800483a:	e03e      	b.n	80048ba <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e039      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004848:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <HAL_RCC_OscConfig+0x62c>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f003 0203 	and.w	r2, r3, #3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	429a      	cmp	r2, r3
 800485a:	d12c      	bne.n	80048b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	3b01      	subs	r3, #1
 8004868:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d123      	bne.n	80048b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d11b      	bne.n	80048b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800488a:	429a      	cmp	r2, r3
 800488c:	d113      	bne.n	80048b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	3b01      	subs	r3, #1
 800489c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d109      	bne.n	80048b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	3b01      	subs	r3, #1
 80048b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d001      	beq.n	80048ba <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3720      	adds	r7, #32
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40021000 	.word	0x40021000

080048c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e11e      	b.n	8004b1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048e0:	4b91      	ldr	r3, [pc, #580]	; (8004b28 <HAL_RCC_ClockConfig+0x260>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d910      	bls.n	8004910 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ee:	4b8e      	ldr	r3, [pc, #568]	; (8004b28 <HAL_RCC_ClockConfig+0x260>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 020f 	bic.w	r2, r3, #15
 80048f6:	498c      	ldr	r1, [pc, #560]	; (8004b28 <HAL_RCC_ClockConfig+0x260>)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fe:	4b8a      	ldr	r3, [pc, #552]	; (8004b28 <HAL_RCC_ClockConfig+0x260>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e106      	b.n	8004b1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d073      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b03      	cmp	r3, #3
 8004922:	d129      	bne.n	8004978 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004924:	4b81      	ldr	r3, [pc, #516]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0f4      	b.n	8004b1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004934:	f000 f99e 	bl	8004c74 <RCC_GetSysClockFreqFromPLLSource>
 8004938:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4a7c      	ldr	r2, [pc, #496]	; (8004b30 <HAL_RCC_ClockConfig+0x268>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d93f      	bls.n	80049c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004942:	4b7a      	ldr	r3, [pc, #488]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004956:	2b00      	cmp	r3, #0
 8004958:	d033      	beq.n	80049c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800495e:	2b00      	cmp	r3, #0
 8004960:	d12f      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004962:	4b72      	ldr	r3, [pc, #456]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800496a:	4a70      	ldr	r2, [pc, #448]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 800496c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004970:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004972:	2380      	movs	r3, #128	; 0x80
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	e024      	b.n	80049c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d107      	bne.n	8004990 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004980:	4b6a      	ldr	r3, [pc, #424]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0c6      	b.n	8004b1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004990:	4b66      	ldr	r3, [pc, #408]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0be      	b.n	8004b1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80049a0:	f000 f8ce 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 80049a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4a61      	ldr	r2, [pc, #388]	; (8004b30 <HAL_RCC_ClockConfig+0x268>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d909      	bls.n	80049c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049ae:	4b5f      	ldr	r3, [pc, #380]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049b6:	4a5d      	ldr	r2, [pc, #372]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 80049b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049c2:	4b5a      	ldr	r3, [pc, #360]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f023 0203 	bic.w	r2, r3, #3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4957      	ldr	r1, [pc, #348]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d4:	f7fd fa26 	bl	8001e24 <HAL_GetTick>
 80049d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049da:	e00a      	b.n	80049f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049dc:	f7fd fa22 	bl	8001e24 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e095      	b.n	8004b1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f2:	4b4e      	ldr	r3, [pc, #312]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 020c 	and.w	r2, r3, #12
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d1eb      	bne.n	80049dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d023      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a1c:	4b43      	ldr	r3, [pc, #268]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a42      	ldr	r2, [pc, #264]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004a22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004a34:	4b3d      	ldr	r3, [pc, #244]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a3c:	4a3b      	ldr	r2, [pc, #236]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004a3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a44:	4b39      	ldr	r3, [pc, #228]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	4936      	ldr	r1, [pc, #216]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	608b      	str	r3, [r1, #8]
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2b80      	cmp	r3, #128	; 0x80
 8004a5c:	d105      	bne.n	8004a6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a5e:	4b33      	ldr	r3, [pc, #204]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	4a32      	ldr	r2, [pc, #200]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004a64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6a:	4b2f      	ldr	r3, [pc, #188]	; (8004b28 <HAL_RCC_ClockConfig+0x260>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d21d      	bcs.n	8004ab4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a78:	4b2b      	ldr	r3, [pc, #172]	; (8004b28 <HAL_RCC_ClockConfig+0x260>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f023 020f 	bic.w	r2, r3, #15
 8004a80:	4929      	ldr	r1, [pc, #164]	; (8004b28 <HAL_RCC_ClockConfig+0x260>)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a88:	f7fd f9cc 	bl	8001e24 <HAL_GetTick>
 8004a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8e:	e00a      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a90:	f7fd f9c8 	bl	8001e24 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e03b      	b.n	8004b1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa6:	4b20      	ldr	r3, [pc, #128]	; (8004b28 <HAL_RCC_ClockConfig+0x260>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d1ed      	bne.n	8004a90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac0:	4b1a      	ldr	r3, [pc, #104]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	4917      	ldr	r1, [pc, #92]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ade:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	490f      	ldr	r1, [pc, #60]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004af2:	f000 f825 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 8004af6:	4602      	mov	r2, r0
 8004af8:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	490c      	ldr	r1, [pc, #48]	; (8004b34 <HAL_RCC_ClockConfig+0x26c>)
 8004b04:	5ccb      	ldrb	r3, [r1, r3]
 8004b06:	f003 031f 	and.w	r3, r3, #31
 8004b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0e:	4a0a      	ldr	r2, [pc, #40]	; (8004b38 <HAL_RCC_ClockConfig+0x270>)
 8004b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b12:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <HAL_RCC_ClockConfig+0x274>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fd f938 	bl	8001d8c <HAL_InitTick>
 8004b1c:	4603      	mov	r3, r0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40022000 	.word	0x40022000
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	04c4b400 	.word	0x04c4b400
 8004b34:	08007788 	.word	0x08007788
 8004b38:	20000104 	.word	0x20000104
 8004b3c:	20000108 	.word	0x20000108

08004b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b46:	4b2c      	ldr	r3, [pc, #176]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d102      	bne.n	8004b58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b52:	4b2a      	ldr	r3, [pc, #168]	; (8004bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	e047      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b58:	4b27      	ldr	r3, [pc, #156]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 030c 	and.w	r3, r3, #12
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d102      	bne.n	8004b6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b64:	4b26      	ldr	r3, [pc, #152]	; (8004c00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	e03e      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b6a:	4b23      	ldr	r3, [pc, #140]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 030c 	and.w	r3, r3, #12
 8004b72:	2b0c      	cmp	r3, #12
 8004b74:	d136      	bne.n	8004be4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b76:	4b20      	ldr	r3, [pc, #128]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b80:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	091b      	lsrs	r3, r3, #4
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d10c      	bne.n	8004bae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b94:	4a1a      	ldr	r2, [pc, #104]	; (8004c00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	4a16      	ldr	r2, [pc, #88]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b9e:	68d2      	ldr	r2, [r2, #12]
 8004ba0:	0a12      	lsrs	r2, r2, #8
 8004ba2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ba6:	fb02 f303 	mul.w	r3, r2, r3
 8004baa:	617b      	str	r3, [r7, #20]
      break;
 8004bac:	e00c      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bae:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb6:	4a10      	ldr	r2, [pc, #64]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bb8:	68d2      	ldr	r2, [r2, #12]
 8004bba:	0a12      	lsrs	r2, r2, #8
 8004bbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bc0:	fb02 f303 	mul.w	r3, r2, r3
 8004bc4:	617b      	str	r3, [r7, #20]
      break;
 8004bc6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	0e5b      	lsrs	r3, r3, #25
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	613b      	str	r3, [r7, #16]
 8004be2:	e001      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004be8:	693b      	ldr	r3, [r7, #16]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	016e3600 	.word	0x016e3600

08004c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c08:	4b03      	ldr	r3, [pc, #12]	; (8004c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000104 	.word	0x20000104

08004c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c20:	f7ff fff0 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	4904      	ldr	r1, [pc, #16]	; (8004c44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c32:	5ccb      	ldrb	r3, [r1, r3]
 8004c34:	f003 031f 	and.w	r3, r3, #31
 8004c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40021000 	.word	0x40021000
 8004c44:	08007798 	.word	0x08007798

08004c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c4c:	f7ff ffda 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	0adb      	lsrs	r3, r3, #11
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	4904      	ldr	r1, [pc, #16]	; (8004c70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c5e:	5ccb      	ldrb	r3, [r1, r3]
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	08007798 	.word	0x08007798

08004c74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c7a:	4b1e      	ldr	r3, [pc, #120]	; (8004cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c84:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	3301      	adds	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d10c      	bne.n	8004cb2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c98:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca0:	4a14      	ldr	r2, [pc, #80]	; (8004cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ca2:	68d2      	ldr	r2, [r2, #12]
 8004ca4:	0a12      	lsrs	r2, r2, #8
 8004ca6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004caa:	fb02 f303 	mul.w	r3, r2, r3
 8004cae:	617b      	str	r3, [r7, #20]
    break;
 8004cb0:	e00c      	b.n	8004ccc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cb2:	4a12      	ldr	r2, [pc, #72]	; (8004cfc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cba:	4a0e      	ldr	r2, [pc, #56]	; (8004cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cbc:	68d2      	ldr	r2, [r2, #12]
 8004cbe:	0a12      	lsrs	r2, r2, #8
 8004cc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cc4:	fb02 f303 	mul.w	r3, r2, r3
 8004cc8:	617b      	str	r3, [r7, #20]
    break;
 8004cca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ccc:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	0e5b      	lsrs	r3, r3, #25
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ce6:	687b      	ldr	r3, [r7, #4]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	016e3600 	.word	0x016e3600
 8004cfc:	00f42400 	.word	0x00f42400

08004d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d08:	2300      	movs	r3, #0
 8004d0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 8098 	beq.w	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d22:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10d      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	4b40      	ldr	r3, [pc, #256]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d32:	4a3f      	ldr	r2, [pc, #252]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d38:	6593      	str	r3, [r2, #88]	; 0x58
 8004d3a:	4b3d      	ldr	r3, [pc, #244]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d46:	2301      	movs	r3, #1
 8004d48:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d4a:	4b3a      	ldr	r3, [pc, #232]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a39      	ldr	r2, [pc, #228]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d56:	f7fd f865 	bl	8001e24 <HAL_GetTick>
 8004d5a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d5c:	e009      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d5e:	f7fd f861 	bl	8001e24 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d902      	bls.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	74fb      	strb	r3, [r7, #19]
        break;
 8004d70:	e005      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d72:	4b30      	ldr	r3, [pc, #192]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0ef      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d7e:	7cfb      	ldrb	r3, [r7, #19]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d159      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d84:	4b2a      	ldr	r3, [pc, #168]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01e      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d019      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004da0:	4b23      	ldr	r3, [pc, #140]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004daa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dac:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dbc:	4b1c      	ldr	r3, [pc, #112]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc2:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dcc:	4a18      	ldr	r2, [pc, #96]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dde:	f7fd f821 	bl	8001e24 <HAL_GetTick>
 8004de2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de4:	e00b      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de6:	f7fd f81d 	bl	8001e24 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d902      	bls.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	74fb      	strb	r3, [r7, #19]
            break;
 8004dfc:	e006      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0ec      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004e0c:	7cfb      	ldrb	r3, [r7, #19]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10b      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e12:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e20:	4903      	ldr	r1, [pc, #12]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e28:	e008      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e2a:	7cfb      	ldrb	r3, [r7, #19]
 8004e2c:	74bb      	strb	r3, [r7, #18]
 8004e2e:	e005      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	7cfb      	ldrb	r3, [r7, #19]
 8004e3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e3c:	7c7b      	ldrb	r3, [r7, #17]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d105      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e42:	4baf      	ldr	r3, [pc, #700]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e46:	4aae      	ldr	r2, [pc, #696]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e5a:	4ba9      	ldr	r3, [pc, #676]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	f023 0203 	bic.w	r2, r3, #3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	49a5      	ldr	r1, [pc, #660]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e7c:	4ba0      	ldr	r3, [pc, #640]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e82:	f023 020c 	bic.w	r2, r3, #12
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	499d      	ldr	r1, [pc, #628]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e9e:	4b98      	ldr	r3, [pc, #608]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	4994      	ldr	r1, [pc, #592]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0308 	and.w	r3, r3, #8
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ec0:	4b8f      	ldr	r3, [pc, #572]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	498c      	ldr	r1, [pc, #560]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ee2:	4b87      	ldr	r3, [pc, #540]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	4983      	ldr	r1, [pc, #524]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f04:	4b7e      	ldr	r3, [pc, #504]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	497b      	ldr	r1, [pc, #492]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f26:	4b76      	ldr	r3, [pc, #472]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	4972      	ldr	r1, [pc, #456]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f48:	4b6d      	ldr	r3, [pc, #436]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	496a      	ldr	r1, [pc, #424]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f6a:	4b65      	ldr	r3, [pc, #404]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	4961      	ldr	r1, [pc, #388]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f8c:	4b5c      	ldr	r3, [pc, #368]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f92:	f023 0203 	bic.w	r2, r3, #3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	4959      	ldr	r1, [pc, #356]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fae:	4b54      	ldr	r3, [pc, #336]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	4950      	ldr	r1, [pc, #320]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d015      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fd0:	4b4b      	ldr	r3, [pc, #300]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	4948      	ldr	r1, [pc, #288]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fee:	d105      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ff0:	4b43      	ldr	r3, [pc, #268]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	4a42      	ldr	r2, [pc, #264]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ffa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005004:	2b00      	cmp	r3, #0
 8005006:	d015      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005008:	4b3d      	ldr	r3, [pc, #244]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005016:	493a      	ldr	r1, [pc, #232]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005026:	d105      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005028:	4b35      	ldr	r3, [pc, #212]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4a34      	ldr	r2, [pc, #208]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800502e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005032:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d015      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005040:	4b2f      	ldr	r3, [pc, #188]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005046:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	492c      	ldr	r1, [pc, #176]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800505e:	d105      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005060:	4b27      	ldr	r3, [pc, #156]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4a26      	ldr	r2, [pc, #152]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800506a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d015      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005078:	4b21      	ldr	r3, [pc, #132]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005086:	491e      	ldr	r1, [pc, #120]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005096:	d105      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005098:	4b19      	ldr	r3, [pc, #100]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4a18      	ldr	r2, [pc, #96]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800509e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d015      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050b0:	4b13      	ldr	r3, [pc, #76]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	4910      	ldr	r1, [pc, #64]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ce:	d105      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050d0:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	4a0a      	ldr	r2, [pc, #40]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d018      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80050e8:	4b05      	ldr	r3, [pc, #20]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f6:	4902      	ldr	r1, [pc, #8]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050fe:	e001      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005100:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005108:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800510c:	d105      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800510e:	4b21      	ldr	r3, [pc, #132]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	4a20      	ldr	r2, [pc, #128]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005118:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d015      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005126:	4b1b      	ldr	r3, [pc, #108]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005134:	4917      	ldr	r1, [pc, #92]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005144:	d105      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005146:	4b13      	ldr	r3, [pc, #76]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	4a12      	ldr	r2, [pc, #72]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800514c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005150:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d015      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800515e:	4b0d      	ldr	r3, [pc, #52]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005160:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005164:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516c:	4909      	ldr	r1, [pc, #36]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005178:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800517c:	d105      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800517e:	4b05      	ldr	r3, [pc, #20]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	4a04      	ldr	r2, [pc, #16]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005184:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005188:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800518a:	7cbb      	ldrb	r3, [r7, #18]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40021000 	.word	0x40021000

08005198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e049      	b.n	800523e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fc fc62 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3304      	adds	r3, #4
 80051d4:	4619      	mov	r1, r3
 80051d6:	4610      	mov	r0, r2
 80051d8:	f000 fbd8 	bl	800598c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	d001      	beq.n	8005260 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e04c      	b.n	80052fa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a26      	ldr	r2, [pc, #152]	; (8005308 <HAL_TIM_Base_Start+0xc0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d022      	beq.n	80052b8 <HAL_TIM_Base_Start+0x70>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527a:	d01d      	beq.n	80052b8 <HAL_TIM_Base_Start+0x70>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a22      	ldr	r2, [pc, #136]	; (800530c <HAL_TIM_Base_Start+0xc4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d018      	beq.n	80052b8 <HAL_TIM_Base_Start+0x70>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a21      	ldr	r2, [pc, #132]	; (8005310 <HAL_TIM_Base_Start+0xc8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d013      	beq.n	80052b8 <HAL_TIM_Base_Start+0x70>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a1f      	ldr	r2, [pc, #124]	; (8005314 <HAL_TIM_Base_Start+0xcc>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00e      	beq.n	80052b8 <HAL_TIM_Base_Start+0x70>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <HAL_TIM_Base_Start+0xd0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d009      	beq.n	80052b8 <HAL_TIM_Base_Start+0x70>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1c      	ldr	r2, [pc, #112]	; (800531c <HAL_TIM_Base_Start+0xd4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d004      	beq.n	80052b8 <HAL_TIM_Base_Start+0x70>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1b      	ldr	r2, [pc, #108]	; (8005320 <HAL_TIM_Base_Start+0xd8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d115      	bne.n	80052e4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	4b19      	ldr	r3, [pc, #100]	; (8005324 <HAL_TIM_Base_Start+0xdc>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b06      	cmp	r3, #6
 80052c8:	d015      	beq.n	80052f6 <HAL_TIM_Base_Start+0xae>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d0:	d011      	beq.n	80052f6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0201 	orr.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e2:	e008      	b.n	80052f6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e000      	b.n	80052f8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40012c00 	.word	0x40012c00
 800530c:	40000400 	.word	0x40000400
 8005310:	40000800 	.word	0x40000800
 8005314:	40000c00 	.word	0x40000c00
 8005318:	40013400 	.word	0x40013400
 800531c:	40014000 	.word	0x40014000
 8005320:	40015000 	.word	0x40015000
 8005324:	00010007 	.word	0x00010007

08005328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	d001      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e054      	b.n	80053ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a26      	ldr	r2, [pc, #152]	; (80053f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d022      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536a:	d01d      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a22      	ldr	r2, [pc, #136]	; (80053fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d018      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a21      	ldr	r2, [pc, #132]	; (8005400 <HAL_TIM_Base_Start_IT+0xd8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d013      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a1f      	ldr	r2, [pc, #124]	; (8005404 <HAL_TIM_Base_Start_IT+0xdc>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00e      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1e      	ldr	r2, [pc, #120]	; (8005408 <HAL_TIM_Base_Start_IT+0xe0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d009      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a1c      	ldr	r2, [pc, #112]	; (800540c <HAL_TIM_Base_Start_IT+0xe4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d004      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1b      	ldr	r2, [pc, #108]	; (8005410 <HAL_TIM_Base_Start_IT+0xe8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d115      	bne.n	80053d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	4b19      	ldr	r3, [pc, #100]	; (8005414 <HAL_TIM_Base_Start_IT+0xec>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b06      	cmp	r3, #6
 80053b8:	d015      	beq.n	80053e6 <HAL_TIM_Base_Start_IT+0xbe>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c0:	d011      	beq.n	80053e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0201 	orr.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d2:	e008      	b.n	80053e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	e000      	b.n	80053e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40012c00 	.word	0x40012c00
 80053fc:	40000400 	.word	0x40000400
 8005400:	40000800 	.word	0x40000800
 8005404:	40000c00 	.word	0x40000c00
 8005408:	40013400 	.word	0x40013400
 800540c:	40014000 	.word	0x40014000
 8005410:	40015000 	.word	0x40015000
 8005414:	00010007 	.word	0x00010007

08005418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b02      	cmp	r3, #2
 800542c:	d122      	bne.n	8005474 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b02      	cmp	r3, #2
 800543a:	d11b      	bne.n	8005474 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0202 	mvn.w	r2, #2
 8005444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa78 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
 8005460:	e005      	b.n	800546e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fa6a 	bl	800593c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fa7b 	bl	8005964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b04      	cmp	r3, #4
 8005480:	d122      	bne.n	80054c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b04      	cmp	r3, #4
 800548e:	d11b      	bne.n	80054c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0204 	mvn.w	r2, #4
 8005498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa4e 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
 80054b4:	e005      	b.n	80054c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa40 	bl	800593c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fa51 	bl	8005964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d122      	bne.n	800551c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d11b      	bne.n	800551c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0208 	mvn.w	r2, #8
 80054ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2204      	movs	r2, #4
 80054f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fa24 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
 8005508:	e005      	b.n	8005516 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fa16 	bl	800593c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fa27 	bl	8005964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b10      	cmp	r3, #16
 8005528:	d122      	bne.n	8005570 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	2b10      	cmp	r3, #16
 8005536:	d11b      	bne.n	8005570 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0210 	mvn.w	r2, #16
 8005540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2208      	movs	r2, #8
 8005546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f9fa 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
 800555c:	e005      	b.n	800556a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f9ec 	bl	800593c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f9fd 	bl	8005964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b01      	cmp	r3, #1
 800557c:	d10e      	bne.n	800559c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b01      	cmp	r3, #1
 800558a:	d107      	bne.n	800559c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0201 	mvn.w	r2, #1
 8005594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fb fc48 	bl	8000e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a6:	2b80      	cmp	r3, #128	; 0x80
 80055a8:	d10e      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b4:	2b80      	cmp	r3, #128	; 0x80
 80055b6:	d107      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fbc6 	bl	8005d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d6:	d10e      	bne.n	80055f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e2:	2b80      	cmp	r3, #128	; 0x80
 80055e4:	d107      	bne.n	80055f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fbb9 	bl	8005d68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005600:	2b40      	cmp	r3, #64	; 0x40
 8005602:	d10e      	bne.n	8005622 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560e:	2b40      	cmp	r3, #64	; 0x40
 8005610:	d107      	bne.n	8005622 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800561a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f9ab 	bl	8005978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b20      	cmp	r3, #32
 800562e:	d10e      	bne.n	800564e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b20      	cmp	r3, #32
 800563c:	d107      	bne.n	800564e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f06f 0220 	mvn.w	r2, #32
 8005646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fb79 	bl	8005d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005658:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800565c:	d10f      	bne.n	800567e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800566c:	d107      	bne.n	800567e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fb7f 	bl	8005d7c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800568c:	d10f      	bne.n	80056ae <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800569c:	d107      	bne.n	80056ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80056a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fb71 	bl	8005d90 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056bc:	d10f      	bne.n	80056de <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056cc:	d107      	bne.n	80056de <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80056d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fb63 	bl	8005da4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056ec:	d10f      	bne.n	800570e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056fc:	d107      	bne.n	800570e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fb55 	bl	8005db8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_TIM_ConfigClockSource+0x18>
 800572c:	2302      	movs	r3, #2
 800572e:	e0f5      	b.n	800591c <HAL_TIM_ConfigClockSource+0x204>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800574e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005752:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800575a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a6e      	ldr	r2, [pc, #440]	; (8005924 <HAL_TIM_ConfigClockSource+0x20c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	f000 80c1 	beq.w	80058f2 <HAL_TIM_ConfigClockSource+0x1da>
 8005770:	4a6c      	ldr	r2, [pc, #432]	; (8005924 <HAL_TIM_ConfigClockSource+0x20c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	f200 80c6 	bhi.w	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
 8005778:	4a6b      	ldr	r2, [pc, #428]	; (8005928 <HAL_TIM_ConfigClockSource+0x210>)
 800577a:	4293      	cmp	r3, r2
 800577c:	f000 80b9 	beq.w	80058f2 <HAL_TIM_ConfigClockSource+0x1da>
 8005780:	4a69      	ldr	r2, [pc, #420]	; (8005928 <HAL_TIM_ConfigClockSource+0x210>)
 8005782:	4293      	cmp	r3, r2
 8005784:	f200 80be 	bhi.w	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
 8005788:	4a68      	ldr	r2, [pc, #416]	; (800592c <HAL_TIM_ConfigClockSource+0x214>)
 800578a:	4293      	cmp	r3, r2
 800578c:	f000 80b1 	beq.w	80058f2 <HAL_TIM_ConfigClockSource+0x1da>
 8005790:	4a66      	ldr	r2, [pc, #408]	; (800592c <HAL_TIM_ConfigClockSource+0x214>)
 8005792:	4293      	cmp	r3, r2
 8005794:	f200 80b6 	bhi.w	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
 8005798:	4a65      	ldr	r2, [pc, #404]	; (8005930 <HAL_TIM_ConfigClockSource+0x218>)
 800579a:	4293      	cmp	r3, r2
 800579c:	f000 80a9 	beq.w	80058f2 <HAL_TIM_ConfigClockSource+0x1da>
 80057a0:	4a63      	ldr	r2, [pc, #396]	; (8005930 <HAL_TIM_ConfigClockSource+0x218>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	f200 80ae 	bhi.w	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
 80057a8:	4a62      	ldr	r2, [pc, #392]	; (8005934 <HAL_TIM_ConfigClockSource+0x21c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	f000 80a1 	beq.w	80058f2 <HAL_TIM_ConfigClockSource+0x1da>
 80057b0:	4a60      	ldr	r2, [pc, #384]	; (8005934 <HAL_TIM_ConfigClockSource+0x21c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	f200 80a6 	bhi.w	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
 80057b8:	4a5f      	ldr	r2, [pc, #380]	; (8005938 <HAL_TIM_ConfigClockSource+0x220>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	f000 8099 	beq.w	80058f2 <HAL_TIM_ConfigClockSource+0x1da>
 80057c0:	4a5d      	ldr	r2, [pc, #372]	; (8005938 <HAL_TIM_ConfigClockSource+0x220>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	f200 809e 	bhi.w	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
 80057c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80057cc:	f000 8091 	beq.w	80058f2 <HAL_TIM_ConfigClockSource+0x1da>
 80057d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80057d4:	f200 8096 	bhi.w	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
 80057d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057dc:	f000 8089 	beq.w	80058f2 <HAL_TIM_ConfigClockSource+0x1da>
 80057e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057e4:	f200 808e 	bhi.w	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
 80057e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ec:	d03e      	beq.n	800586c <HAL_TIM_ConfigClockSource+0x154>
 80057ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f2:	f200 8087 	bhi.w	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
 80057f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fa:	f000 8085 	beq.w	8005908 <HAL_TIM_ConfigClockSource+0x1f0>
 80057fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005802:	d87f      	bhi.n	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
 8005804:	2b70      	cmp	r3, #112	; 0x70
 8005806:	d01a      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x126>
 8005808:	2b70      	cmp	r3, #112	; 0x70
 800580a:	d87b      	bhi.n	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
 800580c:	2b60      	cmp	r3, #96	; 0x60
 800580e:	d050      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x19a>
 8005810:	2b60      	cmp	r3, #96	; 0x60
 8005812:	d877      	bhi.n	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
 8005814:	2b50      	cmp	r3, #80	; 0x50
 8005816:	d03c      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x17a>
 8005818:	2b50      	cmp	r3, #80	; 0x50
 800581a:	d873      	bhi.n	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
 800581c:	2b40      	cmp	r3, #64	; 0x40
 800581e:	d058      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x1ba>
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d86f      	bhi.n	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
 8005824:	2b30      	cmp	r3, #48	; 0x30
 8005826:	d064      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x1da>
 8005828:	2b30      	cmp	r3, #48	; 0x30
 800582a:	d86b      	bhi.n	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
 800582c:	2b20      	cmp	r3, #32
 800582e:	d060      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x1da>
 8005830:	2b20      	cmp	r3, #32
 8005832:	d867      	bhi.n	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
 8005834:	2b00      	cmp	r3, #0
 8005836:	d05c      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x1da>
 8005838:	2b10      	cmp	r3, #16
 800583a:	d05a      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800583c:	e062      	b.n	8005904 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6899      	ldr	r1, [r3, #8]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f000 f9c1 	bl	8005bd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005860:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	609a      	str	r2, [r3, #8]
      break;
 800586a:	e04e      	b.n	800590a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	6899      	ldr	r1, [r3, #8]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f000 f9aa 	bl	8005bd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800588e:	609a      	str	r2, [r3, #8]
      break;
 8005890:	e03b      	b.n	800590a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6859      	ldr	r1, [r3, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	461a      	mov	r2, r3
 80058a0:	f000 f91c 	bl	8005adc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2150      	movs	r1, #80	; 0x50
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 f975 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 80058b0:	e02b      	b.n	800590a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6859      	ldr	r1, [r3, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	461a      	mov	r2, r3
 80058c0:	f000 f93b 	bl	8005b3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2160      	movs	r1, #96	; 0x60
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f965 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 80058d0:	e01b      	b.n	800590a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6859      	ldr	r1, [r3, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	461a      	mov	r2, r3
 80058e0:	f000 f8fc 	bl	8005adc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2140      	movs	r1, #64	; 0x40
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 f955 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 80058f0:	e00b      	b.n	800590a <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4619      	mov	r1, r3
 80058fc:	4610      	mov	r0, r2
 80058fe:	f000 f94c 	bl	8005b9a <TIM_ITRx_SetConfig>
        break;
 8005902:	e002      	b.n	800590a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8005904:	bf00      	nop
 8005906:	e000      	b.n	800590a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8005908:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	00100070 	.word	0x00100070
 8005928:	00100060 	.word	0x00100060
 800592c:	00100050 	.word	0x00100050
 8005930:	00100040 	.word	0x00100040
 8005934:	00100030 	.word	0x00100030
 8005938:	00100020 	.word	0x00100020

0800593c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a46      	ldr	r2, [pc, #280]	; (8005ab8 <TIM_Base_SetConfig+0x12c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d017      	beq.n	80059d4 <TIM_Base_SetConfig+0x48>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059aa:	d013      	beq.n	80059d4 <TIM_Base_SetConfig+0x48>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a43      	ldr	r2, [pc, #268]	; (8005abc <TIM_Base_SetConfig+0x130>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00f      	beq.n	80059d4 <TIM_Base_SetConfig+0x48>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a42      	ldr	r2, [pc, #264]	; (8005ac0 <TIM_Base_SetConfig+0x134>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00b      	beq.n	80059d4 <TIM_Base_SetConfig+0x48>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a41      	ldr	r2, [pc, #260]	; (8005ac4 <TIM_Base_SetConfig+0x138>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d007      	beq.n	80059d4 <TIM_Base_SetConfig+0x48>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a40      	ldr	r2, [pc, #256]	; (8005ac8 <TIM_Base_SetConfig+0x13c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d003      	beq.n	80059d4 <TIM_Base_SetConfig+0x48>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a3f      	ldr	r2, [pc, #252]	; (8005acc <TIM_Base_SetConfig+0x140>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d108      	bne.n	80059e6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a33      	ldr	r2, [pc, #204]	; (8005ab8 <TIM_Base_SetConfig+0x12c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d023      	beq.n	8005a36 <TIM_Base_SetConfig+0xaa>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f4:	d01f      	beq.n	8005a36 <TIM_Base_SetConfig+0xaa>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a30      	ldr	r2, [pc, #192]	; (8005abc <TIM_Base_SetConfig+0x130>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d01b      	beq.n	8005a36 <TIM_Base_SetConfig+0xaa>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a2f      	ldr	r2, [pc, #188]	; (8005ac0 <TIM_Base_SetConfig+0x134>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d017      	beq.n	8005a36 <TIM_Base_SetConfig+0xaa>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a2e      	ldr	r2, [pc, #184]	; (8005ac4 <TIM_Base_SetConfig+0x138>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d013      	beq.n	8005a36 <TIM_Base_SetConfig+0xaa>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a2d      	ldr	r2, [pc, #180]	; (8005ac8 <TIM_Base_SetConfig+0x13c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00f      	beq.n	8005a36 <TIM_Base_SetConfig+0xaa>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a2d      	ldr	r2, [pc, #180]	; (8005ad0 <TIM_Base_SetConfig+0x144>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00b      	beq.n	8005a36 <TIM_Base_SetConfig+0xaa>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a2c      	ldr	r2, [pc, #176]	; (8005ad4 <TIM_Base_SetConfig+0x148>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d007      	beq.n	8005a36 <TIM_Base_SetConfig+0xaa>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a2b      	ldr	r2, [pc, #172]	; (8005ad8 <TIM_Base_SetConfig+0x14c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d003      	beq.n	8005a36 <TIM_Base_SetConfig+0xaa>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a26      	ldr	r2, [pc, #152]	; (8005acc <TIM_Base_SetConfig+0x140>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d108      	bne.n	8005a48 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a12      	ldr	r2, [pc, #72]	; (8005ab8 <TIM_Base_SetConfig+0x12c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d013      	beq.n	8005a9c <TIM_Base_SetConfig+0x110>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a14      	ldr	r2, [pc, #80]	; (8005ac8 <TIM_Base_SetConfig+0x13c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00f      	beq.n	8005a9c <TIM_Base_SetConfig+0x110>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a14      	ldr	r2, [pc, #80]	; (8005ad0 <TIM_Base_SetConfig+0x144>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00b      	beq.n	8005a9c <TIM_Base_SetConfig+0x110>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a13      	ldr	r2, [pc, #76]	; (8005ad4 <TIM_Base_SetConfig+0x148>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d007      	beq.n	8005a9c <TIM_Base_SetConfig+0x110>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a12      	ldr	r2, [pc, #72]	; (8005ad8 <TIM_Base_SetConfig+0x14c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d003      	beq.n	8005a9c <TIM_Base_SetConfig+0x110>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a0d      	ldr	r2, [pc, #52]	; (8005acc <TIM_Base_SetConfig+0x140>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d103      	bne.n	8005aa4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	615a      	str	r2, [r3, #20]
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40012c00 	.word	0x40012c00
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40013400 	.word	0x40013400
 8005acc:	40015000 	.word	0x40015000
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	40014400 	.word	0x40014400
 8005ad8:	40014800 	.word	0x40014800

08005adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0201 	bic.w	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f023 030a 	bic.w	r3, r3, #10
 8005b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b087      	sub	sp, #28
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f023 0210 	bic.w	r2, r3, #16
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	031b      	lsls	r3, r3, #12
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f043 0307 	orr.w	r3, r3, #7
 8005bc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	609a      	str	r2, [r3, #8]
}
 8005bc8:	bf00      	nop
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	021a      	lsls	r2, r3, #8
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	609a      	str	r2, [r3, #8]
}
 8005c08:	bf00      	nop
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e074      	b.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a34      	ldr	r2, [pc, #208]	; (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d009      	beq.n	8005c6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a33      	ldr	r2, [pc, #204]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d004      	beq.n	8005c6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a31      	ldr	r2, [pc, #196]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d108      	bne.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a21      	ldr	r2, [pc, #132]	; (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d022      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cac:	d01d      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1f      	ldr	r2, [pc, #124]	; (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d018      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1d      	ldr	r2, [pc, #116]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d013      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1c      	ldr	r2, [pc, #112]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00e      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d009      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d004      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a11      	ldr	r2, [pc, #68]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d10c      	bne.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	40013400 	.word	0x40013400
 8005d2c:	40015000 	.word	0x40015000
 8005d30:	40000400 	.word	0x40000400
 8005d34:	40000800 	.word	0x40000800
 8005d38:	40000c00 	.word	0x40000c00
 8005d3c:	40014000 	.word	0x40014000

08005d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e042      	b.n	8005e64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d106      	bne.n	8005df6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7fb fec1 	bl	8001b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2224      	movs	r2, #36	; 0x24
 8005dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0201 	bic.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fac6 	bl	80063a0 <UART_SetConfig>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d101      	bne.n	8005e1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e022      	b.n	8005e64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fd84 	bl	8006934 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fe0b 	bl	8006a78 <UART_CheckIdleState>
 8005e62:	4603      	mov	r3, r0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	4613      	mov	r3, r2
 8005e78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d131      	bne.n	8005ee8 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_UART_Receive_IT+0x24>
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e02a      	b.n	8005eea <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_UART_Receive_IT+0x36>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e023      	b.n	8005eea <HAL_UART_Receive_IT+0x7e>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a0f      	ldr	r2, [pc, #60]	; (8005ef4 <HAL_UART_Receive_IT+0x88>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00e      	beq.n	8005ed8 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d007      	beq.n	8005ed8 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005ed6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ed8:	88fb      	ldrh	r3, [r7, #6]
 8005eda:	461a      	mov	r2, r3
 8005edc:	68b9      	ldr	r1, [r7, #8]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 fe96 	bl	8006c10 <UART_Start_Receive_IT>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	e000      	b.n	8005eea <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005ee8:	2302      	movs	r3, #2
  }
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40008000 	.word	0x40008000

08005ef8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f1e:	4013      	ands	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d118      	bne.n	8005f5a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d013      	beq.n	8005f5a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d104      	bne.n	8005f46 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d009      	beq.n	8005f5a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 81fb 	beq.w	8006346 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	4798      	blx	r3
      }
      return;
 8005f58:	e1f5      	b.n	8006346 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 80ef 	beq.w	8006140 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	4b73      	ldr	r3, [pc, #460]	; (8006134 <HAL_UART_IRQHandler+0x23c>)
 8005f66:	4013      	ands	r3, r2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d105      	bne.n	8005f78 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4b72      	ldr	r3, [pc, #456]	; (8006138 <HAL_UART_IRQHandler+0x240>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 80e4 	beq.w	8006140 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d010      	beq.n	8005fa4 <HAL_UART_IRQHandler+0xac>
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00b      	beq.n	8005fa4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2201      	movs	r2, #1
 8005f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f9a:	f043 0201 	orr.w	r2, r3, #1
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d010      	beq.n	8005fd0 <HAL_UART_IRQHandler+0xd8>
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00b      	beq.n	8005fd0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fc6:	f043 0204 	orr.w	r2, r3, #4
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d010      	beq.n	8005ffc <HAL_UART_IRQHandler+0x104>
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00b      	beq.n	8005ffc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2204      	movs	r2, #4
 8005fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ff2:	f043 0202 	orr.w	r2, r3, #2
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	f003 0308 	and.w	r3, r3, #8
 8006002:	2b00      	cmp	r3, #0
 8006004:	d015      	beq.n	8006032 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b00      	cmp	r3, #0
 800600e:	d104      	bne.n	800601a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4b48      	ldr	r3, [pc, #288]	; (8006134 <HAL_UART_IRQHandler+0x23c>)
 8006014:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00b      	beq.n	8006032 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2208      	movs	r2, #8
 8006020:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006028:	f043 0208 	orr.w	r2, r3, #8
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006038:	2b00      	cmp	r3, #0
 800603a:	d011      	beq.n	8006060 <HAL_UART_IRQHandler+0x168>
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00c      	beq.n	8006060 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800604e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006056:	f043 0220 	orr.w	r2, r3, #32
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 816f 	beq.w	800634a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	d011      	beq.n	800609a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d104      	bne.n	800608a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060a0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ac:	2b40      	cmp	r3, #64	; 0x40
 80060ae:	d004      	beq.n	80060ba <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d031      	beq.n	800611e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fe66 	bl	8006d8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	d123      	bne.n	8006116 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060dc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d013      	beq.n	800610e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ea:	4a14      	ldr	r2, [pc, #80]	; (800613c <HAL_UART_IRQHandler+0x244>)
 80060ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fd fe1a 	bl	8003d2c <HAL_DMA_Abort_IT>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d017      	beq.n	800612e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006108:	4610      	mov	r0, r2
 800610a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800610c:	e00f      	b.n	800612e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f930 	bl	8006374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006114:	e00b      	b.n	800612e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f92c 	bl	8006374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800611c:	e007      	b.n	800612e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f928 	bl	8006374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800612c:	e10d      	b.n	800634a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800612e:	bf00      	nop
    return;
 8006130:	e10b      	b.n	800634a <HAL_UART_IRQHandler+0x452>
 8006132:	bf00      	nop
 8006134:	10000001 	.word	0x10000001
 8006138:	04000120 	.word	0x04000120
 800613c:	08006df1 	.word	0x08006df1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006144:	2b01      	cmp	r3, #1
 8006146:	f040 80ab 	bne.w	80062a0 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	f003 0310 	and.w	r3, r3, #16
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80a5 	beq.w	80062a0 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	f003 0310 	and.w	r3, r3, #16
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 809f 	beq.w	80062a0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2210      	movs	r2, #16
 8006168:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	d155      	bne.n	8006224 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006182:	893b      	ldrh	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 80e2 	beq.w	800634e <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006190:	893a      	ldrh	r2, [r7, #8]
 8006192:	429a      	cmp	r2, r3
 8006194:	f080 80db 	bcs.w	800634e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	893a      	ldrh	r2, [r7, #8]
 800619c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d12b      	bne.n	8006208 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061be:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0201 	bic.w	r2, r2, #1
 80061ce:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061de:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0210 	bic.w	r2, r2, #16
 80061fc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006202:	4618      	mov	r0, r3
 8006204:	f7fd fd39 	bl	8003c7a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006214:	b29b      	uxth	r3, r3
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	b29b      	uxth	r3, r3
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f8b3 	bl	8006388 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006222:	e094      	b.n	800634e <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006230:	b29b      	uxth	r3, r3
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8087 	beq.w	8006352 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8006244:	897b      	ldrh	r3, [r7, #10]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 8083 	beq.w	8006352 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800625a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800626a:	f023 0301 	bic.w	r3, r3, #1
 800626e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2220      	movs	r2, #32
 8006274:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 0210 	bic.w	r2, r2, #16
 8006292:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006294:	897b      	ldrh	r3, [r7, #10]
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f875 	bl	8006388 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800629e:	e058      	b.n	8006352 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00d      	beq.n	80062c6 <HAL_UART_IRQHandler+0x3ce>
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80062bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f001 f8a2 	bl	8007408 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062c4:	e048      	b.n	8006358 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d012      	beq.n	80062f6 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d104      	bne.n	80062e4 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d008      	beq.n	80062f6 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d034      	beq.n	8006356 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	4798      	blx	r3
    }
    return;
 80062f4:	e02f      	b.n	8006356 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d008      	beq.n	8006312 <HAL_UART_IRQHandler+0x41a>
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fd86 	bl	8006e1c <UART_EndTransmit_IT>
    return;
 8006310:	e022      	b.n	8006358 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d008      	beq.n	800632e <HAL_UART_IRQHandler+0x436>
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 f882 	bl	8007430 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800632c:	e014      	b.n	8006358 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00f      	beq.n	8006358 <HAL_UART_IRQHandler+0x460>
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	2b00      	cmp	r3, #0
 800633c:	da0c      	bge.n	8006358 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 f86c 	bl	800741c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006344:	e008      	b.n	8006358 <HAL_UART_IRQHandler+0x460>
      return;
 8006346:	bf00      	nop
 8006348:	e006      	b.n	8006358 <HAL_UART_IRQHandler+0x460>
    return;
 800634a:	bf00      	nop
 800634c:	e004      	b.n	8006358 <HAL_UART_IRQHandler+0x460>
      return;
 800634e:	bf00      	nop
 8006350:	e002      	b.n	8006358 <HAL_UART_IRQHandler+0x460>
      return;
 8006352:	bf00      	nop
 8006354:	e000      	b.n	8006358 <HAL_UART_IRQHandler+0x460>
    return;
 8006356:	bf00      	nop
  }
}
 8006358:	3720      	adds	r7, #32
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop

08006360 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063a0:	b5b0      	push	{r4, r5, r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	431a      	orrs	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	4bb1      	ldr	r3, [pc, #708]	; (8006690 <UART_SetConfig+0x2f0>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6812      	ldr	r2, [r2, #0]
 80063d2:	69f9      	ldr	r1, [r7, #28]
 80063d4:	430b      	orrs	r3, r1
 80063d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4aa6      	ldr	r2, [pc, #664]	; (8006694 <UART_SetConfig+0x2f4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d004      	beq.n	8006408 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	4313      	orrs	r3, r2
 8006406:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006412:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6812      	ldr	r2, [r2, #0]
 800641a:	69f9      	ldr	r1, [r7, #28]
 800641c:	430b      	orrs	r3, r1
 800641e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	f023 010f 	bic.w	r1, r3, #15
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a97      	ldr	r2, [pc, #604]	; (8006698 <UART_SetConfig+0x2f8>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d120      	bne.n	8006482 <UART_SetConfig+0xe2>
 8006440:	4b96      	ldr	r3, [pc, #600]	; (800669c <UART_SetConfig+0x2fc>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	2b03      	cmp	r3, #3
 800644c:	d816      	bhi.n	800647c <UART_SetConfig+0xdc>
 800644e:	a201      	add	r2, pc, #4	; (adr r2, 8006454 <UART_SetConfig+0xb4>)
 8006450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006454:	08006465 	.word	0x08006465
 8006458:	08006471 	.word	0x08006471
 800645c:	0800646b 	.word	0x0800646b
 8006460:	08006477 	.word	0x08006477
 8006464:	2301      	movs	r3, #1
 8006466:	76fb      	strb	r3, [r7, #27]
 8006468:	e0e7      	b.n	800663a <UART_SetConfig+0x29a>
 800646a:	2302      	movs	r3, #2
 800646c:	76fb      	strb	r3, [r7, #27]
 800646e:	e0e4      	b.n	800663a <UART_SetConfig+0x29a>
 8006470:	2304      	movs	r3, #4
 8006472:	76fb      	strb	r3, [r7, #27]
 8006474:	e0e1      	b.n	800663a <UART_SetConfig+0x29a>
 8006476:	2308      	movs	r3, #8
 8006478:	76fb      	strb	r3, [r7, #27]
 800647a:	e0de      	b.n	800663a <UART_SetConfig+0x29a>
 800647c:	2310      	movs	r3, #16
 800647e:	76fb      	strb	r3, [r7, #27]
 8006480:	e0db      	b.n	800663a <UART_SetConfig+0x29a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a86      	ldr	r2, [pc, #536]	; (80066a0 <UART_SetConfig+0x300>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d132      	bne.n	80064f2 <UART_SetConfig+0x152>
 800648c:	4b83      	ldr	r3, [pc, #524]	; (800669c <UART_SetConfig+0x2fc>)
 800648e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006492:	f003 030c 	and.w	r3, r3, #12
 8006496:	2b0c      	cmp	r3, #12
 8006498:	d828      	bhi.n	80064ec <UART_SetConfig+0x14c>
 800649a:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <UART_SetConfig+0x100>)
 800649c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a0:	080064d5 	.word	0x080064d5
 80064a4:	080064ed 	.word	0x080064ed
 80064a8:	080064ed 	.word	0x080064ed
 80064ac:	080064ed 	.word	0x080064ed
 80064b0:	080064e1 	.word	0x080064e1
 80064b4:	080064ed 	.word	0x080064ed
 80064b8:	080064ed 	.word	0x080064ed
 80064bc:	080064ed 	.word	0x080064ed
 80064c0:	080064db 	.word	0x080064db
 80064c4:	080064ed 	.word	0x080064ed
 80064c8:	080064ed 	.word	0x080064ed
 80064cc:	080064ed 	.word	0x080064ed
 80064d0:	080064e7 	.word	0x080064e7
 80064d4:	2300      	movs	r3, #0
 80064d6:	76fb      	strb	r3, [r7, #27]
 80064d8:	e0af      	b.n	800663a <UART_SetConfig+0x29a>
 80064da:	2302      	movs	r3, #2
 80064dc:	76fb      	strb	r3, [r7, #27]
 80064de:	e0ac      	b.n	800663a <UART_SetConfig+0x29a>
 80064e0:	2304      	movs	r3, #4
 80064e2:	76fb      	strb	r3, [r7, #27]
 80064e4:	e0a9      	b.n	800663a <UART_SetConfig+0x29a>
 80064e6:	2308      	movs	r3, #8
 80064e8:	76fb      	strb	r3, [r7, #27]
 80064ea:	e0a6      	b.n	800663a <UART_SetConfig+0x29a>
 80064ec:	2310      	movs	r3, #16
 80064ee:	76fb      	strb	r3, [r7, #27]
 80064f0:	e0a3      	b.n	800663a <UART_SetConfig+0x29a>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a6b      	ldr	r2, [pc, #428]	; (80066a4 <UART_SetConfig+0x304>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d120      	bne.n	800653e <UART_SetConfig+0x19e>
 80064fc:	4b67      	ldr	r3, [pc, #412]	; (800669c <UART_SetConfig+0x2fc>)
 80064fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006502:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006506:	2b30      	cmp	r3, #48	; 0x30
 8006508:	d013      	beq.n	8006532 <UART_SetConfig+0x192>
 800650a:	2b30      	cmp	r3, #48	; 0x30
 800650c:	d814      	bhi.n	8006538 <UART_SetConfig+0x198>
 800650e:	2b20      	cmp	r3, #32
 8006510:	d009      	beq.n	8006526 <UART_SetConfig+0x186>
 8006512:	2b20      	cmp	r3, #32
 8006514:	d810      	bhi.n	8006538 <UART_SetConfig+0x198>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <UART_SetConfig+0x180>
 800651a:	2b10      	cmp	r3, #16
 800651c:	d006      	beq.n	800652c <UART_SetConfig+0x18c>
 800651e:	e00b      	b.n	8006538 <UART_SetConfig+0x198>
 8006520:	2300      	movs	r3, #0
 8006522:	76fb      	strb	r3, [r7, #27]
 8006524:	e089      	b.n	800663a <UART_SetConfig+0x29a>
 8006526:	2302      	movs	r3, #2
 8006528:	76fb      	strb	r3, [r7, #27]
 800652a:	e086      	b.n	800663a <UART_SetConfig+0x29a>
 800652c:	2304      	movs	r3, #4
 800652e:	76fb      	strb	r3, [r7, #27]
 8006530:	e083      	b.n	800663a <UART_SetConfig+0x29a>
 8006532:	2308      	movs	r3, #8
 8006534:	76fb      	strb	r3, [r7, #27]
 8006536:	e080      	b.n	800663a <UART_SetConfig+0x29a>
 8006538:	2310      	movs	r3, #16
 800653a:	76fb      	strb	r3, [r7, #27]
 800653c:	e07d      	b.n	800663a <UART_SetConfig+0x29a>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a59      	ldr	r2, [pc, #356]	; (80066a8 <UART_SetConfig+0x308>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d120      	bne.n	800658a <UART_SetConfig+0x1ea>
 8006548:	4b54      	ldr	r3, [pc, #336]	; (800669c <UART_SetConfig+0x2fc>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006552:	2bc0      	cmp	r3, #192	; 0xc0
 8006554:	d013      	beq.n	800657e <UART_SetConfig+0x1de>
 8006556:	2bc0      	cmp	r3, #192	; 0xc0
 8006558:	d814      	bhi.n	8006584 <UART_SetConfig+0x1e4>
 800655a:	2b80      	cmp	r3, #128	; 0x80
 800655c:	d009      	beq.n	8006572 <UART_SetConfig+0x1d2>
 800655e:	2b80      	cmp	r3, #128	; 0x80
 8006560:	d810      	bhi.n	8006584 <UART_SetConfig+0x1e4>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <UART_SetConfig+0x1cc>
 8006566:	2b40      	cmp	r3, #64	; 0x40
 8006568:	d006      	beq.n	8006578 <UART_SetConfig+0x1d8>
 800656a:	e00b      	b.n	8006584 <UART_SetConfig+0x1e4>
 800656c:	2300      	movs	r3, #0
 800656e:	76fb      	strb	r3, [r7, #27]
 8006570:	e063      	b.n	800663a <UART_SetConfig+0x29a>
 8006572:	2302      	movs	r3, #2
 8006574:	76fb      	strb	r3, [r7, #27]
 8006576:	e060      	b.n	800663a <UART_SetConfig+0x29a>
 8006578:	2304      	movs	r3, #4
 800657a:	76fb      	strb	r3, [r7, #27]
 800657c:	e05d      	b.n	800663a <UART_SetConfig+0x29a>
 800657e:	2308      	movs	r3, #8
 8006580:	76fb      	strb	r3, [r7, #27]
 8006582:	e05a      	b.n	800663a <UART_SetConfig+0x29a>
 8006584:	2310      	movs	r3, #16
 8006586:	76fb      	strb	r3, [r7, #27]
 8006588:	e057      	b.n	800663a <UART_SetConfig+0x29a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a47      	ldr	r2, [pc, #284]	; (80066ac <UART_SetConfig+0x30c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d125      	bne.n	80065e0 <UART_SetConfig+0x240>
 8006594:	4b41      	ldr	r3, [pc, #260]	; (800669c <UART_SetConfig+0x2fc>)
 8006596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800659a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065a2:	d017      	beq.n	80065d4 <UART_SetConfig+0x234>
 80065a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065a8:	d817      	bhi.n	80065da <UART_SetConfig+0x23a>
 80065aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ae:	d00b      	beq.n	80065c8 <UART_SetConfig+0x228>
 80065b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065b4:	d811      	bhi.n	80065da <UART_SetConfig+0x23a>
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <UART_SetConfig+0x222>
 80065ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065be:	d006      	beq.n	80065ce <UART_SetConfig+0x22e>
 80065c0:	e00b      	b.n	80065da <UART_SetConfig+0x23a>
 80065c2:	2300      	movs	r3, #0
 80065c4:	76fb      	strb	r3, [r7, #27]
 80065c6:	e038      	b.n	800663a <UART_SetConfig+0x29a>
 80065c8:	2302      	movs	r3, #2
 80065ca:	76fb      	strb	r3, [r7, #27]
 80065cc:	e035      	b.n	800663a <UART_SetConfig+0x29a>
 80065ce:	2304      	movs	r3, #4
 80065d0:	76fb      	strb	r3, [r7, #27]
 80065d2:	e032      	b.n	800663a <UART_SetConfig+0x29a>
 80065d4:	2308      	movs	r3, #8
 80065d6:	76fb      	strb	r3, [r7, #27]
 80065d8:	e02f      	b.n	800663a <UART_SetConfig+0x29a>
 80065da:	2310      	movs	r3, #16
 80065dc:	76fb      	strb	r3, [r7, #27]
 80065de:	e02c      	b.n	800663a <UART_SetConfig+0x29a>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a2b      	ldr	r2, [pc, #172]	; (8006694 <UART_SetConfig+0x2f4>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d125      	bne.n	8006636 <UART_SetConfig+0x296>
 80065ea:	4b2c      	ldr	r3, [pc, #176]	; (800669c <UART_SetConfig+0x2fc>)
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065f8:	d017      	beq.n	800662a <UART_SetConfig+0x28a>
 80065fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065fe:	d817      	bhi.n	8006630 <UART_SetConfig+0x290>
 8006600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006604:	d00b      	beq.n	800661e <UART_SetConfig+0x27e>
 8006606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660a:	d811      	bhi.n	8006630 <UART_SetConfig+0x290>
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <UART_SetConfig+0x278>
 8006610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006614:	d006      	beq.n	8006624 <UART_SetConfig+0x284>
 8006616:	e00b      	b.n	8006630 <UART_SetConfig+0x290>
 8006618:	2300      	movs	r3, #0
 800661a:	76fb      	strb	r3, [r7, #27]
 800661c:	e00d      	b.n	800663a <UART_SetConfig+0x29a>
 800661e:	2302      	movs	r3, #2
 8006620:	76fb      	strb	r3, [r7, #27]
 8006622:	e00a      	b.n	800663a <UART_SetConfig+0x29a>
 8006624:	2304      	movs	r3, #4
 8006626:	76fb      	strb	r3, [r7, #27]
 8006628:	e007      	b.n	800663a <UART_SetConfig+0x29a>
 800662a:	2308      	movs	r3, #8
 800662c:	76fb      	strb	r3, [r7, #27]
 800662e:	e004      	b.n	800663a <UART_SetConfig+0x29a>
 8006630:	2310      	movs	r3, #16
 8006632:	76fb      	strb	r3, [r7, #27]
 8006634:	e001      	b.n	800663a <UART_SetConfig+0x29a>
 8006636:	2310      	movs	r3, #16
 8006638:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a15      	ldr	r2, [pc, #84]	; (8006694 <UART_SetConfig+0x2f4>)
 8006640:	4293      	cmp	r3, r2
 8006642:	f040 809f 	bne.w	8006784 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006646:	7efb      	ldrb	r3, [r7, #27]
 8006648:	2b08      	cmp	r3, #8
 800664a:	d837      	bhi.n	80066bc <UART_SetConfig+0x31c>
 800664c:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <UART_SetConfig+0x2b4>)
 800664e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006652:	bf00      	nop
 8006654:	08006679 	.word	0x08006679
 8006658:	080066bd 	.word	0x080066bd
 800665c:	08006681 	.word	0x08006681
 8006660:	080066bd 	.word	0x080066bd
 8006664:	08006687 	.word	0x08006687
 8006668:	080066bd 	.word	0x080066bd
 800666c:	080066bd 	.word	0x080066bd
 8006670:	080066bd 	.word	0x080066bd
 8006674:	080066b5 	.word	0x080066b5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006678:	f7fe fad0 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 800667c:	6178      	str	r0, [r7, #20]
        break;
 800667e:	e022      	b.n	80066c6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006680:	4b0b      	ldr	r3, [pc, #44]	; (80066b0 <UART_SetConfig+0x310>)
 8006682:	617b      	str	r3, [r7, #20]
        break;
 8006684:	e01f      	b.n	80066c6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006686:	f7fe fa5b 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 800668a:	6178      	str	r0, [r7, #20]
        break;
 800668c:	e01b      	b.n	80066c6 <UART_SetConfig+0x326>
 800668e:	bf00      	nop
 8006690:	cfff69f3 	.word	0xcfff69f3
 8006694:	40008000 	.word	0x40008000
 8006698:	40013800 	.word	0x40013800
 800669c:	40021000 	.word	0x40021000
 80066a0:	40004400 	.word	0x40004400
 80066a4:	40004800 	.word	0x40004800
 80066a8:	40004c00 	.word	0x40004c00
 80066ac:	40005000 	.word	0x40005000
 80066b0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b8:	617b      	str	r3, [r7, #20]
        break;
 80066ba:	e004      	b.n	80066c6 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	76bb      	strb	r3, [r7, #26]
        break;
 80066c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 811b 	beq.w	8006904 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	4a96      	ldr	r2, [pc, #600]	; (800692c <UART_SetConfig+0x58c>)
 80066d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066d8:	461a      	mov	r2, r3
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80066e0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	4613      	mov	r3, r2
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	4413      	add	r3, r2
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d305      	bcc.n	80066fe <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d902      	bls.n	8006704 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	76bb      	strb	r3, [r7, #26]
 8006702:	e0ff      	b.n	8006904 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	4618      	mov	r0, r3
 8006708:	f04f 0100 	mov.w	r1, #0
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	4a86      	ldr	r2, [pc, #536]	; (800692c <UART_SetConfig+0x58c>)
 8006712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006716:	b29a      	uxth	r2, r3
 8006718:	f04f 0300 	mov.w	r3, #0
 800671c:	f7fa f96a 	bl	80009f4 <__aeabi_uldivmod>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4610      	mov	r0, r2
 8006726:	4619      	mov	r1, r3
 8006728:	f04f 0200 	mov.w	r2, #0
 800672c:	f04f 0300 	mov.w	r3, #0
 8006730:	020b      	lsls	r3, r1, #8
 8006732:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006736:	0202      	lsls	r2, r0, #8
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	6849      	ldr	r1, [r1, #4]
 800673c:	0849      	lsrs	r1, r1, #1
 800673e:	4608      	mov	r0, r1
 8006740:	f04f 0100 	mov.w	r1, #0
 8006744:	1814      	adds	r4, r2, r0
 8006746:	eb43 0501 	adc.w	r5, r3, r1
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	461a      	mov	r2, r3
 8006750:	f04f 0300 	mov.w	r3, #0
 8006754:	4620      	mov	r0, r4
 8006756:	4629      	mov	r1, r5
 8006758:	f7fa f94c 	bl	80009f4 <__aeabi_uldivmod>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4613      	mov	r3, r2
 8006762:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800676a:	d308      	bcc.n	800677e <UART_SetConfig+0x3de>
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006772:	d204      	bcs.n	800677e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	60da      	str	r2, [r3, #12]
 800677c:	e0c2      	b.n	8006904 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	76bb      	strb	r3, [r7, #26]
 8006782:	e0bf      	b.n	8006904 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800678c:	d165      	bne.n	800685a <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800678e:	7efb      	ldrb	r3, [r7, #27]
 8006790:	2b08      	cmp	r3, #8
 8006792:	d828      	bhi.n	80067e6 <UART_SetConfig+0x446>
 8006794:	a201      	add	r2, pc, #4	; (adr r2, 800679c <UART_SetConfig+0x3fc>)
 8006796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679a:	bf00      	nop
 800679c:	080067c1 	.word	0x080067c1
 80067a0:	080067c9 	.word	0x080067c9
 80067a4:	080067d1 	.word	0x080067d1
 80067a8:	080067e7 	.word	0x080067e7
 80067ac:	080067d7 	.word	0x080067d7
 80067b0:	080067e7 	.word	0x080067e7
 80067b4:	080067e7 	.word	0x080067e7
 80067b8:	080067e7 	.word	0x080067e7
 80067bc:	080067df 	.word	0x080067df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067c0:	f7fe fa2c 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 80067c4:	6178      	str	r0, [r7, #20]
        break;
 80067c6:	e013      	b.n	80067f0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067c8:	f7fe fa3e 	bl	8004c48 <HAL_RCC_GetPCLK2Freq>
 80067cc:	6178      	str	r0, [r7, #20]
        break;
 80067ce:	e00f      	b.n	80067f0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067d0:	4b57      	ldr	r3, [pc, #348]	; (8006930 <UART_SetConfig+0x590>)
 80067d2:	617b      	str	r3, [r7, #20]
        break;
 80067d4:	e00c      	b.n	80067f0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067d6:	f7fe f9b3 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 80067da:	6178      	str	r0, [r7, #20]
        break;
 80067dc:	e008      	b.n	80067f0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067e2:	617b      	str	r3, [r7, #20]
        break;
 80067e4:	e004      	b.n	80067f0 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	76bb      	strb	r3, [r7, #26]
        break;
 80067ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 8086 	beq.w	8006904 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	4a4b      	ldr	r2, [pc, #300]	; (800692c <UART_SetConfig+0x58c>)
 80067fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006802:	461a      	mov	r2, r3
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	fbb3 f3f2 	udiv	r3, r3, r2
 800680a:	005a      	lsls	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	085b      	lsrs	r3, r3, #1
 8006812:	441a      	add	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	fbb2 f3f3 	udiv	r3, r2, r3
 800681c:	b29b      	uxth	r3, r3
 800681e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	2b0f      	cmp	r3, #15
 8006824:	d916      	bls.n	8006854 <UART_SetConfig+0x4b4>
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800682c:	d212      	bcs.n	8006854 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	b29b      	uxth	r3, r3
 8006832:	f023 030f 	bic.w	r3, r3, #15
 8006836:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	085b      	lsrs	r3, r3, #1
 800683c:	b29b      	uxth	r3, r3
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	b29a      	uxth	r2, r3
 8006844:	89fb      	ldrh	r3, [r7, #14]
 8006846:	4313      	orrs	r3, r2
 8006848:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	89fa      	ldrh	r2, [r7, #14]
 8006850:	60da      	str	r2, [r3, #12]
 8006852:	e057      	b.n	8006904 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	76bb      	strb	r3, [r7, #26]
 8006858:	e054      	b.n	8006904 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800685a:	7efb      	ldrb	r3, [r7, #27]
 800685c:	2b08      	cmp	r3, #8
 800685e:	d828      	bhi.n	80068b2 <UART_SetConfig+0x512>
 8006860:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <UART_SetConfig+0x4c8>)
 8006862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006866:	bf00      	nop
 8006868:	0800688d 	.word	0x0800688d
 800686c:	08006895 	.word	0x08006895
 8006870:	0800689d 	.word	0x0800689d
 8006874:	080068b3 	.word	0x080068b3
 8006878:	080068a3 	.word	0x080068a3
 800687c:	080068b3 	.word	0x080068b3
 8006880:	080068b3 	.word	0x080068b3
 8006884:	080068b3 	.word	0x080068b3
 8006888:	080068ab 	.word	0x080068ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800688c:	f7fe f9c6 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8006890:	6178      	str	r0, [r7, #20]
        break;
 8006892:	e013      	b.n	80068bc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006894:	f7fe f9d8 	bl	8004c48 <HAL_RCC_GetPCLK2Freq>
 8006898:	6178      	str	r0, [r7, #20]
        break;
 800689a:	e00f      	b.n	80068bc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800689c:	4b24      	ldr	r3, [pc, #144]	; (8006930 <UART_SetConfig+0x590>)
 800689e:	617b      	str	r3, [r7, #20]
        break;
 80068a0:	e00c      	b.n	80068bc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068a2:	f7fe f94d 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 80068a6:	6178      	str	r0, [r7, #20]
        break;
 80068a8:	e008      	b.n	80068bc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ae:	617b      	str	r3, [r7, #20]
        break;
 80068b0:	e004      	b.n	80068bc <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	76bb      	strb	r3, [r7, #26]
        break;
 80068ba:	bf00      	nop
    }

    if (pclk != 0U)
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d020      	beq.n	8006904 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	4a19      	ldr	r2, [pc, #100]	; (800692c <UART_SetConfig+0x58c>)
 80068c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068cc:	461a      	mov	r2, r3
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	085b      	lsrs	r3, r3, #1
 80068da:	441a      	add	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	2b0f      	cmp	r3, #15
 80068ec:	d908      	bls.n	8006900 <UART_SetConfig+0x560>
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f4:	d204      	bcs.n	8006900 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	60da      	str	r2, [r3, #12]
 80068fe:	e001      	b.n	8006904 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006920:	7ebb      	ldrb	r3, [r7, #26]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3720      	adds	r7, #32
 8006926:	46bd      	mov	sp, r7
 8006928:	bdb0      	pop	{r4, r5, r7, pc}
 800692a:	bf00      	nop
 800692c:	080077a0 	.word	0x080077a0
 8006930:	00f42400 	.word	0x00f42400

08006934 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00a      	beq.n	800695e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00a      	beq.n	8006980 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	f003 0310 	and.w	r3, r3, #16
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01a      	beq.n	8006a4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a32:	d10a      	bne.n	8006a4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	605a      	str	r2, [r3, #4]
  }
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a88:	f7fb f9cc 	bl	8001e24 <HAL_GetTick>
 8006a8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0308 	and.w	r3, r3, #8
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d10e      	bne.n	8006aba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f82f 	bl	8006b0e <UART_WaitOnFlagUntilTimeout>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e025      	b.n	8006b06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	d10e      	bne.n	8006ae6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f819 	bl	8006b0e <UART_WaitOnFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e00f      	b.n	8006b06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	603b      	str	r3, [r7, #0]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b1e:	e062      	b.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b26:	d05e      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b28:	f7fb f97c 	bl	8001e24 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d302      	bcc.n	8006b3e <UART_WaitOnFlagUntilTimeout+0x30>
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d11d      	bne.n	8006b7a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0201 	bic.w	r2, r2, #1
 8006b5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e045      	b.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d02e      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b96:	d126      	bne.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ba0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bb0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0201 	bic.w	r2, r2, #1
 8006bc0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e00f      	b.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	bf0c      	ite	eq
 8006bf6:	2301      	moveq	r3, #1
 8006bf8:	2300      	movne	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d08d      	beq.n	8006b20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	88fa      	ldrh	r2, [r7, #6]
 8006c28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	88fa      	ldrh	r2, [r7, #6]
 8006c30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c42:	d10e      	bne.n	8006c62 <UART_Start_Receive_IT+0x52>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d105      	bne.n	8006c58 <UART_Start_Receive_IT+0x48>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006c52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006c56:	e02d      	b.n	8006cb4 <UART_Start_Receive_IT+0xa4>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	22ff      	movs	r2, #255	; 0xff
 8006c5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006c60:	e028      	b.n	8006cb4 <UART_Start_Receive_IT+0xa4>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10d      	bne.n	8006c86 <UART_Start_Receive_IT+0x76>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d104      	bne.n	8006c7c <UART_Start_Receive_IT+0x6c>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	22ff      	movs	r2, #255	; 0xff
 8006c76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006c7a:	e01b      	b.n	8006cb4 <UART_Start_Receive_IT+0xa4>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	227f      	movs	r2, #127	; 0x7f
 8006c80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006c84:	e016      	b.n	8006cb4 <UART_Start_Receive_IT+0xa4>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c8e:	d10d      	bne.n	8006cac <UART_Start_Receive_IT+0x9c>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d104      	bne.n	8006ca2 <UART_Start_Receive_IT+0x92>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	227f      	movs	r2, #127	; 0x7f
 8006c9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ca0:	e008      	b.n	8006cb4 <UART_Start_Receive_IT+0xa4>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	223f      	movs	r2, #63	; 0x3f
 8006ca6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006caa:	e003      	b.n	8006cb4 <UART_Start_Receive_IT+0xa4>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2222      	movs	r2, #34	; 0x22
 8006cc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689a      	ldr	r2, [r3, #8]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0201 	orr.w	r2, r2, #1
 8006cd2:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cdc:	d12a      	bne.n	8006d34 <UART_Start_Receive_IT+0x124>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ce4:	88fa      	ldrh	r2, [r7, #6]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d324      	bcc.n	8006d34 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf2:	d107      	bne.n	8006d04 <UART_Start_Receive_IT+0xf4>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d103      	bne.n	8006d04 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4a1f      	ldr	r2, [pc, #124]	; (8006d7c <UART_Start_Receive_IT+0x16c>)
 8006d00:	671a      	str	r2, [r3, #112]	; 0x70
 8006d02:	e002      	b.n	8006d0a <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4a1e      	ldr	r2, [pc, #120]	; (8006d80 <UART_Start_Receive_IT+0x170>)
 8006d08:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d20:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006d30:	609a      	str	r2, [r3, #8]
 8006d32:	e01b      	b.n	8006d6c <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3c:	d107      	bne.n	8006d4e <UART_Start_Receive_IT+0x13e>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d103      	bne.n	8006d4e <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4a0e      	ldr	r2, [pc, #56]	; (8006d84 <UART_Start_Receive_IT+0x174>)
 8006d4a:	671a      	str	r2, [r3, #112]	; 0x70
 8006d4c:	e002      	b.n	8006d54 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4a0d      	ldr	r2, [pc, #52]	; (8006d88 <UART_Start_Receive_IT+0x178>)
 8006d52:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006d6a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	08007205 	.word	0x08007205
 8006d80:	08007001 	.word	0x08007001
 8006d84:	08006f29 	.word	0x08006f29
 8006d88:	08006e51 	.word	0x08006e51

08006d8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006da2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d107      	bne.n	8006dd0 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0210 	bic.w	r2, r2, #16
 8006dce:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f7ff fab0 	bl	8006374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e32:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2220      	movs	r2, #32
 8006e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff fa8c 	bl	8006360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e48:	bf00      	nop
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e5e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e66:	2b22      	cmp	r3, #34	; 0x22
 8006e68:	d152      	bne.n	8006f10 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e72:	89bb      	ldrh	r3, [r7, #12]
 8006e74:	b2d9      	uxtb	r1, r3
 8006e76:	89fb      	ldrh	r3, [r7, #14]
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7e:	400a      	ands	r2, r1
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d139      	bne.n	8006f20 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006eba:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0201 	bic.w	r2, r2, #1
 8006eca:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d10f      	bne.n	8006f02 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0210 	bic.w	r2, r2, #16
 8006ef0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff fa44 	bl	8006388 <HAL_UARTEx_RxEventCallback>
 8006f00:	e002      	b.n	8006f08 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7fa f8c4 	bl	8001090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f0e:	e007      	b.n	8006f20 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699a      	ldr	r2, [r3, #24]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0208 	orr.w	r2, r2, #8
 8006f1e:	619a      	str	r2, [r3, #24]
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f36:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3e:	2b22      	cmp	r3, #34	; 0x22
 8006f40:	d152      	bne.n	8006fe8 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f4e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f50:	89ba      	ldrh	r2, [r7, #12]
 8006f52:	89fb      	ldrh	r3, [r7, #14]
 8006f54:	4013      	ands	r3, r2
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f60:	1c9a      	adds	r2, r3, #2
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d139      	bne.n	8006ff8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f92:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0201 	bic.w	r2, r2, #1
 8006fa2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d10f      	bne.n	8006fda <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0210 	bic.w	r2, r2, #16
 8006fc8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff f9d8 	bl	8006388 <HAL_UARTEx_RxEventCallback>
 8006fd8:	e002      	b.n	8006fe0 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fa f858 	bl	8001090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fe6:	e007      	b.n	8006ff8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0208 	orr.w	r2, r2, #8
 8006ff6:	619a      	str	r2, [r3, #24]
}
 8006ff8:	bf00      	nop
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800700e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800702e:	2b22      	cmp	r3, #34	; 0x22
 8007030:	f040 80da 	bne.w	80071e8 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800703a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800703c:	e0aa      	b.n	8007194 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007046:	89bb      	ldrh	r3, [r7, #12]
 8007048:	b2d9      	uxtb	r1, r3
 800704a:	8b7b      	ldrh	r3, [r7, #26]
 800704c:	b2da      	uxtb	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007052:	400a      	ands	r2, r1
 8007054:	b2d2      	uxtb	r2, r2
 8007056:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007068:	b29b      	uxth	r3, r3
 800706a:	3b01      	subs	r3, #1
 800706c:	b29a      	uxth	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	2b00      	cmp	r3, #0
 8007084:	d04d      	beq.n	8007122 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	d010      	beq.n	80070b2 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00b      	beq.n	80070b2 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2201      	movs	r2, #1
 80070a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070a8:	f043 0201 	orr.w	r2, r3, #1
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d010      	beq.n	80070de <UART_RxISR_8BIT_FIFOEN+0xde>
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00b      	beq.n	80070de <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2202      	movs	r2, #2
 80070cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070d4:	f043 0204 	orr.w	r2, r3, #4
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d010      	beq.n	800710a <UART_RxISR_8BIT_FIFOEN+0x10a>
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00b      	beq.n	800710a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2204      	movs	r2, #4
 80070f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007100:	f043 0202 	orr.w	r2, r3, #2
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007110:	2b00      	cmp	r3, #0
 8007112:	d006      	beq.n	8007122 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff f92d 	bl	8006374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007128:	b29b      	uxth	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d132      	bne.n	8007194 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800713c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6812      	ldr	r2, [r2, #0]
 8007148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800714c:	f023 0301 	bic.w	r3, r3, #1
 8007150:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2220      	movs	r2, #32
 8007156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007164:	2b01      	cmp	r3, #1
 8007166:	d10f      	bne.n	8007188 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0210 	bic.w	r2, r2, #16
 8007176:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff f901 	bl	8006388 <HAL_UARTEx_RxEventCallback>
 8007186:	e002      	b.n	800718e <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7f9 ff81 	bl	8001090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007194:	89fb      	ldrh	r3, [r7, #14]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f47f af4c 	bne.w	800703e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071ac:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80071ae:	897b      	ldrh	r3, [r7, #10]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d021      	beq.n	80071f8 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80071ba:	897a      	ldrh	r2, [r7, #10]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d21b      	bcs.n	80071f8 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80071ce:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a0b      	ldr	r2, [pc, #44]	; (8007200 <UART_RxISR_8BIT_FIFOEN+0x200>)
 80071d4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f042 0220 	orr.w	r2, r2, #32
 80071e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071e6:	e007      	b.n	80071f8 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699a      	ldr	r2, [r3, #24]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0208 	orr.w	r2, r2, #8
 80071f6:	619a      	str	r2, [r3, #24]
}
 80071f8:	bf00      	nop
 80071fa:	3720      	adds	r7, #32
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	08006e51 	.word	0x08006e51

08007204 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08a      	sub	sp, #40	; 0x28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007212:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007232:	2b22      	cmp	r3, #34	; 0x22
 8007234:	f040 80da 	bne.w	80073ec <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800723e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007240:	e0aa      	b.n	8007398 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8007250:	8aba      	ldrh	r2, [r7, #20]
 8007252:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007254:	4013      	ands	r3, r2
 8007256:	b29a      	uxth	r2, r3
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007260:	1c9a      	adds	r2, r3, #2
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800726c:	b29b      	uxth	r3, r3
 800726e:	3b01      	subs	r3, #1
 8007270:	b29a      	uxth	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	2b00      	cmp	r3, #0
 8007288:	d04d      	beq.n	8007326 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b00      	cmp	r3, #0
 8007292:	d010      	beq.n	80072b6 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00b      	beq.n	80072b6 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2201      	movs	r2, #1
 80072a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ac:	f043 0201 	orr.w	r2, r3, #1
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d010      	beq.n	80072e2 <UART_RxISR_16BIT_FIFOEN+0xde>
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00b      	beq.n	80072e2 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2202      	movs	r2, #2
 80072d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072d8:	f043 0204 	orr.w	r2, r3, #4
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d010      	beq.n	800730e <UART_RxISR_16BIT_FIFOEN+0x10a>
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00b      	beq.n	800730e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2204      	movs	r2, #4
 80072fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007304:	f043 0202 	orr.w	r2, r3, #2
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007314:	2b00      	cmp	r3, #0
 8007316:	d006      	beq.n	8007326 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7ff f82b 	bl	8006374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800732c:	b29b      	uxth	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d132      	bne.n	8007398 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007340:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	6812      	ldr	r2, [r2, #0]
 800734c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007350:	f023 0301 	bic.w	r3, r3, #1
 8007354:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2220      	movs	r2, #32
 800735a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007368:	2b01      	cmp	r3, #1
 800736a:	d10f      	bne.n	800738c <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0210 	bic.w	r2, r2, #16
 800737a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7fe ffff 	bl	8006388 <HAL_UARTEx_RxEventCallback>
 800738a:	e002      	b.n	8007392 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7f9 fe7f 	bl	8001090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007398:	8afb      	ldrh	r3, [r7, #22]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d005      	beq.n	80073aa <UART_RxISR_16BIT_FIFOEN+0x1a6>
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f47f af4c 	bne.w	8007242 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073b0:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80073b2:	89fb      	ldrh	r3, [r7, #14]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d021      	beq.n	80073fc <UART_RxISR_16BIT_FIFOEN+0x1f8>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073be:	89fa      	ldrh	r2, [r7, #14]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d21b      	bcs.n	80073fc <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80073d2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a0b      	ldr	r2, [pc, #44]	; (8007404 <UART_RxISR_16BIT_FIFOEN+0x200>)
 80073d8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f042 0220 	orr.w	r2, r2, #32
 80073e8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073ea:	e007      	b.n	80073fc <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	699a      	ldr	r2, [r3, #24]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0208 	orr.w	r2, r2, #8
 80073fa:	619a      	str	r2, [r3, #24]
}
 80073fc:	bf00      	nop
 80073fe:	3728      	adds	r7, #40	; 0x28
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	08006f29 	.word	0x08006f29

08007408 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007452:	2b01      	cmp	r3, #1
 8007454:	d101      	bne.n	800745a <HAL_UARTEx_DisableFifoMode+0x16>
 8007456:	2302      	movs	r3, #2
 8007458:	e027      	b.n	80074aa <HAL_UARTEx_DisableFifoMode+0x66>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2224      	movs	r2, #36	; 0x24
 8007466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 0201 	bic.w	r2, r2, #1
 8007480:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007488:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b084      	sub	sp, #16
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d101      	bne.n	80074ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074ca:	2302      	movs	r3, #2
 80074cc:	e02d      	b.n	800752a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2224      	movs	r2, #36	; 0x24
 80074da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f022 0201 	bic.w	r2, r2, #1
 80074f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f850 	bl	80075b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2220      	movs	r2, #32
 800751c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007542:	2b01      	cmp	r3, #1
 8007544:	d101      	bne.n	800754a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007546:	2302      	movs	r3, #2
 8007548:	e02d      	b.n	80075a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2224      	movs	r2, #36	; 0x24
 8007556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0201 	bic.w	r2, r2, #1
 8007570:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f812 	bl	80075b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2220      	movs	r2, #32
 8007598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
	...

080075b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d108      	bne.n	80075d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075d0:	e031      	b.n	8007636 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075d2:	2308      	movs	r3, #8
 80075d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075d6:	2308      	movs	r3, #8
 80075d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	0e5b      	lsrs	r3, r3, #25
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	f003 0307 	and.w	r3, r3, #7
 80075e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	0f5b      	lsrs	r3, r3, #29
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	7b3a      	ldrb	r2, [r7, #12]
 80075fe:	4911      	ldr	r1, [pc, #68]	; (8007644 <UARTEx_SetNbDataToProcess+0x94>)
 8007600:	5c8a      	ldrb	r2, [r1, r2]
 8007602:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007606:	7b3a      	ldrb	r2, [r7, #12]
 8007608:	490f      	ldr	r1, [pc, #60]	; (8007648 <UARTEx_SetNbDataToProcess+0x98>)
 800760a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800760c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007610:	b29a      	uxth	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	7b7a      	ldrb	r2, [r7, #13]
 800761c:	4909      	ldr	r1, [pc, #36]	; (8007644 <UARTEx_SetNbDataToProcess+0x94>)
 800761e:	5c8a      	ldrb	r2, [r1, r2]
 8007620:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007624:	7b7a      	ldrb	r2, [r7, #13]
 8007626:	4908      	ldr	r1, [pc, #32]	; (8007648 <UARTEx_SetNbDataToProcess+0x98>)
 8007628:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800762a:	fb93 f3f2 	sdiv	r3, r3, r2
 800762e:	b29a      	uxth	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007636:	bf00      	nop
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	080077b8 	.word	0x080077b8
 8007648:	080077c0 	.word	0x080077c0

0800764c <__libc_init_array>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	4d0d      	ldr	r5, [pc, #52]	; (8007684 <__libc_init_array+0x38>)
 8007650:	4c0d      	ldr	r4, [pc, #52]	; (8007688 <__libc_init_array+0x3c>)
 8007652:	1b64      	subs	r4, r4, r5
 8007654:	10a4      	asrs	r4, r4, #2
 8007656:	2600      	movs	r6, #0
 8007658:	42a6      	cmp	r6, r4
 800765a:	d109      	bne.n	8007670 <__libc_init_array+0x24>
 800765c:	4d0b      	ldr	r5, [pc, #44]	; (800768c <__libc_init_array+0x40>)
 800765e:	4c0c      	ldr	r4, [pc, #48]	; (8007690 <__libc_init_array+0x44>)
 8007660:	f000 f820 	bl	80076a4 <_init>
 8007664:	1b64      	subs	r4, r4, r5
 8007666:	10a4      	asrs	r4, r4, #2
 8007668:	2600      	movs	r6, #0
 800766a:	42a6      	cmp	r6, r4
 800766c:	d105      	bne.n	800767a <__libc_init_array+0x2e>
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	f855 3b04 	ldr.w	r3, [r5], #4
 8007674:	4798      	blx	r3
 8007676:	3601      	adds	r6, #1
 8007678:	e7ee      	b.n	8007658 <__libc_init_array+0xc>
 800767a:	f855 3b04 	ldr.w	r3, [r5], #4
 800767e:	4798      	blx	r3
 8007680:	3601      	adds	r6, #1
 8007682:	e7f2      	b.n	800766a <__libc_init_array+0x1e>
 8007684:	080077d0 	.word	0x080077d0
 8007688:	080077d0 	.word	0x080077d0
 800768c:	080077d0 	.word	0x080077d0
 8007690:	080077d4 	.word	0x080077d4

08007694 <memset>:
 8007694:	4402      	add	r2, r0
 8007696:	4603      	mov	r3, r0
 8007698:	4293      	cmp	r3, r2
 800769a:	d100      	bne.n	800769e <memset+0xa>
 800769c:	4770      	bx	lr
 800769e:	f803 1b01 	strb.w	r1, [r3], #1
 80076a2:	e7f9      	b.n	8007698 <memset+0x4>

080076a4 <_init>:
 80076a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a6:	bf00      	nop
 80076a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076aa:	bc08      	pop	{r3}
 80076ac:	469e      	mov	lr, r3
 80076ae:	4770      	bx	lr

080076b0 <_fini>:
 80076b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b2:	bf00      	nop
 80076b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b6:	bc08      	pop	{r3}
 80076b8:	469e      	mov	lr, r3
 80076ba:	4770      	bx	lr
