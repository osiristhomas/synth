
Synth G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08007598  08007598  00017598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076a4  080076a4  00020410  2**0
                  CONTENTS
  4 .ARM          00000008  080076a4  080076a4  000176a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076ac  080076ac  00020410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076ac  080076ac  000176ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076b0  080076b0  000176b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  080076b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000410  08007ac4  00020410  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  08007ac4  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019669  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb7  00000000  00000000  00039aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  0003c660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  0003dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028807  00000000  00000000  0003f178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016dde  00000000  00000000  0006797f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001127d6  00000000  00000000  0007e75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00190f33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c8  00000000  00000000  00190f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000410 	.word	0x20000410
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007580 	.word	0x08007580

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000414 	.word	0x20000414
 8000214:	08007580 	.word	0x08007580

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b96e 	b.w	8000ce8 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	468c      	mov	ip, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f040 8083 	bne.w	8000b3a <__udivmoddi4+0x116>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4617      	mov	r7, r2
 8000a38:	d947      	bls.n	8000aca <__udivmoddi4+0xa6>
 8000a3a:	fab2 f282 	clz	r2, r2
 8000a3e:	b142      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	f1c2 0020 	rsb	r0, r2, #32
 8000a44:	fa24 f000 	lsr.w	r0, r4, r0
 8000a48:	4091      	lsls	r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a50:	4094      	lsls	r4, r2
 8000a52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a56:	0c23      	lsrs	r3, r4, #16
 8000a58:	fbbc f6f8 	udiv	r6, ip, r8
 8000a5c:	fa1f fe87 	uxth.w	lr, r7
 8000a60:	fb08 c116 	mls	r1, r8, r6, ip
 8000a64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a68:	fb06 f10e 	mul.w	r1, r6, lr
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	d909      	bls.n	8000a84 <__udivmoddi4+0x60>
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a76:	f080 8119 	bcs.w	8000cac <__udivmoddi4+0x288>
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f240 8116 	bls.w	8000cac <__udivmoddi4+0x288>
 8000a80:	3e02      	subs	r6, #2
 8000a82:	443b      	add	r3, r7
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	45a6      	cmp	lr, r4
 8000a9a:	d909      	bls.n	8000ab0 <__udivmoddi4+0x8c>
 8000a9c:	193c      	adds	r4, r7, r4
 8000a9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa2:	f080 8105 	bcs.w	8000cb0 <__udivmoddi4+0x28c>
 8000aa6:	45a6      	cmp	lr, r4
 8000aa8:	f240 8102 	bls.w	8000cb0 <__udivmoddi4+0x28c>
 8000aac:	3802      	subs	r0, #2
 8000aae:	443c      	add	r4, r7
 8000ab0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ab4:	eba4 040e 	sub.w	r4, r4, lr
 8000ab8:	2600      	movs	r6, #0
 8000aba:	b11d      	cbz	r5, 8000ac4 <__udivmoddi4+0xa0>
 8000abc:	40d4      	lsrs	r4, r2
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	b902      	cbnz	r2, 8000ace <__udivmoddi4+0xaa>
 8000acc:	deff      	udf	#255	; 0xff
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	d150      	bne.n	8000b78 <__udivmoddi4+0x154>
 8000ad6:	1bcb      	subs	r3, r1, r7
 8000ad8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000adc:	fa1f f887 	uxth.w	r8, r7
 8000ae0:	2601      	movs	r6, #1
 8000ae2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ae6:	0c21      	lsrs	r1, r4, #16
 8000ae8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af0:	fb08 f30c 	mul.w	r3, r8, ip
 8000af4:	428b      	cmp	r3, r1
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0xe4>
 8000af8:	1879      	adds	r1, r7, r1
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0xe2>
 8000b00:	428b      	cmp	r3, r1
 8000b02:	f200 80e9 	bhi.w	8000cd8 <__udivmoddi4+0x2b4>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1ac9      	subs	r1, r1, r3
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x10c>
 8000b20:	193c      	adds	r4, r7, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x10a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80d9 	bhi.w	8000ce0 <__udivmoddi4+0x2bc>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e7bf      	b.n	8000aba <__udivmoddi4+0x96>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x12e>
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	f000 80b1 	beq.w	8000ca6 <__udivmoddi4+0x282>
 8000b44:	2600      	movs	r6, #0
 8000b46:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	fab3 f683 	clz	r6, r3
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d14a      	bne.n	8000bf0 <__udivmoddi4+0x1cc>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0x140>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 80b8 	bhi.w	8000cd4 <__udivmoddi4+0x2b0>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb61 0103 	sbc.w	r1, r1, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	468c      	mov	ip, r1
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0a8      	beq.n	8000ac4 <__udivmoddi4+0xa0>
 8000b72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b76:	e7a5      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b80:	4097      	lsls	r7, r2
 8000b82:	fa01 f002 	lsl.w	r0, r1, r2
 8000b86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b8a:	40d9      	lsrs	r1, r3
 8000b8c:	4330      	orrs	r0, r6
 8000b8e:	0c03      	lsrs	r3, r0, #16
 8000b90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb06 f108 	mul.w	r1, r6, r8
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	fa04 f402 	lsl.w	r4, r4, r2
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x19c>
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bb2:	f080 808d 	bcs.w	8000cd0 <__udivmoddi4+0x2ac>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 808a 	bls.w	8000cd0 <__udivmoddi4+0x2ac>
 8000bbc:	3e02      	subs	r6, #2
 8000bbe:	443b      	add	r3, r7
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b281      	uxth	r1, r0
 8000bc4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bd0:	fb00 f308 	mul.w	r3, r0, r8
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x1c4>
 8000bd8:	1879      	adds	r1, r7, r1
 8000bda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bde:	d273      	bcs.n	8000cc8 <__udivmoddi4+0x2a4>
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d971      	bls.n	8000cc8 <__udivmoddi4+0x2a4>
 8000be4:	3802      	subs	r0, #2
 8000be6:	4439      	add	r1, r7
 8000be8:	1acb      	subs	r3, r1, r3
 8000bea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bee:	e778      	b.n	8000ae2 <__udivmoddi4+0xbe>
 8000bf0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bf4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bf8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c02:	fa01 f306 	lsl.w	r3, r1, r6
 8000c06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c0e:	431f      	orrs	r7, r3
 8000c10:	0c3b      	lsrs	r3, r7, #16
 8000c12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c16:	fa1f f884 	uxth.w	r8, r4
 8000c1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c22:	fb09 fa08 	mul.w	sl, r9, r8
 8000c26:	458a      	cmp	sl, r1
 8000c28:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x220>
 8000c32:	1861      	adds	r1, r4, r1
 8000c34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c38:	d248      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c3a:	458a      	cmp	sl, r1
 8000c3c:	d946      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000c3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c42:	4421      	add	r1, r4
 8000c44:	eba1 010a 	sub.w	r1, r1, sl
 8000c48:	b2bf      	uxth	r7, r7
 8000c4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c56:	fb00 f808 	mul.w	r8, r0, r8
 8000c5a:	45b8      	cmp	r8, r7
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x24a>
 8000c5e:	19e7      	adds	r7, r4, r7
 8000c60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c64:	d22e      	bcs.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c66:	45b8      	cmp	r8, r7
 8000c68:	d92c      	bls.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4427      	add	r7, r4
 8000c6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c72:	eba7 0708 	sub.w	r7, r7, r8
 8000c76:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7a:	454f      	cmp	r7, r9
 8000c7c:	46c6      	mov	lr, r8
 8000c7e:	4649      	mov	r1, r9
 8000c80:	d31a      	bcc.n	8000cb8 <__udivmoddi4+0x294>
 8000c82:	d017      	beq.n	8000cb4 <__udivmoddi4+0x290>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x27a>
 8000c86:	ebb3 020e 	subs.w	r2, r3, lr
 8000c8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c92:	40f2      	lsrs	r2, r6
 8000c94:	ea4c 0202 	orr.w	r2, ip, r2
 8000c98:	40f7      	lsrs	r7, r6
 8000c9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	462e      	mov	r6, r5
 8000ca8:	4628      	mov	r0, r5
 8000caa:	e70b      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000cac:	4606      	mov	r6, r0
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0x60>
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	e6fd      	b.n	8000ab0 <__udivmoddi4+0x8c>
 8000cb4:	4543      	cmp	r3, r8
 8000cb6:	d2e5      	bcs.n	8000c84 <__udivmoddi4+0x260>
 8000cb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e7df      	b.n	8000c84 <__udivmoddi4+0x260>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e7d2      	b.n	8000c6e <__udivmoddi4+0x24a>
 8000cc8:	4660      	mov	r0, ip
 8000cca:	e78d      	b.n	8000be8 <__udivmoddi4+0x1c4>
 8000ccc:	4681      	mov	r9, r0
 8000cce:	e7b9      	b.n	8000c44 <__udivmoddi4+0x220>
 8000cd0:	4666      	mov	r6, ip
 8000cd2:	e775      	b.n	8000bc0 <__udivmoddi4+0x19c>
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	e74a      	b.n	8000b6e <__udivmoddi4+0x14a>
 8000cd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cdc:	4439      	add	r1, r7
 8000cde:	e713      	b.n	8000b08 <__udivmoddi4+0xe4>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	e724      	b.n	8000b30 <__udivmoddi4+0x10c>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_idiv0>:
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <main>:
uint8_t i = 0;
uint16_t AD_RES = 0;


int main(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf0:	f000 ff17 	bl	8001b22 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8000cf4:	f000 fa46 	bl	8001184 <SystemClock_Config>

  	/* Initialize all configured peripherals */
  	MX_GPIO_Init();
 8000cf8:	f000 fca8 	bl	800164c <MX_GPIO_Init>
    MX_DAC1_Init();
 8000cfc:	f000 fb12 	bl	8001324 <MX_DAC1_Init>
    MX_USART1_UART_Init();
 8000d00:	f000 fc58 	bl	80015b4 <MX_USART1_UART_Init>
    MX_TIM6_Init();
 8000d04:	f000 fb96 	bl	8001434 <MX_TIM6_Init>
    MX_TIM7_Init();
 8000d08:	f000 fbca 	bl	80014a0 <MX_TIM7_Init>
    MX_TIM8_Init();
 8000d0c:	f000 fbfe 	bl	800150c <MX_TIM8_Init>
    MX_ADC2_Init();
 8000d10:	f000 faa0 	bl	8001254 <MX_ADC2_Init>
    MX_TIM2_Init();
 8000d14:	f000 fb40 	bl	8001398 <MX_TIM2_Init>

  // Calibrate ADC
  //HAL_ADCEx_Calibration_Start(&hadc2);

  // Enable DAC
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4845      	ldr	r0, [pc, #276]	; (8000e30 <main+0x144>)
 8000d1c:	f002 fcfb 	bl	8003716 <HAL_DAC_Start>

  // Start conversions
  HAL_ADC_Start(&hadc2);
 8000d20:	4844      	ldr	r0, [pc, #272]	; (8000e34 <main+0x148>)
 8000d22:	f001 fb93 	bl	800244c <HAL_ADC_Start>

  // Enable timers
  HAL_TIM_Base_Start_IT(&htim2);
 8000d26:	4844      	ldr	r0, [pc, #272]	; (8000e38 <main+0x14c>)
 8000d28:	f004 fa6c 	bl	8005204 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000d2c:	4843      	ldr	r0, [pc, #268]	; (8000e3c <main+0x150>)
 8000d2e:	f004 fa69 	bl	8005204 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000d32:	4843      	ldr	r0, [pc, #268]	; (8000e40 <main+0x154>)
 8000d34:	f004 fa66 	bl	8005204 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000d38:	4842      	ldr	r0, [pc, #264]	; (8000e44 <main+0x158>)
 8000d3a:	f004 fa63 	bl	8005204 <HAL_TIM_Base_Start_IT>

  voices[0].status = 1;
 8000d3e:	4b42      	ldr	r3, [pc, #264]	; (8000e48 <main+0x15c>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
  voices[1].status = 0;
 8000d44:	4b40      	ldr	r3, [pc, #256]	; (8000e48 <main+0x15c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	739a      	strb	r2, [r3, #14]
  voices[2].status = 1;
 8000d4a:	4b3f      	ldr	r3, [pc, #252]	; (8000e48 <main+0x15c>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	771a      	strb	r2, [r3, #28]

  voices[0].index = 0;
 8000d50:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <main+0x15c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	731a      	strb	r2, [r3, #12]
  voices[1].index = 0;
 8000d56:	4b3c      	ldr	r3, [pc, #240]	; (8000e48 <main+0x15c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	769a      	strb	r2, [r3, #26]
  voices[2].index = 0;
 8000d5c:	4b3a      	ldr	r3, [pc, #232]	; (8000e48 <main+0x15c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  notes_on = 2;
 8000d64:	4b39      	ldr	r3, [pc, #228]	; (8000e4c <main+0x160>)
 8000d66:	2202      	movs	r2, #2
 8000d68:	701a      	strb	r2, [r3, #0]

  TIM6->ARR = ARR_VAL(C4);
 8000d6a:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <main+0x164>)
 8000d6c:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8000d70:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM7->ARR = ARR_VAL(E4);
 8000d72:	4b38      	ldr	r3, [pc, #224]	; (8000e54 <main+0x168>)
 8000d74:	f640 72b7 	movw	r2, #4023	; 0xfb7
 8000d78:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM8->ARR = ARR_VAL(G4);
 8000d7a:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <main+0x16c>)
 8000d7c:	f640 523b 	movw	r2, #3387	; 0xd3b
 8000d80:	62da      	str	r2, [r3, #44]	; 0x2c

  lut = sin_lut;
 8000d82:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <main+0x170>)
 8000d84:	4a36      	ldr	r2, [pc, #216]	; (8000e60 <main+0x174>)
 8000d86:	601a      	str	r2, [r3, #0]

  // Main loop - read MIDI and play notes on DAC
  // DAC data handled in UART interrupt callback
  while (1) {

	  AD_RES = HAL_ADC_GetValue(&hadc2);
 8000d88:	482a      	ldr	r0, [pc, #168]	; (8000e34 <main+0x148>)
 8000d8a:	f001 fc43 	bl	8002614 <HAL_ADC_GetValue>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	4b34      	ldr	r3, [pc, #208]	; (8000e64 <main+0x178>)
 8000d94:	801a      	strh	r2, [r3, #0]
	  //TODO put in function
	  HAL_UART_Receive_IT(&huart1, midi_tmp, 3);
 8000d96:	2203      	movs	r2, #3
 8000d98:	4933      	ldr	r1, [pc, #204]	; (8000e68 <main+0x17c>)
 8000d9a:	4834      	ldr	r0, [pc, #208]	; (8000e6c <main+0x180>)
 8000d9c:	f004 ffd4 	bl	8005d48 <HAL_UART_Receive_IT>
	  if (GLOBAL_MIDI_NOTE_ON) {
 8000da0:	4b33      	ldr	r3, [pc, #204]	; (8000e70 <main+0x184>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b90      	cmp	r3, #144	; 0x90
 8000da6:	d106      	bne.n	8000db6 <main+0xca>
		  MIDI_IN_LED_ON;
 8000da8:	2201      	movs	r2, #1
 8000daa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dae:	4831      	ldr	r0, [pc, #196]	; (8000e74 <main+0x188>)
 8000db0:	f003 f984 	bl	80040bc <HAL_GPIO_WritePin>
 8000db4:	e009      	b.n	8000dca <main+0xde>
	  }
	  else if (GLOBAL_MIDI_NOTE_OFF) {
 8000db6:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <main+0x184>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b80      	cmp	r3, #128	; 0x80
 8000dbc:	d105      	bne.n	8000dca <main+0xde>
		  MIDI_IN_LED_OFF;
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc4:	482b      	ldr	r0, [pc, #172]	; (8000e74 <main+0x188>)
 8000dc6:	f003 f979 	bl	80040bc <HAL_GPIO_WritePin>
	  }

	  if (AD_RES >= 0 && AD_RES < 1024) {
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <main+0x178>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dd2:	d203      	bcs.n	8000ddc <main+0xf0>
	  		lut = sin_lut;
 8000dd4:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <main+0x170>)
 8000dd6:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <main+0x174>)
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e7d5      	b.n	8000d88 <main+0x9c>
	  }
	  else if (AD_RES >= 1024 && AD_RES < 2048) {
 8000ddc:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <main+0x178>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de4:	d308      	bcc.n	8000df8 <main+0x10c>
 8000de6:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <main+0x178>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000dee:	d203      	bcs.n	8000df8 <main+0x10c>
	  		lut = tri_lut;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <main+0x170>)
 8000df2:	4a21      	ldr	r2, [pc, #132]	; (8000e78 <main+0x18c>)
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e01a      	b.n	8000e2e <main+0x142>
	  }
	  else if (AD_RES >= 2048 && AD_RES < 3072) {
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <main+0x178>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e00:	d308      	bcc.n	8000e14 <main+0x128>
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <main+0x178>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000e0a:	d203      	bcs.n	8000e14 <main+0x128>
	  		lut = saw_lut;
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <main+0x170>)
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <main+0x190>)
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e00c      	b.n	8000e2e <main+0x142>
	  }
	  else if (AD_RES >= 3072 && AD_RES < 4096) {
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <main+0x178>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000e1c:	d3b4      	bcc.n	8000d88 <main+0x9c>
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <main+0x178>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e26:	d2af      	bcs.n	8000d88 <main+0x9c>
	  		lut = sqr_lut;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <main+0x170>)
 8000e2a:	4a15      	ldr	r2, [pc, #84]	; (8000e80 <main+0x194>)
 8000e2c:	601a      	str	r2, [r3, #0]
	  AD_RES = HAL_ADC_GetValue(&hadc2);
 8000e2e:	e7ab      	b.n	8000d88 <main+0x9c>
 8000e30:	2000047c 	.word	0x2000047c
 8000e34:	20000490 	.word	0x20000490
 8000e38:	2000061c 	.word	0x2000061c
 8000e3c:	200005d0 	.word	0x200005d0
 8000e40:	200006c8 	.word	0x200006c8
 8000e44:	20000430 	.word	0x20000430
 8000e48:	200005a4 	.word	0x200005a4
 8000e4c:	2000042c 	.word	0x2000042c
 8000e50:	40001000 	.word	0x40001000
 8000e54:	40001400 	.word	0x40001400
 8000e58:	40013400 	.word	0x40013400
 8000e5c:	20000400 	.word	0x20000400
 8000e60:	20000000 	.word	0x20000000
 8000e64:	2000042e 	.word	0x2000042e
 8000e68:	20000714 	.word	0x20000714
 8000e6c:	20000514 	.word	0x20000514
 8000e70:	20000510 	.word	0x20000510
 8000e74:	48000400 	.word	0x48000400
 8000e78:	20000100 	.word	0x20000100
 8000e7c:	20000200 	.word	0x20000200
 8000e80:	20000300 	.word	0x20000300

08000e84 <HAL_ADC_ConvCpltCallback>:
  }
}

// Switch lookup table based on ADC result
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	AD_RES = HAL_ADC_GetValue(&hadc2);
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_ADC_ConvCpltCallback+0x20>)
 8000e8e:	f001 fbc1 	bl	8002614 <HAL_ADC_GetValue>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e98:	801a      	strh	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000490 	.word	0x20000490
 8000ea8:	2000042e 	.word	0x2000042e

08000eac <HAL_TIM_PeriodElapsedCallback>:

// When timer triggers, put corresponding signal on DAC
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
		PUT_TO_DAC(VOICE2);
		if (voices[2].index == NUM_PTS) voices[2].index = 0;
	}
	*/

	if (htim == &htim6) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a8e      	ldr	r2, [pc, #568]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d158      	bne.n	8000f6e <HAL_TIM_PeriodElapsedCallback+0xc2>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (1./notes_on) * (voices[0].status*lut[voices[0].index++] + voices[1].status*lut[voices[1].index] + voices[2].status*lut[voices[2].index]));
 8000ebc:	4b8d      	ldr	r3, [pc, #564]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fafb 	bl	80004bc <__aeabi_i2d>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	f04f 0000 	mov.w	r0, #0
 8000ece:	498a      	ldr	r1, [pc, #552]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000ed0:	f7ff fc88 	bl	80007e4 <__aeabi_ddiv>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4614      	mov	r4, r2
 8000eda:	461d      	mov	r5, r3
 8000edc:	4b87      	ldr	r3, [pc, #540]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	4b87      	ldr	r3, [pc, #540]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b85      	ldr	r3, [pc, #532]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ee8:	7b1b      	ldrb	r3, [r3, #12]
 8000eea:	1c59      	adds	r1, r3, #1
 8000eec:	b2ce      	uxtb	r6, r1
 8000eee:	4983      	ldr	r1, [pc, #524]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ef0:	730e      	strb	r6, [r1, #12]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	fb03 f200 	mul.w	r2, r3, r0
 8000efc:	4b7f      	ldr	r3, [pc, #508]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000efe:	7b9b      	ldrb	r3, [r3, #14]
 8000f00:	4618      	mov	r0, r3
 8000f02:	4b7f      	ldr	r3, [pc, #508]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	4b7d      	ldr	r3, [pc, #500]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f08:	7e9b      	ldrb	r3, [r3, #26]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	440b      	add	r3, r1
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	fb03 f300 	mul.w	r3, r3, r0
 8000f14:	441a      	add	r2, r3
 8000f16:	4b79      	ldr	r3, [pc, #484]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f18:	7f1b      	ldrb	r3, [r3, #28]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	4b78      	ldr	r3, [pc, #480]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000f1e:	6819      	ldr	r1, [r3, #0]
 8000f20:	4b76      	ldr	r3, [pc, #472]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	440b      	add	r3, r1
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	fb03 f300 	mul.w	r3, r3, r0
 8000f30:	4413      	add	r3, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fac2 	bl	80004bc <__aeabi_i2d>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	4629      	mov	r1, r5
 8000f40:	f7ff fb26 	bl	8000590 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f7ff fd32 	bl	80009b4 <__aeabi_d2uiz>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	486b      	ldr	r0, [pc, #428]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000f58:	f002 fc8a 	bl	8003870 <HAL_DAC_SetValue>
		if (voices[0].index == NUM_PTS) voices[0].index = 0;
 8000f5c:	4b67      	ldr	r3, [pc, #412]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f5e:	7b1b      	ldrb	r3, [r3, #12]
 8000f60:	2b80      	cmp	r3, #128	; 0x80
 8000f62:	f040 80c1 	bne.w	80010e8 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8000f66:	4b65      	ldr	r3, [pc, #404]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	731a      	strb	r2, [r3, #12]
		if (voices[2].index == NUM_PTS) voices[2].index = 0;
	}



}
 8000f6c:	e0bc      	b.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0x23c>
	else if (htim == &htim7) {
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a65      	ldr	r2, [pc, #404]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d159      	bne.n	800102a <HAL_TIM_PeriodElapsedCallback+0x17e>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (1./notes_on) * (voices[0].status*lut[voices[0].index] + voices[1].status*lut[voices[1].index++] + voices[2].status*lut[voices[2].index]));
 8000f76:	4b5f      	ldr	r3, [pc, #380]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fa9e 	bl	80004bc <__aeabi_i2d>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	f04f 0000 	mov.w	r0, #0
 8000f88:	495b      	ldr	r1, [pc, #364]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000f8a:	f7ff fc2b 	bl	80007e4 <__aeabi_ddiv>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4614      	mov	r4, r2
 8000f94:	461d      	mov	r5, r3
 8000f96:	4b59      	ldr	r3, [pc, #356]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4b58      	ldr	r3, [pc, #352]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b56      	ldr	r3, [pc, #344]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fa2:	7b1b      	ldrb	r3, [r3, #12]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	fb03 f201 	mul.w	r2, r3, r1
 8000fae:	4b53      	ldr	r3, [pc, #332]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fb0:	7b9b      	ldrb	r3, [r3, #14]
 8000fb2:	461e      	mov	r6, r3
 8000fb4:	4b52      	ldr	r3, [pc, #328]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000fb6:	6819      	ldr	r1, [r3, #0]
 8000fb8:	4b50      	ldr	r3, [pc, #320]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fba:	7e9b      	ldrb	r3, [r3, #26]
 8000fbc:	1c58      	adds	r0, r3, #1
 8000fbe:	fa5f fc80 	uxtb.w	ip, r0
 8000fc2:	484e      	ldr	r0, [pc, #312]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fc4:	f880 c01a 	strb.w	ip, [r0, #26]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	440b      	add	r3, r1
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	fb03 f306 	mul.w	r3, r3, r6
 8000fd2:	441a      	add	r2, r3
 8000fd4:	4b49      	ldr	r3, [pc, #292]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fd6:	7f1b      	ldrb	r3, [r3, #28]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	4b49      	ldr	r3, [pc, #292]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000fdc:	6819      	ldr	r1, [r3, #0]
 8000fde:	4b47      	ldr	r3, [pc, #284]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	440b      	add	r3, r1
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	fb03 f300 	mul.w	r3, r3, r0
 8000fee:	4413      	add	r3, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fa63 	bl	80004bc <__aeabi_i2d>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	4629      	mov	r1, r5
 8000ffe:	f7ff fac7 	bl	8000590 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff fcd3 	bl	80009b4 <__aeabi_d2uiz>
 800100e:	4603      	mov	r3, r0
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	483b      	ldr	r0, [pc, #236]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001016:	f002 fc2b 	bl	8003870 <HAL_DAC_SetValue>
		if (voices[1].index == NUM_PTS) voices[1].index = 0;
 800101a:	4b38      	ldr	r3, [pc, #224]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 800101c:	7e9b      	ldrb	r3, [r3, #26]
 800101e:	2b80      	cmp	r3, #128	; 0x80
 8001020:	d162      	bne.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8001022:	4b36      	ldr	r3, [pc, #216]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001024:	2200      	movs	r2, #0
 8001026:	769a      	strb	r2, [r3, #26]
}
 8001028:	e05e      	b.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0x23c>
	else if (htim == &htim8) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a37      	ldr	r2, [pc, #220]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x260>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d15a      	bne.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0x23c>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (1./notes_on) * (voices[0].status*lut[voices[0].index] + voices[1].status*lut[voices[1].index] + voices[2].status*lut[voices[2].index++]));
 8001032:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa40 	bl	80004bc <__aeabi_i2d>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	f04f 0000 	mov.w	r0, #0
 8001044:	492c      	ldr	r1, [pc, #176]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001046:	f7ff fbcd 	bl	80007e4 <__aeabi_ddiv>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4614      	mov	r4, r2
 8001050:	461d      	mov	r5, r3
 8001052:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	4619      	mov	r1, r3
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 800105e:	7b1b      	ldrb	r3, [r3, #12]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	fb03 f201 	mul.w	r2, r3, r1
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 800106c:	7b9b      	ldrb	r3, [r3, #14]
 800106e:	4618      	mov	r0, r3
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001072:	6819      	ldr	r1, [r3, #0]
 8001074:	4b21      	ldr	r3, [pc, #132]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001076:	7e9b      	ldrb	r3, [r3, #26]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	440b      	add	r3, r1
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	fb03 f300 	mul.w	r3, r3, r0
 8001082:	441a      	add	r2, r3
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001086:	7f1b      	ldrb	r3, [r3, #28]
 8001088:	461e      	mov	r6, r3
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001094:	1c58      	adds	r0, r3, #1
 8001096:	fa5f fc80 	uxtb.w	ip, r0
 800109a:	4818      	ldr	r0, [pc, #96]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 800109c:	f880 c028 	strb.w	ip, [r0, #40]	; 0x28
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	440b      	add	r3, r1
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	fb03 f306 	mul.w	r3, r3, r6
 80010aa:	4413      	add	r3, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa05 	bl	80004bc <__aeabi_i2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4620      	mov	r0, r4
 80010b8:	4629      	mov	r1, r5
 80010ba:	f7ff fa69 	bl	8000590 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fc75 	bl	80009b4 <__aeabi_d2uiz>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80010d2:	f002 fbcd 	bl	8003870 <HAL_DAC_SetValue>
		if (voices[2].index == NUM_PTS) voices[2].index = 0;
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 80010d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80010dc:	2b80      	cmp	r3, #128	; 0x80
 80010de:	d103      	bne.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0x23c>
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f0:	200005d0 	.word	0x200005d0
 80010f4:	2000042c 	.word	0x2000042c
 80010f8:	3ff00000 	.word	0x3ff00000
 80010fc:	200005a4 	.word	0x200005a4
 8001100:	20000400 	.word	0x20000400
 8001104:	2000047c 	.word	0x2000047c
 8001108:	200006c8 	.word	0x200006c8
 800110c:	20000430 	.word	0x20000430

08001110 <HAL_UART_RxCpltCallback>:

// When UART message recieved, only valid if starts with 0x80 or 0x90
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	TIM6->ARR = ARR_VAL(NOTE);
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_UART_RxCpltCallback+0x60>)
 800111a:	785b      	ldrb	r3, [r3, #1]
 800111c:	3305      	adds	r3, #5
 800111e:	4a15      	ldr	r2, [pc, #84]	; (8001174 <HAL_UART_RxCpltCallback+0x64>)
 8001120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001124:	01db      	lsls	r3, r3, #7
 8001126:	461a      	mov	r2, r3
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <HAL_UART_RxCpltCallback+0x68>)
 800112a:	fbb3 f3f2 	udiv	r3, r3, r2
 800112e:	4a13      	ldr	r2, [pc, #76]	; (800117c <HAL_UART_RxCpltCallback+0x6c>)
 8001130:	3b01      	subs	r3, #1
 8001132:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (midi_tmp[0] == 0x90 || midi_tmp[0] == 0x80) {
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_UART_RxCpltCallback+0x70>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b90      	cmp	r3, #144	; 0x90
 800113a:	d003      	beq.n	8001144 <HAL_UART_RxCpltCallback+0x34>
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_UART_RxCpltCallback+0x70>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b80      	cmp	r3, #128	; 0x80
 8001142:	d10e      	bne.n	8001162 <HAL_UART_RxCpltCallback+0x52>
		uint8_t i;
		for (i = 0; i < 3; i++) {
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e008      	b.n	800115c <HAL_UART_RxCpltCallback+0x4c>
			midi_msg[i] = midi_tmp[i];
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	490c      	ldr	r1, [pc, #48]	; (8001180 <HAL_UART_RxCpltCallback+0x70>)
 8001150:	5c89      	ldrb	r1, [r1, r2]
 8001152:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_UART_RxCpltCallback+0x60>)
 8001154:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 3; i++) {
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	3301      	adds	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d9f3      	bls.n	800114a <HAL_UART_RxCpltCallback+0x3a>
		}
	}
}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000510 	.word	0x20000510
 8001174:	08007598 	.word	0x08007598
 8001178:	0a21fe80 	.word	0x0a21fe80
 800117c:	40001000 	.word	0x40001000
 8001180:	20000714 	.word	0x20000714

08001184 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b0a8      	sub	sp, #160	; 0xa0
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800118e:	2238      	movs	r2, #56	; 0x38
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f006 f9ec 	bl	8007570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a8:	463b      	mov	r3, r7
 80011aa:	2254      	movs	r2, #84	; 0x54
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f006 f9de 	bl	8007570 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f002 ff99 	bl	80040ec <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ba:	2302      	movs	r3, #2
 80011bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c4:	2340      	movs	r3, #64	; 0x40
 80011c6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c8:	2302      	movs	r3, #2
 80011ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ce:	2302      	movs	r3, #2
 80011d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80011d4:	2304      	movs	r3, #4
 80011d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011da:	2355      	movs	r3, #85	; 0x55
 80011dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 f82c 	bl	8004254 <HAL_RCC_OscConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001202:	f000 fa6f 	bl	80016e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001206:	230f      	movs	r3, #15
 8001208:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120a:	2303      	movs	r3, #3
 800120c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800121a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800121e:	2104      	movs	r1, #4
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fb2f 	bl	8004884 <HAL_RCC_ClockConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800122c:	f000 fa5a 	bl	80016e4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001230:	2301      	movs	r3, #1
 8001232:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4618      	mov	r0, r3
 800123c:	f003 fd3e 	bl	8004cbc <HAL_RCCEx_PeriphCLKConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001246:	f000 fa4d 	bl	80016e4 <Error_Handler>
  }
}
 800124a:	bf00      	nop
 800124c:	37a0      	adds	r7, #160	; 0xa0
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <MX_ADC2_Init>:

static void MX_ADC2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800125a:	463b      	mov	r3, r7
 800125c:	2220      	movs	r2, #32
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f006 f985 	bl	8007570 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001266:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <MX_ADC2_Init+0xc4>)
 8001268:	4a2c      	ldr	r2, [pc, #176]	; (800131c <MX_ADC2_Init+0xc8>)
 800126a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <MX_ADC2_Init+0xc4>)
 800126e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001272:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <MX_ADC2_Init+0xc4>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800127a:	4b27      	ldr	r3, [pc, #156]	; (8001318 <MX_ADC2_Init+0xc4>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001280:	4b25      	ldr	r3, [pc, #148]	; (8001318 <MX_ADC2_Init+0xc4>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <MX_ADC2_Init+0xc4>)
 8001288:	2200      	movs	r2, #0
 800128a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <MX_ADC2_Init+0xc4>)
 800128e:	2208      	movs	r2, #8
 8001290:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <MX_ADC2_Init+0xc4>)
 8001294:	2200      	movs	r2, #0
 8001296:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001298:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <MX_ADC2_Init+0xc4>)
 800129a:	2200      	movs	r2, #0
 800129c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800129e:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <MX_ADC2_Init+0xc4>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012a4:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_ADC2_Init+0xc4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_ADC2_Init+0xc4>)
 80012ae:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_ADC2_Init+0xc4>)
 80012b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_ADC2_Init+0xc4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_ADC2_Init+0xc4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_ADC2_Init+0xc4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012d2:	4811      	ldr	r0, [pc, #68]	; (8001318 <MX_ADC2_Init+0xc4>)
 80012d4:	f000 fef8 	bl	80020c8 <HAL_ADC_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80012de:	f000 fa01 	bl	80016e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_ADC2_Init+0xcc>)
 80012e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e6:	2306      	movs	r3, #6
 80012e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012ee:	237f      	movs	r3, #127	; 0x7f
 80012f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012f2:	2304      	movs	r3, #4
 80012f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012fa:	463b      	mov	r3, r7
 80012fc:	4619      	mov	r1, r3
 80012fe:	4806      	ldr	r0, [pc, #24]	; (8001318 <MX_ADC2_Init+0xc4>)
 8001300:	f001 fc04 	bl	8002b0c <HAL_ADC_ConfigChannel>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800130a:	f000 f9eb 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000490 	.word	0x20000490
 800131c:	50000100 	.word	0x50000100
 8001320:	04300002 	.word	0x04300002

08001324 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08c      	sub	sp, #48	; 0x30
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800132a:	463b      	mov	r3, r7
 800132c:	2230      	movs	r2, #48	; 0x30
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f006 f91d 	bl	8007570 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <MX_DAC1_Init+0x6c>)
 8001338:	4a16      	ldr	r2, [pc, #88]	; (8001394 <MX_DAC1_Init+0x70>)
 800133a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800133c:	4814      	ldr	r0, [pc, #80]	; (8001390 <MX_DAC1_Init+0x6c>)
 800133e:	f002 f9c8 	bl	80036d2 <HAL_DAC_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001348:	f000 f9cc 	bl	80016e4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800134c:	2302      	movs	r3, #2
 800134e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001368:	2301      	movs	r3, #1
 800136a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	4619      	mov	r1, r3
 8001376:	4806      	ldr	r0, [pc, #24]	; (8001390 <MX_DAC1_Init+0x6c>)
 8001378:	f002 faac 	bl	80038d4 <HAL_DAC_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001382:	f000 f9af 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	3730      	adds	r7, #48	; 0x30
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2000047c 	.word	0x2000047c
 8001394:	50000800 	.word	0x50000800

08001398 <MX_TIM2_Init>:
  * @retval None
  */


static void MX_TIM2_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_TIM2_Init+0x94>)
 80013b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_TIM2_Init+0x94>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <MX_TIM2_Init+0x94>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = ARR_VAL(1);
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_TIM2_Init+0x94>)
 80013cc:	4a18      	ldr	r2, [pc, #96]	; (8001430 <MX_TIM2_Init+0x98>)
 80013ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_TIM2_Init+0x94>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_TIM2_Init+0x94>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013dc:	4813      	ldr	r0, [pc, #76]	; (800142c <MX_TIM2_Init+0x94>)
 80013de:	f003 feb9 	bl	8005154 <HAL_TIM_Base_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013e8:	f000 f97c 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	4619      	mov	r1, r3
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <MX_TIM2_Init+0x94>)
 80013fa:	f004 f8fb 	bl	80055f4 <HAL_TIM_ConfigClockSource>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001404:	f000 f96e 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001408:	2320      	movs	r3, #32
 800140a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_TIM2_Init+0x94>)
 8001416:	f004 fb6b 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001420:	f000 f960 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000061c 	.word	0x2000061c
 8001430:	001443fc 	.word	0x001443fc

08001434 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_TIM6_Init+0x64>)
 8001446:	4a15      	ldr	r2, [pc, #84]	; (800149c <MX_TIM6_Init+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <MX_TIM6_Init+0x64>)
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_TIM6_Init+0x64>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = ARR_VAL(C4);
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_TIM6_Init+0x64>)
 8001458:	f241 32cc 	movw	r2, #5068	; 0x13cc
 800145c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_TIM6_Init+0x64>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001464:	480c      	ldr	r0, [pc, #48]	; (8001498 <MX_TIM6_Init+0x64>)
 8001466:	f003 fe75 	bl	8005154 <HAL_TIM_Base_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001470:	f000 f938 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001474:	2320      	movs	r3, #32
 8001476:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_TIM6_Init+0x64>)
 8001482:	f004 fb35 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800148c:	f000 f92a 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200005d0 	.word	0x200005d0
 800149c:	40001000 	.word	0x40001000

080014a0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_TIM7_Init+0x64>)
 80014b2:	4a15      	ldr	r2, [pc, #84]	; (8001508 <MX_TIM7_Init+0x68>)
 80014b4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_TIM7_Init+0x64>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_TIM7_Init+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = ARR_VAL(C4);
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_TIM7_Init+0x64>)
 80014c4:	f241 32cc 	movw	r2, #5068	; 0x13cc
 80014c8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_TIM7_Init+0x64>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <MX_TIM7_Init+0x64>)
 80014d2:	f003 fe3f 	bl	8005154 <HAL_TIM_Base_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80014dc:	f000 f902 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014e0:	2320      	movs	r3, #32
 80014e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_TIM7_Init+0x64>)
 80014ee:	f004 faff 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80014f8:	f000 f8f4 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200006c8 	.word	0x200006c8
 8001508:	40001400 	.word	0x40001400

0800150c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <MX_TIM8_Init+0xa0>)
 800152c:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <MX_TIM8_Init+0xa4>)
 800152e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <MX_TIM8_Init+0xa0>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_TIM8_Init+0xa0>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = ARR_VAL(C4);
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <MX_TIM8_Init+0xa0>)
 800153e:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8001542:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <MX_TIM8_Init+0xa0>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <MX_TIM8_Init+0xa0>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <MX_TIM8_Init+0xa0>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001556:	4815      	ldr	r0, [pc, #84]	; (80015ac <MX_TIM8_Init+0xa0>)
 8001558:	f003 fdfc 	bl	8005154 <HAL_TIM_Base_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001562:	f000 f8bf 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	4619      	mov	r1, r3
 8001572:	480e      	ldr	r0, [pc, #56]	; (80015ac <MX_TIM8_Init+0xa0>)
 8001574:	f004 f83e 	bl	80055f4 <HAL_TIM_ConfigClockSource>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800157e:	f000 f8b1 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001582:	2320      	movs	r3, #32
 8001584:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <MX_TIM8_Init+0xa0>)
 8001594:	f004 faac 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800159e:	f000 f8a1 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000430 	.word	0x20000430
 80015b0:	40013400 	.word	0x40013400

080015b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015b8:	4b22      	ldr	r3, [pc, #136]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015ba:	4a23      	ldr	r2, [pc, #140]	; (8001648 <MX_USART1_UART_Init+0x94>)
 80015bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015c0:	f647 2212 	movw	r2, #31250	; 0x7a12
 80015c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015da:	220c      	movs	r2, #12
 80015dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015fc:	4811      	ldr	r0, [pc, #68]	; (8001644 <MX_USART1_UART_Init+0x90>)
 80015fe:	f004 fb53 	bl	8005ca8 <HAL_UART_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001608:	f000 f86c 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800160c:	2100      	movs	r1, #0
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <MX_USART1_UART_Init+0x90>)
 8001610:	f005 febf 	bl	8007392 <HAL_UARTEx_SetTxFifoThreshold>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800161a:	f000 f863 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800161e:	2100      	movs	r1, #0
 8001620:	4808      	ldr	r0, [pc, #32]	; (8001644 <MX_USART1_UART_Init+0x90>)
 8001622:	f005 fef4 	bl	800740e <HAL_UARTEx_SetRxFifoThreshold>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800162c:	f000 f85a 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_USART1_UART_Init+0x90>)
 8001632:	f005 fe75 	bl	8007320 <HAL_UARTEx_DisableFifoMode>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800163c:	f000 f852 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000514 	.word	0x20000514
 8001648:	40013800 	.word	0x40013800

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <MX_GPIO_Init+0x90>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <MX_GPIO_Init+0x90>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <MX_GPIO_Init+0x90>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <MX_GPIO_Init+0x90>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a17      	ldr	r2, [pc, #92]	; (80016dc <MX_GPIO_Init+0x90>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <MX_GPIO_Init+0x90>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <MX_GPIO_Init+0x90>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a11      	ldr	r2, [pc, #68]	; (80016dc <MX_GPIO_Init+0x90>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_GPIO_Init+0x90>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b0:	480b      	ldr	r0, [pc, #44]	; (80016e0 <MX_GPIO_Init+0x94>)
 80016b2:	f002 fd03 	bl	80040bc <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PB11 */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	4619      	mov	r1, r3
 80016ce:	4804      	ldr	r0, [pc, #16]	; (80016e0 <MX_GPIO_Init+0x94>)
 80016d0:	f002 fb72 	bl	8003db8 <HAL_GPIO_Init>

}
 80016d4:	bf00      	nop
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000
 80016e0:	48000400 	.word	0x48000400

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ec:	e7fe      	b.n	80016ec <Error_Handler+0x8>
	...

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_MspInit+0x44>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fa:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <HAL_MspInit+0x44>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6613      	str	r3, [r2, #96]	; 0x60
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_MspInit+0x44>)
 8001704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_MspInit+0x44>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <HAL_MspInit+0x44>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	6593      	str	r3, [r2, #88]	; 0x58
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_MspInit+0x44>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001726:	f002 fd85 	bl	8004234 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a19      	ldr	r2, [pc, #100]	; (80017bc <HAL_ADC_MspInit+0x84>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d12c      	bne.n	80017b4 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_ADC_MspInit+0x88>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <HAL_ADC_MspInit+0x88>)
 8001760:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <HAL_ADC_MspInit+0x88>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <HAL_ADC_MspInit+0x88>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <HAL_ADC_MspInit+0x88>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_ADC_MspInit+0x88>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800178a:	2301      	movs	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178e:	2303      	movs	r3, #3
 8001790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a0:	f002 fb0a 	bl	8003db8 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	2012      	movs	r0, #18
 80017aa:	f001 ff5e 	bl	800366a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80017ae:	2012      	movs	r0, #18
 80017b0:	f001 ff75 	bl	800369e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	50000100 	.word	0x50000100
 80017c0:	40021000 	.word	0x40021000

080017c4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a19      	ldr	r2, [pc, #100]	; (8001848 <HAL_DAC_MspInit+0x84>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d12c      	bne.n	8001840 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_DAC_MspInit+0x88>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	4a18      	ldr	r2, [pc, #96]	; (800184c <HAL_DAC_MspInit+0x88>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <HAL_DAC_MspInit+0x88>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <HAL_DAC_MspInit+0x88>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a12      	ldr	r2, [pc, #72]	; (800184c <HAL_DAC_MspInit+0x88>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_DAC_MspInit+0x88>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001816:	2310      	movs	r3, #16
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181a:	2303      	movs	r3, #3
 800181c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182c:	f002 fac4 	bl	8003db8 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2100      	movs	r1, #0
 8001834:	2036      	movs	r0, #54	; 0x36
 8001836:	f001 ff18 	bl	800366a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800183a:	2036      	movs	r0, #54	; 0x36
 800183c:	f001 ff2f 	bl	800369e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001840:	bf00      	nop
 8001842:	3728      	adds	r7, #40	; 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	50000800 	.word	0x50000800
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001860:	d114      	bne.n	800188c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001862:	4b33      	ldr	r3, [pc, #204]	; (8001930 <HAL_TIM_Base_MspInit+0xe0>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	4a32      	ldr	r2, [pc, #200]	; (8001930 <HAL_TIM_Base_MspInit+0xe0>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6593      	str	r3, [r2, #88]	; 0x58
 800186e:	4b30      	ldr	r3, [pc, #192]	; (8001930 <HAL_TIM_Base_MspInit+0xe0>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	201c      	movs	r0, #28
 8001880:	f001 fef3 	bl	800366a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001884:	201c      	movs	r0, #28
 8001886:	f001 ff0a 	bl	800369e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800188a:	e04c      	b.n	8001926 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a28      	ldr	r2, [pc, #160]	; (8001934 <HAL_TIM_Base_MspInit+0xe4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d114      	bne.n	80018c0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_TIM_Base_MspInit+0xe0>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	4a25      	ldr	r2, [pc, #148]	; (8001930 <HAL_TIM_Base_MspInit+0xe0>)
 800189c:	f043 0310 	orr.w	r3, r3, #16
 80018a0:	6593      	str	r3, [r2, #88]	; 0x58
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <HAL_TIM_Base_MspInit+0xe0>)
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	f003 0310 	and.w	r3, r3, #16
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	2036      	movs	r0, #54	; 0x36
 80018b4:	f001 fed9 	bl	800366a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018b8:	2036      	movs	r0, #54	; 0x36
 80018ba:	f001 fef0 	bl	800369e <HAL_NVIC_EnableIRQ>
}
 80018be:	e032      	b.n	8001926 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <HAL_TIM_Base_MspInit+0xe8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d114      	bne.n	80018f4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_TIM_Base_MspInit+0xe0>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	4a18      	ldr	r2, [pc, #96]	; (8001930 <HAL_TIM_Base_MspInit+0xe0>)
 80018d0:	f043 0320 	orr.w	r3, r3, #32
 80018d4:	6593      	str	r3, [r2, #88]	; 0x58
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <HAL_TIM_Base_MspInit+0xe0>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	2037      	movs	r0, #55	; 0x37
 80018e8:	f001 febf 	bl	800366a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80018ec:	2037      	movs	r0, #55	; 0x37
 80018ee:	f001 fed6 	bl	800369e <HAL_NVIC_EnableIRQ>
}
 80018f2:	e018      	b.n	8001926 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM8)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a10      	ldr	r2, [pc, #64]	; (800193c <HAL_TIM_Base_MspInit+0xec>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d113      	bne.n	8001926 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_TIM_Base_MspInit+0xe0>)
 8001900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <HAL_TIM_Base_MspInit+0xe0>)
 8001904:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001908:	6613      	str	r3, [r2, #96]	; 0x60
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_TIM_Base_MspInit+0xe0>)
 800190c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	202c      	movs	r0, #44	; 0x2c
 800191c:	f001 fea5 	bl	800366a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001920:	202c      	movs	r0, #44	; 0x2c
 8001922:	f001 febc 	bl	800369e <HAL_NVIC_EnableIRQ>
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	40001000 	.word	0x40001000
 8001938:	40001400 	.word	0x40001400
 800193c:	40013400 	.word	0x40013400

08001940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1b      	ldr	r2, [pc, #108]	; (80019cc <HAL_UART_MspInit+0x8c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d12f      	bne.n	80019c2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_UART_MspInit+0x90>)
 8001964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001966:	4a1a      	ldr	r2, [pc, #104]	; (80019d0 <HAL_UART_MspInit+0x90>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6613      	str	r3, [r2, #96]	; 0x60
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_UART_MspInit+0x90>)
 8001970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_UART_MspInit+0x90>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <HAL_UART_MspInit+0x90>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_UART_MspInit+0x90>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001992:	2330      	movs	r3, #48	; 0x30
 8001994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019a2:	2307      	movs	r3, #7
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	4809      	ldr	r0, [pc, #36]	; (80019d4 <HAL_UART_MspInit+0x94>)
 80019ae:	f002 fa03 	bl	8003db8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	2025      	movs	r0, #37	; 0x25
 80019b8:	f001 fe57 	bl	800366a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019bc:	2025      	movs	r0, #37	; 0x25
 80019be:	f001 fe6e 	bl	800369e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	3728      	adds	r7, #40	; 0x28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40013800 	.word	0x40013800
 80019d0:	40021000 	.word	0x40021000
 80019d4:	48000800 	.word	0x48000800

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <NMI_Handler+0x4>

080019de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <HardFault_Handler+0x4>

080019e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <MemManage_Handler+0x4>

080019ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <BusFault_Handler+0x4>

080019f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <UsageFault_Handler+0x4>

080019f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a24:	f000 f8d0 	bl	8001bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <ADC1_2_IRQHandler+0x10>)
 8001a32:	f000 fdfd 	bl	8002630 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000490 	.word	0x20000490

08001a40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <TIM2_IRQHandler+0x10>)
 8001a46:	f003 fc55 	bl	80052f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	2000061c 	.word	0x2000061c

08001a54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <USART1_IRQHandler+0x10>)
 8001a5a:	f004 f9bb 	bl	8005dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000514 	.word	0x20000514

08001a68 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <TIM8_UP_IRQHandler+0x10>)
 8001a6e:	f003 fc41 	bl	80052f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000430 	.word	0x20000430

08001a7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a80:	4803      	ldr	r0, [pc, #12]	; (8001a90 <TIM6_DAC_IRQHandler+0x14>)
 8001a82:	f003 fc37 	bl	80052f4 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001a86:	4803      	ldr	r0, [pc, #12]	; (8001a94 <TIM6_DAC_IRQHandler+0x18>)
 8001a88:	f001 fe98 	bl	80037bc <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200005d0 	.word	0x200005d0
 8001a94:	2000047c 	.word	0x2000047c

08001a98 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <TIM7_DAC_IRQHandler+0x10>)
 8001a9e:	f003 fc29 	bl	80052f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200006c8 	.word	0x200006c8

08001aac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <SystemInit+0x20>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <SystemInit+0x20>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ad0:	480d      	ldr	r0, [pc, #52]	; (8001b08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ad2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8001ad6:	490e      	ldr	r1, [pc, #56]	; (8001b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ad8:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <LoopForever+0xe>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aec:	4c0b      	ldr	r4, [pc, #44]	; (8001b1c <LoopForever+0x16>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001afa:	f7ff ffd7 	bl	8001aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afe:	f005 fd13 	bl	8007528 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b02:	f7ff f8f3 	bl	8000cec <main>

08001b06 <LoopForever>:

LoopForever:
    b LoopForever
 8001b06:	e7fe      	b.n	8001b06 <LoopForever>
  ldr   r0, =_estack
 8001b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 8001b14:	080076b4 	.word	0x080076b4
  ldr r2, =_sbss
 8001b18:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 8001b1c:	2000071c 	.word	0x2000071c

08001b20 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC3_IRQHandler>

08001b22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f001 fd91 	bl	8003654 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 f80e 	bl	8001b54 <HAL_InitTick>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	71fb      	strb	r3, [r7, #7]
 8001b42:	e001      	b.n	8001b48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b44:	f7ff fdd4 	bl	80016f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b48:	79fb      	ldrb	r3, [r7, #7]

}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <HAL_InitTick+0x68>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d022      	beq.n	8001bae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_InitTick+0x6c>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_InitTick+0x68>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f001 fd9c 	bl	80036ba <HAL_SYSTICK_Config>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10f      	bne.n	8001ba8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	d809      	bhi.n	8001ba2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	f04f 30ff 	mov.w	r0, #4294967295
 8001b96:	f001 fd68 	bl	800366a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_InitTick+0x70>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e007      	b.n	8001bb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
 8001ba6:	e004      	b.n	8001bb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e001      	b.n	8001bb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	2000040c 	.word	0x2000040c
 8001bc0:	20000404 	.word	0x20000404
 8001bc4:	20000408 	.word	0x20000408

08001bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_IncTick+0x1c>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_IncTick+0x20>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a03      	ldr	r2, [pc, #12]	; (8001be4 <HAL_IncTick+0x1c>)
 8001bd8:	6013      	str	r3, [r2, #0]
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	20000718 	.word	0x20000718
 8001be8:	2000040c 	.word	0x2000040c

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000718 	.word	0x20000718

08001c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff ffee 	bl	8001bec <HAL_GetTick>
 8001c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d004      	beq.n	8001c28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_Delay+0x40>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4413      	add	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c28:	bf00      	nop
 8001c2a:	f7ff ffdf 	bl	8001bec <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d8f7      	bhi.n	8001c2a <HAL_Delay+0x26>
  {
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	2000040c 	.word	0x2000040c

08001c48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	609a      	str	r2, [r3, #8]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	609a      	str	r2, [r3, #8]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3360      	adds	r3, #96	; 0x60
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <LL_ADC_SetOffset+0x44>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ce8:	bf00      	nop
 8001cea:	371c      	adds	r7, #28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	03fff000 	.word	0x03fff000

08001cf8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3360      	adds	r3, #96	; 0x60
 8001d06:	461a      	mov	r2, r3
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3360      	adds	r3, #96	; 0x60
 8001d34:	461a      	mov	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d4e:	bf00      	nop
 8001d50:	371c      	adds	r7, #28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b087      	sub	sp, #28
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3360      	adds	r3, #96	; 0x60
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3360      	adds	r3, #96	; 0x60
 8001da0:	461a      	mov	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001dba:	bf00      	nop
 8001dbc:	371c      	adds	r7, #28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	615a      	str	r2, [r3, #20]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b087      	sub	sp, #28
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3330      	adds	r3, #48	; 0x30
 8001e22:	461a      	mov	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	4413      	add	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	211f      	movs	r1, #31
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	401a      	ands	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	0e9b      	lsrs	r3, r3, #26
 8001e4a:	f003 011f 	and.w	r1, r3, #31
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e5e:	bf00      	nop
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3314      	adds	r3, #20
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	0e5b      	lsrs	r3, r3, #25
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	4413      	add	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	0d1b      	lsrs	r3, r3, #20
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	2107      	movs	r1, #7
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	0d1b      	lsrs	r3, r3, #20
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001eda:	bf00      	nop
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f00:	43db      	mvns	r3, r3
 8001f02:	401a      	ands	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0318 	and.w	r3, r3, #24
 8001f0a:	4908      	ldr	r1, [pc, #32]	; (8001f2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f0c:	40d9      	lsrs	r1, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	400b      	ands	r3, r1
 8001f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f16:	431a      	orrs	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	0007ffff 	.word	0x0007ffff

08001f30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 031f 	and.w	r3, r3, #31
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6093      	str	r3, [r2, #8]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fa0:	d101      	bne.n	8001fa6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001fc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ff0:	d101      	bne.n	8001ff6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002014:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <LL_ADC_IsEnabled+0x18>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <LL_ADC_IsEnabled+0x1a>
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002062:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002066:	f043 0204 	orr.w	r2, r3, #4
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b04      	cmp	r3, #4
 800208c:	d101      	bne.n	8002092 <LL_ADC_REG_IsConversionOngoing+0x18>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d101      	bne.n	80020b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b089      	sub	sp, #36	; 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e1af      	b.n	8002442 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d109      	bne.n	8002104 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fb21 	bl	8001738 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff3f 	bl	8001f8c <LL_ADC_IsDeepPowerDownEnabled>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff25 	bl	8001f68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff5a 	bl	8001fdc <LL_ADC_IsInternalRegulatorEnabled>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d115      	bne.n	800215a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff3e 	bl	8001fb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002138:	4b9f      	ldr	r3, [pc, #636]	; (80023b8 <HAL_ADC_Init+0x2f0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	099b      	lsrs	r3, r3, #6
 800213e:	4a9f      	ldr	r2, [pc, #636]	; (80023bc <HAL_ADC_Init+0x2f4>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	3301      	adds	r3, #1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800214c:	e002      	b.n	8002154 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3b01      	subs	r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f9      	bne.n	800214e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff3c 	bl	8001fdc <LL_ADC_IsInternalRegulatorEnabled>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10d      	bne.n	8002186 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	f043 0210 	orr.w	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff75 	bl	800207a <LL_ADC_REG_IsConversionOngoing>
 8002190:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 8148 	bne.w	8002430 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 8144 	bne.w	8002430 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021b0:	f043 0202 	orr.w	r2, r3, #2
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff35 	bl	800202c <LL_ADC_IsEnabled>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d141      	bne.n	800224c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021d0:	d004      	beq.n	80021dc <HAL_ADC_Init+0x114>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a7a      	ldr	r2, [pc, #488]	; (80023c0 <HAL_ADC_Init+0x2f8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d10f      	bne.n	80021fc <HAL_ADC_Init+0x134>
 80021dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021e0:	f7ff ff24 	bl	800202c <LL_ADC_IsEnabled>
 80021e4:	4604      	mov	r4, r0
 80021e6:	4876      	ldr	r0, [pc, #472]	; (80023c0 <HAL_ADC_Init+0x2f8>)
 80021e8:	f7ff ff20 	bl	800202c <LL_ADC_IsEnabled>
 80021ec:	4603      	mov	r3, r0
 80021ee:	4323      	orrs	r3, r4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf0c      	ite	eq
 80021f4:	2301      	moveq	r3, #1
 80021f6:	2300      	movne	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	e012      	b.n	8002222 <HAL_ADC_Init+0x15a>
 80021fc:	4871      	ldr	r0, [pc, #452]	; (80023c4 <HAL_ADC_Init+0x2fc>)
 80021fe:	f7ff ff15 	bl	800202c <LL_ADC_IsEnabled>
 8002202:	4604      	mov	r4, r0
 8002204:	4870      	ldr	r0, [pc, #448]	; (80023c8 <HAL_ADC_Init+0x300>)
 8002206:	f7ff ff11 	bl	800202c <LL_ADC_IsEnabled>
 800220a:	4603      	mov	r3, r0
 800220c:	431c      	orrs	r4, r3
 800220e:	486f      	ldr	r0, [pc, #444]	; (80023cc <HAL_ADC_Init+0x304>)
 8002210:	f7ff ff0c 	bl	800202c <LL_ADC_IsEnabled>
 8002214:	4603      	mov	r3, r0
 8002216:	4323      	orrs	r3, r4
 8002218:	2b00      	cmp	r3, #0
 800221a:	bf0c      	ite	eq
 800221c:	2301      	moveq	r3, #1
 800221e:	2300      	movne	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d012      	beq.n	800224c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800222e:	d004      	beq.n	800223a <HAL_ADC_Init+0x172>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a62      	ldr	r2, [pc, #392]	; (80023c0 <HAL_ADC_Init+0x2f8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d101      	bne.n	800223e <HAL_ADC_Init+0x176>
 800223a:	4a65      	ldr	r2, [pc, #404]	; (80023d0 <HAL_ADC_Init+0x308>)
 800223c:	e000      	b.n	8002240 <HAL_ADC_Init+0x178>
 800223e:	4a65      	ldr	r2, [pc, #404]	; (80023d4 <HAL_ADC_Init+0x30c>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f7ff fcfe 	bl	8001c48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7f5b      	ldrb	r3, [r3, #29]
 8002250:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002256:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800225c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002262:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800226a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002276:	2b01      	cmp	r3, #1
 8002278:	d106      	bne.n	8002288 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	3b01      	subs	r3, #1
 8002280:	045b      	lsls	r3, r3, #17
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	4b4b      	ldr	r3, [pc, #300]	; (80023d8 <HAL_ADC_Init+0x310>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	69b9      	ldr	r1, [r7, #24]
 80022b4:	430b      	orrs	r3, r1
 80022b6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fed1 	bl	800207a <LL_ADC_REG_IsConversionOngoing>
 80022d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fede 	bl	80020a0 <LL_ADC_INJ_IsConversionOngoing>
 80022e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d17f      	bne.n	80023ec <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d17c      	bne.n	80023ec <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022f6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022fe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800230e:	f023 0302 	bic.w	r3, r3, #2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	69b9      	ldr	r1, [r7, #24]
 8002318:	430b      	orrs	r3, r1
 800231a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d017      	beq.n	8002354 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002332:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800233c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6911      	ldr	r1, [r2, #16]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	430b      	orrs	r3, r1
 800234e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002352:	e013      	b.n	800237c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002362:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002374:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002378:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002382:	2b01      	cmp	r3, #1
 8002384:	d12a      	bne.n	80023dc <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002390:	f023 0304 	bic.w	r3, r3, #4
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800239c:	4311      	orrs	r1, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023a2:	4311      	orrs	r1, r2
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023a8:	430a      	orrs	r2, r1
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0201 	orr.w	r2, r2, #1
 80023b4:	611a      	str	r2, [r3, #16]
 80023b6:	e019      	b.n	80023ec <HAL_ADC_Init+0x324>
 80023b8:	20000404 	.word	0x20000404
 80023bc:	053e2d63 	.word	0x053e2d63
 80023c0:	50000100 	.word	0x50000100
 80023c4:	50000400 	.word	0x50000400
 80023c8:	50000500 	.word	0x50000500
 80023cc:	50000600 	.word	0x50000600
 80023d0:	50000300 	.word	0x50000300
 80023d4:	50000700 	.word	0x50000700
 80023d8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0201 	bic.w	r2, r2, #1
 80023ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d10c      	bne.n	800240e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f023 010f 	bic.w	r1, r3, #15
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	1e5a      	subs	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
 800240c:	e007      	b.n	800241e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 020f 	bic.w	r2, r2, #15
 800241c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	f023 0303 	bic.w	r3, r3, #3
 8002426:	f043 0201 	orr.w	r2, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	65da      	str	r2, [r3, #92]	; 0x5c
 800242e:	e007      	b.n	8002440 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002434:	f043 0210 	orr.w	r2, r3, #16
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002440:	7ffb      	ldrb	r3, [r7, #31]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd90      	pop	{r4, r7, pc}
 800244a:	bf00      	nop

0800244c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800245c:	d004      	beq.n	8002468 <HAL_ADC_Start+0x1c>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a67      	ldr	r2, [pc, #412]	; (8002600 <HAL_ADC_Start+0x1b4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d101      	bne.n	800246c <HAL_ADC_Start+0x20>
 8002468:	4b66      	ldr	r3, [pc, #408]	; (8002604 <HAL_ADC_Start+0x1b8>)
 800246a:	e000      	b.n	800246e <HAL_ADC_Start+0x22>
 800246c:	4b66      	ldr	r3, [pc, #408]	; (8002608 <HAL_ADC_Start+0x1bc>)
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fd5e 	bl	8001f30 <LL_ADC_GetMultimode>
 8002474:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fdfd 	bl	800207a <LL_ADC_REG_IsConversionOngoing>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 80b4 	bne.w	80025f0 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_ADC_Start+0x4a>
 8002492:	2302      	movs	r3, #2
 8002494:	e0af      	b.n	80025f6 <HAL_ADC_Start+0x1aa>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 ff74 	bl	800338c <ADC_Enable>
 80024a4:	4603      	mov	r3, r0
 80024a6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 809b 	bne.w	80025e6 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a4d      	ldr	r2, [pc, #308]	; (8002600 <HAL_ADC_Start+0x1b4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d009      	beq.n	80024e2 <HAL_ADC_Start+0x96>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a4e      	ldr	r2, [pc, #312]	; (800260c <HAL_ADC_Start+0x1c0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d002      	beq.n	80024de <HAL_ADC_Start+0x92>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	e003      	b.n	80024e6 <HAL_ADC_Start+0x9a>
 80024de:	4b4c      	ldr	r3, [pc, #304]	; (8002610 <HAL_ADC_Start+0x1c4>)
 80024e0:	e001      	b.n	80024e6 <HAL_ADC_Start+0x9a>
 80024e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d002      	beq.n	80024f4 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250c:	d106      	bne.n	800251c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002512:	f023 0206 	bic.w	r2, r3, #6
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	661a      	str	r2, [r3, #96]	; 0x60
 800251a:	e002      	b.n	8002522 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	221c      	movs	r2, #28
 8002528:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a32      	ldr	r2, [pc, #200]	; (8002600 <HAL_ADC_Start+0x1b4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d009      	beq.n	8002550 <HAL_ADC_Start+0x104>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a32      	ldr	r2, [pc, #200]	; (800260c <HAL_ADC_Start+0x1c0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d002      	beq.n	800254c <HAL_ADC_Start+0x100>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	e003      	b.n	8002554 <HAL_ADC_Start+0x108>
 800254c:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_ADC_Start+0x1c4>)
 800254e:	e001      	b.n	8002554 <HAL_ADC_Start+0x108>
 8002550:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	4293      	cmp	r3, r2
 800255a:	d008      	beq.n	800256e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b05      	cmp	r3, #5
 8002566:	d002      	beq.n	800256e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	2b09      	cmp	r3, #9
 800256c:	d114      	bne.n	8002598 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002584:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fd5e 	bl	8002052 <LL_ADC_REG_StartConversion>
 8002596:	e02d      	b.n	80025f4 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a15      	ldr	r2, [pc, #84]	; (8002600 <HAL_ADC_Start+0x1b4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d009      	beq.n	80025c2 <HAL_ADC_Start+0x176>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a16      	ldr	r2, [pc, #88]	; (800260c <HAL_ADC_Start+0x1c0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d002      	beq.n	80025be <HAL_ADC_Start+0x172>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	e003      	b.n	80025c6 <HAL_ADC_Start+0x17a>
 80025be:	4b14      	ldr	r3, [pc, #80]	; (8002610 <HAL_ADC_Start+0x1c4>)
 80025c0:	e001      	b.n	80025c6 <HAL_ADC_Start+0x17a>
 80025c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025c6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00f      	beq.n	80025f4 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80025e4:	e006      	b.n	80025f4 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80025ee:	e001      	b.n	80025f4 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025f0:	2302      	movs	r3, #2
 80025f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	50000100 	.word	0x50000100
 8002604:	50000300 	.word	0x50000300
 8002608:	50000700 	.word	0x50000700
 800260c:	50000500 	.word	0x50000500
 8002610:	50000400 	.word	0x50000400

08002614 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	; 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002638:	2300      	movs	r3, #0
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002654:	d004      	beq.n	8002660 <HAL_ADC_IRQHandler+0x30>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a95      	ldr	r2, [pc, #596]	; (80028b0 <HAL_ADC_IRQHandler+0x280>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d101      	bne.n	8002664 <HAL_ADC_IRQHandler+0x34>
 8002660:	4b94      	ldr	r3, [pc, #592]	; (80028b4 <HAL_ADC_IRQHandler+0x284>)
 8002662:	e000      	b.n	8002666 <HAL_ADC_IRQHandler+0x36>
 8002664:	4b94      	ldr	r3, [pc, #592]	; (80028b8 <HAL_ADC_IRQHandler+0x288>)
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fc62 	bl	8001f30 <LL_ADC_GetMultimode>
 800266c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d017      	beq.n	80026a8 <HAL_ADC_IRQHandler+0x78>
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d012      	beq.n	80026a8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	2b00      	cmp	r3, #0
 800268c:	d105      	bne.n	800269a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 ff00 	bl	80034a0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2202      	movs	r2, #2
 80026a6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d004      	beq.n	80026bc <HAL_ADC_IRQHandler+0x8c>
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10b      	bne.n	80026d4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8094 	beq.w	80027f0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 808e 	beq.w	80027f0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fb7b 	bl	8001dec <LL_ADC_REG_IsTriggerSourceSWStart>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d072      	beq.n	80027e2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a6b      	ldr	r2, [pc, #428]	; (80028b0 <HAL_ADC_IRQHandler+0x280>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d009      	beq.n	800271a <HAL_ADC_IRQHandler+0xea>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a6c      	ldr	r2, [pc, #432]	; (80028bc <HAL_ADC_IRQHandler+0x28c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d002      	beq.n	8002716 <HAL_ADC_IRQHandler+0xe6>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	e003      	b.n	800271e <HAL_ADC_IRQHandler+0xee>
 8002716:	4b6a      	ldr	r3, [pc, #424]	; (80028c0 <HAL_ADC_IRQHandler+0x290>)
 8002718:	e001      	b.n	800271e <HAL_ADC_IRQHandler+0xee>
 800271a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	4293      	cmp	r3, r2
 8002724:	d008      	beq.n	8002738 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2b05      	cmp	r3, #5
 8002730:	d002      	beq.n	8002738 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b09      	cmp	r3, #9
 8002736:	d104      	bne.n	8002742 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	623b      	str	r3, [r7, #32]
 8002740:	e014      	b.n	800276c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a5a      	ldr	r2, [pc, #360]	; (80028b0 <HAL_ADC_IRQHandler+0x280>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d009      	beq.n	8002760 <HAL_ADC_IRQHandler+0x130>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a5a      	ldr	r2, [pc, #360]	; (80028bc <HAL_ADC_IRQHandler+0x28c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d002      	beq.n	800275c <HAL_ADC_IRQHandler+0x12c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	e003      	b.n	8002764 <HAL_ADC_IRQHandler+0x134>
 800275c:	4b58      	ldr	r3, [pc, #352]	; (80028c0 <HAL_ADC_IRQHandler+0x290>)
 800275e:	e001      	b.n	8002764 <HAL_ADC_IRQHandler+0x134>
 8002760:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002764:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d135      	bne.n	80027e2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b08      	cmp	r3, #8
 8002782:	d12e      	bne.n	80027e2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fc76 	bl	800207a <LL_ADC_REG_IsConversionOngoing>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d11a      	bne.n	80027ca <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 020c 	bic.w	r2, r2, #12
 80027a2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d112      	bne.n	80027e2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c0:	f043 0201 	orr.w	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80027c8:	e00b      	b.n	80027e2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	f043 0210 	orr.w	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027da:	f043 0201 	orr.w	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe fb4e 	bl	8000e84 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	220c      	movs	r2, #12
 80027ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <HAL_ADC_IRQHandler+0x1d4>
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10b      	bne.n	800281c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80b2 	beq.w	8002974 <HAL_ADC_IRQHandler+0x344>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80ac 	beq.w	8002974 <HAL_ADC_IRQHandler+0x344>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fb16 	bl	8001e6a <LL_ADC_INJ_IsTriggerSourceSWStart>
 800283e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fad1 	bl	8001dec <LL_ADC_REG_IsTriggerSourceSWStart>
 800284a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <HAL_ADC_IRQHandler+0x280>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d009      	beq.n	800286a <HAL_ADC_IRQHandler+0x23a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a18      	ldr	r2, [pc, #96]	; (80028bc <HAL_ADC_IRQHandler+0x28c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d002      	beq.n	8002866 <HAL_ADC_IRQHandler+0x236>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	e003      	b.n	800286e <HAL_ADC_IRQHandler+0x23e>
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <HAL_ADC_IRQHandler+0x290>)
 8002868:	e001      	b.n	800286e <HAL_ADC_IRQHandler+0x23e>
 800286a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	4293      	cmp	r3, r2
 8002874:	d008      	beq.n	8002888 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b06      	cmp	r3, #6
 8002880:	d002      	beq.n	8002888 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b07      	cmp	r3, #7
 8002886:	d104      	bne.n	8002892 <HAL_ADC_IRQHandler+0x262>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	623b      	str	r3, [r7, #32]
 8002890:	e01e      	b.n	80028d0 <HAL_ADC_IRQHandler+0x2a0>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a06      	ldr	r2, [pc, #24]	; (80028b0 <HAL_ADC_IRQHandler+0x280>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d013      	beq.n	80028c4 <HAL_ADC_IRQHandler+0x294>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a06      	ldr	r2, [pc, #24]	; (80028bc <HAL_ADC_IRQHandler+0x28c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d002      	beq.n	80028ac <HAL_ADC_IRQHandler+0x27c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	e00d      	b.n	80028c8 <HAL_ADC_IRQHandler+0x298>
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <HAL_ADC_IRQHandler+0x290>)
 80028ae:	e00b      	b.n	80028c8 <HAL_ADC_IRQHandler+0x298>
 80028b0:	50000100 	.word	0x50000100
 80028b4:	50000300 	.word	0x50000300
 80028b8:	50000700 	.word	0x50000700
 80028bc:	50000500 	.word	0x50000500
 80028c0:	50000400 	.word	0x50000400
 80028c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028c8:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d047      	beq.n	8002966 <HAL_ADC_IRQHandler+0x336>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <HAL_ADC_IRQHandler+0x2c0>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d03f      	beq.n	8002966 <HAL_ADC_IRQHandler+0x336>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d13a      	bne.n	8002966 <HAL_ADC_IRQHandler+0x336>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	2b40      	cmp	r3, #64	; 0x40
 80028fc:	d133      	bne.n	8002966 <HAL_ADC_IRQHandler+0x336>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d12e      	bne.n	8002966 <HAL_ADC_IRQHandler+0x336>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fbc7 	bl	80020a0 <LL_ADC_INJ_IsConversionOngoing>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d11a      	bne.n	800294e <HAL_ADC_IRQHandler+0x31e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002926:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d112      	bne.n	8002966 <HAL_ADC_IRQHandler+0x336>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	f043 0201 	orr.w	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	65da      	str	r2, [r3, #92]	; 0x5c
 800294c:	e00b      	b.n	8002966 <HAL_ADC_IRQHandler+0x336>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002952:	f043 0210 	orr.w	r2, r3, #16
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295e:	f043 0201 	orr.w	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fd72 	bl	8003450 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2260      	movs	r2, #96	; 0x60
 8002972:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297a:	2b00      	cmp	r3, #0
 800297c:	d011      	beq.n	80029a2 <HAL_ADC_IRQHandler+0x372>
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00c      	beq.n	80029a2 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f8a5 	bl	8002ae4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2280      	movs	r2, #128	; 0x80
 80029a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d012      	beq.n	80029d2 <HAL_ADC_IRQHandler+0x3a2>
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00d      	beq.n	80029d2 <HAL_ADC_IRQHandler+0x3a2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fd58 	bl	8003478 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d012      	beq.n	8002a02 <HAL_ADC_IRQHandler+0x3d2>
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <HAL_ADC_IRQHandler+0x3d2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fd4a 	bl	800348c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a00:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d043      	beq.n	8002a94 <HAL_ADC_IRQHandler+0x464>
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d03e      	beq.n	8002a94 <HAL_ADC_IRQHandler+0x464>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d102      	bne.n	8002a24 <HAL_ADC_IRQHandler+0x3f4>
    {
      overrun_error = 1UL;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
 8002a22:	e021      	b.n	8002a68 <HAL_ADC_IRQHandler+0x438>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d015      	beq.n	8002a56 <HAL_ADC_IRQHandler+0x426>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a32:	d004      	beq.n	8002a3e <HAL_ADC_IRQHandler+0x40e>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a27      	ldr	r2, [pc, #156]	; (8002ad8 <HAL_ADC_IRQHandler+0x4a8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_IRQHandler+0x412>
 8002a3e:	4b27      	ldr	r3, [pc, #156]	; (8002adc <HAL_ADC_IRQHandler+0x4ac>)
 8002a40:	e000      	b.n	8002a44 <HAL_ADC_IRQHandler+0x414>
 8002a42:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <HAL_ADC_IRQHandler+0x4b0>)
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fa81 	bl	8001f4c <LL_ADC_GetMultiDMATransfer>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00b      	beq.n	8002a68 <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8002a50:	2301      	movs	r3, #1
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
 8002a54:	e008      	b.n	8002a68 <HAL_ADC_IRQHandler+0x438>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8002a64:	2301      	movs	r3, #1
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d10e      	bne.n	8002a8c <HAL_ADC_IRQHandler+0x45c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a72:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7e:	f043 0202 	orr.w	r2, r3, #2
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f836 	bl	8002af8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2210      	movs	r2, #16
 8002a92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d018      	beq.n	8002ad0 <HAL_ADC_IRQHandler+0x4a0>
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <HAL_ADC_IRQHandler+0x4a0>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab8:	f043 0208 	orr.w	r2, r3, #8
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ac8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fcca 	bl	8003464 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002ad0:	bf00      	nop
 8002ad2:	3728      	adds	r7, #40	; 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	50000100 	.word	0x50000100
 8002adc:	50000300 	.word	0x50000300
 8002ae0:	50000700 	.word	0x50000700

08002ae4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b0b6      	sub	sp, #216	; 0xd8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d102      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x24>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	f000 bc13 	b.w	8003356 <HAL_ADC_ConfigChannel+0x84a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fa9c 	bl	800207a <LL_ADC_REG_IsConversionOngoing>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f040 83f3 	bne.w	8003330 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6859      	ldr	r1, [r3, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f7ff f95b 	bl	8001e12 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fa8a 	bl	800207a <LL_ADC_REG_IsConversionOngoing>
 8002b66:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fa96 	bl	80020a0 <LL_ADC_INJ_IsConversionOngoing>
 8002b74:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f040 81d9 	bne.w	8002f34 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 81d4 	bne.w	8002f34 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b94:	d10f      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f7ff f975 	bl	8001e90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff f909 	bl	8001dc6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002bb4:	e00e      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f7ff f964 	bl	8001e90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff f8f9 	bl	8001dc6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	08db      	lsrs	r3, r3, #3
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d022      	beq.n	8002c3c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6919      	ldr	r1, [r3, #16]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c06:	f7ff f853 	bl	8001cb0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6919      	ldr	r1, [r3, #16]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f7ff f89f 	bl	8001d5a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	6919      	ldr	r1, [r3, #16]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	7f1b      	ldrb	r3, [r3, #28]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d102      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x126>
 8002c2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c30:	e000      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x128>
 8002c32:	2300      	movs	r3, #0
 8002c34:	461a      	mov	r2, r3
 8002c36:	f7ff f8ab 	bl	8001d90 <LL_ADC_SetOffsetSaturation>
 8002c3a:	e17b      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2100      	movs	r1, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff f858 	bl	8001cf8 <LL_ADC_GetOffsetChannel>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10a      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x15c>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff f84d 	bl	8001cf8 <LL_ADC_GetOffsetChannel>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	0e9b      	lsrs	r3, r3, #26
 8002c62:	f003 021f 	and.w	r2, r3, #31
 8002c66:	e01e      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x19a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff f842 	bl	8001cf8 <LL_ADC_GetOffsetChannel>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002c96:	2320      	movs	r3, #32
 8002c98:	e004      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002c9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x1b2>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	0e9b      	lsrs	r3, r3, #26
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	e018      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x1e4>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002cda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	e004      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002ce6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d106      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff f811 	bl	8001d24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2101      	movs	r1, #1
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe fff5 	bl	8001cf8 <LL_ADC_GetOffsetChannel>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x222>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe ffea 	bl	8001cf8 <LL_ADC_GetOffsetChannel>
 8002d24:	4603      	mov	r3, r0
 8002d26:	0e9b      	lsrs	r3, r3, #26
 8002d28:	f003 021f 	and.w	r2, r3, #31
 8002d2c:	e01e      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x260>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2101      	movs	r1, #1
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe ffdf 	bl	8001cf8 <LL_ADC_GetOffsetChannel>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d44:	fa93 f3a3 	rbit	r3, r3
 8002d48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002d4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002d54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	e004      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002d60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d105      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x278>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	0e9b      	lsrs	r3, r3, #26
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	e018      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x2aa>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002d98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002da8:	2320      	movs	r3, #32
 8002daa:	e004      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002db0:	fab3 f383 	clz	r3, r3
 8002db4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d106      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe ffae 	bl	8001d24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2102      	movs	r1, #2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe ff92 	bl	8001cf8 <LL_ADC_GetOffsetChannel>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10a      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x2e8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2102      	movs	r1, #2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fe ff87 	bl	8001cf8 <LL_ADC_GetOffsetChannel>
 8002dea:	4603      	mov	r3, r0
 8002dec:	0e9b      	lsrs	r3, r3, #26
 8002dee:	f003 021f 	and.w	r2, r3, #31
 8002df2:	e01e      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x326>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2102      	movs	r1, #2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe ff7c 	bl	8001cf8 <LL_ADC_GetOffsetChannel>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002e12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002e1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002e22:	2320      	movs	r3, #32
 8002e24:	e004      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002e26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x33e>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	0e9b      	lsrs	r3, r3, #26
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	e016      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x36c>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002e5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002e6a:	2320      	movs	r3, #32
 8002e6c:	e004      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d106      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2200      	movs	r2, #0
 8002e82:	2102      	movs	r1, #2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe ff4d 	bl	8001d24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2103      	movs	r1, #3
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe ff31 	bl	8001cf8 <LL_ADC_GetOffsetChannel>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10a      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x3aa>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2103      	movs	r1, #3
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe ff26 	bl	8001cf8 <LL_ADC_GetOffsetChannel>
 8002eac:	4603      	mov	r3, r0
 8002eae:	0e9b      	lsrs	r3, r3, #26
 8002eb0:	f003 021f 	and.w	r2, r3, #31
 8002eb4:	e017      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x3da>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2103      	movs	r1, #3
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe ff1b 	bl	8001cf8 <LL_ADC_GetOffsetChannel>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002ece:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ed0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002ed8:	2320      	movs	r3, #32
 8002eda:	e003      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d105      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x3f2>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	0e9b      	lsrs	r3, r3, #26
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	e011      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x416>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002f16:	2320      	movs	r3, #32
 8002f18:	e003      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d106      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2103      	movs	r1, #3
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe fef8 	bl	8001d24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff f877 	bl	800202c <LL_ADC_IsEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f040 813d 	bne.w	80031c0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6819      	ldr	r1, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f7fe ffc8 	bl	8001ee8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4aa2      	ldr	r2, [pc, #648]	; (80031e8 <HAL_ADC_ConfigChannel+0x6dc>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	f040 812e 	bne.w	80031c0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10b      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x480>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	0e9b      	lsrs	r3, r3, #26
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	2b09      	cmp	r3, #9
 8002f82:	bf94      	ite	ls
 8002f84:	2301      	movls	r3, #1
 8002f86:	2300      	movhi	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e019      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x4b4>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f9c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	e003      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002fa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	2b09      	cmp	r3, #9
 8002fb8:	bf94      	ite	ls
 8002fba:	2301      	movls	r3, #1
 8002fbc:	2300      	movhi	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d079      	beq.n	80030b8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d107      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x4d4>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0e9b      	lsrs	r3, r3, #26
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	069b      	lsls	r3, r3, #26
 8002fda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fde:	e015      	b.n	800300c <HAL_ADC_ConfigChannel+0x500>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	e003      	b.n	8003004 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	3301      	adds	r3, #1
 8003006:	069b      	lsls	r3, r3, #26
 8003008:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <HAL_ADC_ConfigChannel+0x520>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0e9b      	lsrs	r3, r3, #26
 800301e:	3301      	adds	r3, #1
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	2101      	movs	r1, #1
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	e017      	b.n	800305c <HAL_ADC_ConfigChannel+0x550>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800303a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800303c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800303e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003044:	2320      	movs	r3, #32
 8003046:	e003      	b.n	8003050 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	3301      	adds	r3, #1
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	2101      	movs	r1, #1
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	ea42 0103 	orr.w	r1, r2, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x576>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	0e9b      	lsrs	r3, r3, #26
 8003072:	3301      	adds	r3, #1
 8003074:	f003 021f 	and.w	r2, r3, #31
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	051b      	lsls	r3, r3, #20
 8003080:	e018      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x5a8>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003092:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800309a:	2320      	movs	r3, #32
 800309c:	e003      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800309e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	3301      	adds	r3, #1
 80030a8:	f003 021f 	and.w	r2, r3, #31
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030b4:	430b      	orrs	r3, r1
 80030b6:	e07e      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d107      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x5c8>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	0e9b      	lsrs	r3, r3, #26
 80030ca:	3301      	adds	r3, #1
 80030cc:	069b      	lsls	r3, r3, #26
 80030ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030d2:	e015      	b.n	8003100 <HAL_ADC_ConfigChannel+0x5f4>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80030ec:	2320      	movs	r3, #32
 80030ee:	e003      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80030f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	069b      	lsls	r3, r3, #26
 80030fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003108:	2b00      	cmp	r3, #0
 800310a:	d109      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x614>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	0e9b      	lsrs	r3, r3, #26
 8003112:	3301      	adds	r3, #1
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	2101      	movs	r1, #1
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	e017      	b.n	8003150 <HAL_ADC_ConfigChannel+0x644>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	61fb      	str	r3, [r7, #28]
  return result;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003138:	2320      	movs	r3, #32
 800313a:	e003      	b.n	8003144 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	3301      	adds	r3, #1
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	2101      	movs	r1, #1
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	ea42 0103 	orr.w	r1, r2, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10d      	bne.n	800317c <HAL_ADC_ConfigChannel+0x670>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	0e9b      	lsrs	r3, r3, #26
 8003166:	3301      	adds	r3, #1
 8003168:	f003 021f 	and.w	r2, r3, #31
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	3b1e      	subs	r3, #30
 8003174:	051b      	lsls	r3, r3, #20
 8003176:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800317a:	e01b      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x6a8>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	613b      	str	r3, [r7, #16]
  return result;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003194:	2320      	movs	r3, #32
 8003196:	e003      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	fab3 f383 	clz	r3, r3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	3301      	adds	r3, #1
 80031a2:	f003 021f 	and.w	r2, r3, #31
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	3b1e      	subs	r3, #30
 80031ae:	051b      	lsls	r3, r3, #20
 80031b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031b4:	430b      	orrs	r3, r1
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	6892      	ldr	r2, [r2, #8]
 80031ba:	4619      	mov	r1, r3
 80031bc:	f7fe fe68 	bl	8001e90 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4b09      	ldr	r3, [pc, #36]	; (80031ec <HAL_ADC_ConfigChannel+0x6e0>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80be 	beq.w	800334a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d6:	d004      	beq.n	80031e2 <HAL_ADC_ConfigChannel+0x6d6>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a04      	ldr	r2, [pc, #16]	; (80031f0 <HAL_ADC_ConfigChannel+0x6e4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d10a      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x6ec>
 80031e2:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <HAL_ADC_ConfigChannel+0x6e8>)
 80031e4:	e009      	b.n	80031fa <HAL_ADC_ConfigChannel+0x6ee>
 80031e6:	bf00      	nop
 80031e8:	407f0000 	.word	0x407f0000
 80031ec:	80080000 	.word	0x80080000
 80031f0:	50000100 	.word	0x50000100
 80031f4:	50000300 	.word	0x50000300
 80031f8:	4b59      	ldr	r3, [pc, #356]	; (8003360 <HAL_ADC_ConfigChannel+0x854>)
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe fd4a 	bl	8001c94 <LL_ADC_GetCommonPathInternalCh>
 8003200:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a56      	ldr	r2, [pc, #344]	; (8003364 <HAL_ADC_ConfigChannel+0x858>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d004      	beq.n	8003218 <HAL_ADC_ConfigChannel+0x70c>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a55      	ldr	r2, [pc, #340]	; (8003368 <HAL_ADC_ConfigChannel+0x85c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d13a      	bne.n	800328e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800321c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d134      	bne.n	800328e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800322c:	d005      	beq.n	800323a <HAL_ADC_ConfigChannel+0x72e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a4e      	ldr	r2, [pc, #312]	; (800336c <HAL_ADC_ConfigChannel+0x860>)
 8003234:	4293      	cmp	r3, r2
 8003236:	f040 8085 	bne.w	8003344 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003242:	d004      	beq.n	800324e <HAL_ADC_ConfigChannel+0x742>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a49      	ldr	r2, [pc, #292]	; (8003370 <HAL_ADC_ConfigChannel+0x864>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x746>
 800324e:	4a49      	ldr	r2, [pc, #292]	; (8003374 <HAL_ADC_ConfigChannel+0x868>)
 8003250:	e000      	b.n	8003254 <HAL_ADC_ConfigChannel+0x748>
 8003252:	4a43      	ldr	r2, [pc, #268]	; (8003360 <HAL_ADC_ConfigChannel+0x854>)
 8003254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003258:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800325c:	4619      	mov	r1, r3
 800325e:	4610      	mov	r0, r2
 8003260:	f7fe fd05 	bl	8001c6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003264:	4b44      	ldr	r3, [pc, #272]	; (8003378 <HAL_ADC_ConfigChannel+0x86c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	099b      	lsrs	r3, r3, #6
 800326a:	4a44      	ldr	r2, [pc, #272]	; (800337c <HAL_ADC_ConfigChannel+0x870>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	099b      	lsrs	r3, r3, #6
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	4613      	mov	r3, r2
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800327e:	e002      	b.n	8003286 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3b01      	subs	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f9      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800328c:	e05a      	b.n	8003344 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a3b      	ldr	r2, [pc, #236]	; (8003380 <HAL_ADC_ConfigChannel+0x874>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d125      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x7d8>
 8003298:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800329c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d11f      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a31      	ldr	r2, [pc, #196]	; (8003370 <HAL_ADC_ConfigChannel+0x864>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d104      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x7ac>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a34      	ldr	r2, [pc, #208]	; (8003384 <HAL_ADC_ConfigChannel+0x878>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d047      	beq.n	8003348 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c0:	d004      	beq.n	80032cc <HAL_ADC_ConfigChannel+0x7c0>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a2a      	ldr	r2, [pc, #168]	; (8003370 <HAL_ADC_ConfigChannel+0x864>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x7c4>
 80032cc:	4a29      	ldr	r2, [pc, #164]	; (8003374 <HAL_ADC_ConfigChannel+0x868>)
 80032ce:	e000      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x7c6>
 80032d0:	4a23      	ldr	r2, [pc, #140]	; (8003360 <HAL_ADC_ConfigChannel+0x854>)
 80032d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f7fe fcc6 	bl	8001c6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032e2:	e031      	b.n	8003348 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a27      	ldr	r2, [pc, #156]	; (8003388 <HAL_ADC_ConfigChannel+0x87c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d12d      	bne.n	800334a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d127      	bne.n	800334a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_ADC_ConfigChannel+0x864>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d022      	beq.n	800334a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800330c:	d004      	beq.n	8003318 <HAL_ADC_ConfigChannel+0x80c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a17      	ldr	r2, [pc, #92]	; (8003370 <HAL_ADC_ConfigChannel+0x864>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d101      	bne.n	800331c <HAL_ADC_ConfigChannel+0x810>
 8003318:	4a16      	ldr	r2, [pc, #88]	; (8003374 <HAL_ADC_ConfigChannel+0x868>)
 800331a:	e000      	b.n	800331e <HAL_ADC_ConfigChannel+0x812>
 800331c:	4a10      	ldr	r2, [pc, #64]	; (8003360 <HAL_ADC_ConfigChannel+0x854>)
 800331e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003322:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003326:	4619      	mov	r1, r3
 8003328:	4610      	mov	r0, r2
 800332a:	f7fe fca0 	bl	8001c6e <LL_ADC_SetCommonPathInternalCh>
 800332e:	e00c      	b.n	800334a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	f043 0220 	orr.w	r2, r3, #32
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003342:	e002      	b.n	800334a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003344:	bf00      	nop
 8003346:	e000      	b.n	800334a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003348:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003352:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003356:	4618      	mov	r0, r3
 8003358:	37d8      	adds	r7, #216	; 0xd8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	50000700 	.word	0x50000700
 8003364:	c3210000 	.word	0xc3210000
 8003368:	90c00010 	.word	0x90c00010
 800336c:	50000600 	.word	0x50000600
 8003370:	50000100 	.word	0x50000100
 8003374:	50000300 	.word	0x50000300
 8003378:	20000404 	.word	0x20000404
 800337c:	053e2d63 	.word	0x053e2d63
 8003380:	c7520000 	.word	0xc7520000
 8003384:	50000500 	.word	0x50000500
 8003388:	cb840000 	.word	0xcb840000

0800338c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe fe47 	bl	800202c <LL_ADC_IsEnabled>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d14d      	bne.n	8003440 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	4b28      	ldr	r3, [pc, #160]	; (800344c <ADC_Enable+0xc0>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00d      	beq.n	80033ce <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b6:	f043 0210 	orr.w	r2, r3, #16
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c2:	f043 0201 	orr.w	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e039      	b.n	8003442 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fe16 	bl	8002004 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033d8:	f7fe fc08 	bl	8001bec <HAL_GetTick>
 80033dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033de:	e028      	b.n	8003432 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fe fe21 	bl	800202c <LL_ADC_IsEnabled>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d104      	bne.n	80033fa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fe05 	bl	8002004 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033fa:	f7fe fbf7 	bl	8001bec <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d914      	bls.n	8003432 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b01      	cmp	r3, #1
 8003414:	d00d      	beq.n	8003432 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	f043 0210 	orr.w	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003426:	f043 0201 	orr.w	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e007      	b.n	8003442 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d1cf      	bne.n	80033e0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	8000003f 	.word	0x8000003f

08003450 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <__NVIC_SetPriorityGrouping+0x44>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034d0:	4013      	ands	r3, r2
 80034d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034e6:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <__NVIC_SetPriorityGrouping+0x44>)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	60d3      	str	r3, [r2, #12]
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003500:	4b04      	ldr	r3, [pc, #16]	; (8003514 <__NVIC_GetPriorityGrouping+0x18>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	0a1b      	lsrs	r3, r3, #8
 8003506:	f003 0307 	and.w	r3, r3, #7
}
 800350a:	4618      	mov	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003526:	2b00      	cmp	r3, #0
 8003528:	db0b      	blt.n	8003542 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	f003 021f 	and.w	r2, r3, #31
 8003530:	4907      	ldr	r1, [pc, #28]	; (8003550 <__NVIC_EnableIRQ+0x38>)
 8003532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	2001      	movs	r0, #1
 800353a:	fa00 f202 	lsl.w	r2, r0, r2
 800353e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000e100 	.word	0xe000e100

08003554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	6039      	str	r1, [r7, #0]
 800355e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003564:	2b00      	cmp	r3, #0
 8003566:	db0a      	blt.n	800357e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	b2da      	uxtb	r2, r3
 800356c:	490c      	ldr	r1, [pc, #48]	; (80035a0 <__NVIC_SetPriority+0x4c>)
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	0112      	lsls	r2, r2, #4
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	440b      	add	r3, r1
 8003578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800357c:	e00a      	b.n	8003594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	b2da      	uxtb	r2, r3
 8003582:	4908      	ldr	r1, [pc, #32]	; (80035a4 <__NVIC_SetPriority+0x50>)
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	3b04      	subs	r3, #4
 800358c:	0112      	lsls	r2, r2, #4
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	440b      	add	r3, r1
 8003592:	761a      	strb	r2, [r3, #24]
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000e100 	.word	0xe000e100
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b089      	sub	sp, #36	; 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f1c3 0307 	rsb	r3, r3, #7
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	bf28      	it	cs
 80035c6:	2304      	movcs	r3, #4
 80035c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	3304      	adds	r3, #4
 80035ce:	2b06      	cmp	r3, #6
 80035d0:	d902      	bls.n	80035d8 <NVIC_EncodePriority+0x30>
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3b03      	subs	r3, #3
 80035d6:	e000      	b.n	80035da <NVIC_EncodePriority+0x32>
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035dc:	f04f 32ff 	mov.w	r2, #4294967295
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43da      	mvns	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	401a      	ands	r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f0:	f04f 31ff 	mov.w	r1, #4294967295
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	fa01 f303 	lsl.w	r3, r1, r3
 80035fa:	43d9      	mvns	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003600:	4313      	orrs	r3, r2
         );
}
 8003602:	4618      	mov	r0, r3
 8003604:	3724      	adds	r7, #36	; 0x24
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3b01      	subs	r3, #1
 800361c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003620:	d301      	bcc.n	8003626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003622:	2301      	movs	r3, #1
 8003624:	e00f      	b.n	8003646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003626:	4a0a      	ldr	r2, [pc, #40]	; (8003650 <SysTick_Config+0x40>)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3b01      	subs	r3, #1
 800362c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800362e:	210f      	movs	r1, #15
 8003630:	f04f 30ff 	mov.w	r0, #4294967295
 8003634:	f7ff ff8e 	bl	8003554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <SysTick_Config+0x40>)
 800363a:	2200      	movs	r2, #0
 800363c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800363e:	4b04      	ldr	r3, [pc, #16]	; (8003650 <SysTick_Config+0x40>)
 8003640:	2207      	movs	r2, #7
 8003642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	e000e010 	.word	0xe000e010

08003654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff ff29 	bl	80034b4 <__NVIC_SetPriorityGrouping>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b086      	sub	sp, #24
 800366e:	af00      	add	r7, sp, #0
 8003670:	4603      	mov	r3, r0
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003678:	f7ff ff40 	bl	80034fc <__NVIC_GetPriorityGrouping>
 800367c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	6978      	ldr	r0, [r7, #20]
 8003684:	f7ff ff90 	bl	80035a8 <NVIC_EncodePriority>
 8003688:	4602      	mov	r2, r0
 800368a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff ff5f 	bl	8003554 <__NVIC_SetPriority>
}
 8003696:	bf00      	nop
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	4603      	mov	r3, r0
 80036a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ff33 	bl	8003518 <__NVIC_EnableIRQ>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ffa4 	bl	8003610 <SysTick_Config>
 80036c8:	4603      	mov	r3, r0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e014      	b.n	800370e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	791b      	ldrb	r3, [r3, #4]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d105      	bne.n	80036fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7fe f865 	bl	80017c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2202      	movs	r2, #2
 80036fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	795b      	ldrb	r3, [r3, #5]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_DAC_Start+0x16>
 8003728:	2302      	movs	r3, #2
 800372a:	e043      	b.n	80037b4 <HAL_DAC_Start+0x9e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2202      	movs	r2, #2
 8003736:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6819      	ldr	r1, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2201      	movs	r2, #1
 8003746:	409a      	lsls	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003750:	2001      	movs	r0, #1
 8003752:	f7fe fa57 	bl	8001c04 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10f      	bne.n	800377c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003766:	2b02      	cmp	r3, #2
 8003768:	d11d      	bne.n	80037a6 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0201 	orr.w	r2, r2, #1
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	e014      	b.n	80037a6 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2102      	movs	r1, #2
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	429a      	cmp	r2, r3
 8003794:	d107      	bne.n	80037a6 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 0202 	orr.w	r2, r2, #2
 80037a4:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d2:	d120      	bne.n	8003816 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e2:	d118      	bne.n	8003816 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2204      	movs	r2, #4
 80037e8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f043 0201 	orr.w	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800380e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f855 	bl	80038c0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003824:	d120      	bne.n	8003868 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003834:	d118      	bne.n	8003868 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2204      	movs	r2, #4
 800383a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f043 0202 	orr.w	r2, r3, #2
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003850:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003860:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f9de 	bl	8003c24 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d105      	bne.n	80038a0 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	3308      	adds	r3, #8
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	e004      	b.n	80038aa <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	3314      	adds	r3, #20
 80038a8:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	461a      	mov	r2, r3
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	371c      	adds	r7, #28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	; 0x28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	795b      	ldrb	r3, [r3, #5]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_DAC_ConfigChannel+0x18>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e192      	b.n	8003c12 <HAL_DAC_ConfigChannel+0x33e>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2202      	movs	r2, #2
 80038f6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d174      	bne.n	80039ea <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003900:	f7fe f974 	bl	8001bec <HAL_GetTick>
 8003904:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d134      	bne.n	8003976 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800390c:	e011      	b.n	8003932 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800390e:	f7fe f96d 	bl	8001bec <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d90a      	bls.n	8003932 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f043 0208 	orr.w	r2, r3, #8
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2203      	movs	r2, #3
 800392c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e16f      	b.n	8003c12 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e6      	bne.n	800390e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003940:	2001      	movs	r0, #1
 8003942:	f7fe f95f 	bl	8001c04 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800394e:	641a      	str	r2, [r3, #64]	; 0x40
 8003950:	e01e      	b.n	8003990 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003952:	f7fe f94b 	bl	8001bec <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b01      	cmp	r3, #1
 800395e:	d90a      	bls.n	8003976 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f043 0208 	orr.w	r2, r3, #8
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2203      	movs	r2, #3
 8003970:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e14d      	b.n	8003c12 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397c:	2b00      	cmp	r3, #0
 800397e:	dbe8      	blt.n	8003952 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003980:	2001      	movs	r0, #1
 8003982:	f7fe f93f 	bl	8001c04 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800398e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80039a0:	fa01 f303 	lsl.w	r3, r1, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	ea02 0103 	and.w	r1, r2, r3
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	409a      	lsls	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	21ff      	movs	r1, #255	; 0xff
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	ea02 0103 	and.w	r1, r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	409a      	lsls	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d11d      	bne.n	8003a2e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	221f      	movs	r2, #31
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f003 0310 	and.w	r3, r3, #16
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	4313      	orrs	r3, r2
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2207      	movs	r2, #7
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a46:	4013      	ands	r3, r2
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d102      	bne.n	8003a58 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	623b      	str	r3, [r7, #32]
 8003a56:	e00f      	b.n	8003a78 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d102      	bne.n	8003a66 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003a60:	2301      	movs	r3, #1
 8003a62:	623b      	str	r3, [r7, #32]
 8003a64:	e008      	b.n	8003a78 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	623b      	str	r3, [r7, #32]
 8003a72:	e001      	b.n	8003a78 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	6a3a      	ldr	r2, [r7, #32]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	791b      	ldrb	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d102      	bne.n	8003aac <HAL_DAC_ConfigChannel+0x1d8>
 8003aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aaa:	e000      	b.n	8003aae <HAL_DAC_ConfigChannel+0x1da>
 8003aac:	2300      	movs	r3, #0
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	795b      	ldrb	r3, [r3, #5]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d102      	bne.n	8003ad8 <HAL_DAC_ConfigChannel+0x204>
 8003ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ad6:	e000      	b.n	8003ada <HAL_DAC_ConfigChannel+0x206>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d114      	bne.n	8003b1a <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003af0:	f001 f866 	bl	8004bc0 <HAL_RCC_GetHCLKFreq>
 8003af4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	4a48      	ldr	r2, [pc, #288]	; (8003c1c <HAL_DAC_ConfigChannel+0x348>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d904      	bls.n	8003b08 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
 8003b06:	e00f      	b.n	8003b28 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	4a45      	ldr	r2, [pc, #276]	; (8003c20 <HAL_DAC_ConfigChannel+0x34c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d90a      	bls.n	8003b26 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
 8003b18:	e006      	b.n	8003b28 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b20:	4313      	orrs	r3, r2
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
 8003b24:	e000      	b.n	8003b28 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003b26:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b36:	4313      	orrs	r3, r2
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6819      	ldr	r1, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43da      	mvns	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	400a      	ands	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43db      	mvns	r3, r3
 8003b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b92:	4313      	orrs	r3, r2
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6819      	ldr	r1, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	22c0      	movs	r2, #192	; 0xc0
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43da      	mvns	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	400a      	ands	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	089b      	lsrs	r3, r3, #2
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	089b      	lsrs	r3, r3, #2
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003be8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	ea02 0103 	and.w	r1, r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	409a      	lsls	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3728      	adds	r7, #40	; 0x28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	09896800 	.word	0x09896800
 8003c20:	04c4b400 	.word	0x04c4b400

08003c24 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d005      	beq.n	8003c5c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2204      	movs	r2, #4
 8003c54:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
 8003c5a:	e037      	b.n	8003ccc <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 020e 	bic.w	r2, r2, #14
 8003c6a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c7a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0201 	bic.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c90:	f003 021f 	and.w	r2, r3, #31
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	2101      	movs	r1, #1
 8003c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ca8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00c      	beq.n	8003ccc <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cc0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cca:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d00d      	beq.n	8003d1e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2204      	movs	r2, #4
 8003d06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
 8003d1c:	e047      	b.n	8003dae <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 020e 	bic.w	r2, r2, #14
 8003d2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	f003 021f 	and.w	r2, r3, #31
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d60:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d6a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00c      	beq.n	8003d8e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d8c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	4798      	blx	r3
    }
  }
  return status;
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003dc6:	e15a      	b.n	800407e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 814c 	beq.w	8004078 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d00b      	beq.n	8003e00 <HAL_GPIO_Init+0x48>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d007      	beq.n	8003e00 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003df4:	2b11      	cmp	r3, #17
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b12      	cmp	r3, #18
 8003dfe:	d130      	bne.n	8003e62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4013      	ands	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e36:	2201      	movs	r2, #1
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4013      	ands	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	091b      	lsrs	r3, r3, #4
 8003e4c:	f003 0201 	and.w	r2, r3, #1
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4013      	ands	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_Init+0xea>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b12      	cmp	r3, #18
 8003ea0:	d123      	bne.n	8003eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	08da      	lsrs	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3208      	adds	r2, #8
 8003eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	220f      	movs	r2, #15
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	08da      	lsrs	r2, r3, #3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3208      	adds	r2, #8
 8003ee4:	6939      	ldr	r1, [r7, #16]
 8003ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4013      	ands	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0203 	and.w	r2, r3, #3
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80a6 	beq.w	8004078 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f2c:	4b5b      	ldr	r3, [pc, #364]	; (800409c <HAL_GPIO_Init+0x2e4>)
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f30:	4a5a      	ldr	r2, [pc, #360]	; (800409c <HAL_GPIO_Init+0x2e4>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6613      	str	r3, [r2, #96]	; 0x60
 8003f38:	4b58      	ldr	r3, [pc, #352]	; (800409c <HAL_GPIO_Init+0x2e4>)
 8003f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f44:	4a56      	ldr	r2, [pc, #344]	; (80040a0 <HAL_GPIO_Init+0x2e8>)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	089b      	lsrs	r3, r3, #2
 8003f4a:	3302      	adds	r3, #2
 8003f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	220f      	movs	r2, #15
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	43db      	mvns	r3, r3
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4013      	ands	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f6e:	d01f      	beq.n	8003fb0 <HAL_GPIO_Init+0x1f8>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a4c      	ldr	r2, [pc, #304]	; (80040a4 <HAL_GPIO_Init+0x2ec>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d019      	beq.n	8003fac <HAL_GPIO_Init+0x1f4>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a4b      	ldr	r2, [pc, #300]	; (80040a8 <HAL_GPIO_Init+0x2f0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d013      	beq.n	8003fa8 <HAL_GPIO_Init+0x1f0>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a4a      	ldr	r2, [pc, #296]	; (80040ac <HAL_GPIO_Init+0x2f4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00d      	beq.n	8003fa4 <HAL_GPIO_Init+0x1ec>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a49      	ldr	r2, [pc, #292]	; (80040b0 <HAL_GPIO_Init+0x2f8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d007      	beq.n	8003fa0 <HAL_GPIO_Init+0x1e8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a48      	ldr	r2, [pc, #288]	; (80040b4 <HAL_GPIO_Init+0x2fc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d101      	bne.n	8003f9c <HAL_GPIO_Init+0x1e4>
 8003f98:	2305      	movs	r3, #5
 8003f9a:	e00a      	b.n	8003fb2 <HAL_GPIO_Init+0x1fa>
 8003f9c:	2306      	movs	r3, #6
 8003f9e:	e008      	b.n	8003fb2 <HAL_GPIO_Init+0x1fa>
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	e006      	b.n	8003fb2 <HAL_GPIO_Init+0x1fa>
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e004      	b.n	8003fb2 <HAL_GPIO_Init+0x1fa>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e002      	b.n	8003fb2 <HAL_GPIO_Init+0x1fa>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <HAL_GPIO_Init+0x1fa>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	f002 0203 	and.w	r2, r2, #3
 8003fb8:	0092      	lsls	r2, r2, #2
 8003fba:	4093      	lsls	r3, r2
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fc2:	4937      	ldr	r1, [pc, #220]	; (80040a0 <HAL_GPIO_Init+0x2e8>)
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	089b      	lsrs	r3, r3, #2
 8003fc8:	3302      	adds	r3, #2
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fd0:	4b39      	ldr	r3, [pc, #228]	; (80040b8 <HAL_GPIO_Init+0x300>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ff4:	4a30      	ldr	r2, [pc, #192]	; (80040b8 <HAL_GPIO_Init+0x300>)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003ffa:	4b2f      	ldr	r3, [pc, #188]	; (80040b8 <HAL_GPIO_Init+0x300>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	43db      	mvns	r3, r3
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4013      	ands	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800401e:	4a26      	ldr	r2, [pc, #152]	; (80040b8 <HAL_GPIO_Init+0x300>)
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004024:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <HAL_GPIO_Init+0x300>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	43db      	mvns	r3, r3
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4013      	ands	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004048:	4a1b      	ldr	r2, [pc, #108]	; (80040b8 <HAL_GPIO_Init+0x300>)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800404e:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <HAL_GPIO_Init+0x300>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	43db      	mvns	r3, r3
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004072:	4a11      	ldr	r2, [pc, #68]	; (80040b8 <HAL_GPIO_Init+0x300>)
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	3301      	adds	r3, #1
 800407c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	f47f ae9d 	bne.w	8003dc8 <HAL_GPIO_Init+0x10>
  }
}
 800408e:	bf00      	nop
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40021000 	.word	0x40021000
 80040a0:	40010000 	.word	0x40010000
 80040a4:	48000400 	.word	0x48000400
 80040a8:	48000800 	.word	0x48000800
 80040ac:	48000c00 	.word	0x48000c00
 80040b0:	48001000 	.word	0x48001000
 80040b4:	48001400 	.word	0x48001400
 80040b8:	40010400 	.word	0x40010400

080040bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	807b      	strh	r3, [r7, #2]
 80040c8:	4613      	mov	r3, r2
 80040ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040cc:	787b      	ldrb	r3, [r7, #1]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040d2:	887a      	ldrh	r2, [r7, #2]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040d8:	e002      	b.n	80040e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040da:	887a      	ldrh	r2, [r7, #2]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d141      	bne.n	800417e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040fa:	4b4b      	ldr	r3, [pc, #300]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004106:	d131      	bne.n	800416c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004108:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800410a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800410e:	4a46      	ldr	r2, [pc, #280]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004114:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004118:	4b43      	ldr	r3, [pc, #268]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004120:	4a41      	ldr	r2, [pc, #260]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004126:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004128:	4b40      	ldr	r3, [pc, #256]	; (800422c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2232      	movs	r2, #50	; 0x32
 800412e:	fb02 f303 	mul.w	r3, r2, r3
 8004132:	4a3f      	ldr	r2, [pc, #252]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	0c9b      	lsrs	r3, r3, #18
 800413a:	3301      	adds	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800413e:	e002      	b.n	8004146 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3b01      	subs	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004146:	4b38      	ldr	r3, [pc, #224]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004152:	d102      	bne.n	800415a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f2      	bne.n	8004140 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800415a:	4b33      	ldr	r3, [pc, #204]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004166:	d158      	bne.n	800421a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e057      	b.n	800421c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800416c:	4b2e      	ldr	r3, [pc, #184]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004172:	4a2d      	ldr	r2, [pc, #180]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004178:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800417c:	e04d      	b.n	800421a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004184:	d141      	bne.n	800420a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004186:	4b28      	ldr	r3, [pc, #160]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800418e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004192:	d131      	bne.n	80041f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004194:	4b24      	ldr	r3, [pc, #144]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800419a:	4a23      	ldr	r2, [pc, #140]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041a4:	4b20      	ldr	r3, [pc, #128]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041ac:	4a1e      	ldr	r2, [pc, #120]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041b4:	4b1d      	ldr	r3, [pc, #116]	; (800422c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2232      	movs	r2, #50	; 0x32
 80041ba:	fb02 f303 	mul.w	r3, r2, r3
 80041be:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041c0:	fba2 2303 	umull	r2, r3, r2, r3
 80041c4:	0c9b      	lsrs	r3, r3, #18
 80041c6:	3301      	adds	r3, #1
 80041c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ca:	e002      	b.n	80041d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041de:	d102      	bne.n	80041e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f2      	bne.n	80041cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041e6:	4b10      	ldr	r3, [pc, #64]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f2:	d112      	bne.n	800421a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e011      	b.n	800421c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041fe:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004204:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004208:	e007      	b.n	800421a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004212:	4a05      	ldr	r2, [pc, #20]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004214:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004218:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	40007000 	.word	0x40007000
 800422c:	20000404 	.word	0x20000404
 8004230:	431bde83 	.word	0x431bde83

08004234 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4a04      	ldr	r2, [pc, #16]	; (8004250 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800423e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004242:	6093      	str	r3, [r2, #8]
}
 8004244:	bf00      	nop
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40007000 	.word	0x40007000

08004254 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e308      	b.n	8004878 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d075      	beq.n	800435e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004272:	4ba3      	ldr	r3, [pc, #652]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800427c:	4ba0      	ldr	r3, [pc, #640]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b0c      	cmp	r3, #12
 800428a:	d102      	bne.n	8004292 <HAL_RCC_OscConfig+0x3e>
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2b03      	cmp	r3, #3
 8004290:	d002      	beq.n	8004298 <HAL_RCC_OscConfig+0x44>
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b08      	cmp	r3, #8
 8004296:	d10b      	bne.n	80042b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004298:	4b99      	ldr	r3, [pc, #612]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d05b      	beq.n	800435c <HAL_RCC_OscConfig+0x108>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d157      	bne.n	800435c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e2e3      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b8:	d106      	bne.n	80042c8 <HAL_RCC_OscConfig+0x74>
 80042ba:	4b91      	ldr	r3, [pc, #580]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a90      	ldr	r2, [pc, #576]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	e01d      	b.n	8004304 <HAL_RCC_OscConfig+0xb0>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042d0:	d10c      	bne.n	80042ec <HAL_RCC_OscConfig+0x98>
 80042d2:	4b8b      	ldr	r3, [pc, #556]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a8a      	ldr	r2, [pc, #552]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	4b88      	ldr	r3, [pc, #544]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a87      	ldr	r2, [pc, #540]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80042e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	e00b      	b.n	8004304 <HAL_RCC_OscConfig+0xb0>
 80042ec:	4b84      	ldr	r3, [pc, #528]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a83      	ldr	r2, [pc, #524]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80042f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	4b81      	ldr	r3, [pc, #516]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a80      	ldr	r2, [pc, #512]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80042fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d013      	beq.n	8004334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430c:	f7fd fc6e 	bl	8001bec <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004314:	f7fd fc6a 	bl	8001bec <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	; 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e2a8      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004326:	4b76      	ldr	r3, [pc, #472]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0xc0>
 8004332:	e014      	b.n	800435e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fd fc5a 	bl	8001bec <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433c:	f7fd fc56 	bl	8001bec <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	; 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e294      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800434e:	4b6c      	ldr	r3, [pc, #432]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0xe8>
 800435a:	e000      	b.n	800435e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800435c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d075      	beq.n	8004456 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800436a:	4b65      	ldr	r3, [pc, #404]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004374:	4b62      	ldr	r3, [pc, #392]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b0c      	cmp	r3, #12
 8004382:	d102      	bne.n	800438a <HAL_RCC_OscConfig+0x136>
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d002      	beq.n	8004390 <HAL_RCC_OscConfig+0x13c>
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b04      	cmp	r3, #4
 800438e:	d11f      	bne.n	80043d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004390:	4b5b      	ldr	r3, [pc, #364]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_RCC_OscConfig+0x154>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e267      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a8:	4b55      	ldr	r3, [pc, #340]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	061b      	lsls	r3, r3, #24
 80043b6:	4952      	ldr	r1, [pc, #328]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043bc:	4b51      	ldr	r3, [pc, #324]	; (8004504 <HAL_RCC_OscConfig+0x2b0>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fd fbc7 	bl	8001b54 <HAL_InitTick>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d043      	beq.n	8004454 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e253      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d023      	beq.n	8004420 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d8:	4b49      	ldr	r3, [pc, #292]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a48      	ldr	r2, [pc, #288]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80043de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fd fc02 	bl	8001bec <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ec:	f7fd fbfe 	bl	8001bec <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e23c      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043fe:	4b40      	ldr	r3, [pc, #256]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440a:	4b3d      	ldr	r3, [pc, #244]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	061b      	lsls	r3, r3, #24
 8004418:	4939      	ldr	r1, [pc, #228]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 800441a:	4313      	orrs	r3, r2
 800441c:	604b      	str	r3, [r1, #4]
 800441e:	e01a      	b.n	8004456 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004420:	4b37      	ldr	r3, [pc, #220]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a36      	ldr	r2, [pc, #216]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 8004426:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800442a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fd fbde 	bl	8001bec <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004434:	f7fd fbda 	bl	8001bec <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e218      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004446:	4b2e      	ldr	r3, [pc, #184]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x1e0>
 8004452:	e000      	b.n	8004456 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004454:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d03c      	beq.n	80044dc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01c      	beq.n	80044a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800446a:	4b25      	ldr	r3, [pc, #148]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004470:	4a23      	ldr	r2, [pc, #140]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447a:	f7fd fbb7 	bl	8001bec <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004482:	f7fd fbb3 	bl	8001bec <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e1f1      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004494:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 8004496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0ef      	beq.n	8004482 <HAL_RCC_OscConfig+0x22e>
 80044a2:	e01b      	b.n	80044dc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a4:	4b16      	ldr	r3, [pc, #88]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80044a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044aa:	4a15      	ldr	r2, [pc, #84]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fd fb9a 	bl	8001bec <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fd fb96 	bl	8001bec <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e1d4      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044ce:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1ef      	bne.n	80044bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 80ab 	beq.w	8004640 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ea:	2300      	movs	r3, #0
 80044ec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044ee:	4b04      	ldr	r3, [pc, #16]	; (8004500 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_RCC_OscConfig+0x2b4>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e005      	b.n	800450a <HAL_RCC_OscConfig+0x2b6>
 80044fe:	bf00      	nop
 8004500:	40021000 	.word	0x40021000
 8004504:	20000408 	.word	0x20000408
 8004508:	2300      	movs	r3, #0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450e:	4baf      	ldr	r3, [pc, #700]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	4aae      	ldr	r2, [pc, #696]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004518:	6593      	str	r3, [r2, #88]	; 0x58
 800451a:	4bac      	ldr	r3, [pc, #688]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004526:	2301      	movs	r3, #1
 8004528:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800452a:	4ba9      	ldr	r3, [pc, #676]	; (80047d0 <HAL_RCC_OscConfig+0x57c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	d118      	bne.n	8004568 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004536:	4ba6      	ldr	r3, [pc, #664]	; (80047d0 <HAL_RCC_OscConfig+0x57c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4aa5      	ldr	r2, [pc, #660]	; (80047d0 <HAL_RCC_OscConfig+0x57c>)
 800453c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004542:	f7fd fb53 	bl	8001bec <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454a:	f7fd fb4f 	bl	8001bec <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e18d      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800455c:	4b9c      	ldr	r3, [pc, #624]	; (80047d0 <HAL_RCC_OscConfig+0x57c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d108      	bne.n	8004582 <HAL_RCC_OscConfig+0x32e>
 8004570:	4b96      	ldr	r3, [pc, #600]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004576:	4a95      	ldr	r2, [pc, #596]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004580:	e024      	b.n	80045cc <HAL_RCC_OscConfig+0x378>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b05      	cmp	r3, #5
 8004588:	d110      	bne.n	80045ac <HAL_RCC_OscConfig+0x358>
 800458a:	4b90      	ldr	r3, [pc, #576]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	4a8e      	ldr	r2, [pc, #568]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004592:	f043 0304 	orr.w	r3, r3, #4
 8004596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800459a:	4b8c      	ldr	r3, [pc, #560]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a0:	4a8a      	ldr	r2, [pc, #552]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045aa:	e00f      	b.n	80045cc <HAL_RCC_OscConfig+0x378>
 80045ac:	4b87      	ldr	r3, [pc, #540]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b2:	4a86      	ldr	r2, [pc, #536]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045bc:	4b83      	ldr	r3, [pc, #524]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c2:	4a82      	ldr	r2, [pc, #520]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045c4:	f023 0304 	bic.w	r3, r3, #4
 80045c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d016      	beq.n	8004602 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d4:	f7fd fb0a 	bl	8001bec <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045dc:	f7fd fb06 	bl	8001bec <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e142      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045f2:	4b76      	ldr	r3, [pc, #472]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0ed      	beq.n	80045dc <HAL_RCC_OscConfig+0x388>
 8004600:	e015      	b.n	800462e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004602:	f7fd faf3 	bl	8001bec <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004608:	e00a      	b.n	8004620 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800460a:	f7fd faef 	bl	8001bec <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	f241 3288 	movw	r2, #5000	; 0x1388
 8004618:	4293      	cmp	r3, r2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e12b      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004620:	4b6a      	ldr	r3, [pc, #424]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1ed      	bne.n	800460a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800462e:	7ffb      	ldrb	r3, [r7, #31]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d105      	bne.n	8004640 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004634:	4b65      	ldr	r3, [pc, #404]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004638:	4a64      	ldr	r2, [pc, #400]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800463a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800463e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d03c      	beq.n	80046c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01c      	beq.n	800468e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004654:	4b5d      	ldr	r3, [pc, #372]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004656:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800465a:	4a5c      	ldr	r2, [pc, #368]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fd fac2 	bl	8001bec <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800466c:	f7fd fabe 	bl	8001bec <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e0fc      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800467e:	4b53      	ldr	r3, [pc, #332]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004680:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0ef      	beq.n	800466c <HAL_RCC_OscConfig+0x418>
 800468c:	e01b      	b.n	80046c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800468e:	4b4f      	ldr	r3, [pc, #316]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004690:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004694:	4a4d      	ldr	r2, [pc, #308]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469e:	f7fd faa5 	bl	8001bec <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046a6:	f7fd faa1 	bl	8001bec <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e0df      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046b8:	4b44      	ldr	r3, [pc, #272]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80046ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1ef      	bne.n	80046a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80d3 	beq.w	8004876 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046d0:	4b3e      	ldr	r3, [pc, #248]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 030c 	and.w	r3, r3, #12
 80046d8:	2b0c      	cmp	r3, #12
 80046da:	f000 808d 	beq.w	80047f8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d15a      	bne.n	800479c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e6:	4b39      	ldr	r3, [pc, #228]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a38      	ldr	r2, [pc, #224]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80046ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f2:	f7fd fa7b 	bl	8001bec <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fa:	f7fd fa77 	bl	8001bec <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e0b5      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800470c:	4b2f      	ldr	r3, [pc, #188]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1f0      	bne.n	80046fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004718:	4b2c      	ldr	r3, [pc, #176]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	4b2d      	ldr	r3, [pc, #180]	; (80047d4 <HAL_RCC_OscConfig+0x580>)
 800471e:	4013      	ands	r3, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6a11      	ldr	r1, [r2, #32]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004728:	3a01      	subs	r2, #1
 800472a:	0112      	lsls	r2, r2, #4
 800472c:	4311      	orrs	r1, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004732:	0212      	lsls	r2, r2, #8
 8004734:	4311      	orrs	r1, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800473a:	0852      	lsrs	r2, r2, #1
 800473c:	3a01      	subs	r2, #1
 800473e:	0552      	lsls	r2, r2, #21
 8004740:	4311      	orrs	r1, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004746:	0852      	lsrs	r2, r2, #1
 8004748:	3a01      	subs	r2, #1
 800474a:	0652      	lsls	r2, r2, #25
 800474c:	4311      	orrs	r1, r2
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004752:	06d2      	lsls	r2, r2, #27
 8004754:	430a      	orrs	r2, r1
 8004756:	491d      	ldr	r1, [pc, #116]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004758:	4313      	orrs	r3, r2
 800475a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1a      	ldr	r2, [pc, #104]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004766:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004768:	4b18      	ldr	r3, [pc, #96]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	4a17      	ldr	r2, [pc, #92]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800476e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004772:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7fd fa3a 	bl	8001bec <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477c:	f7fd fa36 	bl	8001bec <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e074      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800478e:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f0      	beq.n	800477c <HAL_RCC_OscConfig+0x528>
 800479a:	e06c      	b.n	8004876 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80047a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047a6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80047a8:	4b08      	ldr	r3, [pc, #32]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4a07      	ldr	r2, [pc, #28]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80047ae:	f023 0303 	bic.w	r3, r3, #3
 80047b2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4a04      	ldr	r2, [pc, #16]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80047ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80047be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fd fa12 	bl	8001bec <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ca:	e00e      	b.n	80047ea <HAL_RCC_OscConfig+0x596>
 80047cc:	40021000 	.word	0x40021000
 80047d0:	40007000 	.word	0x40007000
 80047d4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d8:	f7fd fa08 	bl	8001bec <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e046      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ea:	4b25      	ldr	r3, [pc, #148]	; (8004880 <HAL_RCC_OscConfig+0x62c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f0      	bne.n	80047d8 <HAL_RCC_OscConfig+0x584>
 80047f6:	e03e      	b.n	8004876 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e039      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004804:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <HAL_RCC_OscConfig+0x62c>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f003 0203 	and.w	r2, r3, #3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	429a      	cmp	r2, r3
 8004816:	d12c      	bne.n	8004872 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	3b01      	subs	r3, #1
 8004824:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004826:	429a      	cmp	r2, r3
 8004828:	d123      	bne.n	8004872 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004836:	429a      	cmp	r2, r3
 8004838:	d11b      	bne.n	8004872 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d113      	bne.n	8004872 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	085b      	lsrs	r3, r3, #1
 8004856:	3b01      	subs	r3, #1
 8004858:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d109      	bne.n	8004872 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	3b01      	subs	r3, #1
 800486c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d001      	beq.n	8004876 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3720      	adds	r7, #32
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40021000 	.word	0x40021000

08004884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e11e      	b.n	8004ada <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800489c:	4b91      	ldr	r3, [pc, #580]	; (8004ae4 <HAL_RCC_ClockConfig+0x260>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d910      	bls.n	80048cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b8e      	ldr	r3, [pc, #568]	; (8004ae4 <HAL_RCC_ClockConfig+0x260>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 020f 	bic.w	r2, r3, #15
 80048b2:	498c      	ldr	r1, [pc, #560]	; (8004ae4 <HAL_RCC_ClockConfig+0x260>)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ba:	4b8a      	ldr	r3, [pc, #552]	; (8004ae4 <HAL_RCC_ClockConfig+0x260>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d001      	beq.n	80048cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e106      	b.n	8004ada <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d073      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b03      	cmp	r3, #3
 80048de:	d129      	bne.n	8004934 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e0:	4b81      	ldr	r3, [pc, #516]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0f4      	b.n	8004ada <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80048f0:	f000 f99e 	bl	8004c30 <RCC_GetSysClockFreqFromPLLSource>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4a7c      	ldr	r2, [pc, #496]	; (8004aec <HAL_RCC_ClockConfig+0x268>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d93f      	bls.n	800497e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048fe:	4b7a      	ldr	r3, [pc, #488]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004912:	2b00      	cmp	r3, #0
 8004914:	d033      	beq.n	800497e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800491a:	2b00      	cmp	r3, #0
 800491c:	d12f      	bne.n	800497e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800491e:	4b72      	ldr	r3, [pc, #456]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004926:	4a70      	ldr	r2, [pc, #448]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 8004928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800492e:	2380      	movs	r3, #128	; 0x80
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	e024      	b.n	800497e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2b02      	cmp	r3, #2
 800493a:	d107      	bne.n	800494c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800493c:	4b6a      	ldr	r3, [pc, #424]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0c6      	b.n	8004ada <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800494c:	4b66      	ldr	r3, [pc, #408]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e0be      	b.n	8004ada <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800495c:	f000 f8ce 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 8004960:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4a61      	ldr	r2, [pc, #388]	; (8004aec <HAL_RCC_ClockConfig+0x268>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d909      	bls.n	800497e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800496a:	4b5f      	ldr	r3, [pc, #380]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004972:	4a5d      	ldr	r2, [pc, #372]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 8004974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004978:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800497a:	2380      	movs	r3, #128	; 0x80
 800497c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800497e:	4b5a      	ldr	r3, [pc, #360]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f023 0203 	bic.w	r2, r3, #3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	4957      	ldr	r1, [pc, #348]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 800498c:	4313      	orrs	r3, r2
 800498e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004990:	f7fd f92c 	bl	8001bec <HAL_GetTick>
 8004994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004996:	e00a      	b.n	80049ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004998:	f7fd f928 	bl	8001bec <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e095      	b.n	8004ada <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ae:	4b4e      	ldr	r3, [pc, #312]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 020c 	and.w	r2, r3, #12
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	429a      	cmp	r2, r3
 80049be:	d1eb      	bne.n	8004998 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d023      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049d8:	4b43      	ldr	r3, [pc, #268]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4a42      	ldr	r2, [pc, #264]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 80049de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80049f0:	4b3d      	ldr	r3, [pc, #244]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80049f8:	4a3b      	ldr	r2, [pc, #236]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 80049fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a00:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	4936      	ldr	r1, [pc, #216]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2b80      	cmp	r3, #128	; 0x80
 8004a18:	d105      	bne.n	8004a26 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a1a:	4b33      	ldr	r3, [pc, #204]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	4a32      	ldr	r2, [pc, #200]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 8004a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a24:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a26:	4b2f      	ldr	r3, [pc, #188]	; (8004ae4 <HAL_RCC_ClockConfig+0x260>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d21d      	bcs.n	8004a70 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a34:	4b2b      	ldr	r3, [pc, #172]	; (8004ae4 <HAL_RCC_ClockConfig+0x260>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 020f 	bic.w	r2, r3, #15
 8004a3c:	4929      	ldr	r1, [pc, #164]	; (8004ae4 <HAL_RCC_ClockConfig+0x260>)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a44:	f7fd f8d2 	bl	8001bec <HAL_GetTick>
 8004a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4c:	f7fd f8ce 	bl	8001bec <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e03b      	b.n	8004ada <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a62:	4b20      	ldr	r3, [pc, #128]	; (8004ae4 <HAL_RCC_ClockConfig+0x260>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d1ed      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4917      	ldr	r1, [pc, #92]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a9a:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	490f      	ldr	r1, [pc, #60]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aae:	f000 f825 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	490c      	ldr	r1, [pc, #48]	; (8004af0 <HAL_RCC_ClockConfig+0x26c>)
 8004ac0:	5ccb      	ldrb	r3, [r1, r3]
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aca:	4a0a      	ldr	r2, [pc, #40]	; (8004af4 <HAL_RCC_ClockConfig+0x270>)
 8004acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ace:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <HAL_RCC_ClockConfig+0x274>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fd f83e 	bl	8001b54 <HAL_InitTick>
 8004ad8:	4603      	mov	r3, r0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40022000 	.word	0x40022000
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	04c4b400 	.word	0x04c4b400
 8004af0:	08007664 	.word	0x08007664
 8004af4:	20000404 	.word	0x20000404
 8004af8:	20000408 	.word	0x20000408

08004afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b02:	4b2c      	ldr	r3, [pc, #176]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d102      	bne.n	8004b14 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b0e:	4b2a      	ldr	r3, [pc, #168]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	e047      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b14:	4b27      	ldr	r3, [pc, #156]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 030c 	and.w	r3, r3, #12
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d102      	bne.n	8004b26 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b20:	4b26      	ldr	r3, [pc, #152]	; (8004bbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	e03e      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b26:	4b23      	ldr	r3, [pc, #140]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 030c 	and.w	r3, r3, #12
 8004b2e:	2b0c      	cmp	r3, #12
 8004b30:	d136      	bne.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b32:	4b20      	ldr	r3, [pc, #128]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b3c:	4b1d      	ldr	r3, [pc, #116]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	3301      	adds	r3, #1
 8004b48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d10c      	bne.n	8004b6a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b50:	4a1a      	ldr	r2, [pc, #104]	; (8004bbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	4a16      	ldr	r2, [pc, #88]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b5a:	68d2      	ldr	r2, [r2, #12]
 8004b5c:	0a12      	lsrs	r2, r2, #8
 8004b5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b62:	fb02 f303 	mul.w	r3, r2, r3
 8004b66:	617b      	str	r3, [r7, #20]
      break;
 8004b68:	e00c      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b6a:	4a13      	ldr	r2, [pc, #76]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b72:	4a10      	ldr	r2, [pc, #64]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b74:	68d2      	ldr	r2, [r2, #12]
 8004b76:	0a12      	lsrs	r2, r2, #8
 8004b78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b7c:	fb02 f303 	mul.w	r3, r2, r3
 8004b80:	617b      	str	r3, [r7, #20]
      break;
 8004b82:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b84:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	0e5b      	lsrs	r3, r3, #25
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	3301      	adds	r3, #1
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	e001      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ba4:	693b      	ldr	r3, [r7, #16]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	00f42400 	.word	0x00f42400
 8004bbc:	016e3600 	.word	0x016e3600

08004bc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bc4:	4b03      	ldr	r3, [pc, #12]	; (8004bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000404 	.word	0x20000404

08004bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bdc:	f7ff fff0 	bl	8004bc0 <HAL_RCC_GetHCLKFreq>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	0a1b      	lsrs	r3, r3, #8
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	4904      	ldr	r1, [pc, #16]	; (8004c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bee:	5ccb      	ldrb	r3, [r1, r3]
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	08007674 	.word	0x08007674

08004c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c08:	f7ff ffda 	bl	8004bc0 <HAL_RCC_GetHCLKFreq>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	0adb      	lsrs	r3, r3, #11
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	4904      	ldr	r1, [pc, #16]	; (8004c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c1a:	5ccb      	ldrb	r3, [r1, r3]
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	08007674 	.word	0x08007674

08004c30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c36:	4b1e      	ldr	r3, [pc, #120]	; (8004cb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c40:	4b1b      	ldr	r3, [pc, #108]	; (8004cb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	091b      	lsrs	r3, r3, #4
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d10c      	bne.n	8004c6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c54:	4a17      	ldr	r2, [pc, #92]	; (8004cb4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5c:	4a14      	ldr	r2, [pc, #80]	; (8004cb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c5e:	68d2      	ldr	r2, [r2, #12]
 8004c60:	0a12      	lsrs	r2, r2, #8
 8004c62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	617b      	str	r3, [r7, #20]
    break;
 8004c6c:	e00c      	b.n	8004c88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c6e:	4a12      	ldr	r2, [pc, #72]	; (8004cb8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c76:	4a0e      	ldr	r2, [pc, #56]	; (8004cb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c78:	68d2      	ldr	r2, [r2, #12]
 8004c7a:	0a12      	lsrs	r2, r2, #8
 8004c7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c80:	fb02 f303 	mul.w	r3, r2, r3
 8004c84:	617b      	str	r3, [r7, #20]
    break;
 8004c86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c88:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	0e5b      	lsrs	r3, r3, #25
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	3301      	adds	r3, #1
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ca2:	687b      	ldr	r3, [r7, #4]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	371c      	adds	r7, #28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	016e3600 	.word	0x016e3600
 8004cb8:	00f42400 	.word	0x00f42400

08004cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cc8:	2300      	movs	r3, #0
 8004cca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 8098 	beq.w	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cde:	4b43      	ldr	r3, [pc, #268]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10d      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cea:	4b40      	ldr	r3, [pc, #256]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cee:	4a3f      	ldr	r2, [pc, #252]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf4:	6593      	str	r3, [r2, #88]	; 0x58
 8004cf6:	4b3d      	ldr	r3, [pc, #244]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfe:	60bb      	str	r3, [r7, #8]
 8004d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d02:	2301      	movs	r3, #1
 8004d04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d06:	4b3a      	ldr	r3, [pc, #232]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a39      	ldr	r2, [pc, #228]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d12:	f7fc ff6b 	bl	8001bec <HAL_GetTick>
 8004d16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d18:	e009      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d1a:	f7fc ff67 	bl	8001bec <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d902      	bls.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	74fb      	strb	r3, [r7, #19]
        break;
 8004d2c:	e005      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d2e:	4b30      	ldr	r3, [pc, #192]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0ef      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d3a:	7cfb      	ldrb	r3, [r7, #19]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d159      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d40:	4b2a      	ldr	r3, [pc, #168]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d01e      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d019      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d5c:	4b23      	ldr	r3, [pc, #140]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d68:	4b20      	ldr	r3, [pc, #128]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6e:	4a1f      	ldr	r2, [pc, #124]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d78:	4b1c      	ldr	r3, [pc, #112]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	4a1b      	ldr	r2, [pc, #108]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d88:	4a18      	ldr	r2, [pc, #96]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d016      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9a:	f7fc ff27 	bl	8001bec <HAL_GetTick>
 8004d9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004da0:	e00b      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da2:	f7fc ff23 	bl	8001bec <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d902      	bls.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	74fb      	strb	r3, [r7, #19]
            break;
 8004db8:	e006      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dba:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0ec      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004dc8:	7cfb      	ldrb	r3, [r7, #19]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10b      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dce:	4b07      	ldr	r3, [pc, #28]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ddc:	4903      	ldr	r1, [pc, #12]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004de4:	e008      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004de6:	7cfb      	ldrb	r3, [r7, #19]
 8004de8:	74bb      	strb	r3, [r7, #18]
 8004dea:	e005      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df4:	7cfb      	ldrb	r3, [r7, #19]
 8004df6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004df8:	7c7b      	ldrb	r3, [r7, #17]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d105      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dfe:	4baf      	ldr	r3, [pc, #700]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e02:	4aae      	ldr	r2, [pc, #696]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e16:	4ba9      	ldr	r3, [pc, #676]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1c:	f023 0203 	bic.w	r2, r3, #3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	49a5      	ldr	r1, [pc, #660]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e38:	4ba0      	ldr	r3, [pc, #640]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3e:	f023 020c 	bic.w	r2, r3, #12
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	499d      	ldr	r1, [pc, #628]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e5a:	4b98      	ldr	r3, [pc, #608]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4994      	ldr	r1, [pc, #592]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e7c:	4b8f      	ldr	r3, [pc, #572]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	498c      	ldr	r1, [pc, #560]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e9e:	4b87      	ldr	r3, [pc, #540]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	4983      	ldr	r1, [pc, #524]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ec0:	4b7e      	ldr	r3, [pc, #504]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	497b      	ldr	r1, [pc, #492]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ee2:	4b76      	ldr	r3, [pc, #472]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	4972      	ldr	r1, [pc, #456]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f04:	4b6d      	ldr	r3, [pc, #436]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	496a      	ldr	r1, [pc, #424]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f26:	4b65      	ldr	r3, [pc, #404]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	4961      	ldr	r1, [pc, #388]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f48:	4b5c      	ldr	r3, [pc, #368]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f4e:	f023 0203 	bic.w	r2, r3, #3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	4959      	ldr	r1, [pc, #356]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f6a:	4b54      	ldr	r3, [pc, #336]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	4950      	ldr	r1, [pc, #320]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d015      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f8c:	4b4b      	ldr	r3, [pc, #300]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	4948      	ldr	r1, [pc, #288]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004faa:	d105      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fac:	4b43      	ldr	r3, [pc, #268]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4a42      	ldr	r2, [pc, #264]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fb6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d015      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fc4:	4b3d      	ldr	r3, [pc, #244]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	493a      	ldr	r1, [pc, #232]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe2:	d105      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fe4:	4b35      	ldr	r3, [pc, #212]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4a34      	ldr	r2, [pc, #208]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d015      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ffc:	4b2f      	ldr	r3, [pc, #188]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	492c      	ldr	r1, [pc, #176]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800501a:	d105      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800501c:	4b27      	ldr	r3, [pc, #156]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4a26      	ldr	r2, [pc, #152]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005026:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d015      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005034:	4b21      	ldr	r3, [pc, #132]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005042:	491e      	ldr	r1, [pc, #120]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005052:	d105      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005054:	4b19      	ldr	r3, [pc, #100]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4a18      	ldr	r2, [pc, #96]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800505a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800505e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d015      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800506c:	4b13      	ldr	r3, [pc, #76]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005072:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	4910      	ldr	r1, [pc, #64]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800508a:	d105      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800508c:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4a0a      	ldr	r2, [pc, #40]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005096:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d018      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80050a4:	4b05      	ldr	r3, [pc, #20]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b2:	4902      	ldr	r1, [pc, #8]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050ba:	e001      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80050bc:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050c8:	d105      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050ca:	4b21      	ldr	r3, [pc, #132]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	4a20      	ldr	r2, [pc, #128]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80050d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d015      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80050e2:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f0:	4917      	ldr	r1, [pc, #92]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005100:	d105      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005102:	4b13      	ldr	r3, [pc, #76]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	4a12      	ldr	r2, [pc, #72]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d015      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800511a:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800511c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005120:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005128:	4909      	ldr	r1, [pc, #36]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005138:	d105      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	4a04      	ldr	r2, [pc, #16]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005140:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005144:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005146:	7cbb      	ldrb	r3, [r7, #18]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40021000 	.word	0x40021000

08005154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e049      	b.n	80051fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fc fb68 	bl	8001850 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3304      	adds	r3, #4
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f000 fb68 	bl	8005868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d001      	beq.n	800521c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e054      	b.n	80052c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a26      	ldr	r2, [pc, #152]	; (80052d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d022      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005246:	d01d      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a22      	ldr	r2, [pc, #136]	; (80052d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d018      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a21      	ldr	r2, [pc, #132]	; (80052dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d013      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00e      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d009      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <HAL_TIM_Base_Start_IT+0xe8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d115      	bne.n	80052b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	4b19      	ldr	r3, [pc, #100]	; (80052f0 <HAL_TIM_Base_Start_IT+0xec>)
 800528c:	4013      	ands	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b06      	cmp	r3, #6
 8005294:	d015      	beq.n	80052c2 <HAL_TIM_Base_Start_IT+0xbe>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529c:	d011      	beq.n	80052c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0201 	orr.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ae:	e008      	b.n	80052c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	e000      	b.n	80052c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40000400 	.word	0x40000400
 80052dc:	40000800 	.word	0x40000800
 80052e0:	40000c00 	.word	0x40000c00
 80052e4:	40013400 	.word	0x40013400
 80052e8:	40014000 	.word	0x40014000
 80052ec:	40015000 	.word	0x40015000
 80052f0:	00010007 	.word	0x00010007

080052f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b02      	cmp	r3, #2
 8005308:	d122      	bne.n	8005350 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b02      	cmp	r3, #2
 8005316:	d11b      	bne.n	8005350 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0202 	mvn.w	r2, #2
 8005320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fa78 	bl	800582c <HAL_TIM_IC_CaptureCallback>
 800533c:	e005      	b.n	800534a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fa6a 	bl	8005818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fa7b 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b04      	cmp	r3, #4
 800535c:	d122      	bne.n	80053a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b04      	cmp	r3, #4
 800536a:	d11b      	bne.n	80053a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0204 	mvn.w	r2, #4
 8005374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2202      	movs	r2, #2
 800537a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fa4e 	bl	800582c <HAL_TIM_IC_CaptureCallback>
 8005390:	e005      	b.n	800539e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fa40 	bl	8005818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fa51 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d122      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d11b      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0208 	mvn.w	r2, #8
 80053c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2204      	movs	r2, #4
 80053ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fa24 	bl	800582c <HAL_TIM_IC_CaptureCallback>
 80053e4:	e005      	b.n	80053f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fa16 	bl	8005818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fa27 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0310 	and.w	r3, r3, #16
 8005402:	2b10      	cmp	r3, #16
 8005404:	d122      	bne.n	800544c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b10      	cmp	r3, #16
 8005412:	d11b      	bne.n	800544c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0210 	mvn.w	r2, #16
 800541c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2208      	movs	r2, #8
 8005422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f9fa 	bl	800582c <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f9ec 	bl	8005818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f9fd 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b01      	cmp	r3, #1
 8005458:	d10e      	bne.n	8005478 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b01      	cmp	r3, #1
 8005466:	d107      	bne.n	8005478 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0201 	mvn.w	r2, #1
 8005470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fb fd1a 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d10e      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005490:	2b80      	cmp	r3, #128	; 0x80
 8005492:	d107      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800549c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fbc6 	bl	8005c30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b2:	d10e      	bne.n	80054d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054be:	2b80      	cmp	r3, #128	; 0x80
 80054c0:	d107      	bne.n	80054d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fbb9 	bl	8005c44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054dc:	2b40      	cmp	r3, #64	; 0x40
 80054de:	d10e      	bne.n	80054fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ea:	2b40      	cmp	r3, #64	; 0x40
 80054ec:	d107      	bne.n	80054fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f9ab 	bl	8005854 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f003 0320 	and.w	r3, r3, #32
 8005508:	2b20      	cmp	r3, #32
 800550a:	d10e      	bne.n	800552a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b20      	cmp	r3, #32
 8005518:	d107      	bne.n	800552a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f06f 0220 	mvn.w	r2, #32
 8005522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fb79 	bl	8005c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005538:	d10f      	bne.n	800555a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005548:	d107      	bne.n	800555a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fb7f 	bl	8005c58 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005564:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005568:	d10f      	bne.n	800558a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005578:	d107      	bne.n	800558a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fb71 	bl	8005c6c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005598:	d10f      	bne.n	80055ba <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055a8:	d107      	bne.n	80055ba <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80055b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fb63 	bl	8005c80 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055c8:	d10f      	bne.n	80055ea <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055d8:	d107      	bne.n	80055ea <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80055e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fb55 	bl	8005c94 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055ea:	bf00      	nop
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_TIM_ConfigClockSource+0x18>
 8005608:	2302      	movs	r3, #2
 800560a:	e0f5      	b.n	80057f8 <HAL_TIM_ConfigClockSource+0x204>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800562a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800562e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005636:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a6e      	ldr	r2, [pc, #440]	; (8005800 <HAL_TIM_ConfigClockSource+0x20c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	f000 80c1 	beq.w	80057ce <HAL_TIM_ConfigClockSource+0x1da>
 800564c:	4a6c      	ldr	r2, [pc, #432]	; (8005800 <HAL_TIM_ConfigClockSource+0x20c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	f200 80c6 	bhi.w	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
 8005654:	4a6b      	ldr	r2, [pc, #428]	; (8005804 <HAL_TIM_ConfigClockSource+0x210>)
 8005656:	4293      	cmp	r3, r2
 8005658:	f000 80b9 	beq.w	80057ce <HAL_TIM_ConfigClockSource+0x1da>
 800565c:	4a69      	ldr	r2, [pc, #420]	; (8005804 <HAL_TIM_ConfigClockSource+0x210>)
 800565e:	4293      	cmp	r3, r2
 8005660:	f200 80be 	bhi.w	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
 8005664:	4a68      	ldr	r2, [pc, #416]	; (8005808 <HAL_TIM_ConfigClockSource+0x214>)
 8005666:	4293      	cmp	r3, r2
 8005668:	f000 80b1 	beq.w	80057ce <HAL_TIM_ConfigClockSource+0x1da>
 800566c:	4a66      	ldr	r2, [pc, #408]	; (8005808 <HAL_TIM_ConfigClockSource+0x214>)
 800566e:	4293      	cmp	r3, r2
 8005670:	f200 80b6 	bhi.w	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
 8005674:	4a65      	ldr	r2, [pc, #404]	; (800580c <HAL_TIM_ConfigClockSource+0x218>)
 8005676:	4293      	cmp	r3, r2
 8005678:	f000 80a9 	beq.w	80057ce <HAL_TIM_ConfigClockSource+0x1da>
 800567c:	4a63      	ldr	r2, [pc, #396]	; (800580c <HAL_TIM_ConfigClockSource+0x218>)
 800567e:	4293      	cmp	r3, r2
 8005680:	f200 80ae 	bhi.w	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
 8005684:	4a62      	ldr	r2, [pc, #392]	; (8005810 <HAL_TIM_ConfigClockSource+0x21c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	f000 80a1 	beq.w	80057ce <HAL_TIM_ConfigClockSource+0x1da>
 800568c:	4a60      	ldr	r2, [pc, #384]	; (8005810 <HAL_TIM_ConfigClockSource+0x21c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	f200 80a6 	bhi.w	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
 8005694:	4a5f      	ldr	r2, [pc, #380]	; (8005814 <HAL_TIM_ConfigClockSource+0x220>)
 8005696:	4293      	cmp	r3, r2
 8005698:	f000 8099 	beq.w	80057ce <HAL_TIM_ConfigClockSource+0x1da>
 800569c:	4a5d      	ldr	r2, [pc, #372]	; (8005814 <HAL_TIM_ConfigClockSource+0x220>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	f200 809e 	bhi.w	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
 80056a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056a8:	f000 8091 	beq.w	80057ce <HAL_TIM_ConfigClockSource+0x1da>
 80056ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056b0:	f200 8096 	bhi.w	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
 80056b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b8:	f000 8089 	beq.w	80057ce <HAL_TIM_ConfigClockSource+0x1da>
 80056bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056c0:	f200 808e 	bhi.w	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
 80056c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c8:	d03e      	beq.n	8005748 <HAL_TIM_ConfigClockSource+0x154>
 80056ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ce:	f200 8087 	bhi.w	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
 80056d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d6:	f000 8085 	beq.w	80057e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80056da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056de:	d87f      	bhi.n	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
 80056e0:	2b70      	cmp	r3, #112	; 0x70
 80056e2:	d01a      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x126>
 80056e4:	2b70      	cmp	r3, #112	; 0x70
 80056e6:	d87b      	bhi.n	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
 80056e8:	2b60      	cmp	r3, #96	; 0x60
 80056ea:	d050      	beq.n	800578e <HAL_TIM_ConfigClockSource+0x19a>
 80056ec:	2b60      	cmp	r3, #96	; 0x60
 80056ee:	d877      	bhi.n	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
 80056f0:	2b50      	cmp	r3, #80	; 0x50
 80056f2:	d03c      	beq.n	800576e <HAL_TIM_ConfigClockSource+0x17a>
 80056f4:	2b50      	cmp	r3, #80	; 0x50
 80056f6:	d873      	bhi.n	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d058      	beq.n	80057ae <HAL_TIM_ConfigClockSource+0x1ba>
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d86f      	bhi.n	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
 8005700:	2b30      	cmp	r3, #48	; 0x30
 8005702:	d064      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x1da>
 8005704:	2b30      	cmp	r3, #48	; 0x30
 8005706:	d86b      	bhi.n	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
 8005708:	2b20      	cmp	r3, #32
 800570a:	d060      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x1da>
 800570c:	2b20      	cmp	r3, #32
 800570e:	d867      	bhi.n	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d05c      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x1da>
 8005714:	2b10      	cmp	r3, #16
 8005716:	d05a      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005718:	e062      	b.n	80057e0 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6899      	ldr	r1, [r3, #8]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f000 f9c1 	bl	8005ab0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800573c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	609a      	str	r2, [r3, #8]
      break;
 8005746:	e04e      	b.n	80057e6 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	6899      	ldr	r1, [r3, #8]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f000 f9aa 	bl	8005ab0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800576a:	609a      	str	r2, [r3, #8]
      break;
 800576c:	e03b      	b.n	80057e6 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6818      	ldr	r0, [r3, #0]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	6859      	ldr	r1, [r3, #4]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	461a      	mov	r2, r3
 800577c:	f000 f91c 	bl	80059b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2150      	movs	r1, #80	; 0x50
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f975 	bl	8005a76 <TIM_ITRx_SetConfig>
      break;
 800578c:	e02b      	b.n	80057e6 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	6859      	ldr	r1, [r3, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	461a      	mov	r2, r3
 800579c:	f000 f93b 	bl	8005a16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2160      	movs	r1, #96	; 0x60
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 f965 	bl	8005a76 <TIM_ITRx_SetConfig>
      break;
 80057ac:	e01b      	b.n	80057e6 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	6859      	ldr	r1, [r3, #4]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f000 f8fc 	bl	80059b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2140      	movs	r1, #64	; 0x40
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 f955 	bl	8005a76 <TIM_ITRx_SetConfig>
      break;
 80057cc:	e00b      	b.n	80057e6 <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f000 f94c 	bl	8005a76 <TIM_ITRx_SetConfig>
        break;
 80057de:	e002      	b.n	80057e6 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 80057e0:	bf00      	nop
 80057e2:	e000      	b.n	80057e6 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 80057e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	00100070 	.word	0x00100070
 8005804:	00100060 	.word	0x00100060
 8005808:	00100050 	.word	0x00100050
 800580c:	00100040 	.word	0x00100040
 8005810:	00100030 	.word	0x00100030
 8005814:	00100020 	.word	0x00100020

08005818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a46      	ldr	r2, [pc, #280]	; (8005994 <TIM_Base_SetConfig+0x12c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d017      	beq.n	80058b0 <TIM_Base_SetConfig+0x48>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005886:	d013      	beq.n	80058b0 <TIM_Base_SetConfig+0x48>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a43      	ldr	r2, [pc, #268]	; (8005998 <TIM_Base_SetConfig+0x130>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00f      	beq.n	80058b0 <TIM_Base_SetConfig+0x48>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a42      	ldr	r2, [pc, #264]	; (800599c <TIM_Base_SetConfig+0x134>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00b      	beq.n	80058b0 <TIM_Base_SetConfig+0x48>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a41      	ldr	r2, [pc, #260]	; (80059a0 <TIM_Base_SetConfig+0x138>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d007      	beq.n	80058b0 <TIM_Base_SetConfig+0x48>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a40      	ldr	r2, [pc, #256]	; (80059a4 <TIM_Base_SetConfig+0x13c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d003      	beq.n	80058b0 <TIM_Base_SetConfig+0x48>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a3f      	ldr	r2, [pc, #252]	; (80059a8 <TIM_Base_SetConfig+0x140>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d108      	bne.n	80058c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a33      	ldr	r2, [pc, #204]	; (8005994 <TIM_Base_SetConfig+0x12c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d023      	beq.n	8005912 <TIM_Base_SetConfig+0xaa>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d0:	d01f      	beq.n	8005912 <TIM_Base_SetConfig+0xaa>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a30      	ldr	r2, [pc, #192]	; (8005998 <TIM_Base_SetConfig+0x130>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d01b      	beq.n	8005912 <TIM_Base_SetConfig+0xaa>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2f      	ldr	r2, [pc, #188]	; (800599c <TIM_Base_SetConfig+0x134>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d017      	beq.n	8005912 <TIM_Base_SetConfig+0xaa>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a2e      	ldr	r2, [pc, #184]	; (80059a0 <TIM_Base_SetConfig+0x138>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <TIM_Base_SetConfig+0xaa>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a2d      	ldr	r2, [pc, #180]	; (80059a4 <TIM_Base_SetConfig+0x13c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00f      	beq.n	8005912 <TIM_Base_SetConfig+0xaa>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a2d      	ldr	r2, [pc, #180]	; (80059ac <TIM_Base_SetConfig+0x144>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00b      	beq.n	8005912 <TIM_Base_SetConfig+0xaa>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2c      	ldr	r2, [pc, #176]	; (80059b0 <TIM_Base_SetConfig+0x148>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d007      	beq.n	8005912 <TIM_Base_SetConfig+0xaa>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a2b      	ldr	r2, [pc, #172]	; (80059b4 <TIM_Base_SetConfig+0x14c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d003      	beq.n	8005912 <TIM_Base_SetConfig+0xaa>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a26      	ldr	r2, [pc, #152]	; (80059a8 <TIM_Base_SetConfig+0x140>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d108      	bne.n	8005924 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a12      	ldr	r2, [pc, #72]	; (8005994 <TIM_Base_SetConfig+0x12c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d013      	beq.n	8005978 <TIM_Base_SetConfig+0x110>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a14      	ldr	r2, [pc, #80]	; (80059a4 <TIM_Base_SetConfig+0x13c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00f      	beq.n	8005978 <TIM_Base_SetConfig+0x110>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a14      	ldr	r2, [pc, #80]	; (80059ac <TIM_Base_SetConfig+0x144>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00b      	beq.n	8005978 <TIM_Base_SetConfig+0x110>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a13      	ldr	r2, [pc, #76]	; (80059b0 <TIM_Base_SetConfig+0x148>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d007      	beq.n	8005978 <TIM_Base_SetConfig+0x110>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a12      	ldr	r2, [pc, #72]	; (80059b4 <TIM_Base_SetConfig+0x14c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_Base_SetConfig+0x110>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a0d      	ldr	r2, [pc, #52]	; (80059a8 <TIM_Base_SetConfig+0x140>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d103      	bne.n	8005980 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	615a      	str	r2, [r3, #20]
}
 8005986:	bf00      	nop
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800
 80059a0:	40000c00 	.word	0x40000c00
 80059a4:	40013400 	.word	0x40013400
 80059a8:	40015000 	.word	0x40015000
 80059ac:	40014000 	.word	0x40014000
 80059b0:	40014400 	.word	0x40014400
 80059b4:	40014800 	.word	0x40014800

080059b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	f023 0201 	bic.w	r2, r3, #1
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f023 030a 	bic.w	r3, r3, #10
 80059f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	621a      	str	r2, [r3, #32]
}
 8005a0a:	bf00      	nop
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b087      	sub	sp, #28
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	f023 0210 	bic.w	r2, r3, #16
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	031b      	lsls	r3, r3, #12
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	621a      	str	r2, [r3, #32]
}
 8005a6a:	bf00      	nop
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b085      	sub	sp, #20
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f043 0307 	orr.w	r3, r3, #7
 8005a9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	609a      	str	r2, [r3, #8]
}
 8005aa4:	bf00      	nop
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	021a      	lsls	r2, r3, #8
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	609a      	str	r2, [r3, #8]
}
 8005ae4:	bf00      	nop
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e074      	b.n	8005bf2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a34      	ldr	r2, [pc, #208]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d009      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a33      	ldr	r2, [pc, #204]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d004      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a31      	ldr	r2, [pc, #196]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d108      	bne.n	8005b58 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a21      	ldr	r2, [pc, #132]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d022      	beq.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b88:	d01d      	beq.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a1f      	ldr	r2, [pc, #124]	; (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d018      	beq.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1d      	ldr	r2, [pc, #116]	; (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d013      	beq.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1c      	ldr	r2, [pc, #112]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00e      	beq.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a15      	ldr	r2, [pc, #84]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d009      	beq.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a18      	ldr	r2, [pc, #96]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d004      	beq.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a11      	ldr	r2, [pc, #68]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d10c      	bne.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40012c00 	.word	0x40012c00
 8005c04:	40013400 	.word	0x40013400
 8005c08:	40015000 	.word	0x40015000
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800
 8005c14:	40000c00 	.word	0x40000c00
 8005c18:	40014000 	.word	0x40014000

08005c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e042      	b.n	8005d40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d106      	bne.n	8005cd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7fb fe37 	bl	8001940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2224      	movs	r2, #36	; 0x24
 8005cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0201 	bic.w	r2, r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fac6 	bl	800627c <UART_SetConfig>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d101      	bne.n	8005cfa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e022      	b.n	8005d40 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fd84 	bl	8006810 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fe0b 	bl	8006954 <UART_CheckIdleState>
 8005d3e:	4603      	mov	r3, r0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	4613      	mov	r3, r2
 8005d54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d131      	bne.n	8005dc4 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <HAL_UART_Receive_IT+0x24>
 8005d66:	88fb      	ldrh	r3, [r7, #6]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e02a      	b.n	8005dc6 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <HAL_UART_Receive_IT+0x36>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e023      	b.n	8005dc6 <HAL_UART_Receive_IT+0x7e>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a0f      	ldr	r2, [pc, #60]	; (8005dd0 <HAL_UART_Receive_IT+0x88>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d00e      	beq.n	8005db4 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005db2:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005db4:	88fb      	ldrh	r3, [r7, #6]
 8005db6:	461a      	mov	r2, r3
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fe96 	bl	8006aec <UART_Start_Receive_IT>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	e000      	b.n	8005dc6 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005dc4:	2302      	movs	r3, #2
  }
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40008000 	.word	0x40008000

08005dd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d118      	bne.n	8005e36 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d013      	beq.n	8005e36 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d104      	bne.n	8005e22 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d009      	beq.n	8005e36 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 81fb 	beq.w	8006222 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	4798      	blx	r3
      }
      return;
 8005e34:	e1f5      	b.n	8006222 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 80ef 	beq.w	800601c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4b73      	ldr	r3, [pc, #460]	; (8006010 <HAL_UART_IRQHandler+0x23c>)
 8005e42:	4013      	ands	r3, r2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d105      	bne.n	8005e54 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	4b72      	ldr	r3, [pc, #456]	; (8006014 <HAL_UART_IRQHandler+0x240>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 80e4 	beq.w	800601c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d010      	beq.n	8005e80 <HAL_UART_IRQHandler+0xac>
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00b      	beq.n	8005e80 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e76:	f043 0201 	orr.w	r2, r3, #1
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d010      	beq.n	8005eac <HAL_UART_IRQHandler+0xd8>
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00b      	beq.n	8005eac <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ea2:	f043 0204 	orr.w	r2, r3, #4
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f003 0304 	and.w	r3, r3, #4
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d010      	beq.n	8005ed8 <HAL_UART_IRQHandler+0x104>
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00b      	beq.n	8005ed8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2204      	movs	r2, #4
 8005ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ece:	f043 0202 	orr.w	r2, r3, #2
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d015      	beq.n	8005f0e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f003 0320 	and.w	r3, r3, #32
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4b48      	ldr	r3, [pc, #288]	; (8006010 <HAL_UART_IRQHandler+0x23c>)
 8005ef0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00b      	beq.n	8005f0e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2208      	movs	r2, #8
 8005efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f04:	f043 0208 	orr.w	r2, r3, #8
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d011      	beq.n	8005f3c <HAL_UART_IRQHandler+0x168>
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00c      	beq.n	8005f3c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f32:	f043 0220 	orr.w	r2, r3, #32
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 816f 	beq.w	8006226 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d011      	beq.n	8005f76 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	f003 0320 	and.w	r3, r3, #32
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d007      	beq.n	8005f76 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f7c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	d004      	beq.n	8005f96 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d031      	beq.n	8005ffa <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fe66 	bl	8006c68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa6:	2b40      	cmp	r3, #64	; 0x40
 8005fa8:	d123      	bne.n	8005ff2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d013      	beq.n	8005fea <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fc6:	4a14      	ldr	r2, [pc, #80]	; (8006018 <HAL_UART_IRQHandler+0x244>)
 8005fc8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fd fe8b 	bl	8003cea <HAL_DMA_Abort_IT>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d017      	beq.n	800600a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe8:	e00f      	b.n	800600a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f930 	bl	8006250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff0:	e00b      	b.n	800600a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f92c 	bl	8006250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff8:	e007      	b.n	800600a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f928 	bl	8006250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006008:	e10d      	b.n	8006226 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800600a:	bf00      	nop
    return;
 800600c:	e10b      	b.n	8006226 <HAL_UART_IRQHandler+0x452>
 800600e:	bf00      	nop
 8006010:	10000001 	.word	0x10000001
 8006014:	04000120 	.word	0x04000120
 8006018:	08006ccd 	.word	0x08006ccd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006020:	2b01      	cmp	r3, #1
 8006022:	f040 80ab 	bne.w	800617c <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	f003 0310 	and.w	r3, r3, #16
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 80a5 	beq.w	800617c <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 809f 	beq.w	800617c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2210      	movs	r2, #16
 8006044:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006050:	2b40      	cmp	r3, #64	; 0x40
 8006052:	d155      	bne.n	8006100 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800605e:	893b      	ldrh	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 80e2 	beq.w	800622a <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800606c:	893a      	ldrh	r2, [r7, #8]
 800606e:	429a      	cmp	r2, r3
 8006070:	f080 80db 	bcs.w	800622a <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	893a      	ldrh	r2, [r7, #8]
 8006078:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	d12b      	bne.n	80060e4 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800609a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0201 	bic.w	r2, r2, #1
 80060aa:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ba:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0210 	bic.w	r2, r2, #16
 80060d8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fd fdaa 	bl	8003c38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f8b3 	bl	8006264 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060fe:	e094      	b.n	800622a <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800610c:	b29b      	uxth	r3, r3
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 8087 	beq.w	800622e <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8006120:	897b      	ldrh	r3, [r7, #10]
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 8083 	beq.w	800622e <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006136:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6812      	ldr	r2, [r2, #0]
 8006142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006146:	f023 0301 	bic.w	r3, r3, #1
 800614a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2220      	movs	r2, #32
 8006150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0210 	bic.w	r2, r2, #16
 800616e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006170:	897b      	ldrh	r3, [r7, #10]
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f875 	bl	8006264 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800617a:	e058      	b.n	800622e <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00d      	beq.n	80061a2 <HAL_UART_IRQHandler+0x3ce>
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d008      	beq.n	80061a2 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006198:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 f8a2 	bl	80072e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061a0:	e048      	b.n	8006234 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d012      	beq.n	80061d2 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d104      	bne.n	80061c0 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d034      	beq.n	8006232 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	4798      	blx	r3
    }
    return;
 80061d0:	e02f      	b.n	8006232 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <HAL_UART_IRQHandler+0x41a>
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fd86 	bl	8006cf8 <UART_EndTransmit_IT>
    return;
 80061ec:	e022      	b.n	8006234 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d008      	beq.n	800620a <HAL_UART_IRQHandler+0x436>
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f001 f882 	bl	800730c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006208:	e014      	b.n	8006234 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00f      	beq.n	8006234 <HAL_UART_IRQHandler+0x460>
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	2b00      	cmp	r3, #0
 8006218:	da0c      	bge.n	8006234 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f001 f86c 	bl	80072f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006220:	e008      	b.n	8006234 <HAL_UART_IRQHandler+0x460>
      return;
 8006222:	bf00      	nop
 8006224:	e006      	b.n	8006234 <HAL_UART_IRQHandler+0x460>
    return;
 8006226:	bf00      	nop
 8006228:	e004      	b.n	8006234 <HAL_UART_IRQHandler+0x460>
      return;
 800622a:	bf00      	nop
 800622c:	e002      	b.n	8006234 <HAL_UART_IRQHandler+0x460>
      return;
 800622e:	bf00      	nop
 8006230:	e000      	b.n	8006234 <HAL_UART_IRQHandler+0x460>
    return;
 8006232:	bf00      	nop
  }
}
 8006234:	3720      	adds	r7, #32
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop

0800623c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	460b      	mov	r3, r1
 800626e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800627c:	b5b0      	push	{r4, r5, r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	4313      	orrs	r3, r2
 800629e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	4bb1      	ldr	r3, [pc, #708]	; (800656c <UART_SetConfig+0x2f0>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6812      	ldr	r2, [r2, #0]
 80062ae:	69f9      	ldr	r1, [r7, #28]
 80062b0:	430b      	orrs	r3, r1
 80062b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4aa6      	ldr	r2, [pc, #664]	; (8006570 <UART_SetConfig+0x2f4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d004      	beq.n	80062e4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80062ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6812      	ldr	r2, [r2, #0]
 80062f6:	69f9      	ldr	r1, [r7, #28]
 80062f8:	430b      	orrs	r3, r1
 80062fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	f023 010f 	bic.w	r1, r3, #15
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a97      	ldr	r2, [pc, #604]	; (8006574 <UART_SetConfig+0x2f8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d120      	bne.n	800635e <UART_SetConfig+0xe2>
 800631c:	4b96      	ldr	r3, [pc, #600]	; (8006578 <UART_SetConfig+0x2fc>)
 800631e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006322:	f003 0303 	and.w	r3, r3, #3
 8006326:	2b03      	cmp	r3, #3
 8006328:	d816      	bhi.n	8006358 <UART_SetConfig+0xdc>
 800632a:	a201      	add	r2, pc, #4	; (adr r2, 8006330 <UART_SetConfig+0xb4>)
 800632c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006330:	08006341 	.word	0x08006341
 8006334:	0800634d 	.word	0x0800634d
 8006338:	08006347 	.word	0x08006347
 800633c:	08006353 	.word	0x08006353
 8006340:	2301      	movs	r3, #1
 8006342:	76fb      	strb	r3, [r7, #27]
 8006344:	e0e7      	b.n	8006516 <UART_SetConfig+0x29a>
 8006346:	2302      	movs	r3, #2
 8006348:	76fb      	strb	r3, [r7, #27]
 800634a:	e0e4      	b.n	8006516 <UART_SetConfig+0x29a>
 800634c:	2304      	movs	r3, #4
 800634e:	76fb      	strb	r3, [r7, #27]
 8006350:	e0e1      	b.n	8006516 <UART_SetConfig+0x29a>
 8006352:	2308      	movs	r3, #8
 8006354:	76fb      	strb	r3, [r7, #27]
 8006356:	e0de      	b.n	8006516 <UART_SetConfig+0x29a>
 8006358:	2310      	movs	r3, #16
 800635a:	76fb      	strb	r3, [r7, #27]
 800635c:	e0db      	b.n	8006516 <UART_SetConfig+0x29a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a86      	ldr	r2, [pc, #536]	; (800657c <UART_SetConfig+0x300>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d132      	bne.n	80063ce <UART_SetConfig+0x152>
 8006368:	4b83      	ldr	r3, [pc, #524]	; (8006578 <UART_SetConfig+0x2fc>)
 800636a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636e:	f003 030c 	and.w	r3, r3, #12
 8006372:	2b0c      	cmp	r3, #12
 8006374:	d828      	bhi.n	80063c8 <UART_SetConfig+0x14c>
 8006376:	a201      	add	r2, pc, #4	; (adr r2, 800637c <UART_SetConfig+0x100>)
 8006378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637c:	080063b1 	.word	0x080063b1
 8006380:	080063c9 	.word	0x080063c9
 8006384:	080063c9 	.word	0x080063c9
 8006388:	080063c9 	.word	0x080063c9
 800638c:	080063bd 	.word	0x080063bd
 8006390:	080063c9 	.word	0x080063c9
 8006394:	080063c9 	.word	0x080063c9
 8006398:	080063c9 	.word	0x080063c9
 800639c:	080063b7 	.word	0x080063b7
 80063a0:	080063c9 	.word	0x080063c9
 80063a4:	080063c9 	.word	0x080063c9
 80063a8:	080063c9 	.word	0x080063c9
 80063ac:	080063c3 	.word	0x080063c3
 80063b0:	2300      	movs	r3, #0
 80063b2:	76fb      	strb	r3, [r7, #27]
 80063b4:	e0af      	b.n	8006516 <UART_SetConfig+0x29a>
 80063b6:	2302      	movs	r3, #2
 80063b8:	76fb      	strb	r3, [r7, #27]
 80063ba:	e0ac      	b.n	8006516 <UART_SetConfig+0x29a>
 80063bc:	2304      	movs	r3, #4
 80063be:	76fb      	strb	r3, [r7, #27]
 80063c0:	e0a9      	b.n	8006516 <UART_SetConfig+0x29a>
 80063c2:	2308      	movs	r3, #8
 80063c4:	76fb      	strb	r3, [r7, #27]
 80063c6:	e0a6      	b.n	8006516 <UART_SetConfig+0x29a>
 80063c8:	2310      	movs	r3, #16
 80063ca:	76fb      	strb	r3, [r7, #27]
 80063cc:	e0a3      	b.n	8006516 <UART_SetConfig+0x29a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a6b      	ldr	r2, [pc, #428]	; (8006580 <UART_SetConfig+0x304>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d120      	bne.n	800641a <UART_SetConfig+0x19e>
 80063d8:	4b67      	ldr	r3, [pc, #412]	; (8006578 <UART_SetConfig+0x2fc>)
 80063da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063e2:	2b30      	cmp	r3, #48	; 0x30
 80063e4:	d013      	beq.n	800640e <UART_SetConfig+0x192>
 80063e6:	2b30      	cmp	r3, #48	; 0x30
 80063e8:	d814      	bhi.n	8006414 <UART_SetConfig+0x198>
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d009      	beq.n	8006402 <UART_SetConfig+0x186>
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d810      	bhi.n	8006414 <UART_SetConfig+0x198>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <UART_SetConfig+0x180>
 80063f6:	2b10      	cmp	r3, #16
 80063f8:	d006      	beq.n	8006408 <UART_SetConfig+0x18c>
 80063fa:	e00b      	b.n	8006414 <UART_SetConfig+0x198>
 80063fc:	2300      	movs	r3, #0
 80063fe:	76fb      	strb	r3, [r7, #27]
 8006400:	e089      	b.n	8006516 <UART_SetConfig+0x29a>
 8006402:	2302      	movs	r3, #2
 8006404:	76fb      	strb	r3, [r7, #27]
 8006406:	e086      	b.n	8006516 <UART_SetConfig+0x29a>
 8006408:	2304      	movs	r3, #4
 800640a:	76fb      	strb	r3, [r7, #27]
 800640c:	e083      	b.n	8006516 <UART_SetConfig+0x29a>
 800640e:	2308      	movs	r3, #8
 8006410:	76fb      	strb	r3, [r7, #27]
 8006412:	e080      	b.n	8006516 <UART_SetConfig+0x29a>
 8006414:	2310      	movs	r3, #16
 8006416:	76fb      	strb	r3, [r7, #27]
 8006418:	e07d      	b.n	8006516 <UART_SetConfig+0x29a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a59      	ldr	r2, [pc, #356]	; (8006584 <UART_SetConfig+0x308>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d120      	bne.n	8006466 <UART_SetConfig+0x1ea>
 8006424:	4b54      	ldr	r3, [pc, #336]	; (8006578 <UART_SetConfig+0x2fc>)
 8006426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800642e:	2bc0      	cmp	r3, #192	; 0xc0
 8006430:	d013      	beq.n	800645a <UART_SetConfig+0x1de>
 8006432:	2bc0      	cmp	r3, #192	; 0xc0
 8006434:	d814      	bhi.n	8006460 <UART_SetConfig+0x1e4>
 8006436:	2b80      	cmp	r3, #128	; 0x80
 8006438:	d009      	beq.n	800644e <UART_SetConfig+0x1d2>
 800643a:	2b80      	cmp	r3, #128	; 0x80
 800643c:	d810      	bhi.n	8006460 <UART_SetConfig+0x1e4>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <UART_SetConfig+0x1cc>
 8006442:	2b40      	cmp	r3, #64	; 0x40
 8006444:	d006      	beq.n	8006454 <UART_SetConfig+0x1d8>
 8006446:	e00b      	b.n	8006460 <UART_SetConfig+0x1e4>
 8006448:	2300      	movs	r3, #0
 800644a:	76fb      	strb	r3, [r7, #27]
 800644c:	e063      	b.n	8006516 <UART_SetConfig+0x29a>
 800644e:	2302      	movs	r3, #2
 8006450:	76fb      	strb	r3, [r7, #27]
 8006452:	e060      	b.n	8006516 <UART_SetConfig+0x29a>
 8006454:	2304      	movs	r3, #4
 8006456:	76fb      	strb	r3, [r7, #27]
 8006458:	e05d      	b.n	8006516 <UART_SetConfig+0x29a>
 800645a:	2308      	movs	r3, #8
 800645c:	76fb      	strb	r3, [r7, #27]
 800645e:	e05a      	b.n	8006516 <UART_SetConfig+0x29a>
 8006460:	2310      	movs	r3, #16
 8006462:	76fb      	strb	r3, [r7, #27]
 8006464:	e057      	b.n	8006516 <UART_SetConfig+0x29a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a47      	ldr	r2, [pc, #284]	; (8006588 <UART_SetConfig+0x30c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d125      	bne.n	80064bc <UART_SetConfig+0x240>
 8006470:	4b41      	ldr	r3, [pc, #260]	; (8006578 <UART_SetConfig+0x2fc>)
 8006472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800647a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800647e:	d017      	beq.n	80064b0 <UART_SetConfig+0x234>
 8006480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006484:	d817      	bhi.n	80064b6 <UART_SetConfig+0x23a>
 8006486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800648a:	d00b      	beq.n	80064a4 <UART_SetConfig+0x228>
 800648c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006490:	d811      	bhi.n	80064b6 <UART_SetConfig+0x23a>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <UART_SetConfig+0x222>
 8006496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800649a:	d006      	beq.n	80064aa <UART_SetConfig+0x22e>
 800649c:	e00b      	b.n	80064b6 <UART_SetConfig+0x23a>
 800649e:	2300      	movs	r3, #0
 80064a0:	76fb      	strb	r3, [r7, #27]
 80064a2:	e038      	b.n	8006516 <UART_SetConfig+0x29a>
 80064a4:	2302      	movs	r3, #2
 80064a6:	76fb      	strb	r3, [r7, #27]
 80064a8:	e035      	b.n	8006516 <UART_SetConfig+0x29a>
 80064aa:	2304      	movs	r3, #4
 80064ac:	76fb      	strb	r3, [r7, #27]
 80064ae:	e032      	b.n	8006516 <UART_SetConfig+0x29a>
 80064b0:	2308      	movs	r3, #8
 80064b2:	76fb      	strb	r3, [r7, #27]
 80064b4:	e02f      	b.n	8006516 <UART_SetConfig+0x29a>
 80064b6:	2310      	movs	r3, #16
 80064b8:	76fb      	strb	r3, [r7, #27]
 80064ba:	e02c      	b.n	8006516 <UART_SetConfig+0x29a>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a2b      	ldr	r2, [pc, #172]	; (8006570 <UART_SetConfig+0x2f4>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d125      	bne.n	8006512 <UART_SetConfig+0x296>
 80064c6:	4b2c      	ldr	r3, [pc, #176]	; (8006578 <UART_SetConfig+0x2fc>)
 80064c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064d4:	d017      	beq.n	8006506 <UART_SetConfig+0x28a>
 80064d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064da:	d817      	bhi.n	800650c <UART_SetConfig+0x290>
 80064dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064e0:	d00b      	beq.n	80064fa <UART_SetConfig+0x27e>
 80064e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064e6:	d811      	bhi.n	800650c <UART_SetConfig+0x290>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <UART_SetConfig+0x278>
 80064ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f0:	d006      	beq.n	8006500 <UART_SetConfig+0x284>
 80064f2:	e00b      	b.n	800650c <UART_SetConfig+0x290>
 80064f4:	2300      	movs	r3, #0
 80064f6:	76fb      	strb	r3, [r7, #27]
 80064f8:	e00d      	b.n	8006516 <UART_SetConfig+0x29a>
 80064fa:	2302      	movs	r3, #2
 80064fc:	76fb      	strb	r3, [r7, #27]
 80064fe:	e00a      	b.n	8006516 <UART_SetConfig+0x29a>
 8006500:	2304      	movs	r3, #4
 8006502:	76fb      	strb	r3, [r7, #27]
 8006504:	e007      	b.n	8006516 <UART_SetConfig+0x29a>
 8006506:	2308      	movs	r3, #8
 8006508:	76fb      	strb	r3, [r7, #27]
 800650a:	e004      	b.n	8006516 <UART_SetConfig+0x29a>
 800650c:	2310      	movs	r3, #16
 800650e:	76fb      	strb	r3, [r7, #27]
 8006510:	e001      	b.n	8006516 <UART_SetConfig+0x29a>
 8006512:	2310      	movs	r3, #16
 8006514:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a15      	ldr	r2, [pc, #84]	; (8006570 <UART_SetConfig+0x2f4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	f040 809f 	bne.w	8006660 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006522:	7efb      	ldrb	r3, [r7, #27]
 8006524:	2b08      	cmp	r3, #8
 8006526:	d837      	bhi.n	8006598 <UART_SetConfig+0x31c>
 8006528:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <UART_SetConfig+0x2b4>)
 800652a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652e:	bf00      	nop
 8006530:	08006555 	.word	0x08006555
 8006534:	08006599 	.word	0x08006599
 8006538:	0800655d 	.word	0x0800655d
 800653c:	08006599 	.word	0x08006599
 8006540:	08006563 	.word	0x08006563
 8006544:	08006599 	.word	0x08006599
 8006548:	08006599 	.word	0x08006599
 800654c:	08006599 	.word	0x08006599
 8006550:	08006591 	.word	0x08006591
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006554:	f7fe fb40 	bl	8004bd8 <HAL_RCC_GetPCLK1Freq>
 8006558:	6178      	str	r0, [r7, #20]
        break;
 800655a:	e022      	b.n	80065a2 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800655c:	4b0b      	ldr	r3, [pc, #44]	; (800658c <UART_SetConfig+0x310>)
 800655e:	617b      	str	r3, [r7, #20]
        break;
 8006560:	e01f      	b.n	80065a2 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006562:	f7fe facb 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 8006566:	6178      	str	r0, [r7, #20]
        break;
 8006568:	e01b      	b.n	80065a2 <UART_SetConfig+0x326>
 800656a:	bf00      	nop
 800656c:	cfff69f3 	.word	0xcfff69f3
 8006570:	40008000 	.word	0x40008000
 8006574:	40013800 	.word	0x40013800
 8006578:	40021000 	.word	0x40021000
 800657c:	40004400 	.word	0x40004400
 8006580:	40004800 	.word	0x40004800
 8006584:	40004c00 	.word	0x40004c00
 8006588:	40005000 	.word	0x40005000
 800658c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006590:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006594:	617b      	str	r3, [r7, #20]
        break;
 8006596:	e004      	b.n	80065a2 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	76bb      	strb	r3, [r7, #26]
        break;
 80065a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 811b 	beq.w	80067e0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	4a96      	ldr	r2, [pc, #600]	; (8006808 <UART_SetConfig+0x58c>)
 80065b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065b4:	461a      	mov	r2, r3
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80065bc:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	4413      	add	r3, r2
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d305      	bcc.n	80065da <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d902      	bls.n	80065e0 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	76bb      	strb	r3, [r7, #26]
 80065de:	e0ff      	b.n	80067e0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f04f 0100 	mov.w	r1, #0
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	4a86      	ldr	r2, [pc, #536]	; (8006808 <UART_SetConfig+0x58c>)
 80065ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	f7fa f9fc 	bl	80009f4 <__aeabi_uldivmod>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4610      	mov	r0, r2
 8006602:	4619      	mov	r1, r3
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	020b      	lsls	r3, r1, #8
 800660e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006612:	0202      	lsls	r2, r0, #8
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	6849      	ldr	r1, [r1, #4]
 8006618:	0849      	lsrs	r1, r1, #1
 800661a:	4608      	mov	r0, r1
 800661c:	f04f 0100 	mov.w	r1, #0
 8006620:	1814      	adds	r4, r2, r0
 8006622:	eb43 0501 	adc.w	r5, r3, r1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	461a      	mov	r2, r3
 800662c:	f04f 0300 	mov.w	r3, #0
 8006630:	4620      	mov	r0, r4
 8006632:	4629      	mov	r1, r5
 8006634:	f7fa f9de 	bl	80009f4 <__aeabi_uldivmod>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4613      	mov	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006646:	d308      	bcc.n	800665a <UART_SetConfig+0x3de>
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800664e:	d204      	bcs.n	800665a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	60da      	str	r2, [r3, #12]
 8006658:	e0c2      	b.n	80067e0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	76bb      	strb	r3, [r7, #26]
 800665e:	e0bf      	b.n	80067e0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006668:	d165      	bne.n	8006736 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800666a:	7efb      	ldrb	r3, [r7, #27]
 800666c:	2b08      	cmp	r3, #8
 800666e:	d828      	bhi.n	80066c2 <UART_SetConfig+0x446>
 8006670:	a201      	add	r2, pc, #4	; (adr r2, 8006678 <UART_SetConfig+0x3fc>)
 8006672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006676:	bf00      	nop
 8006678:	0800669d 	.word	0x0800669d
 800667c:	080066a5 	.word	0x080066a5
 8006680:	080066ad 	.word	0x080066ad
 8006684:	080066c3 	.word	0x080066c3
 8006688:	080066b3 	.word	0x080066b3
 800668c:	080066c3 	.word	0x080066c3
 8006690:	080066c3 	.word	0x080066c3
 8006694:	080066c3 	.word	0x080066c3
 8006698:	080066bb 	.word	0x080066bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800669c:	f7fe fa9c 	bl	8004bd8 <HAL_RCC_GetPCLK1Freq>
 80066a0:	6178      	str	r0, [r7, #20]
        break;
 80066a2:	e013      	b.n	80066cc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066a4:	f7fe faae 	bl	8004c04 <HAL_RCC_GetPCLK2Freq>
 80066a8:	6178      	str	r0, [r7, #20]
        break;
 80066aa:	e00f      	b.n	80066cc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066ac:	4b57      	ldr	r3, [pc, #348]	; (800680c <UART_SetConfig+0x590>)
 80066ae:	617b      	str	r3, [r7, #20]
        break;
 80066b0:	e00c      	b.n	80066cc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066b2:	f7fe fa23 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 80066b6:	6178      	str	r0, [r7, #20]
        break;
 80066b8:	e008      	b.n	80066cc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066be:	617b      	str	r3, [r7, #20]
        break;
 80066c0:	e004      	b.n	80066cc <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	76bb      	strb	r3, [r7, #26]
        break;
 80066ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8086 	beq.w	80067e0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	4a4b      	ldr	r2, [pc, #300]	; (8006808 <UART_SetConfig+0x58c>)
 80066da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066de:	461a      	mov	r2, r3
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80066e6:	005a      	lsls	r2, r3, #1
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	085b      	lsrs	r3, r3, #1
 80066ee:	441a      	add	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	2b0f      	cmp	r3, #15
 8006700:	d916      	bls.n	8006730 <UART_SetConfig+0x4b4>
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006708:	d212      	bcs.n	8006730 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	b29b      	uxth	r3, r3
 800670e:	f023 030f 	bic.w	r3, r3, #15
 8006712:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	085b      	lsrs	r3, r3, #1
 8006718:	b29b      	uxth	r3, r3
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	b29a      	uxth	r2, r3
 8006720:	89fb      	ldrh	r3, [r7, #14]
 8006722:	4313      	orrs	r3, r2
 8006724:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	89fa      	ldrh	r2, [r7, #14]
 800672c:	60da      	str	r2, [r3, #12]
 800672e:	e057      	b.n	80067e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	76bb      	strb	r3, [r7, #26]
 8006734:	e054      	b.n	80067e0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006736:	7efb      	ldrb	r3, [r7, #27]
 8006738:	2b08      	cmp	r3, #8
 800673a:	d828      	bhi.n	800678e <UART_SetConfig+0x512>
 800673c:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <UART_SetConfig+0x4c8>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	08006769 	.word	0x08006769
 8006748:	08006771 	.word	0x08006771
 800674c:	08006779 	.word	0x08006779
 8006750:	0800678f 	.word	0x0800678f
 8006754:	0800677f 	.word	0x0800677f
 8006758:	0800678f 	.word	0x0800678f
 800675c:	0800678f 	.word	0x0800678f
 8006760:	0800678f 	.word	0x0800678f
 8006764:	08006787 	.word	0x08006787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006768:	f7fe fa36 	bl	8004bd8 <HAL_RCC_GetPCLK1Freq>
 800676c:	6178      	str	r0, [r7, #20]
        break;
 800676e:	e013      	b.n	8006798 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006770:	f7fe fa48 	bl	8004c04 <HAL_RCC_GetPCLK2Freq>
 8006774:	6178      	str	r0, [r7, #20]
        break;
 8006776:	e00f      	b.n	8006798 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006778:	4b24      	ldr	r3, [pc, #144]	; (800680c <UART_SetConfig+0x590>)
 800677a:	617b      	str	r3, [r7, #20]
        break;
 800677c:	e00c      	b.n	8006798 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800677e:	f7fe f9bd 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 8006782:	6178      	str	r0, [r7, #20]
        break;
 8006784:	e008      	b.n	8006798 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800678a:	617b      	str	r3, [r7, #20]
        break;
 800678c:	e004      	b.n	8006798 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	76bb      	strb	r3, [r7, #26]
        break;
 8006796:	bf00      	nop
    }

    if (pclk != 0U)
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d020      	beq.n	80067e0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	4a19      	ldr	r2, [pc, #100]	; (8006808 <UART_SetConfig+0x58c>)
 80067a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067a8:	461a      	mov	r2, r3
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	441a      	add	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	2b0f      	cmp	r3, #15
 80067c8:	d908      	bls.n	80067dc <UART_SetConfig+0x560>
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d0:	d204      	bcs.n	80067dc <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	60da      	str	r2, [r3, #12]
 80067da:	e001      	b.n	80067e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80067fc:	7ebb      	ldrb	r3, [r7, #26]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3720      	adds	r7, #32
 8006802:	46bd      	mov	sp, r7
 8006804:	bdb0      	pop	{r4, r5, r7, pc}
 8006806:	bf00      	nop
 8006808:	0800767c 	.word	0x0800767c
 800680c:	00f42400 	.word	0x00f42400

08006810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00a      	beq.n	800683a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00a      	beq.n	800685c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00a      	beq.n	800687e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006882:	f003 0308 	and.w	r3, r3, #8
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a4:	f003 0310 	and.w	r3, r3, #16
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00a      	beq.n	80068c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c6:	f003 0320 	and.w	r3, r3, #32
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00a      	beq.n	80068e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01a      	beq.n	8006926 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800690e:	d10a      	bne.n	8006926 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00a      	beq.n	8006948 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	605a      	str	r2, [r3, #4]
  }
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af02      	add	r7, sp, #8
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006964:	f7fb f942 	bl	8001bec <HAL_GetTick>
 8006968:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0308 	and.w	r3, r3, #8
 8006974:	2b08      	cmp	r3, #8
 8006976:	d10e      	bne.n	8006996 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006978:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f82f 	bl	80069ea <UART_WaitOnFlagUntilTimeout>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e025      	b.n	80069e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	d10e      	bne.n	80069c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f819 	bl	80069ea <UART_WaitOnFlagUntilTimeout>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e00f      	b.n	80069e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	603b      	str	r3, [r7, #0]
 80069f6:	4613      	mov	r3, r2
 80069f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069fa:	e062      	b.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a02:	d05e      	beq.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a04:	f7fb f8f2 	bl	8001bec <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d302      	bcc.n	8006a1a <UART_WaitOnFlagUntilTimeout+0x30>
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d11d      	bne.n	8006a56 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0201 	bic.w	r2, r2, #1
 8006a38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e045      	b.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d02e      	beq.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a72:	d126      	bne.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a8c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0201 	bic.w	r2, r2, #1
 8006a9c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e00f      	b.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69da      	ldr	r2, [r3, #28]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	4013      	ands	r3, r2
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	bf0c      	ite	eq
 8006ad2:	2301      	moveq	r3, #1
 8006ad4:	2300      	movne	r3, #0
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	461a      	mov	r2, r3
 8006ada:	79fb      	ldrb	r3, [r7, #7]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d08d      	beq.n	80069fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4613      	mov	r3, r2
 8006af8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	88fa      	ldrh	r2, [r7, #6]
 8006b04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	88fa      	ldrh	r2, [r7, #6]
 8006b0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1e:	d10e      	bne.n	8006b3e <UART_Start_Receive_IT+0x52>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d105      	bne.n	8006b34 <UART_Start_Receive_IT+0x48>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b32:	e02d      	b.n	8006b90 <UART_Start_Receive_IT+0xa4>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	22ff      	movs	r2, #255	; 0xff
 8006b38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b3c:	e028      	b.n	8006b90 <UART_Start_Receive_IT+0xa4>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10d      	bne.n	8006b62 <UART_Start_Receive_IT+0x76>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d104      	bne.n	8006b58 <UART_Start_Receive_IT+0x6c>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	22ff      	movs	r2, #255	; 0xff
 8006b52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b56:	e01b      	b.n	8006b90 <UART_Start_Receive_IT+0xa4>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	227f      	movs	r2, #127	; 0x7f
 8006b5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b60:	e016      	b.n	8006b90 <UART_Start_Receive_IT+0xa4>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b6a:	d10d      	bne.n	8006b88 <UART_Start_Receive_IT+0x9c>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <UART_Start_Receive_IT+0x92>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	227f      	movs	r2, #127	; 0x7f
 8006b78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b7c:	e008      	b.n	8006b90 <UART_Start_Receive_IT+0xa4>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	223f      	movs	r2, #63	; 0x3f
 8006b82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b86:	e003      	b.n	8006b90 <UART_Start_Receive_IT+0xa4>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2222      	movs	r2, #34	; 0x22
 8006b9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f042 0201 	orr.w	r2, r2, #1
 8006bae:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb8:	d12a      	bne.n	8006c10 <UART_Start_Receive_IT+0x124>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006bc0:	88fa      	ldrh	r2, [r7, #6]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d324      	bcc.n	8006c10 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bce:	d107      	bne.n	8006be0 <UART_Start_Receive_IT+0xf4>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d103      	bne.n	8006be0 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4a1f      	ldr	r2, [pc, #124]	; (8006c58 <UART_Start_Receive_IT+0x16c>)
 8006bdc:	671a      	str	r2, [r3, #112]	; 0x70
 8006bde:	e002      	b.n	8006be6 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4a1e      	ldr	r2, [pc, #120]	; (8006c5c <UART_Start_Receive_IT+0x170>)
 8006be4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bfc:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006c0c:	609a      	str	r2, [r3, #8]
 8006c0e:	e01b      	b.n	8006c48 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c18:	d107      	bne.n	8006c2a <UART_Start_Receive_IT+0x13e>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d103      	bne.n	8006c2a <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4a0e      	ldr	r2, [pc, #56]	; (8006c60 <UART_Start_Receive_IT+0x174>)
 8006c26:	671a      	str	r2, [r3, #112]	; 0x70
 8006c28:	e002      	b.n	8006c30 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4a0d      	ldr	r2, [pc, #52]	; (8006c64 <UART_Start_Receive_IT+0x178>)
 8006c2e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006c46:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	080070e1 	.word	0x080070e1
 8006c5c:	08006edd 	.word	0x08006edd
 8006c60:	08006e05 	.word	0x08006e05
 8006c64:	08006d2d 	.word	0x08006d2d

08006c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c7e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6812      	ldr	r2, [r2, #0]
 8006c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c8e:	f023 0301 	bic.w	r3, r3, #1
 8006c92:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d107      	bne.n	8006cac <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0210 	bic.w	r2, r2, #16
 8006caa:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f7ff fab0 	bl	8006250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cf0:	bf00      	nop
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d0e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff fa8c 	bl	800623c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d24:	bf00      	nop
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d3a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d42:	2b22      	cmp	r3, #34	; 0x22
 8006d44:	d152      	bne.n	8006dec <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d4e:	89bb      	ldrh	r3, [r7, #12]
 8006d50:	b2d9      	uxtb	r1, r3
 8006d52:	89fb      	ldrh	r3, [r7, #14]
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5a:	400a      	ands	r2, r1
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d139      	bne.n	8006dfc <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d96:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0201 	bic.w	r2, r2, #1
 8006da6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d10f      	bne.n	8006dde <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0210 	bic.w	r2, r2, #16
 8006dcc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff fa44 	bl	8006264 <HAL_UARTEx_RxEventCallback>
 8006ddc:	e002      	b.n	8006de4 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7fa f996 	bl	8001110 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006dea:	e007      	b.n	8006dfc <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699a      	ldr	r2, [r3, #24]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0208 	orr.w	r2, r2, #8
 8006dfa:	619a      	str	r2, [r3, #24]
}
 8006dfc:	bf00      	nop
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e12:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1a:	2b22      	cmp	r3, #34	; 0x22
 8006e1c:	d152      	bne.n	8006ec4 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e2a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e2c:	89ba      	ldrh	r2, [r7, #12]
 8006e2e:	89fb      	ldrh	r3, [r7, #14]
 8006e30:	4013      	ands	r3, r2
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3c:	1c9a      	adds	r2, r3, #2
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d139      	bne.n	8006ed4 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e6e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689a      	ldr	r2, [r3, #8]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0201 	bic.w	r2, r2, #1
 8006e7e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d10f      	bne.n	8006eb6 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f022 0210 	bic.w	r2, r2, #16
 8006ea4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006eac:	4619      	mov	r1, r3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff f9d8 	bl	8006264 <HAL_UARTEx_RxEventCallback>
 8006eb4:	e002      	b.n	8006ebc <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fa f92a 	bl	8001110 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ec2:	e007      	b.n	8006ed4 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699a      	ldr	r2, [r3, #24]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0208 	orr.w	r2, r2, #8
 8006ed2:	619a      	str	r2, [r3, #24]
}
 8006ed4:	bf00      	nop
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006eea:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f0a:	2b22      	cmp	r3, #34	; 0x22
 8006f0c:	f040 80da 	bne.w	80070c4 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f16:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f18:	e0aa      	b.n	8007070 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f22:	89bb      	ldrh	r3, [r7, #12]
 8006f24:	b2d9      	uxtb	r1, r3
 8006f26:	8b7b      	ldrh	r3, [r7, #26]
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2e:	400a      	ands	r2, r1
 8006f30:	b2d2      	uxtb	r2, r2
 8006f32:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3b01      	subs	r3, #1
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d04d      	beq.n	8006ffe <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d010      	beq.n	8006f8e <UART_RxISR_8BIT_FIFOEN+0xb2>
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00b      	beq.n	8006f8e <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f84:	f043 0201 	orr.w	r2, r3, #1
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d010      	beq.n	8006fba <UART_RxISR_8BIT_FIFOEN+0xde>
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00b      	beq.n	8006fba <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fb0:	f043 0204 	orr.w	r2, r3, #4
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	f003 0304 	and.w	r3, r3, #4
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d010      	beq.n	8006fe6 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00b      	beq.n	8006fe6 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2204      	movs	r2, #4
 8006fd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fdc:	f043 0202 	orr.w	r2, r3, #2
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d006      	beq.n	8006ffe <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7ff f92d 	bl	8006250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007004:	b29b      	uxth	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d132      	bne.n	8007070 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007018:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	6812      	ldr	r2, [r2, #0]
 8007024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007028:	f023 0301 	bic.w	r3, r3, #1
 800702c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2220      	movs	r2, #32
 8007032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007040:	2b01      	cmp	r3, #1
 8007042:	d10f      	bne.n	8007064 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0210 	bic.w	r2, r2, #16
 8007052:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff f901 	bl	8006264 <HAL_UARTEx_RxEventCallback>
 8007062:	e002      	b.n	800706a <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7fa f853 	bl	8001110 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007070:	89fb      	ldrh	r3, [r7, #14]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d005      	beq.n	8007082 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	f003 0320 	and.w	r3, r3, #32
 800707c:	2b00      	cmp	r3, #0
 800707e:	f47f af4c 	bne.w	8006f1a <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007088:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800708a:	897b      	ldrh	r3, [r7, #10]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d021      	beq.n	80070d4 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007096:	897a      	ldrh	r2, [r7, #10]
 8007098:	429a      	cmp	r2, r3
 800709a:	d21b      	bcs.n	80070d4 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80070aa:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a0b      	ldr	r2, [pc, #44]	; (80070dc <UART_RxISR_8BIT_FIFOEN+0x200>)
 80070b0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f042 0220 	orr.w	r2, r2, #32
 80070c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070c2:	e007      	b.n	80070d4 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	699a      	ldr	r2, [r3, #24]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0208 	orr.w	r2, r2, #8
 80070d2:	619a      	str	r2, [r3, #24]
}
 80070d4:	bf00      	nop
 80070d6:	3720      	adds	r7, #32
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	08006d2d 	.word	0x08006d2d

080070e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b08a      	sub	sp, #40	; 0x28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80070ee:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710e:	2b22      	cmp	r3, #34	; 0x22
 8007110:	f040 80da 	bne.w	80072c8 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800711a:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800711c:	e0aa      	b.n	8007274 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712a:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800712c:	8aba      	ldrh	r2, [r7, #20]
 800712e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007130:	4013      	ands	r3, r2
 8007132:	b29a      	uxth	r2, r3
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713c:	1c9a      	adds	r2, r3, #2
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007148:	b29b      	uxth	r3, r3
 800714a:	3b01      	subs	r3, #1
 800714c:	b29a      	uxth	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	f003 0307 	and.w	r3, r3, #7
 8007162:	2b00      	cmp	r3, #0
 8007164:	d04d      	beq.n	8007202 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d010      	beq.n	8007192 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00b      	beq.n	8007192 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2201      	movs	r2, #1
 8007180:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007188:	f043 0201 	orr.w	r2, r3, #1
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d010      	beq.n	80071be <UART_RxISR_16BIT_FIFOEN+0xde>
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00b      	beq.n	80071be <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2202      	movs	r2, #2
 80071ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b4:	f043 0204 	orr.w	r2, r3, #4
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d010      	beq.n	80071ea <UART_RxISR_16BIT_FIFOEN+0x10a>
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00b      	beq.n	80071ea <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2204      	movs	r2, #4
 80071d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071e0:	f043 0202 	orr.w	r2, r3, #2
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d006      	beq.n	8007202 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff f82b 	bl	8006250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007208:	b29b      	uxth	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d132      	bne.n	8007274 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800721c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	6812      	ldr	r2, [r2, #0]
 8007228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2220      	movs	r2, #32
 8007236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007244:	2b01      	cmp	r3, #1
 8007246:	d10f      	bne.n	8007268 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0210 	bic.w	r2, r2, #16
 8007256:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7fe ffff 	bl	8006264 <HAL_UARTEx_RxEventCallback>
 8007266:	e002      	b.n	800726e <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7f9 ff51 	bl	8001110 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007274:	8afb      	ldrh	r3, [r7, #22]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d005      	beq.n	8007286 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	f003 0320 	and.w	r3, r3, #32
 8007280:	2b00      	cmp	r3, #0
 8007282:	f47f af4c 	bne.w	800711e <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800728c:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800728e:	89fb      	ldrh	r3, [r7, #14]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d021      	beq.n	80072d8 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800729a:	89fa      	ldrh	r2, [r7, #14]
 800729c:	429a      	cmp	r2, r3
 800729e:	d21b      	bcs.n	80072d8 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80072ae:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a0b      	ldr	r2, [pc, #44]	; (80072e0 <UART_RxISR_16BIT_FIFOEN+0x200>)
 80072b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 0220 	orr.w	r2, r2, #32
 80072c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072c6:	e007      	b.n	80072d8 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	699a      	ldr	r2, [r3, #24]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0208 	orr.w	r2, r2, #8
 80072d6:	619a      	str	r2, [r3, #24]
}
 80072d8:	bf00      	nop
 80072da:	3728      	adds	r7, #40	; 0x28
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	08006e05 	.word	0x08006e05

080072e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800732e:	2b01      	cmp	r3, #1
 8007330:	d101      	bne.n	8007336 <HAL_UARTEx_DisableFifoMode+0x16>
 8007332:	2302      	movs	r3, #2
 8007334:	e027      	b.n	8007386 <HAL_UARTEx_DisableFifoMode+0x66>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2224      	movs	r2, #36	; 0x24
 8007342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0201 	bic.w	r2, r2, #1
 800735c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007364:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2220      	movs	r2, #32
 8007378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d101      	bne.n	80073aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073a6:	2302      	movs	r3, #2
 80073a8:	e02d      	b.n	8007406 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2224      	movs	r2, #36	; 0x24
 80073b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 0201 	bic.w	r2, r2, #1
 80073d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f850 	bl	800748c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007422:	2302      	movs	r3, #2
 8007424:	e02d      	b.n	8007482 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2224      	movs	r2, #36	; 0x24
 8007432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0201 	bic.w	r2, r2, #1
 800744c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f812 	bl	800748c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2220      	movs	r2, #32
 8007474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007498:	2b00      	cmp	r3, #0
 800749a:	d108      	bne.n	80074ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074ac:	e031      	b.n	8007512 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074ae:	2308      	movs	r3, #8
 80074b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074b2:	2308      	movs	r3, #8
 80074b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	0e5b      	lsrs	r3, r3, #25
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	f003 0307 	and.w	r3, r3, #7
 80074c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	0f5b      	lsrs	r3, r3, #29
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	f003 0307 	and.w	r3, r3, #7
 80074d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074d6:	7bbb      	ldrb	r3, [r7, #14]
 80074d8:	7b3a      	ldrb	r2, [r7, #12]
 80074da:	4911      	ldr	r1, [pc, #68]	; (8007520 <UARTEx_SetNbDataToProcess+0x94>)
 80074dc:	5c8a      	ldrb	r2, [r1, r2]
 80074de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074e2:	7b3a      	ldrb	r2, [r7, #12]
 80074e4:	490f      	ldr	r1, [pc, #60]	; (8007524 <UARTEx_SetNbDataToProcess+0x98>)
 80074e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	7b7a      	ldrb	r2, [r7, #13]
 80074f8:	4909      	ldr	r1, [pc, #36]	; (8007520 <UARTEx_SetNbDataToProcess+0x94>)
 80074fa:	5c8a      	ldrb	r2, [r1, r2]
 80074fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007500:	7b7a      	ldrb	r2, [r7, #13]
 8007502:	4908      	ldr	r1, [pc, #32]	; (8007524 <UARTEx_SetNbDataToProcess+0x98>)
 8007504:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007506:	fb93 f3f2 	sdiv	r3, r3, r2
 800750a:	b29a      	uxth	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007512:	bf00      	nop
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	08007694 	.word	0x08007694
 8007524:	0800769c 	.word	0x0800769c

08007528 <__libc_init_array>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	4d0d      	ldr	r5, [pc, #52]	; (8007560 <__libc_init_array+0x38>)
 800752c:	4c0d      	ldr	r4, [pc, #52]	; (8007564 <__libc_init_array+0x3c>)
 800752e:	1b64      	subs	r4, r4, r5
 8007530:	10a4      	asrs	r4, r4, #2
 8007532:	2600      	movs	r6, #0
 8007534:	42a6      	cmp	r6, r4
 8007536:	d109      	bne.n	800754c <__libc_init_array+0x24>
 8007538:	4d0b      	ldr	r5, [pc, #44]	; (8007568 <__libc_init_array+0x40>)
 800753a:	4c0c      	ldr	r4, [pc, #48]	; (800756c <__libc_init_array+0x44>)
 800753c:	f000 f820 	bl	8007580 <_init>
 8007540:	1b64      	subs	r4, r4, r5
 8007542:	10a4      	asrs	r4, r4, #2
 8007544:	2600      	movs	r6, #0
 8007546:	42a6      	cmp	r6, r4
 8007548:	d105      	bne.n	8007556 <__libc_init_array+0x2e>
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007550:	4798      	blx	r3
 8007552:	3601      	adds	r6, #1
 8007554:	e7ee      	b.n	8007534 <__libc_init_array+0xc>
 8007556:	f855 3b04 	ldr.w	r3, [r5], #4
 800755a:	4798      	blx	r3
 800755c:	3601      	adds	r6, #1
 800755e:	e7f2      	b.n	8007546 <__libc_init_array+0x1e>
 8007560:	080076ac 	.word	0x080076ac
 8007564:	080076ac 	.word	0x080076ac
 8007568:	080076ac 	.word	0x080076ac
 800756c:	080076b0 	.word	0x080076b0

08007570 <memset>:
 8007570:	4402      	add	r2, r0
 8007572:	4603      	mov	r3, r0
 8007574:	4293      	cmp	r3, r2
 8007576:	d100      	bne.n	800757a <memset+0xa>
 8007578:	4770      	bx	lr
 800757a:	f803 1b01 	strb.w	r1, [r3], #1
 800757e:	e7f9      	b.n	8007574 <memset+0x4>

08007580 <_init>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	bf00      	nop
 8007584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007586:	bc08      	pop	{r3}
 8007588:	469e      	mov	lr, r3
 800758a:	4770      	bx	lr

0800758c <_fini>:
 800758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758e:	bf00      	nop
 8007590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007592:	bc08      	pop	{r3}
 8007594:	469e      	mov	lr, r3
 8007596:	4770      	bx	lr
